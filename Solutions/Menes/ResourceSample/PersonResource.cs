//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Marain.LineOfBusiness
{
    using System;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct PersonResource : IJsonObject<PersonResource>, IEquatable<PersonResource>
    {
        /// <summary>
        /// JSON property name for <see cref = "Links"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> LinksUtf8JsonPropertyName = new byte[]{95, 108, 105, 110, 107, 115};
        /// <summary>
        /// JSON property name for <see cref = "Links"/>.
        /// </summary>
        public static readonly string LinksJsonPropertyName = "_links";
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentTypeUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101};
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public static readonly string ContentTypeJsonPropertyName = "contentType";
        /// <summary>
        /// JSON property name for <see cref = "Embedded"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> EmbeddedUtf8JsonPropertyName = new byte[]{95, 101, 109, 98, 101, 100, 100, 101, 100};
        /// <summary>
        /// JSON property name for <see cref = "Embedded"/>.
        /// </summary>
        public static readonly string EmbeddedJsonPropertyName = "_embedded";
        private static readonly ImmutableDictionary<string, PropertyValidator<PersonResource>> __MenesLocalProperties = CreateLocalPropertyValidators();
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonResource"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public PersonResource(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonResource"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public PersonResource(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonResource"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public PersonResource(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonResource"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Marain.LineOfBusiness.Resource"/> from which to construct the value.</param>
        public PersonResource(Marain.LineOfBusiness.Resource conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        public Marain.LineOfBusiness.Resource AsResource
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        public bool IsResource
        {
            get
            {
                return ((Marain.LineOfBusiness.Resource)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets Links.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonResource.LinksValue Links
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(LinksJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(LinksUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonResource.LinksValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets ContentType.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString ContentType
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(ContentTypeJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ContentTypeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Embedded.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonResource.EmbeddedValue Embedded
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(EmbeddedJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(EmbeddedUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonResource.EmbeddedValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonResource(Marain.LineOfBusiness.Resource value)
        {
            return new PersonResource(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Marain.LineOfBusiness.Resource(PersonResource value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Marain.LineOfBusiness.Resource(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonResource(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new PersonResource(value.AsJsonElement);
            }

            return value.As<PersonResource>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(PersonResource value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonResource(JsonObject value)
        {
            return new PersonResource(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(PersonResource value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(PersonResource value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonResource(ImmutableDictionary<string, JsonAny> value)
        {
            return new PersonResource(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(PersonResource lhs, PersonResource rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(PersonResource lhs, PersonResource rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "PersonResource"/>.
        /// </summary>
        public static PersonResource Create(Marain.LineOfBusiness.PersonResource.LinksValue? links = null, Menes.Json.JsonString? contentType = null, Marain.LineOfBusiness.PersonResource.EmbeddedValue? embedded = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            if (links is Marain.LineOfBusiness.PersonResource.LinksValue links__)
            {
                builder.Add(LinksJsonPropertyName, links__);
            }

            if (contentType is Menes.Json.JsonString contentType__)
            {
                builder.Add(ContentTypeJsonPropertyName, contentType__);
            }

            if (embedded is Marain.LineOfBusiness.PersonResource.EmbeddedValue embedded__)
            {
                builder.Add(EmbeddedJsonPropertyName, embedded__);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets _links.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonResource WithLinks(Marain.LineOfBusiness.PersonResource.LinksValue value)
        {
            return this.SetProperty(LinksJsonPropertyName, value);
        }

        /// <summary>
        /// Sets contentType.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonResource WithContentType(Menes.Json.JsonString value)
        {
            return this.SetProperty(ContentTypeJsonPropertyName, value);
        }

        /// <summary>
        /// Sets _embedded.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonResource WithEmbedded(Marain.LineOfBusiness.PersonResource.EmbeddedValue value)
        {
            return this.SetProperty(EmbeddedJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is PersonResource entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

            ;
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool Equals(PersonResource other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public PersonResource SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonResource SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonResource SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonResource RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonResource RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonResource RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<PersonResource, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            JsonValueKind valueKind = this.ValueKind;
            result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateAllOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private static ImmutableDictionary<string, PropertyValidator<PersonResource>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<string, PropertyValidator<PersonResource>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<PersonResource>>();
            builder.Add(LinksJsonPropertyName, __MenesValidateLinks);
            builder.Add(EmbeddedJsonPropertyName, __MenesValidateEmbedded);
            return builder.ToImmutable();
        }

        private static ValidationContext __MenesValidateLinks(in PersonResource that, in ValidationContext validationContext, ValidationLevel level)
        {
            Marain.LineOfBusiness.PersonResource.LinksValue property = that.Links;
            return property.Validate(validationContext, level);
        }

        private static ValidationContext __MenesValidateEmbedded(in PersonResource that, in ValidationContext validationContext, ValidationLevel level)
        {
            Marain.LineOfBusiness.PersonResource.EmbeddedValue property = that.Embedded;
            return property.Validate(validationContext, level);
        }

        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

            int propertyCount = 0;
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;
                if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<PersonResource>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyCount);
                    var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }

                propertyCount++;
            }

            return result;
        }

        private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            ValidationContext allOfResult0 = this.As<Marain.LineOfBusiness.Resource>().Validate(validationContext.CreateChildContext(), level);
            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

            return result;
        }

        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

            result = result.MergeResults(isValid, level, localResultObject);
            return result;
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct LinksValue : IJsonObject<LinksValue>, IEquatable<LinksValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "PrimaryName"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> PrimaryNameUtf8JsonPropertyName = new byte[]{112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "PrimaryName"/>.
            /// </summary>
            public static readonly string PrimaryNameJsonPropertyName = "primaryName";
            /// <summary>
            /// JSON property name for <see cref = "Self"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SelfUtf8JsonPropertyName = new byte[]{115, 101, 108, 102};
            /// <summary>
            /// JSON property name for <see cref = "Self"/>.
            /// </summary>
            public static readonly string SelfJsonPropertyName = "self";
            /// <summary>
            /// JSON property name for <see cref = "Names"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> NamesUtf8JsonPropertyName = new byte[]{110, 97, 109, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Names"/>.
            /// </summary>
            public static readonly string NamesJsonPropertyName = "names";
            /// <summary>
            /// JSON property name for <see cref = "Addresses"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> AddressesUtf8JsonPropertyName = new byte[]{97, 100, 100, 114, 101, 115, 115, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Addresses"/>.
            /// </summary>
            public static readonly string AddressesJsonPropertyName = "addresses";
            /// <summary>
            /// JSON property name for <see cref = "TelephoneNumbers"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> TelephoneNumbersUtf8JsonPropertyName = new byte[]{116, 101, 108, 101, 112, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "TelephoneNumbers"/>.
            /// </summary>
            public static readonly string TelephoneNumbersJsonPropertyName = "telephoneNumbers";
            /// <summary>
            /// JSON property name for <see cref = "EmailAddresses"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> EmailAddressesUtf8JsonPropertyName = new byte[]{101, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "EmailAddresses"/>.
            /// </summary>
            public static readonly string EmailAddressesJsonPropertyName = "emailAddresses";
            private static readonly ImmutableDictionary<string, PropertyValidator<LinksValue>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public LinksValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public LinksValue(ImmutableDictionary<string, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public LinksValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Marain.LineOfBusiness.LinksProperty"/> from which to construct the value.</param>
            public LinksValue(Marain.LineOfBusiness.LinksProperty conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Marain.LineOfBusiness.LinksProperty"/>.
            /// </summary>
            public Marain.LineOfBusiness.LinksProperty AsLinksProperty
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Marain.LineOfBusiness.LinksProperty"/>.
            /// </summary>
            public bool IsLinksProperty
            {
                get
                {
                    return ((Marain.LineOfBusiness.LinksProperty)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets PrimaryName.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Marain.LineOfBusiness.Link PrimaryName
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(PrimaryNameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(PrimaryNameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Marain.LineOfBusiness.Link(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Self.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Marain.LineOfBusiness.Link Self
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SelfJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SelfUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Marain.LineOfBusiness.Link(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Names.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Marain.LineOfBusiness.LinkArray Names
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(NamesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(NamesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Marain.LineOfBusiness.LinkArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Addresses.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Marain.LineOfBusiness.LinkArray Addresses
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(AddressesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(AddressesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Marain.LineOfBusiness.LinkArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets TelephoneNumbers.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Marain.LineOfBusiness.LinkArray TelephoneNumbers
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(TelephoneNumbersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(TelephoneNumbersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Marain.LineOfBusiness.LinkArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets EmailAddresses.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Marain.LineOfBusiness.LinkArray EmailAddresses
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(EmailAddressesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(EmailAddressesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Marain.LineOfBusiness.LinkArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Marain.LineOfBusiness.LinksProperty"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinksValue(Marain.LineOfBusiness.LinksProperty value)
            {
                return new LinksValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Marain.LineOfBusiness.LinksProperty"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Marain.LineOfBusiness.LinksProperty(LinksValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Marain.LineOfBusiness.LinksProperty(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinksValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new LinksValue(value.AsJsonElement);
                }

                return value.As<LinksValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(LinksValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinksValue(JsonObject value)
            {
                return new LinksValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(LinksValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<string, JsonAny>(LinksValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinksValue(ImmutableDictionary<string, JsonAny> value)
            {
                return new LinksValue(value);
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(LinksValue lhs, LinksValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(LinksValue lhs, LinksValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "LinksValue"/>.
            /// </summary>
            public static LinksValue Create(Marain.LineOfBusiness.Link primaryName, Marain.LineOfBusiness.Link self, Marain.LineOfBusiness.LinkArray? names = null, Marain.LineOfBusiness.LinkArray? addresses = null, Marain.LineOfBusiness.LinkArray? telephoneNumbers = null, Marain.LineOfBusiness.LinkArray? emailAddresses = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
                builder.Add(PrimaryNameJsonPropertyName, primaryName);
                builder.Add(SelfJsonPropertyName, self);
                if (names is Marain.LineOfBusiness.LinkArray names__)
                {
                    builder.Add(NamesJsonPropertyName, names__);
                }

                if (addresses is Marain.LineOfBusiness.LinkArray addresses__)
                {
                    builder.Add(AddressesJsonPropertyName, addresses__);
                }

                if (telephoneNumbers is Marain.LineOfBusiness.LinkArray telephoneNumbers__)
                {
                    builder.Add(TelephoneNumbersJsonPropertyName, telephoneNumbers__);
                }

                if (emailAddresses is Marain.LineOfBusiness.LinkArray emailAddresses__)
                {
                    builder.Add(EmailAddressesJsonPropertyName, emailAddresses__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets primaryName.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinksValue WithPrimaryName(Marain.LineOfBusiness.Link value)
            {
                return this.SetProperty(PrimaryNameJsonPropertyName, value);
            }

            /// <summary>
            /// Sets self.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinksValue WithSelf(Marain.LineOfBusiness.Link value)
            {
                return this.SetProperty(SelfJsonPropertyName, value);
            }

            /// <summary>
            /// Sets names.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinksValue WithNames(Marain.LineOfBusiness.LinkArray value)
            {
                return this.SetProperty(NamesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets addresses.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinksValue WithAddresses(Marain.LineOfBusiness.LinkArray value)
            {
                return this.SetProperty(AddressesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets telephoneNumbers.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinksValue WithTelephoneNumbers(Marain.LineOfBusiness.LinkArray value)
            {
                return this.SetProperty(TelephoneNumbersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets emailAddresses.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinksValue WithEmailAddresses(Marain.LineOfBusiness.LinkArray value)
            {
                return this.SetProperty(EmailAddressesJsonPropertyName, value);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is LinksValue entity)
                {
                    return this.Equals(entity);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the object as the given item type
            /// </summary>
            public JsonObjectEnumerator<Marain.LineOfBusiness.LinkProperty> EnumerateProperties()
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return new JsonObjectEnumerator<Marain.LineOfBusiness.LinkProperty>(properties);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return new JsonObjectEnumerator<Marain.LineOfBusiness.LinkProperty>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(LinksValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name.ToString(), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public LinksValue SetProperty<TValue>(string name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinksValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinksValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinksValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinksValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinksValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<LinksValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = result.UsingEvaluatedProperties();
                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateAllOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            private JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            private static ImmutableDictionary<string, PropertyValidator<LinksValue>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<string, PropertyValidator<LinksValue>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<LinksValue>>();
                builder.Add(PrimaryNameJsonPropertyName, __MenesValidatePrimaryName);
                builder.Add(NamesJsonPropertyName, __MenesValidateNames);
                builder.Add(AddressesJsonPropertyName, __MenesValidateAddresses);
                builder.Add(TelephoneNumbersJsonPropertyName, __MenesValidateTelephoneNumbers);
                builder.Add(EmailAddressesJsonPropertyName, __MenesValidateEmailAddresses);
                return builder.ToImmutable();
            }

            private static ValidationContext __MenesValidatePrimaryName(in LinksValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Marain.LineOfBusiness.Link property = that.PrimaryName;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateNames(in LinksValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Marain.LineOfBusiness.LinkArray property = that.Names;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateAddresses(in LinksValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Marain.LineOfBusiness.LinkArray property = that.Addresses;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateTelephoneNumbers(in LinksValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Marain.LineOfBusiness.LinkArray property = that.TelephoneNumbers;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateEmailAddresses(in LinksValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Marain.LineOfBusiness.LinkArray property = that.EmailAddresses;
                return property.Validate(validationContext, level);
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                int propertyCount = 0;
                bool foundPrimaryName = false;
                foreach (Property property in this.EnumerateObject())
                {
                    string propertyName = property.Name;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<LinksValue>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyCount);
                        var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (PrimaryNameJsonPropertyName.Equals(propertyName))
                        {
                            foundPrimaryName = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalProperty(propertyCount))
                    {
                        result = property.ValueAs<Marain.LineOfBusiness.LinkProperty>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyCount);
                    }

                    propertyCount++;
                }

                if (!foundPrimaryName)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"primaryName\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext allOfResult0 = this.As<Marain.LineOfBusiness.LinksProperty>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult0.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct EmbeddedValue : IJsonObject<EmbeddedValue>, IEquatable<EmbeddedValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "PrimaryName"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> PrimaryNameUtf8JsonPropertyName = new byte[]{112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "PrimaryName"/>.
            /// </summary>
            public static readonly string PrimaryNameJsonPropertyName = "primaryName";
            private static readonly ImmutableDictionary<string, PropertyValidator<EmbeddedValue>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "EmbeddedValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public EmbeddedValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "EmbeddedValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public EmbeddedValue(ImmutableDictionary<string, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "EmbeddedValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public EmbeddedValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "EmbeddedValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Marain.LineOfBusiness.EmbeddedProperty"/> from which to construct the value.</param>
            public EmbeddedValue(Marain.LineOfBusiness.EmbeddedProperty conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Marain.LineOfBusiness.EmbeddedProperty"/>.
            /// </summary>
            public Marain.LineOfBusiness.EmbeddedProperty AsEmbeddedProperty
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Marain.LineOfBusiness.EmbeddedProperty"/>.
            /// </summary>
            public bool IsEmbeddedProperty
            {
                get
                {
                    return ((Marain.LineOfBusiness.EmbeddedProperty)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets PrimaryName.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Marain.LineOfBusiness.PersonNameResource PrimaryName
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(PrimaryNameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(PrimaryNameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Marain.LineOfBusiness.PersonNameResource(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Marain.LineOfBusiness.EmbeddedProperty"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EmbeddedValue(Marain.LineOfBusiness.EmbeddedProperty value)
            {
                return new EmbeddedValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Marain.LineOfBusiness.EmbeddedProperty"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Marain.LineOfBusiness.EmbeddedProperty(EmbeddedValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Marain.LineOfBusiness.EmbeddedProperty(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EmbeddedValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new EmbeddedValue(value.AsJsonElement);
                }

                return value.As<EmbeddedValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(EmbeddedValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EmbeddedValue(JsonObject value)
            {
                return new EmbeddedValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(EmbeddedValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<string, JsonAny>(EmbeddedValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EmbeddedValue(ImmutableDictionary<string, JsonAny> value)
            {
                return new EmbeddedValue(value);
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(EmbeddedValue lhs, EmbeddedValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(EmbeddedValue lhs, EmbeddedValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "EmbeddedValue"/>.
            /// </summary>
            public static EmbeddedValue Create(Marain.LineOfBusiness.PersonNameResource primaryName)
            {
                var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
                builder.Add(PrimaryNameJsonPropertyName, primaryName);
                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets primaryName.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public EmbeddedValue WithPrimaryName(Marain.LineOfBusiness.PersonNameResource value)
            {
                return this.SetProperty(PrimaryNameJsonPropertyName, value);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is EmbeddedValue entity)
                {
                    return this.Equals(entity);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the object as the given item type
            /// </summary>
            public JsonObjectEnumerator<Marain.LineOfBusiness.EmbeddedResourceProperty> EnumerateProperties()
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return new JsonObjectEnumerator<Marain.LineOfBusiness.EmbeddedResourceProperty>(properties);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return new JsonObjectEnumerator<Marain.LineOfBusiness.EmbeddedResourceProperty>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(EmbeddedValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name.ToString(), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public EmbeddedValue SetProperty<TValue>(string name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public EmbeddedValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public EmbeddedValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public EmbeddedValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public EmbeddedValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public EmbeddedValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<EmbeddedValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = result.UsingEvaluatedProperties();
                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateAllOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            private JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            private static ImmutableDictionary<string, PropertyValidator<EmbeddedValue>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<string, PropertyValidator<EmbeddedValue>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<EmbeddedValue>>();
                builder.Add(PrimaryNameJsonPropertyName, __MenesValidatePrimaryName);
                return builder.ToImmutable();
            }

            private static ValidationContext __MenesValidatePrimaryName(in EmbeddedValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Marain.LineOfBusiness.PersonNameResource property = that.PrimaryName;
                return property.Validate(validationContext, level);
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                int propertyCount = 0;
                bool foundPrimaryName = false;
                foreach (Property property in this.EnumerateObject())
                {
                    string propertyName = property.Name;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<EmbeddedValue>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyCount);
                        var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (PrimaryNameJsonPropertyName.Equals(propertyName))
                        {
                            foundPrimaryName = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalProperty(propertyCount))
                    {
                        result = property.ValueAs<Marain.LineOfBusiness.EmbeddedResourceProperty>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyCount);
                    }

                    propertyCount++;
                }

                if (!foundPrimaryName)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"primaryName\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext allOfResult0 = this.As<Marain.LineOfBusiness.EmbeddedProperty>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult0.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }
    }
}