//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Marain.LineOfBusiness
{
    using System;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct PersonName : IJsonObject<PersonName>, IEquatable<PersonName>
    {
        /// <summary>
        /// JSON property name for <see cref = "GivenName"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> GivenNameUtf8JsonPropertyName = new byte[]{103, 105, 118, 101, 110, 78, 97, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "GivenName"/>.
        /// </summary>
        public static readonly string GivenNameJsonPropertyName = "givenName";
        /// <summary>
        /// JSON property name for <see cref = "FamilyName"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> FamilyNameUtf8JsonPropertyName = new byte[]{102, 97, 109, 105, 108, 121, 78, 97, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "FamilyName"/>.
        /// </summary>
        public static readonly string FamilyNameJsonPropertyName = "familyName";
        /// <summary>
        /// JSON property name for <see cref = "OtherNames"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> OtherNamesUtf8JsonPropertyName = new byte[]{111, 116, 104, 101, 114, 78, 97, 109, 101, 115};
        /// <summary>
        /// JSON property name for <see cref = "OtherNames"/>.
        /// </summary>
        public static readonly string OtherNamesJsonPropertyName = "otherNames";
        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TitleUtf8JsonPropertyName = new byte[]{116, 105, 116, 108, 101};
        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public static readonly string TitleJsonPropertyName = "title";
        /// <summary>
        /// JSON property name for <see cref = "Suffix"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SuffixUtf8JsonPropertyName = new byte[]{115, 117, 102, 102, 105, 120};
        /// <summary>
        /// JSON property name for <see cref = "Suffix"/>.
        /// </summary>
        public static readonly string SuffixJsonPropertyName = "suffix";
        private static readonly ImmutableDictionary<string, PropertyValidator<PersonName>> __MenesLocalProperties = CreateLocalPropertyValidators();
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonName"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public PersonName(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonName"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public PersonName(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonName"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public PersonName(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Gets GivenName.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.GivenNameValue GivenName
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(GivenNameJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(GivenNameUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.GivenNameValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets FamilyName.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.FamilyNameValue FamilyName
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(FamilyNameJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(FamilyNameUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.FamilyNameValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets OtherNames.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.OtherNamesValueArray OtherNames
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(OtherNamesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(OtherNamesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.OtherNamesValueArray(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Title.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.TitleValue Title
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(TitleJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(TitleUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.TitleValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Suffix.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Suffix
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(SuffixJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(SuffixUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonName(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new PersonName(value.AsJsonElement);
            }

            return value.As<PersonName>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(PersonName value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonName(JsonObject value)
        {
            return new PersonName(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(PersonName value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(PersonName value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonName(ImmutableDictionary<string, JsonAny> value)
        {
            return new PersonName(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(PersonName lhs, PersonName rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(PersonName lhs, PersonName rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "PersonName"/>.
        /// </summary>
        public static PersonName Create(Marain.LineOfBusiness.PersonName.GivenNameValue givenName, Marain.LineOfBusiness.PersonName.FamilyNameValue familyName, Marain.LineOfBusiness.PersonName.OtherNamesValueArray otherNames, Marain.LineOfBusiness.PersonName.TitleValue? title = null, Menes.Json.JsonString? suffix = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            builder.Add(GivenNameJsonPropertyName, givenName);
            builder.Add(FamilyNameJsonPropertyName, familyName);
            builder.Add(OtherNamesJsonPropertyName, otherNames);
            if (title is Marain.LineOfBusiness.PersonName.TitleValue title__)
            {
                builder.Add(TitleJsonPropertyName, title__);
            }

            if (suffix is Menes.Json.JsonString suffix__)
            {
                builder.Add(SuffixJsonPropertyName, suffix__);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets givenName.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonName WithGivenName(Marain.LineOfBusiness.PersonName.GivenNameValue value)
        {
            return this.SetProperty(GivenNameJsonPropertyName, value);
        }

        /// <summary>
        /// Sets familyName.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonName WithFamilyName(Marain.LineOfBusiness.PersonName.FamilyNameValue value)
        {
            return this.SetProperty(FamilyNameJsonPropertyName, value);
        }

        /// <summary>
        /// Sets otherNames.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonName WithOtherNames(Marain.LineOfBusiness.PersonName.OtherNamesValueArray value)
        {
            return this.SetProperty(OtherNamesJsonPropertyName, value);
        }

        /// <summary>
        /// Sets title.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonName WithTitle(Marain.LineOfBusiness.PersonName.TitleValue value)
        {
            return this.SetProperty(TitleJsonPropertyName, value);
        }

        /// <summary>
        /// Sets suffix.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonName WithSuffix(Menes.Json.JsonString value)
        {
            return this.SetProperty(SuffixJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is IJsonValue jv)
            {
                return this.Equals(jv.AsAny);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => JsonAny.UndefinedHashCode, }

            ;
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool Equals(PersonName other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public PersonName SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonName SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonName SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonName RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonName RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonName RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<PersonName, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            JsonValueKind valueKind = this.ValueKind;
            result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private static ImmutableDictionary<string, PropertyValidator<PersonName>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<string, PropertyValidator<PersonName>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<PersonName>>();
            builder.Add(GivenNameJsonPropertyName, __MenesValidateGivenName);
            builder.Add(FamilyNameJsonPropertyName, __MenesValidateFamilyName);
            builder.Add(OtherNamesJsonPropertyName, __MenesValidateOtherNames);
            builder.Add(TitleJsonPropertyName, __MenesValidateTitle);
            builder.Add(SuffixJsonPropertyName, __MenesValidateSuffix);
            return builder.ToImmutable();
        }

        private static ValidationContext __MenesValidateGivenName(in PersonName that, in ValidationContext validationContext, ValidationLevel level)
        {
            Marain.LineOfBusiness.PersonName.GivenNameValue property = that.GivenName;
            return property.Validate(validationContext, level);
        }

        private static ValidationContext __MenesValidateFamilyName(in PersonName that, in ValidationContext validationContext, ValidationLevel level)
        {
            Marain.LineOfBusiness.PersonName.FamilyNameValue property = that.FamilyName;
            return property.Validate(validationContext, level);
        }

        private static ValidationContext __MenesValidateOtherNames(in PersonName that, in ValidationContext validationContext, ValidationLevel level)
        {
            Marain.LineOfBusiness.PersonName.OtherNamesValueArray property = that.OtherNames;
            return property.Validate(validationContext, level);
        }

        private static ValidationContext __MenesValidateTitle(in PersonName that, in ValidationContext validationContext, ValidationLevel level)
        {
            Marain.LineOfBusiness.PersonName.TitleValue property = that.Title;
            return property.Validate(validationContext, level);
        }

        private static ValidationContext __MenesValidateSuffix(in PersonName that, in ValidationContext validationContext, ValidationLevel level)
        {
            Menes.Json.JsonString property = that.Suffix;
            return property.Validate(validationContext, level);
        }

        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

            int propertyCount = 0;
            bool foundGivenName = false;
            bool foundFamilyName = false;
            bool foundOtherNames = false;
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;
                if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<PersonName>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyCount);
                    var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (GivenNameJsonPropertyName.Equals(propertyName))
                    {
                        foundGivenName = true;
                    }
                    else if (FamilyNameJsonPropertyName.Equals(propertyName))
                    {
                        foundFamilyName = true;
                    }
                    else if (OtherNamesJsonPropertyName.Equals(propertyName))
                    {
                        foundOtherNames = true;
                    }
                }

                propertyCount++;
            }

            if (!foundGivenName)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"givenName\" not present.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            if (!foundFamilyName)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"familyName\" not present.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            if (!foundOtherNames)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"otherNames\" not present.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            return result;
        }

        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

            result = result.MergeResults(isValid, level, localResultObject);
            return result;
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct TitleValue : IJsonValue, IEquatable<TitleValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly string? stringBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "TitleValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public TitleValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.stringBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TitleValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public TitleValue(string value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TitleValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public TitleValue(ReadOnlySpan<char> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value.ToString();
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TitleValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public TitleValue(ReadOnlySpan<byte> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = System.Text.Encoding.UTF8.GetString(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TitleValue"/> struct.
            /// </summary>
            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
            public TitleValue(JsonString jsonString)
            {
                if (jsonString.HasJsonElement)
                {
                    this.jsonElementBacking = jsonString.AsJsonElement;
                    this.stringBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = jsonString;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.stringBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return JsonString.StringToJsonElement(stringBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.stringBacking is string)
                    {
                        return JsonValueKind.String;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonAny(stringBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TitleValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new TitleValue(value.AsJsonElement);
                }

                return value.As<TitleValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(TitleValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TitleValue(string value)
            {
                return new TitleValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator string (TitleValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TitleValue(ReadOnlySpan<char> value)
            {
                return new TitleValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<char>(TitleValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from utf8 bytes.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TitleValue(ReadOnlySpan<byte> value)
            {
                return new TitleValue(value);
            }

            /// <summary>
            /// Conversion to utf8 bytes.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<byte>(TitleValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TitleValue(JsonString value)
            {
                return new TitleValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonString(TitleValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(TitleValue lhs, TitleValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(TitleValue lhs, TitleValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString.GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => JsonAny.UndefinedHashCode, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.stringBacking is string stringBacking)
                {
                    writer.WriteStringValue(stringBacking);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(TitleValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<TitleValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = Menes.Json.Validate.ValidateString(this, result, level, 50, 1, null);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            private JsonString AsString
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonString(stringBacking);
                    }

                    return new JsonString(this.jsonElementBacking);
                }
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultString.IsValid)
                {
                    return validationContext;
                }

                if (localResultString.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultString);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct GivenNameValue : IJsonValue, IEquatable<GivenNameValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly string? stringBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "GivenNameValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public GivenNameValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.stringBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "GivenNameValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public GivenNameValue(string value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "GivenNameValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public GivenNameValue(ReadOnlySpan<char> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value.ToString();
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "GivenNameValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public GivenNameValue(ReadOnlySpan<byte> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = System.Text.Encoding.UTF8.GetString(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "GivenNameValue"/> struct.
            /// </summary>
            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
            public GivenNameValue(JsonString jsonString)
            {
                if (jsonString.HasJsonElement)
                {
                    this.jsonElementBacking = jsonString.AsJsonElement;
                    this.stringBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = jsonString;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.stringBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return JsonString.StringToJsonElement(stringBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.stringBacking is string)
                    {
                        return JsonValueKind.String;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonAny(stringBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator GivenNameValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new GivenNameValue(value.AsJsonElement);
                }

                return value.As<GivenNameValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(GivenNameValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator GivenNameValue(string value)
            {
                return new GivenNameValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator string (GivenNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator GivenNameValue(ReadOnlySpan<char> value)
            {
                return new GivenNameValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<char>(GivenNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from utf8 bytes.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator GivenNameValue(ReadOnlySpan<byte> value)
            {
                return new GivenNameValue(value);
            }

            /// <summary>
            /// Conversion to utf8 bytes.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<byte>(GivenNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator GivenNameValue(JsonString value)
            {
                return new GivenNameValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonString(GivenNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(GivenNameValue lhs, GivenNameValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(GivenNameValue lhs, GivenNameValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString.GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => JsonAny.UndefinedHashCode, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.stringBacking is string stringBacking)
                {
                    writer.WriteStringValue(stringBacking);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(GivenNameValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<GivenNameValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = Menes.Json.Validate.ValidateString(this, result, level, 50, 1, null);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            private JsonString AsString
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonString(stringBacking);
                    }

                    return new JsonString(this.jsonElementBacking);
                }
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultString.IsValid)
                {
                    return validationContext;
                }

                if (localResultString.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultString);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct FamilyNameValue : IJsonValue, IEquatable<FamilyNameValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly string? stringBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "FamilyNameValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public FamilyNameValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.stringBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "FamilyNameValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public FamilyNameValue(string value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "FamilyNameValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public FamilyNameValue(ReadOnlySpan<char> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value.ToString();
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "FamilyNameValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public FamilyNameValue(ReadOnlySpan<byte> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = System.Text.Encoding.UTF8.GetString(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "FamilyNameValue"/> struct.
            /// </summary>
            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
            public FamilyNameValue(JsonString jsonString)
            {
                if (jsonString.HasJsonElement)
                {
                    this.jsonElementBacking = jsonString.AsJsonElement;
                    this.stringBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = jsonString;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.stringBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return JsonString.StringToJsonElement(stringBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.stringBacking is string)
                    {
                        return JsonValueKind.String;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonAny(stringBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator FamilyNameValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new FamilyNameValue(value.AsJsonElement);
                }

                return value.As<FamilyNameValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(FamilyNameValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator FamilyNameValue(string value)
            {
                return new FamilyNameValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator string (FamilyNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator FamilyNameValue(ReadOnlySpan<char> value)
            {
                return new FamilyNameValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<char>(FamilyNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from utf8 bytes.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator FamilyNameValue(ReadOnlySpan<byte> value)
            {
                return new FamilyNameValue(value);
            }

            /// <summary>
            /// Conversion to utf8 bytes.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<byte>(FamilyNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator FamilyNameValue(JsonString value)
            {
                return new FamilyNameValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonString(FamilyNameValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(FamilyNameValue lhs, FamilyNameValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(FamilyNameValue lhs, FamilyNameValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString.GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => JsonAny.UndefinedHashCode, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.stringBacking is string stringBacking)
                {
                    writer.WriteStringValue(stringBacking);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(FamilyNameValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<FamilyNameValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = Menes.Json.Validate.ValidateString(this, result, level, 50, 1, null);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            private JsonString AsString
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonString(stringBacking);
                    }

                    return new JsonString(this.jsonElementBacking);
                }
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultString.IsValid)
                {
                    return validationContext;
                }

                if (localResultString.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultString);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct OtherNamesValueArray : IJsonArray<OtherNamesValueArray>, IEquatable<OtherNamesValueArray>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableList<JsonAny>? arrayBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValueArray"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public OtherNamesValueArray(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.arrayBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValueArray"/> struct.
            /// </summary>
            /// <param name = "value">An array list.</param>
            public OtherNamesValueArray(ImmutableList<JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.arrayBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValueArray"/> struct.
            /// </summary>
            /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
            public OtherNamesValueArray(JsonArray jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.jsonElementBacking = jsonArray.AsJsonElement;
                    this.arrayBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = jsonArray.AsItemsList;
                }
            }

            /// <inheritdoc/>
            public int Length
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return items.Count;
                    }

                    return this.jsonElementBacking.GetArrayLength();
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.arrayBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return JsonArray.ItemsToJsonElement(arrayBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny>)
                    {
                        return JsonValueKind.Array;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonAny(arrayBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValueArray(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new OtherNamesValueArray(value.AsJsonElement);
                }

                return value.As<OtherNamesValueArray>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(OtherNamesValueArray value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValueArray(JsonArray value)
            {
                return new OtherNamesValueArray(value);
            }

            /// <summary>
            /// Conversion to array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonArray(OtherNamesValueArray value)
            {
                return value.AsArray;
            }

            /// <summary>
            /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableList<JsonAny>(OtherNamesValueArray value)
            {
                return value.AsArray.AsItemsList;
            }

            /// <summary>
            /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValueArray(ImmutableList<JsonAny> value)
            {
                return new OtherNamesValueArray(value);
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(OtherNamesValueArray lhs, OtherNamesValueArray rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(OtherNamesValueArray lhs, OtherNamesValueArray rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "items">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static OtherNamesValueArray From(params Marain.LineOfBusiness.PersonName.OtherNamesValue[] items)
            {
                var builder = ImmutableList.CreateBuilder<JsonAny>();
                foreach (var item in items)
                {
                    builder.Add(item);
                }

                return new OtherNamesValueArray(builder.ToImmutable());
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static OtherNamesValueArray From(Marain.LineOfBusiness.PersonName.OtherNamesValue item1)
            {
                return new OtherNamesValueArray(ImmutableList.Create((JsonAny)item1));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static OtherNamesValueArray From(Marain.LineOfBusiness.PersonName.OtherNamesValue item1, Marain.LineOfBusiness.PersonName.OtherNamesValue item2)
            {
                return new OtherNamesValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static OtherNamesValueArray From(Marain.LineOfBusiness.PersonName.OtherNamesValue item1, Marain.LineOfBusiness.PersonName.OtherNamesValue item2, Marain.LineOfBusiness.PersonName.OtherNamesValue item3)
            {
                return new OtherNamesValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <param name = "item4">The fourth item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static OtherNamesValueArray From(Marain.LineOfBusiness.PersonName.OtherNamesValue item1, Marain.LineOfBusiness.PersonName.OtherNamesValue item2, Marain.LineOfBusiness.PersonName.OtherNamesValue item3, Marain.LineOfBusiness.PersonName.OtherNamesValue item4)
            {
                return new OtherNamesValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().GetHashCode(), JsonValueKind.Array => this.AsArray.GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => JsonAny.UndefinedHashCode, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    JsonArray.WriteItems(arrayBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the items in the array as a <see cref = "Marain.LineOfBusiness.PersonName.OtherNamesValue"/>.
            /// </summary>
            public JsonArrayEnumerator<Marain.LineOfBusiness.PersonName.OtherNamesValue> EnumerateItems()
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return new JsonArrayEnumerator<Marain.LineOfBusiness.PersonName.OtherNamesValue>(items);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return new JsonArrayEnumerator<Marain.LineOfBusiness.PersonName.OtherNamesValue>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonArrayEnumerator EnumerateArray()
            {
                return this.AsArray.EnumerateArray();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(OtherNamesValueArray other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public OtherNamesValueArray Add<TItem>(TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Add(item);
                }

                return this;
            }

            /// <inheritdoc/>
            public OtherNamesValueArray Insert<TItem>(int index, TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Insert(index, item);
                }

                return this;
            }

            /// <inheritdoc/>
            public OtherNamesValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.Replace(oldValue, newValue);
                }

                return this;
            }

            /// <inheritdoc/>
            public OtherNamesValueArray RemoveAt(int index)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveAt(index);
                }

                return this;
            }

            /// <inheritdoc/>
            public OtherNamesValueArray RemoveRange(int index, int count)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveRange(index, count);
                }

                return this;
            }

            /// <inheritdoc/>
            public OtherNamesValueArray SetItem<TItem>(int index, TItem value)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.SetItem(index, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<OtherNamesValueArray, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            private JsonArray AsArray
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonArray(arrayBacking);
                    }

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Array)
                {
                    return result;
                }

                int arrayLength = 0;
                JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                while (arrayEnumerator.MoveNext())
                {
                    result = arrayEnumerator.Current.As<Marain.LineOfBusiness.PersonName.OtherNamesValue>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    arrayLength++;
                }

                if (arrayLength > 10)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.4.1. maxItems - {arrayLength} exceeds maximum number of items 10.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.4.1. maxItems - item count exceeds maximum number of items 10.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                if (arrayLength < 0)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.4.2. minItems - {arrayLength} is less than the minimum number of items 0.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.4.2. minItems - item count is less than the minimum number of items 0.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultArray.IsValid)
                {
                    return validationContext;
                }

                if (localResultArray.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultArray);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct OtherNamesValue : IJsonValue, IEquatable<OtherNamesValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly string? stringBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public OtherNamesValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.stringBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OtherNamesValue(string value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OtherNamesValue(ReadOnlySpan<char> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value.ToString();
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OtherNamesValue(ReadOnlySpan<byte> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = System.Text.Encoding.UTF8.GetString(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OtherNamesValue"/> struct.
            /// </summary>
            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
            public OtherNamesValue(JsonString jsonString)
            {
                if (jsonString.HasJsonElement)
                {
                    this.jsonElementBacking = jsonString.AsJsonElement;
                    this.stringBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = jsonString;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.stringBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return JsonString.StringToJsonElement(stringBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.stringBacking is string)
                    {
                        return JsonValueKind.String;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonAny(stringBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new OtherNamesValue(value.AsJsonElement);
                }

                return value.As<OtherNamesValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(OtherNamesValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValue(string value)
            {
                return new OtherNamesValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator string (OtherNamesValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValue(ReadOnlySpan<char> value)
            {
                return new OtherNamesValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<char>(OtherNamesValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from utf8 bytes.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValue(ReadOnlySpan<byte> value)
            {
                return new OtherNamesValue(value);
            }

            /// <summary>
            /// Conversion to utf8 bytes.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<byte>(OtherNamesValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OtherNamesValue(JsonString value)
            {
                return new OtherNamesValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonString(OtherNamesValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(OtherNamesValue lhs, OtherNamesValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(OtherNamesValue lhs, OtherNamesValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString.GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => JsonAny.UndefinedHashCode, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.stringBacking is string stringBacking)
                {
                    writer.WriteStringValue(stringBacking);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(OtherNamesValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<OtherNamesValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = Menes.Json.Validate.ValidateString(this, result, level, 50, 0, null);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            private JsonString AsString
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonString(stringBacking);
                    }

                    return new JsonString(this.jsonElementBacking);
                }
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultString.IsValid)
                {
                    return validationContext;
                }

                if (localResultString.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultString);
                return result;
            }
        }
    }
}