//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Marain.LineOfBusiness
{
    using System;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct PersonNameResource : IJsonObject<PersonNameResource>, IEquatable<PersonNameResource>
    {
        /// <summary>
        /// JSON property name for <see cref = "Links"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> LinksUtf8JsonPropertyName = new byte[]{95, 108, 105, 110, 107, 115};
        /// <summary>
        /// JSON property name for <see cref = "Links"/>.
        /// </summary>
        public static readonly string LinksJsonPropertyName = "_links";
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentTypeUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101};
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public static readonly string ContentTypeJsonPropertyName = "contentType";
        /// <summary>
        /// JSON property name for <see cref = "Embedded"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> EmbeddedUtf8JsonPropertyName = new byte[]{95, 101, 109, 98, 101, 100, 100, 101, 100};
        /// <summary>
        /// JSON property name for <see cref = "Embedded"/>.
        /// </summary>
        public static readonly string EmbeddedJsonPropertyName = "_embedded";
        /// <summary>
        /// JSON property name for <see cref = "GivenName"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> GivenNameUtf8JsonPropertyName = new byte[]{103, 105, 118, 101, 110, 78, 97, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "GivenName"/>.
        /// </summary>
        public static readonly string GivenNameJsonPropertyName = "givenName";
        /// <summary>
        /// JSON property name for <see cref = "FamilyName"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> FamilyNameUtf8JsonPropertyName = new byte[]{102, 97, 109, 105, 108, 121, 78, 97, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "FamilyName"/>.
        /// </summary>
        public static readonly string FamilyNameJsonPropertyName = "familyName";
        /// <summary>
        /// JSON property name for <see cref = "OtherNames"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> OtherNamesUtf8JsonPropertyName = new byte[]{111, 116, 104, 101, 114, 78, 97, 109, 101, 115};
        /// <summary>
        /// JSON property name for <see cref = "OtherNames"/>.
        /// </summary>
        public static readonly string OtherNamesJsonPropertyName = "otherNames";
        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TitleUtf8JsonPropertyName = new byte[]{116, 105, 116, 108, 101};
        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public static readonly string TitleJsonPropertyName = "title";
        /// <summary>
        /// JSON property name for <see cref = "Suffix"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SuffixUtf8JsonPropertyName = new byte[]{115, 117, 102, 102, 105, 120};
        /// <summary>
        /// JSON property name for <see cref = "Suffix"/>.
        /// </summary>
        public static readonly string SuffixJsonPropertyName = "suffix";
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonNameResource"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public PersonNameResource(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonNameResource"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public PersonNameResource(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonNameResource"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public PersonNameResource(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonNameResource"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Marain.LineOfBusiness.Resource"/> from which to construct the value.</param>
        public PersonNameResource(Marain.LineOfBusiness.Resource conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonNameResource"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Marain.LineOfBusiness.PersonName"/> from which to construct the value.</param>
        public PersonNameResource(Marain.LineOfBusiness.PersonName conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        public Marain.LineOfBusiness.Resource AsResource
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        public bool IsResource
        {
            get
            {
                return ((Marain.LineOfBusiness.Resource)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Marain.LineOfBusiness.PersonName"/>.
        /// </summary>
        public Marain.LineOfBusiness.PersonName AsPersonName
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Marain.LineOfBusiness.PersonName"/>.
        /// </summary>
        public bool IsPersonName
        {
            get
            {
                return ((Marain.LineOfBusiness.PersonName)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets Links.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.LinksProperty Links
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(LinksJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(LinksUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.LinksProperty(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets ContentType.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString ContentType
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(ContentTypeJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ContentTypeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Embedded.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.EmbeddedProperty Embedded
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(EmbeddedJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(EmbeddedUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.EmbeddedProperty(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets GivenName.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.GivenNameValue GivenName
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(GivenNameJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(GivenNameUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.GivenNameValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets FamilyName.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.FamilyNameValue FamilyName
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(FamilyNameJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(FamilyNameUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.FamilyNameValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets OtherNames.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.OtherNamesValueArray OtherNames
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(OtherNamesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(OtherNamesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.OtherNamesValueArray(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Title.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Marain.LineOfBusiness.PersonName.TitleValue Title
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(TitleJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(TitleUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.LineOfBusiness.PersonName.TitleValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Suffix.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Suffix
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(SuffixJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(SuffixUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonNameResource(Marain.LineOfBusiness.Resource value)
        {
            return new PersonNameResource(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Marain.LineOfBusiness.Resource"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Marain.LineOfBusiness.Resource(PersonNameResource value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Marain.LineOfBusiness.Resource(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Marain.LineOfBusiness.PersonName"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonNameResource(Marain.LineOfBusiness.PersonName value)
        {
            return new PersonNameResource(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Marain.LineOfBusiness.PersonName"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Marain.LineOfBusiness.PersonName(PersonNameResource value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Marain.LineOfBusiness.PersonName(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonNameResource(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new PersonNameResource(value.AsJsonElement);
            }

            return value.As<PersonNameResource>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(PersonNameResource value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonNameResource(JsonObject value)
        {
            return new PersonNameResource(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(PersonNameResource value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(PersonNameResource value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonNameResource(ImmutableDictionary<string, JsonAny> value)
        {
            return new PersonNameResource(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(PersonNameResource lhs, PersonNameResource rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(PersonNameResource lhs, PersonNameResource rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "PersonNameResource"/>.
        /// </summary>
        public static PersonNameResource Create(Marain.LineOfBusiness.LinksProperty links, Marain.LineOfBusiness.PersonName.GivenNameValue givenName, Marain.LineOfBusiness.PersonName.FamilyNameValue familyName, Marain.LineOfBusiness.PersonName.OtherNamesValueArray otherNames, Menes.Json.JsonString? contentType = null, Marain.LineOfBusiness.EmbeddedProperty? embedded = null, Marain.LineOfBusiness.PersonName.TitleValue? title = null, Menes.Json.JsonString? suffix = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            builder.Add(LinksJsonPropertyName, links);
            builder.Add(GivenNameJsonPropertyName, givenName);
            builder.Add(FamilyNameJsonPropertyName, familyName);
            builder.Add(OtherNamesJsonPropertyName, otherNames);
            if (contentType is Menes.Json.JsonString contentType__)
            {
                builder.Add(ContentTypeJsonPropertyName, contentType__);
            }

            if (embedded is Marain.LineOfBusiness.EmbeddedProperty embedded__)
            {
                builder.Add(EmbeddedJsonPropertyName, embedded__);
            }

            if (title is Marain.LineOfBusiness.PersonName.TitleValue title__)
            {
                builder.Add(TitleJsonPropertyName, title__);
            }

            if (suffix is Menes.Json.JsonString suffix__)
            {
                builder.Add(SuffixJsonPropertyName, suffix__);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets _links.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithLinks(Marain.LineOfBusiness.LinksProperty value)
        {
            return this.SetProperty(LinksJsonPropertyName, value);
        }

        /// <summary>
        /// Sets contentType.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithContentType(Menes.Json.JsonString value)
        {
            return this.SetProperty(ContentTypeJsonPropertyName, value);
        }

        /// <summary>
        /// Sets _embedded.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithEmbedded(Marain.LineOfBusiness.EmbeddedProperty value)
        {
            return this.SetProperty(EmbeddedJsonPropertyName, value);
        }

        /// <summary>
        /// Sets givenName.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithGivenName(Marain.LineOfBusiness.PersonName.GivenNameValue value)
        {
            return this.SetProperty(GivenNameJsonPropertyName, value);
        }

        /// <summary>
        /// Sets familyName.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithFamilyName(Marain.LineOfBusiness.PersonName.FamilyNameValue value)
        {
            return this.SetProperty(FamilyNameJsonPropertyName, value);
        }

        /// <summary>
        /// Sets otherNames.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithOtherNames(Marain.LineOfBusiness.PersonName.OtherNamesValueArray value)
        {
            return this.SetProperty(OtherNamesJsonPropertyName, value);
        }

        /// <summary>
        /// Sets title.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithTitle(Marain.LineOfBusiness.PersonName.TitleValue value)
        {
            return this.SetProperty(TitleJsonPropertyName, value);
        }

        /// <summary>
        /// Sets suffix.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonNameResource WithSuffix(Menes.Json.JsonString value)
        {
            return this.SetProperty(SuffixJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is IJsonValue jv)
            {
                return this.Equals(jv.AsAny);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

            ;
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool Equals(PersonNameResource other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public PersonNameResource SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonNameResource SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonNameResource SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonNameResource RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonNameResource RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonNameResource RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<PersonNameResource, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            result = this.ValidateAllOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            ValidationContext allOfResult0 = this.As<Marain.LineOfBusiness.Resource>().Validate(validationContext.CreateChildContext(), level);
            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

            ValidationContext allOfResult1 = this.As<Marain.LineOfBusiness.PersonName>().Validate(validationContext.CreateChildContext(), level);
            if (!allOfResult1.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
            }

            return result;
        }
    }
}