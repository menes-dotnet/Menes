
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace UnevaluatedPropertiesFeature.UnevaluatedPropertiesWithIfThenElse
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct Schema :
            IJsonObject<Schema>,
                    IEquatable<Schema>
    {









        private readonly JsonElement jsonElementBacking;

        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;





        /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public Schema(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
            /* endif */
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public Schema(ImmutableDictionary<JsonEncodedText, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public Schema(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

        }






        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>

                this.objectBacking is null



                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {

                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }






                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                {
                    return JsonValueKind.Object;
                }






                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }






                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }


                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonArray"/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {

                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNumber"/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
                return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonString"/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
                return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonBoolean"/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
                return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNull"/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new Schema(value.AsJsonElement);
            }

            return value.As<Schema>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(Schema value)
        {
            return value.AsAny;
        }



        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonObject value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(Schema value)
        {
            return value.AsObject;
        }






        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }






            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }


        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }




        /// <inheritdoc/>
        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }



        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(Schema other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }


        /// <inheritdoc/>
        public bool HasProperty(JsonEncodedText name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(JsonEncodedText name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(JsonEncodedText name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }



        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<Schema, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }


            JsonValueKind valueKind = this.ValueKind;


            result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }









            result = this.ValidateIfThenElse(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }






            result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }



            return result;
        }








        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

            result = result.UsingEvaluatedProperties();



            foreach (Property property in this.EnumerateObject())
            {
                JsonEncodedText propertyName = property.NameAsJsonEncodedText;







                if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                {

                    result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalProperty(propertyName);
                }


            }




            return result;
        }











        private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            ValidationContext ifResult = this.As<UnevaluatedPropertiesFeature.UnevaluatedPropertiesWithIfThenElse.Schema.IfEntity>().Validate(validationContext.CreateChildContext(), level);


            if (ifResult.IsValid)
            {
                ValidationContext thenResult = this.As<UnevaluatedPropertiesFeature.UnevaluatedPropertiesWithIfThenElse.Schema.ThenEntity>().Validate(validationContext.CreateChildContext(), level);

                if (!thenResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false).WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, ifResult);
                    }

                    result = result.MergeChildContext(thenResult, false);
                }
            }



            if (!ifResult.IsValid)
            {
                ValidationContext elseResult = this.As<UnevaluatedPropertiesFeature.UnevaluatedPropertiesWithIfThenElse.Schema.ElseEntity>().Validate(validationContext.CreateChildContext(), level);

                if (!elseResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false).WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, ifResult);
                    }

                    result = result.MergeChildContext(elseResult, false);
                }
            }


            return result;
        }





        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;



            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }







            result = result.MergeResults(
                isValid,
                level


                , localResultObject




                        );

            return result;
        }





        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ElseEntity :
                IJsonObject<ElseEntity>,
                        IEquatable<ElseEntity>
        {


            /// <summary>
            /// JSON property name for <see cref="Baz"/>.
            /// </summary>
            public static readonly JsonEncodedText BazJsonPropertyName = JsonEncodedText.Encode(new byte[] { 98, 97, 122 });







            private static readonly ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();




            private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;





            /// <summary>
            /// Initializes a new instance of the <see cref="ElseEntity"/> struct.
            /// </summary>
            /// <param name="value">The backing <see cref="JsonElement"/>.</param>
            public ElseEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
                /* endif */
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="ElseEntity"/> struct.
            /// </summary>
            /// <param name="value">A property dictionary.</param>
            public ElseEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="ElseEntity"/> struct.
            /// </summary>
            /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
            public ElseEntity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }

            }







            /// <summary>
            /// Gets Baz.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Baz
            {
                get
                {
                    if (this.TryGetProperty(BazJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement =>

                    this.objectBacking is null



                    ;

            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {

                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }






                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }






                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }






                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }


                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator ElseEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ElseEntity(value.AsJsonElement);
                }

                return value.As<ElseEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonAny(ElseEntity value)
            {
                return value.AsAny;
            }



            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator ElseEntity(JsonObject value)
            {
                return new ElseEntity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonObject(ElseEntity value)
            {
                return value.AsObject;
            }







            /// <summary>
            /// Sets baz.
            /// </summary>
            /// <param name="value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ElseEntity WithBaz(Menes.Json.JsonString value)
            {
                return this.SetProperty(BazJsonPropertyName, value);
            }



            /// <summary>
            /// Writes the object to the <see cref="Utf8JsonWriter"/>.
            /// </summary>
            /// <param name="writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }






                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }


            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }




            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }



            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;

                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                    JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                    JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                    JsonValueKind.String => this.AsString.Equals(other.AsString()),
                    JsonValueKind.Null => true,
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                    _ => false,
                };
            }

            /// <inheritdoc/>
            public bool Equals(ElseEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;

                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                    JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                    JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                    JsonValueKind.String => this.AsString.Equals(other.AsString),
                    JsonValueKind.Null => true,
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                    _ => false,
                };
            }


            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ElseEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ElseEntity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ElseEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ElseEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ElseEntity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ElseEntity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ElseEntity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ElseEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }



            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ElseEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }


                JsonValueKind valueKind = this.ValueKind;











                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }



                return result;
            }






            private static ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                    ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>>();

                builder.Add(
            BazJsonPropertyName,
            (that, validationContext, level) =>
            {
                JsonString property = that.Baz;
                return property.Validate(validationContext, level);
            });

                return builder.ToImmutable();
            }




            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;

                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }



                bool foundBaz = false;

                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;


                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = propertyValidator(this, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }


                        if (BazJsonPropertyName.Equals(propertyName))
                        {
                            foundBaz = true;
                        }

                    }






                }


                if (!foundBaz
                )
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"baz\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }



                return result;
            }
















        }




        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct IfEntity :
                IJsonObject<IfEntity>,
                        IEquatable<IfEntity>
        {


            /// <summary>
            /// JSON property name for <see cref="Foo"/>.
            /// </summary>
            public static readonly JsonEncodedText FooJsonPropertyName = JsonEncodedText.Encode(new byte[] { 102, 111, 111 });







            private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();




            private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;





            /// <summary>
            /// Initializes a new instance of the <see cref="IfEntity"/> struct.
            /// </summary>
            /// <param name="value">The backing <see cref="JsonElement"/>.</param>
            public IfEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
                /* endif */
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="IfEntity"/> struct.
            /// </summary>
            /// <param name="value">A property dictionary.</param>
            public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="IfEntity"/> struct.
            /// </summary>
            /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
            public IfEntity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }

            }







            /// <summary>
            /// Gets Foo.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public UnevaluatedPropertiesFeature.UnevaluatedPropertiesWithIfThenElse.Schema.IfEntity.FooEntity Foo
            {
                get
                {
                    if (this.TryGetProperty(FooJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement =>

                    this.objectBacking is null



                    ;

            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {

                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }






                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }






                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }






                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }


                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator IfEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new IfEntity(value.AsJsonElement);
                }

                return value.As<IfEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonAny(IfEntity value)
            {
                return value.AsAny;
            }



            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator IfEntity(JsonObject value)
            {
                return new IfEntity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonObject(IfEntity value)
            {
                return value.AsObject;
            }







            /// <summary>
            /// Sets foo.
            /// </summary>
            /// <param name="value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public IfEntity WithFoo(UnevaluatedPropertiesFeature.UnevaluatedPropertiesWithIfThenElse.Schema.IfEntity.FooEntity value)
            {
                return this.SetProperty(FooJsonPropertyName, value);
            }



            /// <summary>
            /// Writes the object to the <see cref="Utf8JsonWriter"/>.
            /// </summary>
            /// <param name="writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }






                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }


            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }




            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }



            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;

                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                    JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                    JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                    JsonValueKind.String => this.AsString.Equals(other.AsString()),
                    JsonValueKind.Null => true,
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                    _ => false,
                };
            }

            /// <inheritdoc/>
            public bool Equals(IfEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;

                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                    JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                    JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                    JsonValueKind.String => this.AsString.Equals(other.AsString),
                    JsonValueKind.Null => true,
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                    _ => false,
                };
            }


            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public IfEntity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public IfEntity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public IfEntity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public IfEntity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }



            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<IfEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }


                JsonValueKind valueKind = this.ValueKind;











                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }



                return result;
            }






            private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                    ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();

                builder.Add(
            FooJsonPropertyName,
            (that, validationContext, level) =>
            {
                FooEntity property = that.Foo;
                return property.Validate(validationContext, level);
            });

                return builder.ToImmutable();
            }




            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;

                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }



                bool foundFoo = false;

                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;


                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = propertyValidator(this, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }


                        if (FooJsonPropertyName.Equals(propertyName))
                        {
                            foundFoo = true;
                        }

                    }






                }


                if (!foundFoo
                )
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"foo\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }



                return result;
            }

















            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct FooEntity :
                            IJsonValue,
                    IEquatable<FooEntity>
            {

                private static readonly FooEntity __MenesConstValue = JsonAny.Parse("\"then\"");








                private readonly JsonElement jsonElementBacking;






                /// <summary>
                /// Initializes a new instance of the <see cref="FooEntity"/> struct.
                /// </summary>
                /// <param name="value">The backing <see cref="JsonElement"/>.</param>
                public FooEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }







                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement =>



                true
                        ;

                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {





                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {





                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {





                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref="JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref="JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref="JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref="JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref="JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref="JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name="value">The value from which to convert.</param>
                public static implicit operator FooEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new FooEntity(value.AsJsonElement);
                    }

                    return value.As<FooEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name="value">The value from which to convert.</param>
                public static implicit operator JsonAny(FooEntity value)
                {
                    return value.AsAny;
                }







                /// <summary>
                /// Writes the object to the <see cref="Utf8JsonWriter"/>.
                /// </summary>
                /// <param name="writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {





                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }




                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;

                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                        JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString.Equals(other.AsString()),
                        JsonValueKind.Null => true,
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                        _ => false,
                    };
                }

                /// <inheritdoc/>
                public bool Equals(FooEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;

                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                        JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                        JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                        JsonValueKind.String => this.AsString.Equals(other.AsString),
                        JsonValueKind.Null => true,
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                        _ => false,
                    };
                }



                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<FooEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }




                    result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }












                    return result;
                }























            }



        }




        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ThenEntity :
                IJsonObject<ThenEntity>,
                        IEquatable<ThenEntity>
        {


            /// <summary>
            /// JSON property name for <see cref="Bar"/>.
            /// </summary>
            public static readonly JsonEncodedText BarJsonPropertyName = JsonEncodedText.Encode(new byte[] { 98, 97, 114 });







            private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();




            private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;





            /// <summary>
            /// Initializes a new instance of the <see cref="ThenEntity"/> struct.
            /// </summary>
            /// <param name="value">The backing <see cref="JsonElement"/>.</param>
            public ThenEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
                /* endif */
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="ThenEntity"/> struct.
            /// </summary>
            /// <param name="value">A property dictionary.</param>
            public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="ThenEntity"/> struct.
            /// </summary>
            /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
            public ThenEntity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }

            }







            /// <summary>
            /// Gets Bar.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Bar
            {
                get
                {
                    if (this.TryGetProperty(BarJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement =>

                    this.objectBacking is null



                    ;

            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {

                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }






                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }






                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }






                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }


                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref="JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator ThenEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ThenEntity(value.AsJsonElement);
                }

                return value.As<ThenEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonAny(ThenEntity value)
            {
                return value.AsAny;
            }



            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator ThenEntity(JsonObject value)
            {
                return new ThenEntity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonObject(ThenEntity value)
            {
                return value.AsObject;
            }







            /// <summary>
            /// Sets bar.
            /// </summary>
            /// <param name="value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ThenEntity WithBar(Menes.Json.JsonString value)
            {
                return this.SetProperty(BarJsonPropertyName, value);
            }



            /// <summary>
            /// Writes the object to the <see cref="Utf8JsonWriter"/>.
            /// </summary>
            /// <param name="writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }






                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }


            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }




            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }



            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;

                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                    JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                    JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                    JsonValueKind.String => this.AsString.Equals(other.AsString()),
                    JsonValueKind.Null => true,
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                    _ => false,
                };
            }

            /// <inheritdoc/>
            public bool Equals(ThenEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;

                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                    JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                    JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                    JsonValueKind.String => this.AsString.Equals(other.AsString),
                    JsonValueKind.Null => true,
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                    _ => false,
                };
            }


            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ThenEntity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ThenEntity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ThenEntity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }



            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ThenEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }


                JsonValueKind valueKind = this.ValueKind;











                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }



                return result;
            }






            private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                    ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();

                builder.Add(
            BarJsonPropertyName,
            (that, validationContext, level) =>
            {
                JsonString property = that.Bar;
                return property.Validate(validationContext, level);
            });

                return builder.ToImmutable();
            }




            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;

                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }



                bool foundBar = false;

                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;


                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = propertyValidator(this, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }


                        if (BarJsonPropertyName.Equals(propertyName))
                        {
                            foundBar = true;
                        }

                    }






                }


                if (!foundBar
                )
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"bar\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }



                return result;
            }
















        }



    }
}
