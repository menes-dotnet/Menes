//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace BlogSample
{
    using System;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct PersonEntity : IJsonObject<PersonEntity>, IEquatable<PersonEntity>
    {
        /// <summary>
        /// JSON property name for <see cref = "PrimaryName"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PrimaryNameUtf8JsonPropertyName = new byte[]{112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "PrimaryName"/>.
        /// </summary>
        public static readonly string PrimaryNameJsonPropertyName = "primaryName";
        private static readonly ImmutableDictionary<string, PropertyValidator<PersonEntity>> __MenesLocalProperties = CreateLocalPropertyValidators();
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonEntity"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public PersonEntity(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonEntity"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public PersonEntity(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PersonEntity"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public PersonEntity(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Gets PrimaryName.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public BlogSample.PersonEntity.PersonNameValue PrimaryName
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(PrimaryNameJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PrimaryNameUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new BlogSample.PersonEntity.PersonNameValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonEntity(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new PersonEntity(value.AsJsonElement);
            }

            return value.As<PersonEntity>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(PersonEntity value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonEntity(JsonObject value)
        {
            return new PersonEntity(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(PersonEntity value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(PersonEntity value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PersonEntity(ImmutableDictionary<string, JsonAny> value)
        {
            return new PersonEntity(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(PersonEntity lhs, PersonEntity rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(PersonEntity lhs, PersonEntity rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "PersonEntity"/>.
        /// </summary>
        public static PersonEntity Create(BlogSample.PersonEntity.PersonNameValue? primaryName = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            if (primaryName is BlogSample.PersonEntity.PersonNameValue primaryName__)
            {
                builder.Add(PrimaryNameJsonPropertyName, primaryName__);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets primaryName.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PersonEntity WithPrimaryName(BlogSample.PersonEntity.PersonNameValue value)
        {
            return this.SetProperty(PrimaryNameJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is PersonEntity entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

            ;
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool Equals(PersonEntity other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public PersonEntity SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonEntity RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonEntity RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PersonEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<PersonEntity, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            result = result.UsingEvaluatedProperties();
            JsonValueKind valueKind = this.ValueKind;
            result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private static ImmutableDictionary<string, PropertyValidator<PersonEntity>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<string, PropertyValidator<PersonEntity>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<PersonEntity>>();
            builder.Add(PrimaryNameJsonPropertyName, __MenesValidatePrimaryName);
            return builder.ToImmutable();
        }

        private static ValidationContext __MenesValidatePrimaryName(in PersonEntity that, in ValidationContext validationContext, ValidationLevel level)
        {
            BlogSample.PersonEntity.PersonNameValue property = that.PrimaryName;
            return property.Validate(validationContext, level);
        }

        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

            int propertyCount = 0;
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;
                if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<PersonEntity>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyCount);
                    var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }

                if (!result.HasEvaluatedLocalProperty(propertyCount))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"9.3.2.3. additionalProperties - additional property \"{propertyName}\" is not permitted.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "9.3.2.3. additionalProperties - additional properties are not permitted.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                propertyCount++;
            }

            return result;
        }

        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

            result = result.MergeResults(isValid, level, localResultObject);
            return result;
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct PersonNameValue : IJsonObject<PersonNameValue>, IEquatable<PersonNameValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "LastName"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> LastNameUtf8JsonPropertyName = new byte[]{108, 97, 115, 116, 78, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "LastName"/>.
            /// </summary>
            public static readonly string LastNameJsonPropertyName = "lastName";
            /// <summary>
            /// JSON property name for <see cref = "FirstName"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> FirstNameUtf8JsonPropertyName = new byte[]{102, 105, 114, 115, 116, 78, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "FirstName"/>.
            /// </summary>
            public static readonly string FirstNameJsonPropertyName = "firstName";
            /// <summary>
            /// JSON property name for <see cref = "MiddleName"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> MiddleNameUtf8JsonPropertyName = new byte[]{109, 105, 100, 100, 108, 101, 78, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "MiddleName"/>.
            /// </summary>
            public static readonly string MiddleNameJsonPropertyName = "middleName";
            private static readonly ImmutableDictionary<string, PropertyValidator<PersonNameValue>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "PersonNameValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public PersonNameValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PersonNameValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public PersonNameValue(ImmutableDictionary<string, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PersonNameValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public PersonNameValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets LastName.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString LastName
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(LastNameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(LastNameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets FirstName.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString FirstName
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(FirstNameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(FirstNameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets MiddleName.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString MiddleName
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(MiddleNameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(MiddleNameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PersonNameValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new PersonNameValue(value.AsJsonElement);
                }

                return value.As<PersonNameValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(PersonNameValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PersonNameValue(JsonObject value)
            {
                return new PersonNameValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(PersonNameValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<string, JsonAny>(PersonNameValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PersonNameValue(ImmutableDictionary<string, JsonAny> value)
            {
                return new PersonNameValue(value);
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(PersonNameValue lhs, PersonNameValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(PersonNameValue lhs, PersonNameValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "PersonNameValue"/>.
            /// </summary>
            public static PersonNameValue Create(Menes.Json.JsonString lastName, Menes.Json.JsonString? firstName = null, Menes.Json.JsonString? middleName = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
                builder.Add(LastNameJsonPropertyName, lastName);
                if (firstName is Menes.Json.JsonString firstName__)
                {
                    builder.Add(FirstNameJsonPropertyName, firstName__);
                }

                if (middleName is Menes.Json.JsonString middleName__)
                {
                    builder.Add(MiddleNameJsonPropertyName, middleName__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets lastName.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public PersonNameValue WithLastName(Menes.Json.JsonString value)
            {
                return this.SetProperty(LastNameJsonPropertyName, value);
            }

            /// <summary>
            /// Sets firstName.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public PersonNameValue WithFirstName(Menes.Json.JsonString value)
            {
                return this.SetProperty(FirstNameJsonPropertyName, value);
            }

            /// <summary>
            /// Sets middleName.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public PersonNameValue WithMiddleName(Menes.Json.JsonString value)
            {
                return this.SetProperty(MiddleNameJsonPropertyName, value);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is PersonNameValue entity)
                {
                    return this.Equals(entity);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(PersonNameValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name.ToString(), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public PersonNameValue SetProperty<TValue>(string name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PersonNameValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PersonNameValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PersonNameValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PersonNameValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PersonNameValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<PersonNameValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = result.UsingEvaluatedProperties();
                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            private JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            private static ImmutableDictionary<string, PropertyValidator<PersonNameValue>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<string, PropertyValidator<PersonNameValue>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<PersonNameValue>>();
                builder.Add(LastNameJsonPropertyName, __MenesValidateLastName);
                builder.Add(FirstNameJsonPropertyName, __MenesValidateFirstName);
                builder.Add(MiddleNameJsonPropertyName, __MenesValidateMiddleName);
                return builder.ToImmutable();
            }

            private static ValidationContext __MenesValidateLastName(in PersonNameValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.LastName;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateFirstName(in PersonNameValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.FirstName;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateMiddleName(in PersonNameValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.MiddleName;
                return property.Validate(validationContext, level);
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                int propertyCount = 0;
                bool foundLastName = false;
                foreach (Property property in this.EnumerateObject())
                {
                    string propertyName = property.Name;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<PersonNameValue>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyCount);
                        var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (LastNameJsonPropertyName.Equals(propertyName))
                        {
                            foundLastName = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalProperty(propertyCount))
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"9.3.2.3. additionalProperties - additional property \"{propertyName}\" is not permitted.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "9.3.2.3. additionalProperties - additional properties are not permitted.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    propertyCount++;
                }

                if (!foundLastName)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"lastName\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }
    }
}