//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace BlogSample
{
    using System;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct AddressHistoryEntity : IJsonObject<AddressHistoryEntity>, IEquatable<AddressHistoryEntity>
    {
        /// <summary>
        /// JSON property name for <see cref = "AddressHistory"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> AddressHistoryUtf8JsonPropertyName = new byte[]{97, 100, 100, 114, 101, 115, 115, 72, 105, 115, 116, 111, 114, 121};
        /// <summary>
        /// JSON property name for <see cref = "AddressHistory"/>.
        /// </summary>
        public static readonly string AddressHistoryJsonPropertyName = "addressHistory";
        private static readonly ImmutableDictionary<string, PropertyValidator<AddressHistoryEntity>> __MenesLocalProperties = CreateLocalPropertyValidators();
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "AddressHistoryEntity"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public AddressHistoryEntity(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "AddressHistoryEntity"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public AddressHistoryEntity(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "AddressHistoryEntity"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public AddressHistoryEntity(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Gets AddressHistory.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public BlogSample.AddressHistoryEntity.AddressValueArray AddressHistory
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(AddressHistoryJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(AddressHistoryUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new BlogSample.AddressHistoryEntity.AddressValueArray(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator AddressHistoryEntity(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new AddressHistoryEntity(value.AsJsonElement);
            }

            return value.As<AddressHistoryEntity>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(AddressHistoryEntity value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator AddressHistoryEntity(JsonObject value)
        {
            return new AddressHistoryEntity(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(AddressHistoryEntity value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(AddressHistoryEntity value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator AddressHistoryEntity(ImmutableDictionary<string, JsonAny> value)
        {
            return new AddressHistoryEntity(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(AddressHistoryEntity lhs, AddressHistoryEntity rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(AddressHistoryEntity lhs, AddressHistoryEntity rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "AddressHistoryEntity"/>.
        /// </summary>
        public static AddressHistoryEntity Create(BlogSample.AddressHistoryEntity.AddressValueArray? addressHistory = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            if (addressHistory is BlogSample.AddressHistoryEntity.AddressValueArray addressHistory__)
            {
                builder.Add(AddressHistoryJsonPropertyName, addressHistory__);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets addressHistory.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public AddressHistoryEntity WithAddressHistory(BlogSample.AddressHistoryEntity.AddressValueArray value)
        {
            return this.SetProperty(AddressHistoryJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is IJsonValue jv)
            {
                return this.Equals(jv.AsAny);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

            ;
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool Equals(AddressHistoryEntity other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public AddressHistoryEntity SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public AddressHistoryEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public AddressHistoryEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public AddressHistoryEntity RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public AddressHistoryEntity RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public AddressHistoryEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<AddressHistoryEntity, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            result = result.UsingEvaluatedProperties();
            JsonValueKind valueKind = this.ValueKind;
            result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private static ImmutableDictionary<string, PropertyValidator<AddressHistoryEntity>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<string, PropertyValidator<AddressHistoryEntity>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<AddressHistoryEntity>>();
            builder.Add(AddressHistoryJsonPropertyName, __MenesValidateAddressHistory);
            return builder.ToImmutable();
        }

        private static ValidationContext __MenesValidateAddressHistory(in AddressHistoryEntity that, in ValidationContext validationContext, ValidationLevel level)
        {
            BlogSample.AddressHistoryEntity.AddressValueArray property = that.AddressHistory;
            return property.Validate(validationContext, level);
        }

        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

            int propertyCount = 0;
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;
                if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<AddressHistoryEntity>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyCount);
                    var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }

                if (!result.HasEvaluatedLocalProperty(propertyCount))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"9.3.2.3. additionalProperties - additional property \"{propertyName}\" is not permitted.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "9.3.2.3. additionalProperties - additional properties are not permitted.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                propertyCount++;
            }

            return result;
        }

        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

            result = result.MergeResults(isValid, level, localResultObject);
            return result;
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct AddressValueArray : IJsonArray<AddressValueArray>, IEquatable<AddressValueArray>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableList<JsonAny>? arrayBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "AddressValueArray"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public AddressValueArray(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.arrayBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AddressValueArray"/> struct.
            /// </summary>
            /// <param name = "value">An array list.</param>
            public AddressValueArray(ImmutableList<JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.arrayBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AddressValueArray"/> struct.
            /// </summary>
            /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
            public AddressValueArray(JsonArray jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.jsonElementBacking = jsonArray.AsJsonElement;
                    this.arrayBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = jsonArray.AsItemsList;
                }
            }

            /// <inheritdoc/>
            public int Length
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return items.Count;
                    }

                    return this.jsonElementBacking.GetArrayLength();
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.arrayBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return JsonArray.ItemsToJsonElement(arrayBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny>)
                    {
                        return JsonValueKind.Array;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonAny(arrayBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AddressValueArray(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new AddressValueArray(value.AsJsonElement);
                }

                return value.As<AddressValueArray>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(AddressValueArray value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AddressValueArray(JsonArray value)
            {
                return new AddressValueArray(value);
            }

            /// <summary>
            /// Conversion to array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonArray(AddressValueArray value)
            {
                return value.AsArray;
            }

            /// <summary>
            /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableList<JsonAny>(AddressValueArray value)
            {
                return value.AsArray.AsItemsList;
            }

            /// <summary>
            /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AddressValueArray(ImmutableList<JsonAny> value)
            {
                return new AddressValueArray(value);
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(AddressValueArray lhs, AddressValueArray rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(AddressValueArray lhs, AddressValueArray rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "items">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static AddressValueArray From(params BlogSample.AddressHistoryEntity.AddressValue[] items)
            {
                var builder = ImmutableList.CreateBuilder<JsonAny>();
                foreach (var item in items)
                {
                    builder.Add(item);
                }

                return new AddressValueArray(builder.ToImmutable());
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static AddressValueArray From(BlogSample.AddressHistoryEntity.AddressValue item1)
            {
                return new AddressValueArray(ImmutableList.Create((JsonAny)item1));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static AddressValueArray From(BlogSample.AddressHistoryEntity.AddressValue item1, BlogSample.AddressHistoryEntity.AddressValue item2)
            {
                return new AddressValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static AddressValueArray From(BlogSample.AddressHistoryEntity.AddressValue item1, BlogSample.AddressHistoryEntity.AddressValue item2, BlogSample.AddressHistoryEntity.AddressValue item3)
            {
                return new AddressValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <param name = "item4">The fourth item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static AddressValueArray From(BlogSample.AddressHistoryEntity.AddressValue item1, BlogSample.AddressHistoryEntity.AddressValue item2, BlogSample.AddressHistoryEntity.AddressValue item3, BlogSample.AddressHistoryEntity.AddressValue item4)
            {
                return new AddressValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().GetHashCode(), JsonValueKind.Array => this.AsArray.GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    JsonArray.WriteItems(arrayBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the items in the array as a <see cref = "BlogSample.AddressHistoryEntity.AddressValue"/>.
            /// </summary>
            public JsonArrayEnumerator<BlogSample.AddressHistoryEntity.AddressValue> EnumerateItems()
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return new JsonArrayEnumerator<BlogSample.AddressHistoryEntity.AddressValue>(items);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return new JsonArrayEnumerator<BlogSample.AddressHistoryEntity.AddressValue>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonArrayEnumerator EnumerateArray()
            {
                return this.AsArray.EnumerateArray();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(AddressValueArray other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject().Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public AddressValueArray Add<TItem>(TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Add(item);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValueArray Insert<TItem>(int index, TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Insert(index, item);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.Replace(oldValue, newValue);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValueArray RemoveAt(int index)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveAt(index);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValueArray RemoveRange(int index, int count)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveRange(index, count);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValueArray SetItem<TItem>(int index, TItem value)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.SetItem(index, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<AddressValueArray, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            private JsonArray AsArray
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonArray(arrayBacking);
                    }

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Array)
                {
                    return result;
                }

                int arrayLength = 0;
                JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                while (arrayEnumerator.MoveNext())
                {
                    result = arrayEnumerator.Current.As<BlogSample.AddressHistoryEntity.AddressValue>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    arrayLength++;
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultArray.IsValid)
                {
                    return validationContext;
                }

                if (localResultArray.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultArray);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct AddressValue : IJsonObject<AddressValue>, IEquatable<AddressValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Line1"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> Line1Utf8JsonPropertyName = new byte[]{108, 105, 110, 101, 49};
            /// <summary>
            /// JSON property name for <see cref = "Line1"/>.
            /// </summary>
            public static readonly string Line1JsonPropertyName = "line1";
            /// <summary>
            /// JSON property name for <see cref = "Line2"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> Line2Utf8JsonPropertyName = new byte[]{108, 105, 110, 101, 50};
            /// <summary>
            /// JSON property name for <see cref = "Line2"/>.
            /// </summary>
            public static readonly string Line2JsonPropertyName = "line2";
            /// <summary>
            /// JSON property name for <see cref = "TownOrCity"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> TownOrCityUtf8JsonPropertyName = new byte[]{116, 111, 119, 110, 79, 114, 67, 105, 116, 121};
            /// <summary>
            /// JSON property name for <see cref = "TownOrCity"/>.
            /// </summary>
            public static readonly string TownOrCityJsonPropertyName = "townOrCity";
            /// <summary>
            /// JSON property name for <see cref = "Region"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RegionUtf8JsonPropertyName = new byte[]{114, 101, 103, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Region"/>.
            /// </summary>
            public static readonly string RegionJsonPropertyName = "region";
            /// <summary>
            /// JSON property name for <see cref = "PostalCode"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> PostalCodeUtf8JsonPropertyName = new byte[]{112, 111, 115, 116, 97, 108, 67, 111, 100, 101};
            /// <summary>
            /// JSON property name for <see cref = "PostalCode"/>.
            /// </summary>
            public static readonly string PostalCodeJsonPropertyName = "postalCode";
            private static readonly ImmutableDictionary<string, PropertyValidator<AddressValue>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "AddressValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public AddressValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AddressValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public AddressValue(ImmutableDictionary<string, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AddressValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public AddressValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets Line1.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Line1
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(Line1JsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(Line1Utf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Line2.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Line2
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(Line2JsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(Line2Utf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets TownOrCity.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString TownOrCity
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(TownOrCityJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(TownOrCityUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Region.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Region
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RegionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RegionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets PostalCode.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString PostalCode
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                    {
                        if (properties.TryGetValue(PostalCodeJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(PostalCodeUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AddressValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new AddressValue(value.AsJsonElement);
                }

                return value.As<AddressValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(AddressValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AddressValue(JsonObject value)
            {
                return new AddressValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(AddressValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<string, JsonAny>(AddressValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AddressValue(ImmutableDictionary<string, JsonAny> value)
            {
                return new AddressValue(value);
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(AddressValue lhs, AddressValue rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(AddressValue lhs, AddressValue rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "AddressValue"/>.
            /// </summary>
            public static AddressValue Create(Menes.Json.JsonString? line1 = null, Menes.Json.JsonString? line2 = null, Menes.Json.JsonString? townOrCity = null, Menes.Json.JsonString? region = null, Menes.Json.JsonString? postalCode = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
                if (line1 is Menes.Json.JsonString line1__)
                {
                    builder.Add(Line1JsonPropertyName, line1__);
                }

                if (line2 is Menes.Json.JsonString line2__)
                {
                    builder.Add(Line2JsonPropertyName, line2__);
                }

                if (townOrCity is Menes.Json.JsonString townOrCity__)
                {
                    builder.Add(TownOrCityJsonPropertyName, townOrCity__);
                }

                if (region is Menes.Json.JsonString region__)
                {
                    builder.Add(RegionJsonPropertyName, region__);
                }

                if (postalCode is Menes.Json.JsonString postalCode__)
                {
                    builder.Add(PostalCodeJsonPropertyName, postalCode__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets line1.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AddressValue WithLine1(Menes.Json.JsonString value)
            {
                return this.SetProperty(Line1JsonPropertyName, value);
            }

            /// <summary>
            /// Sets line2.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AddressValue WithLine2(Menes.Json.JsonString value)
            {
                return this.SetProperty(Line2JsonPropertyName, value);
            }

            /// <summary>
            /// Sets townOrCity.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AddressValue WithTownOrCity(Menes.Json.JsonString value)
            {
                return this.SetProperty(TownOrCityJsonPropertyName, value);
            }

            /// <summary>
            /// Sets region.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AddressValue WithRegion(Menes.Json.JsonString value)
            {
                return this.SetProperty(RegionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets postalCode.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AddressValue WithPostalCode(Menes.Json.JsonString value)
            {
                return this.SetProperty(PostalCodeJsonPropertyName, value);
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return false;
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.GetHashCode(), JsonValueKind.Array => this.AsArray().GetHashCode(), JsonValueKind.Number => this.AsNumber().GetHashCode(), JsonValueKind.String => this.AsString().GetHashCode(), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(), JsonValueKind.Null => JsonNull.NullHashCode, _ => 0, }

                ;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(AddressValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray().Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()), JsonValueKind.String => this.AsString().Equals(other.AsString()), JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()), JsonValueKind.Null => true, _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(name.ToString(), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public AddressValue SetProperty<TValue>(string name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AddressValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<AddressValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = result.UsingEvaluatedProperties();
                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            private JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            private static ImmutableDictionary<string, PropertyValidator<AddressValue>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<string, PropertyValidator<AddressValue>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<AddressValue>>();
                builder.Add(Line1JsonPropertyName, __MenesValidateLine1);
                builder.Add(Line2JsonPropertyName, __MenesValidateLine2);
                builder.Add(TownOrCityJsonPropertyName, __MenesValidateTownOrCity);
                builder.Add(RegionJsonPropertyName, __MenesValidateRegion);
                builder.Add(PostalCodeJsonPropertyName, __MenesValidatePostalCode);
                return builder.ToImmutable();
            }

            private static ValidationContext __MenesValidateLine1(in AddressValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.Line1;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateLine2(in AddressValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.Line2;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateTownOrCity(in AddressValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.TownOrCity;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidateRegion(in AddressValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.Region;
                return property.Validate(validationContext, level);
            }

            private static ValidationContext __MenesValidatePostalCode(in AddressValue that, in ValidationContext validationContext, ValidationLevel level)
            {
                Menes.Json.JsonString property = that.PostalCode;
                return property.Validate(validationContext, level);
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                int propertyCount = 0;
                foreach (Property property in this.EnumerateObject())
                {
                    string propertyName = property.Name;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out PropertyValidator<AddressValue>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyCount);
                        var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalProperty(propertyCount))
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"9.3.2.3. additionalProperties - additional property \"{propertyName}\" is not permitted.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "9.3.2.3. additionalProperties - additional properties are not permitted.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    propertyCount++;
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }
    }
}