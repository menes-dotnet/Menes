
    //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct Schema :
            IJsonObject<Schema>,
                    IEquatable<Schema>
    {
    
        
        /// <summary>
        /// JSON property name for <see cref="Id"/>.
        /// </summary>
        public static readonly JsonEncodedText IdJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 105, 100 });

        
        /// <summary>
        /// JSON property name for <see cref="Schema1"/>.
        /// </summary>
        public static readonly JsonEncodedText Schema1JsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 115, 99, 104, 101, 109, 97 });

        
        /// <summary>
        /// JSON property name for <see cref="Anchor"/>.
        /// </summary>
        public static readonly JsonEncodedText AnchorJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 97, 110, 99, 104, 111, 114 });

        
        /// <summary>
        /// JSON property name for <see cref="Ref"/>.
        /// </summary>
        public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 114, 101, 102 });

        
        /// <summary>
        /// JSON property name for <see cref="RecursiveRef"/>.
        /// </summary>
        public static readonly JsonEncodedText RecursiveRefJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 114, 101, 99, 117, 114, 115, 105, 118, 101, 82, 101, 102 });

        
        /// <summary>
        /// JSON property name for <see cref="RecursiveAnchor"/>.
        /// </summary>
        public static readonly JsonEncodedText RecursiveAnchorJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 114, 101, 99, 117, 114, 115, 105, 118, 101, 65, 110, 99, 104, 111, 114 });

        
        /// <summary>
        /// JSON property name for <see cref="Vocabulary"/>.
        /// </summary>
        public static readonly JsonEncodedText VocabularyJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 118, 111, 99, 97, 98, 117, 108, 97, 114, 121 });

        
        /// <summary>
        /// JSON property name for <see cref="Comment"/>.
        /// </summary>
        public static readonly JsonEncodedText CommentJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 99, 111, 109, 109, 101, 110, 116 });

        
        /// <summary>
        /// JSON property name for <see cref="Defs"/>.
        /// </summary>
        public static readonly JsonEncodedText DefsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 36, 100, 101, 102, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="AdditionalItems"/>.
        /// </summary>
        public static readonly JsonEncodedText AdditionalItemsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 73, 116, 101, 109, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="UnevaluatedItems"/>.
        /// </summary>
        public static readonly JsonEncodedText UnevaluatedItemsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 117, 110, 101, 118, 97, 108, 117, 97, 116, 101, 100, 73, 116, 101, 109, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="Items"/>.
        /// </summary>
        public static readonly JsonEncodedText ItemsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 105, 116, 101, 109, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="Contains"/>.
        /// </summary>
        public static readonly JsonEncodedText ContainsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 99, 111, 110, 116, 97, 105, 110, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="AdditionalProperties"/>.
        /// </summary>
        public static readonly JsonEncodedText AdditionalPropertiesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="UnevaluatedProperties"/>.
        /// </summary>
        public static readonly JsonEncodedText UnevaluatedPropertiesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 117, 110, 101, 118, 97, 108, 117, 97, 116, 101, 100, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="Properties"/>.
        /// </summary>
        public static readonly JsonEncodedText PropertiesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 112, 114, 111, 112, 101, 114, 116, 105, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="PatternProperties"/>.
        /// </summary>
        public static readonly JsonEncodedText PatternPropertiesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 112, 97, 116, 116, 101, 114, 110, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="DependentSchemas"/>.
        /// </summary>
        public static readonly JsonEncodedText DependentSchemasJsonPropertyName = JsonEncodedText.Encode( new byte[] { 100, 101, 112, 101, 110, 100, 101, 110, 116, 83, 99, 104, 101, 109, 97, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="PropertyNames"/>.
        /// </summary>
        public static readonly JsonEncodedText PropertyNamesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 112, 114, 111, 112, 101, 114, 116, 121, 78, 97, 109, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="If"/>.
        /// </summary>
        public static readonly JsonEncodedText IfJsonPropertyName = JsonEncodedText.Encode( new byte[] { 105, 102 });

        
        /// <summary>
        /// JSON property name for <see cref="Then"/>.
        /// </summary>
        public static readonly JsonEncodedText ThenJsonPropertyName = JsonEncodedText.Encode( new byte[] { 116, 104, 101, 110 });

        
        /// <summary>
        /// JSON property name for <see cref="Else"/>.
        /// </summary>
        public static readonly JsonEncodedText ElseJsonPropertyName = JsonEncodedText.Encode( new byte[] { 101, 108, 115, 101 });

        
        /// <summary>
        /// JSON property name for <see cref="AllOf"/>.
        /// </summary>
        public static readonly JsonEncodedText AllOfJsonPropertyName = JsonEncodedText.Encode( new byte[] { 97, 108, 108, 79, 102 });

        
        /// <summary>
        /// JSON property name for <see cref="AnyOf"/>.
        /// </summary>
        public static readonly JsonEncodedText AnyOfJsonPropertyName = JsonEncodedText.Encode( new byte[] { 97, 110, 121, 79, 102 });

        
        /// <summary>
        /// JSON property name for <see cref="OneOf"/>.
        /// </summary>
        public static readonly JsonEncodedText OneOfJsonPropertyName = JsonEncodedText.Encode( new byte[] { 111, 110, 101, 79, 102 });

        
        /// <summary>
        /// JSON property name for <see cref="Not"/>.
        /// </summary>
        public static readonly JsonEncodedText NotJsonPropertyName = JsonEncodedText.Encode( new byte[] { 110, 111, 116 });

        
        /// <summary>
        /// JSON property name for <see cref="MultipleOf"/>.
        /// </summary>
        public static readonly JsonEncodedText MultipleOfJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 117, 108, 116, 105, 112, 108, 101, 79, 102 });

        
        /// <summary>
        /// JSON property name for <see cref="Maximum"/>.
        /// </summary>
        public static readonly JsonEncodedText MaximumJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 97, 120, 105, 109, 117, 109 });

        
        /// <summary>
        /// JSON property name for <see cref="ExclusiveMaximum"/>.
        /// </summary>
        public static readonly JsonEncodedText ExclusiveMaximumJsonPropertyName = JsonEncodedText.Encode( new byte[] { 101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 97, 120, 105, 109, 117, 109 });

        
        /// <summary>
        /// JSON property name for <see cref="Minimum"/>.
        /// </summary>
        public static readonly JsonEncodedText MinimumJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 105, 110, 105, 109, 117, 109 });

        
        /// <summary>
        /// JSON property name for <see cref="ExclusiveMinimum"/>.
        /// </summary>
        public static readonly JsonEncodedText ExclusiveMinimumJsonPropertyName = JsonEncodedText.Encode( new byte[] { 101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 105, 110, 105, 109, 117, 109 });

        
        /// <summary>
        /// JSON property name for <see cref="MaxLength"/>.
        /// </summary>
        public static readonly JsonEncodedText MaxLengthJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 97, 120, 76, 101, 110, 103, 116, 104 });

        
        /// <summary>
        /// JSON property name for <see cref="MinLength"/>.
        /// </summary>
        public static readonly JsonEncodedText MinLengthJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 105, 110, 76, 101, 110, 103, 116, 104 });

        
        /// <summary>
        /// JSON property name for <see cref="Pattern"/>.
        /// </summary>
        public static readonly JsonEncodedText PatternJsonPropertyName = JsonEncodedText.Encode( new byte[] { 112, 97, 116, 116, 101, 114, 110 });

        
        /// <summary>
        /// JSON property name for <see cref="MaxItems"/>.
        /// </summary>
        public static readonly JsonEncodedText MaxItemsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 97, 120, 73, 116, 101, 109, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="MinItems"/>.
        /// </summary>
        public static readonly JsonEncodedText MinItemsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 105, 110, 73, 116, 101, 109, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="UniqueItems"/>.
        /// </summary>
        public static readonly JsonEncodedText UniqueItemsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 117, 110, 105, 113, 117, 101, 73, 116, 101, 109, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="MaxContains"/>.
        /// </summary>
        public static readonly JsonEncodedText MaxContainsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 97, 120, 67, 111, 110, 116, 97, 105, 110, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="MinContains"/>.
        /// </summary>
        public static readonly JsonEncodedText MinContainsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 105, 110, 67, 111, 110, 116, 97, 105, 110, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="MaxProperties"/>.
        /// </summary>
        public static readonly JsonEncodedText MaxPropertiesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 97, 120, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="MinProperties"/>.
        /// </summary>
        public static readonly JsonEncodedText MinPropertiesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 109, 105, 110, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="Required"/>.
        /// </summary>
        public static readonly JsonEncodedText RequiredJsonPropertyName = JsonEncodedText.Encode( new byte[] { 114, 101, 113, 117, 105, 114, 101, 100 });

        
        /// <summary>
        /// JSON property name for <see cref="DependentRequired"/>.
        /// </summary>
        public static readonly JsonEncodedText DependentRequiredJsonPropertyName = JsonEncodedText.Encode( new byte[] { 100, 101, 112, 101, 110, 100, 101, 110, 116, 82, 101, 113, 117, 105, 114, 101, 100 });

        
        /// <summary>
        /// JSON property name for <see cref="Const"/>.
        /// </summary>
        public static readonly JsonEncodedText ConstJsonPropertyName = JsonEncodedText.Encode( new byte[] { 99, 111, 110, 115, 116 });

        
        /// <summary>
        /// JSON property name for <see cref="Enum"/>.
        /// </summary>
        public static readonly JsonEncodedText EnumJsonPropertyName = JsonEncodedText.Encode( new byte[] { 101, 110, 117, 109 });

        
        /// <summary>
        /// JSON property name for <see cref="Type"/>.
        /// </summary>
        public static readonly JsonEncodedText TypeJsonPropertyName = JsonEncodedText.Encode( new byte[] { 116, 121, 112, 101 });

        
        /// <summary>
        /// JSON property name for <see cref="Title"/>.
        /// </summary>
        public static readonly JsonEncodedText TitleJsonPropertyName = JsonEncodedText.Encode( new byte[] { 116, 105, 116, 108, 101 });

        
        /// <summary>
        /// JSON property name for <see cref="Description"/>.
        /// </summary>
        public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode( new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 });

        
        /// <summary>
        /// JSON property name for <see cref="Default"/>.
        /// </summary>
        public static readonly JsonEncodedText DefaultJsonPropertyName = JsonEncodedText.Encode( new byte[] { 100, 101, 102, 97, 117, 108, 116 });

        
        /// <summary>
        /// JSON property name for <see cref="Deprecated"/>.
        /// </summary>
        public static readonly JsonEncodedText DeprecatedJsonPropertyName = JsonEncodedText.Encode( new byte[] { 100, 101, 112, 114, 101, 99, 97, 116, 101, 100 });

        
        /// <summary>
        /// JSON property name for <see cref="ReadOnly"/>.
        /// </summary>
        public static readonly JsonEncodedText ReadOnlyJsonPropertyName = JsonEncodedText.Encode( new byte[] { 114, 101, 97, 100, 79, 110, 108, 121 });

        
        /// <summary>
        /// JSON property name for <see cref="WriteOnly"/>.
        /// </summary>
        public static readonly JsonEncodedText WriteOnlyJsonPropertyName = JsonEncodedText.Encode( new byte[] { 119, 114, 105, 116, 101, 79, 110, 108, 121 });

        
        /// <summary>
        /// JSON property name for <see cref="Examples"/>.
        /// </summary>
        public static readonly JsonEncodedText ExamplesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 101, 120, 97, 109, 112, 108, 101, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="Format"/>.
        /// </summary>
        public static readonly JsonEncodedText FormatJsonPropertyName = JsonEncodedText.Encode( new byte[] { 102, 111, 114, 109, 97, 116 });

        
        /// <summary>
        /// JSON property name for <see cref="ContentMediaType"/>.
        /// </summary>
        public static readonly JsonEncodedText ContentMediaTypeJsonPropertyName = JsonEncodedText.Encode( new byte[] { 99, 111, 110, 116, 101, 110, 116, 77, 101, 100, 105, 97, 84, 121, 112, 101 });

        
        /// <summary>
        /// JSON property name for <see cref="ContentEncoding"/>.
        /// </summary>
        public static readonly JsonEncodedText ContentEncodingJsonPropertyName = JsonEncodedText.Encode( new byte[] { 99, 111, 110, 116, 101, 110, 116, 69, 110, 99, 111, 100, 105, 110, 103 });

        
        /// <summary>
        /// JSON property name for <see cref="ContentSchema"/>.
        /// </summary>
        public static readonly JsonEncodedText ContentSchemaJsonPropertyName = JsonEncodedText.Encode( new byte[] { 99, 111, 110, 116, 101, 110, 116, 83, 99, 104, 101, 109, 97 });

        
        /// <summary>
        /// JSON property name for <see cref="Definitions"/>.
        /// </summary>
        public static readonly JsonEncodedText DefinitionsJsonPropertyName = JsonEncodedText.Encode( new byte[] { 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115 });

        
        /// <summary>
        /// JSON property name for <see cref="Dependencies"/>.
        /// </summary>
        public static readonly JsonEncodedText DependenciesJsonPropertyName = JsonEncodedText.Encode( new byte[] { 100, 101, 112, 101, 110, 100, 101, 110, 99, 105, 101, 115 });

        
    
    
    
    
    
            private static readonly ImmutableDictionary<JsonEncodedText, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
    
            private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
    

    
        private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
    
    
    
    
            private readonly bool? booleanBacking;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public Schema(JsonElement value)
        {
            this.jsonElementBacking = value;
                this.objectBacking = default;
            /* endif */
                                this.booleanBacking = default;
            }

            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public Schema(ImmutableDictionary<JsonEncodedText, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
                                            this.booleanBacking = default;
                }

        /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public Schema(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

                                            this.booleanBacking = default;
                }
    
    
    
    
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="jsonBoolean">The <see cref="JsonBoolean"/> from which to construct the value.</param>
        public Schema(JsonBoolean jsonBoolean)
        {
            if (jsonBoolean.HasJsonElement)
            {
                this.jsonElementBacking = jsonBoolean.AsJsonElement;
                this.booleanBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.booleanBacking = jsonBoolean.GetBoolean();
            }

                    this.objectBacking = default;
                                        }
    
    
            
        /// <summary>
        /// Gets Id.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.IdValue Id
        {
            get
            {
                if (this.TryGetProperty(IdJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Schema1.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonUri Schema1
        {
            get
            {
                if (this.TryGetProperty(Schema1JsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Anchor.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.AnchorValue Anchor
        {
            get
            {
                if (this.TryGetProperty(AnchorJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Ref.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonUriReference Ref
        {
            get
            {
                if (this.TryGetProperty(RefJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets RecursiveRef.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonUriReference RecursiveRef
        {
            get
            {
                if (this.TryGetProperty(RecursiveRefJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets RecursiveAnchor.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.RecursiveAnchorValue RecursiveAnchor
        {
            get
            {
                if (this.TryGetProperty(RecursiveAnchorJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Vocabulary.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.VocabularyValue Vocabulary
        {
            get
            {
                if (this.TryGetProperty(VocabularyJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Comment.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Comment
        {
            get
            {
                if (this.TryGetProperty(CommentJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Defs.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.DefsValue Defs
        {
            get
            {
                if (this.TryGetProperty(DefsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets AdditionalItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema AdditionalItems
        {
            get
            {
                if (this.TryGetProperty(AdditionalItemsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets UnevaluatedItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema UnevaluatedItems
        {
            get
            {
                if (this.TryGetProperty(UnevaluatedItemsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Items.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.ItemsEntity Items
        {
            get
            {
                if (this.TryGetProperty(ItemsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Contains.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema Contains
        {
            get
            {
                if (this.TryGetProperty(ContainsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets AdditionalProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema AdditionalProperties
        {
            get
            {
                if (this.TryGetProperty(AdditionalPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets UnevaluatedProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema UnevaluatedProperties
        {
            get
            {
                if (this.TryGetProperty(UnevaluatedPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Properties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.PropertiesValue Properties
        {
            get
            {
                if (this.TryGetProperty(PropertiesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets PatternProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.PatternPropertiesValue PatternProperties
        {
            get
            {
                if (this.TryGetProperty(PatternPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets DependentSchemas.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.DependentSchemasValue DependentSchemas
        {
            get
            {
                if (this.TryGetProperty(DependentSchemasJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets PropertyNames.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema PropertyNames
        {
            get
            {
                if (this.TryGetProperty(PropertyNamesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets If.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema If
        {
            get
            {
                if (this.TryGetProperty(IfJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Then.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema Then
        {
            get
            {
                if (this.TryGetProperty(ThenJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Else.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema Else
        {
            get
            {
                if (this.TryGetProperty(ElseJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets AllOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.SchemaArray AllOf
        {
            get
            {
                if (this.TryGetProperty(AllOfJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets AnyOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.SchemaArray AnyOf
        {
            get
            {
                if (this.TryGetProperty(AnyOfJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets OneOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.SchemaArray OneOf
        {
            get
            {
                if (this.TryGetProperty(OneOfJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Not.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema Not
        {
            get
            {
                if (this.TryGetProperty(NotJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MultipleOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.MultipleOfValue MultipleOf
        {
            get
            {
                if (this.TryGetProperty(MultipleOfJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Maximum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber Maximum
        {
            get
            {
                if (this.TryGetProperty(MaximumJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ExclusiveMaximum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber ExclusiveMaximum
        {
            get
            {
                if (this.TryGetProperty(ExclusiveMaximumJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Minimum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber Minimum
        {
            get
            {
                if (this.TryGetProperty(MinimumJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ExclusiveMinimum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber ExclusiveMinimum
        {
            get
            {
                if (this.TryGetProperty(ExclusiveMinimumJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxLength.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxLength
        {
            get
            {
                if (this.TryGetProperty(MaxLengthJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinLength.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity MinLength
        {
            get
            {
                if (this.TryGetProperty(MinLengthJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Pattern.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonRegex Pattern
        {
            get
            {
                if (this.TryGetProperty(PatternJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxItems
        {
            get
            {
                if (this.TryGetProperty(MaxItemsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity MinItems
        {
            get
            {
                if (this.TryGetProperty(MinItemsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets UniqueItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.UniqueItemsValue UniqueItems
        {
            get
            {
                if (this.TryGetProperty(UniqueItemsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxContains.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxContains
        {
            get
            {
                if (this.TryGetProperty(MaxContainsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinContains.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.MinContainsEntity MinContains
        {
            get
            {
                if (this.TryGetProperty(MinContainsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxProperties
        {
            get
            {
                if (this.TryGetProperty(MaxPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity MinProperties
        {
            get
            {
                if (this.TryGetProperty(MinPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Required.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.JsonStringArray Required
        {
            get
            {
                if (this.TryGetProperty(RequiredJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets DependentRequired.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.DependentRequiredValue DependentRequired
        {
            get
            {
                if (this.TryGetProperty(DependentRequiredJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Const.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonAny Const
        {
            get
            {
                if (this.TryGetProperty(ConstJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Enum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.EnumArray Enum
        {
            get
            {
                if (this.TryGetProperty(EnumJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Type.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.TypeEntity Type
        {
            get
            {
                if (this.TryGetProperty(TypeJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Title.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Title
        {
            get
            {
                if (this.TryGetProperty(TitleJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Description.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Description
        {
            get
            {
                if (this.TryGetProperty(DescriptionJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Default.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonAny Default
        {
            get
            {
                if (this.TryGetProperty(DefaultJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Deprecated.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.DeprecatedValue Deprecated
        {
            get
            {
                if (this.TryGetProperty(DeprecatedJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ReadOnly.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.ReadOnlyValue ReadOnly
        {
            get
            {
                if (this.TryGetProperty(ReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets WriteOnly.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.WriteOnlyValue WriteOnly
        {
            get
            {
                if (this.TryGetProperty(WriteOnlyJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Examples.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.ExamplesArray Examples
        {
            get
            {
                if (this.TryGetProperty(ExamplesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Format.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Format
        {
            get
            {
                if (this.TryGetProperty(FormatJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ContentMediaType.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString ContentMediaType
        {
            get
            {
                if (this.TryGetProperty(ContentMediaTypeJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ContentEncoding.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString ContentEncoding
        {
            get
            {
                if (this.TryGetProperty(ContentEncodingJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ContentSchema.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema ContentSchema
        {
            get
            {
                if (this.TryGetProperty(ContentSchemaJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Definitions.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema.DefinitionsValue Definitions
        {
            get
            {
                if (this.TryGetProperty(DefinitionsJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Dependencies.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema.DependenciesValue Dependencies
        {
            get
            {
                if (this.TryGetProperty(DependenciesJsonPropertyName, out JsonAny result))
                {
                    return result;
                }

                return default;
            }
        }

                    /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
                this.objectBacking is null
            
    
                                    &&
                    this.booleanBacking is null
    
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
              
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

    
    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return JsonBoolean.BoolToJsonElement(booleanBacking);
                }

    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

    
    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                }

    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

    
    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return new JsonAny(booleanBacking);
                }

    
                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

    
                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonArray"/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
    
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNumber"/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
                    return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonString"/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
                    return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonBoolean"/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return new JsonBoolean(booleanBacking);
                }
                    return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNull"/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new Schema(value.AsJsonElement);
            }

            return value.As<Schema>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(Schema value)
        {
            return value.AsAny;
        }

    
    
        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonObject value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(Schema value)
        {
            return value.AsObject;
        }

    
    
    
    
        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(bool value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to bool.
        /// </summary>
        /// <param name="boolean">The value from which to convert.</param>
        public static implicit operator bool(Schema boolean)
        {
            return boolean.AsBoolean.GetBoolean();
        }

        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonBoolean value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to bool.
        /// </summary>
        /// <param name="boolean">The value from which to convert.</param>
        public static implicit operator JsonBoolean(Schema boolean)
        {
            return boolean.AsBoolean;
        }

    
    
        
        /// <summary>
        /// Sets $id.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithId(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.IdValue value)
        {
            return this.SetProperty(IdJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $schema.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithSchema1(Menes.Json.JsonUri value)
        {
            return this.SetProperty(Schema1JsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $anchor.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAnchor(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.AnchorValue value)
        {
            return this.SetProperty(AnchorJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $ref.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRef(Menes.Json.JsonUriReference value)
        {
            return this.SetProperty(RefJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $recursiveRef.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRecursiveRef(Menes.Json.JsonUriReference value)
        {
            return this.SetProperty(RecursiveRefJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $recursiveAnchor.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRecursiveAnchor(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.RecursiveAnchorValue value)
        {
            return this.SetProperty(RecursiveAnchorJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $vocabulary.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithVocabulary(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.VocabularyValue value)
        {
            return this.SetProperty(VocabularyJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $comment.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithComment(Menes.Json.JsonString value)
        {
            return this.SetProperty(CommentJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $defs.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDefs(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core.DefsValue value)
        {
            return this.SetProperty(DefsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets additionalItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAdditionalItems(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(AdditionalItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets unevaluatedItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithUnevaluatedItems(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(UnevaluatedItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets items.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithItems(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.ItemsEntity value)
        {
            return this.SetProperty(ItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contains.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContains(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ContainsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets additionalProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAdditionalProperties(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(AdditionalPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets unevaluatedProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithUnevaluatedProperties(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(UnevaluatedPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets properties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithProperties(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.PropertiesValue value)
        {
            return this.SetProperty(PropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets patternProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithPatternProperties(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.PatternPropertiesValue value)
        {
            return this.SetProperty(PatternPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets dependentSchemas.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDependentSchemas(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.DependentSchemasValue value)
        {
            return this.SetProperty(DependentSchemasJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets propertyNames.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithPropertyNames(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(PropertyNamesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets if.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithIf(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(IfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets then.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithThen(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ThenJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets else.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithElse(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ElseJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets allOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAllOf(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.SchemaArray value)
        {
            return this.SetProperty(AllOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets anyOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAnyOf(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.SchemaArray value)
        {
            return this.SetProperty(AnyOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets oneOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithOneOf(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator.SchemaArray value)
        {
            return this.SetProperty(OneOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets not.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithNot(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(NotJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets multipleOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMultipleOf(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.MultipleOfValue value)
        {
            return this.SetProperty(MultipleOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maximum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaximum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(MaximumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets exclusiveMaximum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithExclusiveMaximum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(ExclusiveMaximumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minimum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinimum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(MinimumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets exclusiveMinimum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithExclusiveMinimum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(ExclusiveMinimumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxLength.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxLength(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxLengthJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minLength.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinLength(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity value)
        {
            return this.SetProperty(MinLengthJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets pattern.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithPattern(Menes.Json.JsonRegex value)
        {
            return this.SetProperty(PatternJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxItems(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinItems(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity value)
        {
            return this.SetProperty(MinItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets uniqueItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithUniqueItems(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.UniqueItemsValue value)
        {
            return this.SetProperty(UniqueItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxContains.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxContains(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxContainsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minContains.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinContains(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.MinContainsEntity value)
        {
            return this.SetProperty(MinContainsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxProperties(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinProperties(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity value)
        {
            return this.SetProperty(MinPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets required.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRequired(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.JsonStringArray value)
        {
            return this.SetProperty(RequiredJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets dependentRequired.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDependentRequired(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.DependentRequiredValue value)
        {
            return this.SetProperty(DependentRequiredJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets const.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithConst(Menes.Json.JsonAny value)
        {
            return this.SetProperty(ConstJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets enum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithEnum(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.EnumArray value)
        {
            return this.SetProperty(EnumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets type.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithType(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.TypeEntity value)
        {
            return this.SetProperty(TypeJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets title.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithTitle(Menes.Json.JsonString value)
        {
            return this.SetProperty(TitleJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets description.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDescription(Menes.Json.JsonString value)
        {
            return this.SetProperty(DescriptionJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets default.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDefault(Menes.Json.JsonAny value)
        {
            return this.SetProperty(DefaultJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets deprecated.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDeprecated(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.DeprecatedValue value)
        {
            return this.SetProperty(DeprecatedJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets readOnly.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithReadOnly(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.ReadOnlyValue value)
        {
            return this.SetProperty(ReadOnlyJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets writeOnly.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithWriteOnly(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.WriteOnlyValue value)
        {
            return this.SetProperty(WriteOnlyJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets examples.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithExamples(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData.ExamplesArray value)
        {
            return this.SetProperty(ExamplesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets format.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithFormat(Menes.Json.JsonString value)
        {
            return this.SetProperty(FormatJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contentMediaType.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContentMediaType(Menes.Json.JsonString value)
        {
            return this.SetProperty(ContentMediaTypeJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contentEncoding.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContentEncoding(Menes.Json.JsonString value)
        {
            return this.SetProperty(ContentEncodingJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contentSchema.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContentSchema(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ContentSchemaJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets definitions.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDefinitions(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema.DefinitionsValue value)
        {
            return this.SetProperty(DefinitionsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets dependencies.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDependencies(IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema.DependenciesValue value)
        {
            return this.SetProperty(DependenciesJsonPropertyName, value);
        }

        
    
        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

    
    
    
    
                if (this.booleanBacking is bool booleanBacking)
            {
                writer.WriteBooleanValue(booleanBacking);
                return;
            }
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

    
    
    
        /// <inheritdoc/>
        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

                /// <inheritdoc/>
        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(string name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
        }

        /// <inheritdoc/>
        public bool HasDefault(JsonEncodedText name)
        {
            return __MenesDefaults.TryGetValue(name, out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(string name)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<char> name)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<byte> utf8name)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
        }

        
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(Schema other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }

    
        /// <inheritdoc/>
        public bool HasProperty(JsonEncodedText name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(JsonEncodedText name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(JsonEncodedText name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

    
    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<Schema, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

    
                JsonValueKind valueKind = this.ValueKind;
    
    
                    result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
        
        
        
        
    
    
    
        
    
    
    
                result = this.ValidateAllOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
    
    
    
                result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

    

                return result;
        }

    
    
            private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
        {
            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder =
                ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();

                    builder.Add(RecursiveAnchorJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(DefsJsonPropertyName, JsonAny.Parse("{}"));
                    builder.Add(PropertiesJsonPropertyName, JsonAny.Parse("{}"));
                    builder.Add(PatternPropertiesJsonPropertyName, JsonAny.Parse("{}"));
                    builder.Add(MinLengthJsonPropertyName, JsonAny.Parse("0"));
                    builder.Add(MinItemsJsonPropertyName, JsonAny.Parse("0"));
                    builder.Add(UniqueItemsJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(MinContainsJsonPropertyName, JsonAny.Parse("1"));
                    builder.Add(MinPropertiesJsonPropertyName, JsonAny.Parse("0"));
                    builder.Add(RequiredJsonPropertyName, JsonAny.Parse("[]"));
                    builder.Add(DeprecatedJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(ReadOnlyJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(WriteOnlyJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(DefinitionsJsonPropertyName, JsonAny.Parse("{}"));
                    return builder.ToImmutable();
        }
    
    
    
        private static ImmutableDictionary<JsonEncodedText, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<JsonEncodedText, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>>();

                    builder.Add(
                DefinitionsJsonPropertyName,
                (that, validationContext, level) =>
                {
                    DefinitionsValue property = that.Definitions;
                    return property.Validate(validationContext, level);
                });
                    builder.Add(
                DependenciesJsonPropertyName,
                (that, validationContext, level) =>
                {
                    DependenciesValue property = that.Dependencies;
                    return property.Validate(validationContext, level);
                });
        
            return builder.ToImmutable();
        }

    
    
    
            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        
        
        
            foreach (Property property in this.EnumerateObject())
            {
                JsonEncodedText propertyName = property.NameAsJsonEncodedText;

        
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<Schema, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    result = propertyValidator(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

            
                }
        
        
        
        
        
        
                    }

        
        
        
            return result;
        }

    
            

            

            
        private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

                

            ValidationContext allOfResult0 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Core>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult1 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Applicator>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult1.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult2 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult2.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult3 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.MetaData>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult3.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult4 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Format>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult4.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult5 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Content>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult5.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult5, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult5, level >= ValidationLevel.Detailed);
            }

        
            return result;
        }

            

            

    
    
    
            
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        
                
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        
        
        
        
                
            ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
            {
                return validationContext;
            }

            if (localResultBoolean.IsValid)
            {
                isValid = true;
            }

        
        
            result = result.MergeResults(
                isValid,
                level
        
                
                , localResultObject
        
        
        
                
                , localResultBoolean
        
                        );

            return result;
        }

    
    
    
    
        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct DefinitionsValue :
            IJsonObject<DefinitionsValue>,
                    IEquatable<DefinitionsValue>
    {
    
    
    
    
    
    
    

    
        private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
    
    
    
    
    
        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsValue"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public DefinitionsValue(JsonElement value)
        {
            this.jsonElementBacking = value;
                this.objectBacking = default;
            /* endif */
                            }

            /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsValue"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public DefinitionsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
                                        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsValue"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public DefinitionsValue(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

                                        }
    
    
    
    
    
    
            /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
                this.objectBacking is null
            
    
                
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
              
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

    
    
    
    
    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

    
    
    
    
    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

    
    
    
    
    
                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

    
                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonArray"/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
    
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNumber"/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
                    return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonString"/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
                    return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonBoolean"/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
                    return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNull"/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DefinitionsValue(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new DefinitionsValue(value.AsJsonElement);
            }

            return value.As<DefinitionsValue>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(DefinitionsValue value)
        {
            return value.AsAny;
        }

    
    
        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DefinitionsValue(JsonObject value)
        {
            return new DefinitionsValue(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(DefinitionsValue value)
        {
            return value.AsObject;
        }

    
    
    
    
    
        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

    
    
    
    
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

    
    
    
        /// <inheritdoc/>
        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(DefinitionsValue other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }

    
        /// <inheritdoc/>
        public bool HasProperty(JsonEncodedText name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public DefinitionsValue SetProperty<TValue>(JsonEncodedText name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue RemoveProperty(JsonEncodedText name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

    
    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<DefinitionsValue, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

    
                JsonValueKind valueKind = this.ValueKind;
    
    
                    result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
        
        
        
        
    
    
    
        
    
    
    
    
    
    
                result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

    

                return result;
        }

    
    
    
    
    
    
    
            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

                    result = result.UsingEvaluatedProperties();
        
        
        
            foreach (Property property in this.EnumerateObject())
            {
                JsonEncodedText propertyName = property.NameAsJsonEncodedText;

        
        
        
        
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                {
                    result = property.ValueAs<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyName);
                }
        
        
        
                    }

        
        
        
            return result;
        }

    
            

            

            

            

    
    
    
            
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        
                
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        
        
        
        
        
        
            result = result.MergeResults(
                isValid,
                level
        
                
                , localResultObject
        
        
        
        
                        );

            return result;
        }

    
    
    
    }
    

    
    
        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct DependenciesValue :
            IJsonObject<DependenciesValue>,
                    IEquatable<DependenciesValue>
    {
    
    
    
    
    
    
    

    
        private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
    
    
    
    
    
        /// <summary>
        /// Initializes a new instance of the <see cref="DependenciesValue"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public DependenciesValue(JsonElement value)
        {
            this.jsonElementBacking = value;
                this.objectBacking = default;
            /* endif */
                            }

            /// <summary>
        /// Initializes a new instance of the <see cref="DependenciesValue"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public DependenciesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
                                        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DependenciesValue"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public DependenciesValue(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

                                        }
    
    
    
    
    
    
            /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
                this.objectBacking is null
            
    
                
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
              
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

    
    
    
    
    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

    
    
    
    
    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

    
    
    
    
    
                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

    
                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonArray"/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
    
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNumber"/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
                    return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonString"/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
                    return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonBoolean"/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
                    return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNull"/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DependenciesValue(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new DependenciesValue(value.AsJsonElement);
            }

            return value.As<DependenciesValue>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(DependenciesValue value)
        {
            return value.AsAny;
        }

    
    
        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DependenciesValue(JsonObject value)
        {
            return new DependenciesValue(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(DependenciesValue value)
        {
            return value.AsObject;
        }

    
    
    
    
    
        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

    
    
    
    
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

    
    
    
        /// <inheritdoc/>
        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(DependenciesValue other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }

    
        /// <inheritdoc/>
        public bool HasProperty(JsonEncodedText name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public DependenciesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue RemoveProperty(JsonEncodedText name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

    
    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<DependenciesValue, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

    
                JsonValueKind valueKind = this.ValueKind;
    
    
                    result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
        
        
        
        
    
    
    
        
    
    
    
    
    
    
                result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

    

                return result;
        }

    
    
    
    
    
    
    
            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

                    result = result.UsingEvaluatedProperties();
        
        
        
            foreach (Property property in this.EnumerateObject())
            {
                JsonEncodedText propertyName = property.NameAsJsonEncodedText;

        
        
        
        
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                {
                    result = property.ValueAs<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyName);
                }
        
        
        
                    }

        
        
        
            return result;
        }

    
            

            

            

            

    
    
    
            
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        
                
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        
        
        
        
        
        
            result = result.MergeResults(
                isValid,
                level
        
                
                , localResultObject
        
        
        
        
                        );

            return result;
        }

    
    
    
    
        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct AdditionalPropertiesEntity :
                    IJsonValue,
            IEquatable<AdditionalPropertiesEntity>
    {
    
    
    
    
    
    
    

    
        private readonly JsonElement jsonElementBacking;

    
    
    
    
    
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public AdditionalPropertiesEntity(JsonElement value)
        {
            this.jsonElementBacking = value;
                            }

    
    
    
    
    
    
            /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
    
                
        true
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
    
    
    
    
    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
    
    
    
    
    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
    
    
    
    
    
                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
    
                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonArray"/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
    
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNumber"/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
                    return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonString"/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
                    return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonBoolean"/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
                    return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref="JsonNull"/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new AdditionalPropertiesEntity(value.AsJsonElement);
            }

            return value.As<AdditionalPropertiesEntity>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(AdditionalPropertiesEntity value)
        {
            return value.AsAny;
        }

    
    
    
    
    
    
        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
    
    
    
    
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
    
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(AdditionalPropertiesEntity other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }

    
    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<AdditionalPropertiesEntity, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

    
    
    
    
    
        
    
    
    
    
                result = this.ValidateAnyOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
    
    
    

                return result;
        }

    
    
    
    
    
    
    
    
            

            
        private ValidationContext ValidateAnyOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            bool foundValid = false;

                

            ValidationContext anyOfResult0 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Schema>().Validate(validationContext.CreateChildContext(), level);

            if (anyOfResult0.IsValid)
            {
                result = result.MergeChildContext(anyOfResult0, level >= ValidationLevel.Detailed);
                            if (level == ValidationLevel.Flag)
                {
                    return result;
                }
                else
                {
                    foundValid = true;
                }
                        }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult0);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult0);
                }
            }

                

            ValidationContext anyOfResult1 = this.As<IdFeature.ValidUseOfEmptyFragmentsInLocationIndependentId.Validation.JsonStringArray>().Validate(validationContext.CreateChildContext(), level);

            if (anyOfResult1.IsValid)
            {
                result = result.MergeChildContext(anyOfResult1, level >= ValidationLevel.Detailed);
                            if (level == ValidationLevel.Flag)
                {
                    return result;
                }
                else
                {
                    foundValid = true;
                }
                        }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult1);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult1);
                }
            }

        
            if (foundValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, "Validation 10.2.1.2. anyOf - validated against the anyOf schema.");
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

            

            

            

    
    
    
    
    
    
    }
    

    
    }
    

    
    }
    }
    