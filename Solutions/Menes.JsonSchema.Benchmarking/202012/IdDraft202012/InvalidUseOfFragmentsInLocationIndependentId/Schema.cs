
    //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId
{
    using System;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct Schema :
            IJsonObject<Schema>,
                    IEquatable<Schema>
    {

        
    
        
        /// <summary>
        /// JSON property name for <see cref="Id"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> IdUtf8JsonPropertyName = new byte[] { 36, 105, 100 };

        /// <summary>
        /// JSON property name for <see cref="Id"/>.
        /// </summary>
        public static readonly string IdJsonPropertyName = "$id";

        
        /// <summary>
        /// JSON property name for <see cref="Schema1"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> Schema1Utf8JsonPropertyName = new byte[] { 36, 115, 99, 104, 101, 109, 97 };

        /// <summary>
        /// JSON property name for <see cref="Schema1"/>.
        /// </summary>
        public static readonly string Schema1JsonPropertyName = "$schema";

        
        /// <summary>
        /// JSON property name for <see cref="Ref"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[] { 36, 114, 101, 102 };

        /// <summary>
        /// JSON property name for <see cref="Ref"/>.
        /// </summary>
        public static readonly string RefJsonPropertyName = "$ref";

        
        /// <summary>
        /// JSON property name for <see cref="Anchor"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> AnchorUtf8JsonPropertyName = new byte[] { 36, 97, 110, 99, 104, 111, 114 };

        /// <summary>
        /// JSON property name for <see cref="Anchor"/>.
        /// </summary>
        public static readonly string AnchorJsonPropertyName = "$anchor";

        
        /// <summary>
        /// JSON property name for <see cref="DynamicRef"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DynamicRefUtf8JsonPropertyName = new byte[] { 36, 100, 121, 110, 97, 109, 105, 99, 82, 101, 102 };

        /// <summary>
        /// JSON property name for <see cref="DynamicRef"/>.
        /// </summary>
        public static readonly string DynamicRefJsonPropertyName = "$dynamicRef";

        
        /// <summary>
        /// JSON property name for <see cref="DynamicAnchor"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DynamicAnchorUtf8JsonPropertyName = new byte[] { 36, 100, 121, 110, 97, 109, 105, 99, 65, 110, 99, 104, 111, 114 };

        /// <summary>
        /// JSON property name for <see cref="DynamicAnchor"/>.
        /// </summary>
        public static readonly string DynamicAnchorJsonPropertyName = "$dynamicAnchor";

        
        /// <summary>
        /// JSON property name for <see cref="Vocabulary"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> VocabularyUtf8JsonPropertyName = new byte[] { 36, 118, 111, 99, 97, 98, 117, 108, 97, 114, 121 };

        /// <summary>
        /// JSON property name for <see cref="Vocabulary"/>.
        /// </summary>
        public static readonly string VocabularyJsonPropertyName = "$vocabulary";

        
        /// <summary>
        /// JSON property name for <see cref="Comment"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> CommentUtf8JsonPropertyName = new byte[] { 36, 99, 111, 109, 109, 101, 110, 116 };

        /// <summary>
        /// JSON property name for <see cref="Comment"/>.
        /// </summary>
        public static readonly string CommentJsonPropertyName = "$comment";

        
        /// <summary>
        /// JSON property name for <see cref="Defs"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DefsUtf8JsonPropertyName = new byte[] { 36, 100, 101, 102, 115 };

        /// <summary>
        /// JSON property name for <see cref="Defs"/>.
        /// </summary>
        public static readonly string DefsJsonPropertyName = "$defs";

        
        /// <summary>
        /// JSON property name for <see cref="PrefixItems"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PrefixItemsUtf8JsonPropertyName = new byte[] { 112, 114, 101, 102, 105, 120, 73, 116, 101, 109, 115 };

        /// <summary>
        /// JSON property name for <see cref="PrefixItems"/>.
        /// </summary>
        public static readonly string PrefixItemsJsonPropertyName = "prefixItems";

        
        /// <summary>
        /// JSON property name for <see cref="Items"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ItemsUtf8JsonPropertyName = new byte[] { 105, 116, 101, 109, 115 };

        /// <summary>
        /// JSON property name for <see cref="Items"/>.
        /// </summary>
        public static readonly string ItemsJsonPropertyName = "items";

        
        /// <summary>
        /// JSON property name for <see cref="Contains"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContainsUtf8JsonPropertyName = new byte[] { 99, 111, 110, 116, 97, 105, 110, 115 };

        /// <summary>
        /// JSON property name for <see cref="Contains"/>.
        /// </summary>
        public static readonly string ContainsJsonPropertyName = "contains";

        
        /// <summary>
        /// JSON property name for <see cref="AdditionalProperties"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> AdditionalPropertiesUtf8JsonPropertyName = new byte[] { 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="AdditionalProperties"/>.
        /// </summary>
        public static readonly string AdditionalPropertiesJsonPropertyName = "additionalProperties";

        
        /// <summary>
        /// JSON property name for <see cref="Properties"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PropertiesUtf8JsonPropertyName = new byte[] { 112, 114, 111, 112, 101, 114, 116, 105, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="Properties"/>.
        /// </summary>
        public static readonly string PropertiesJsonPropertyName = "properties";

        
        /// <summary>
        /// JSON property name for <see cref="PatternProperties"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PatternPropertiesUtf8JsonPropertyName = new byte[] { 112, 97, 116, 116, 101, 114, 110, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="PatternProperties"/>.
        /// </summary>
        public static readonly string PatternPropertiesJsonPropertyName = "patternProperties";

        
        /// <summary>
        /// JSON property name for <see cref="DependentSchemas"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DependentSchemasUtf8JsonPropertyName = new byte[] { 100, 101, 112, 101, 110, 100, 101, 110, 116, 83, 99, 104, 101, 109, 97, 115 };

        /// <summary>
        /// JSON property name for <see cref="DependentSchemas"/>.
        /// </summary>
        public static readonly string DependentSchemasJsonPropertyName = "dependentSchemas";

        
        /// <summary>
        /// JSON property name for <see cref="PropertyNames"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PropertyNamesUtf8JsonPropertyName = new byte[] { 112, 114, 111, 112, 101, 114, 116, 121, 78, 97, 109, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="PropertyNames"/>.
        /// </summary>
        public static readonly string PropertyNamesJsonPropertyName = "propertyNames";

        
        /// <summary>
        /// JSON property name for <see cref="If"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> IfUtf8JsonPropertyName = new byte[] { 105, 102 };

        /// <summary>
        /// JSON property name for <see cref="If"/>.
        /// </summary>
        public static readonly string IfJsonPropertyName = "if";

        
        /// <summary>
        /// JSON property name for <see cref="Then"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ThenUtf8JsonPropertyName = new byte[] { 116, 104, 101, 110 };

        /// <summary>
        /// JSON property name for <see cref="Then"/>.
        /// </summary>
        public static readonly string ThenJsonPropertyName = "then";

        
        /// <summary>
        /// JSON property name for <see cref="Else"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ElseUtf8JsonPropertyName = new byte[] { 101, 108, 115, 101 };

        /// <summary>
        /// JSON property name for <see cref="Else"/>.
        /// </summary>
        public static readonly string ElseJsonPropertyName = "else";

        
        /// <summary>
        /// JSON property name for <see cref="AllOf"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> AllOfUtf8JsonPropertyName = new byte[] { 97, 108, 108, 79, 102 };

        /// <summary>
        /// JSON property name for <see cref="AllOf"/>.
        /// </summary>
        public static readonly string AllOfJsonPropertyName = "allOf";

        
        /// <summary>
        /// JSON property name for <see cref="AnyOf"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> AnyOfUtf8JsonPropertyName = new byte[] { 97, 110, 121, 79, 102 };

        /// <summary>
        /// JSON property name for <see cref="AnyOf"/>.
        /// </summary>
        public static readonly string AnyOfJsonPropertyName = "anyOf";

        
        /// <summary>
        /// JSON property name for <see cref="OneOf"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> OneOfUtf8JsonPropertyName = new byte[] { 111, 110, 101, 79, 102 };

        /// <summary>
        /// JSON property name for <see cref="OneOf"/>.
        /// </summary>
        public static readonly string OneOfJsonPropertyName = "oneOf";

        
        /// <summary>
        /// JSON property name for <see cref="Not"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> NotUtf8JsonPropertyName = new byte[] { 110, 111, 116 };

        /// <summary>
        /// JSON property name for <see cref="Not"/>.
        /// </summary>
        public static readonly string NotJsonPropertyName = "not";

        
        /// <summary>
        /// JSON property name for <see cref="UnevaluatedItems"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> UnevaluatedItemsUtf8JsonPropertyName = new byte[] { 117, 110, 101, 118, 97, 108, 117, 97, 116, 101, 100, 73, 116, 101, 109, 115 };

        /// <summary>
        /// JSON property name for <see cref="UnevaluatedItems"/>.
        /// </summary>
        public static readonly string UnevaluatedItemsJsonPropertyName = "unevaluatedItems";

        
        /// <summary>
        /// JSON property name for <see cref="UnevaluatedProperties"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> UnevaluatedPropertiesUtf8JsonPropertyName = new byte[] { 117, 110, 101, 118, 97, 108, 117, 97, 116, 101, 100, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="UnevaluatedProperties"/>.
        /// </summary>
        public static readonly string UnevaluatedPropertiesJsonPropertyName = "unevaluatedProperties";

        
        /// <summary>
        /// JSON property name for <see cref="Type"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[] { 116, 121, 112, 101 };

        /// <summary>
        /// JSON property name for <see cref="Type"/>.
        /// </summary>
        public static readonly string TypeJsonPropertyName = "type";

        
        /// <summary>
        /// JSON property name for <see cref="Const"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ConstUtf8JsonPropertyName = new byte[] { 99, 111, 110, 115, 116 };

        /// <summary>
        /// JSON property name for <see cref="Const"/>.
        /// </summary>
        public static readonly string ConstJsonPropertyName = "const";

        
        /// <summary>
        /// JSON property name for <see cref="Enum"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> EnumUtf8JsonPropertyName = new byte[] { 101, 110, 117, 109 };

        /// <summary>
        /// JSON property name for <see cref="Enum"/>.
        /// </summary>
        public static readonly string EnumJsonPropertyName = "enum";

        
        /// <summary>
        /// JSON property name for <see cref="MultipleOf"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MultipleOfUtf8JsonPropertyName = new byte[] { 109, 117, 108, 116, 105, 112, 108, 101, 79, 102 };

        /// <summary>
        /// JSON property name for <see cref="MultipleOf"/>.
        /// </summary>
        public static readonly string MultipleOfJsonPropertyName = "multipleOf";

        
        /// <summary>
        /// JSON property name for <see cref="Maximum"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MaximumUtf8JsonPropertyName = new byte[] { 109, 97, 120, 105, 109, 117, 109 };

        /// <summary>
        /// JSON property name for <see cref="Maximum"/>.
        /// </summary>
        public static readonly string MaximumJsonPropertyName = "maximum";

        
        /// <summary>
        /// JSON property name for <see cref="ExclusiveMaximum"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ExclusiveMaximumUtf8JsonPropertyName = new byte[] { 101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 97, 120, 105, 109, 117, 109 };

        /// <summary>
        /// JSON property name for <see cref="ExclusiveMaximum"/>.
        /// </summary>
        public static readonly string ExclusiveMaximumJsonPropertyName = "exclusiveMaximum";

        
        /// <summary>
        /// JSON property name for <see cref="Minimum"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MinimumUtf8JsonPropertyName = new byte[] { 109, 105, 110, 105, 109, 117, 109 };

        /// <summary>
        /// JSON property name for <see cref="Minimum"/>.
        /// </summary>
        public static readonly string MinimumJsonPropertyName = "minimum";

        
        /// <summary>
        /// JSON property name for <see cref="ExclusiveMinimum"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ExclusiveMinimumUtf8JsonPropertyName = new byte[] { 101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 105, 110, 105, 109, 117, 109 };

        /// <summary>
        /// JSON property name for <see cref="ExclusiveMinimum"/>.
        /// </summary>
        public static readonly string ExclusiveMinimumJsonPropertyName = "exclusiveMinimum";

        
        /// <summary>
        /// JSON property name for <see cref="MaxLength"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MaxLengthUtf8JsonPropertyName = new byte[] { 109, 97, 120, 76, 101, 110, 103, 116, 104 };

        /// <summary>
        /// JSON property name for <see cref="MaxLength"/>.
        /// </summary>
        public static readonly string MaxLengthJsonPropertyName = "maxLength";

        
        /// <summary>
        /// JSON property name for <see cref="MinLength"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MinLengthUtf8JsonPropertyName = new byte[] { 109, 105, 110, 76, 101, 110, 103, 116, 104 };

        /// <summary>
        /// JSON property name for <see cref="MinLength"/>.
        /// </summary>
        public static readonly string MinLengthJsonPropertyName = "minLength";

        
        /// <summary>
        /// JSON property name for <see cref="Pattern"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PatternUtf8JsonPropertyName = new byte[] { 112, 97, 116, 116, 101, 114, 110 };

        /// <summary>
        /// JSON property name for <see cref="Pattern"/>.
        /// </summary>
        public static readonly string PatternJsonPropertyName = "pattern";

        
        /// <summary>
        /// JSON property name for <see cref="MaxItems"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MaxItemsUtf8JsonPropertyName = new byte[] { 109, 97, 120, 73, 116, 101, 109, 115 };

        /// <summary>
        /// JSON property name for <see cref="MaxItems"/>.
        /// </summary>
        public static readonly string MaxItemsJsonPropertyName = "maxItems";

        
        /// <summary>
        /// JSON property name for <see cref="MinItems"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MinItemsUtf8JsonPropertyName = new byte[] { 109, 105, 110, 73, 116, 101, 109, 115 };

        /// <summary>
        /// JSON property name for <see cref="MinItems"/>.
        /// </summary>
        public static readonly string MinItemsJsonPropertyName = "minItems";

        
        /// <summary>
        /// JSON property name for <see cref="UniqueItems"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> UniqueItemsUtf8JsonPropertyName = new byte[] { 117, 110, 105, 113, 117, 101, 73, 116, 101, 109, 115 };

        /// <summary>
        /// JSON property name for <see cref="UniqueItems"/>.
        /// </summary>
        public static readonly string UniqueItemsJsonPropertyName = "uniqueItems";

        
        /// <summary>
        /// JSON property name for <see cref="MaxContains"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MaxContainsUtf8JsonPropertyName = new byte[] { 109, 97, 120, 67, 111, 110, 116, 97, 105, 110, 115 };

        /// <summary>
        /// JSON property name for <see cref="MaxContains"/>.
        /// </summary>
        public static readonly string MaxContainsJsonPropertyName = "maxContains";

        
        /// <summary>
        /// JSON property name for <see cref="MinContains"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MinContainsUtf8JsonPropertyName = new byte[] { 109, 105, 110, 67, 111, 110, 116, 97, 105, 110, 115 };

        /// <summary>
        /// JSON property name for <see cref="MinContains"/>.
        /// </summary>
        public static readonly string MinContainsJsonPropertyName = "minContains";

        
        /// <summary>
        /// JSON property name for <see cref="MaxProperties"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MaxPropertiesUtf8JsonPropertyName = new byte[] { 109, 97, 120, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="MaxProperties"/>.
        /// </summary>
        public static readonly string MaxPropertiesJsonPropertyName = "maxProperties";

        
        /// <summary>
        /// JSON property name for <see cref="MinProperties"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MinPropertiesUtf8JsonPropertyName = new byte[] { 109, 105, 110, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="MinProperties"/>.
        /// </summary>
        public static readonly string MinPropertiesJsonPropertyName = "minProperties";

        
        /// <summary>
        /// JSON property name for <see cref="Required"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> RequiredUtf8JsonPropertyName = new byte[] { 114, 101, 113, 117, 105, 114, 101, 100 };

        /// <summary>
        /// JSON property name for <see cref="Required"/>.
        /// </summary>
        public static readonly string RequiredJsonPropertyName = "required";

        
        /// <summary>
        /// JSON property name for <see cref="DependentRequired"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DependentRequiredUtf8JsonPropertyName = new byte[] { 100, 101, 112, 101, 110, 100, 101, 110, 116, 82, 101, 113, 117, 105, 114, 101, 100 };

        /// <summary>
        /// JSON property name for <see cref="DependentRequired"/>.
        /// </summary>
        public static readonly string DependentRequiredJsonPropertyName = "dependentRequired";

        
        /// <summary>
        /// JSON property name for <see cref="Title"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TitleUtf8JsonPropertyName = new byte[] { 116, 105, 116, 108, 101 };

        /// <summary>
        /// JSON property name for <see cref="Title"/>.
        /// </summary>
        public static readonly string TitleJsonPropertyName = "title";

        
        /// <summary>
        /// JSON property name for <see cref="Description"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };

        /// <summary>
        /// JSON property name for <see cref="Description"/>.
        /// </summary>
        public static readonly string DescriptionJsonPropertyName = "description";

        
        /// <summary>
        /// JSON property name for <see cref="Default"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DefaultUtf8JsonPropertyName = new byte[] { 100, 101, 102, 97, 117, 108, 116 };

        /// <summary>
        /// JSON property name for <see cref="Default"/>.
        /// </summary>
        public static readonly string DefaultJsonPropertyName = "default";

        
        /// <summary>
        /// JSON property name for <see cref="Deprecated"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DeprecatedUtf8JsonPropertyName = new byte[] { 100, 101, 112, 114, 101, 99, 97, 116, 101, 100 };

        /// <summary>
        /// JSON property name for <see cref="Deprecated"/>.
        /// </summary>
        public static readonly string DeprecatedJsonPropertyName = "deprecated";

        
        /// <summary>
        /// JSON property name for <see cref="ReadOnly"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ReadOnlyUtf8JsonPropertyName = new byte[] { 114, 101, 97, 100, 79, 110, 108, 121 };

        /// <summary>
        /// JSON property name for <see cref="ReadOnly"/>.
        /// </summary>
        public static readonly string ReadOnlyJsonPropertyName = "readOnly";

        
        /// <summary>
        /// JSON property name for <see cref="WriteOnly"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> WriteOnlyUtf8JsonPropertyName = new byte[] { 119, 114, 105, 116, 101, 79, 110, 108, 121 };

        /// <summary>
        /// JSON property name for <see cref="WriteOnly"/>.
        /// </summary>
        public static readonly string WriteOnlyJsonPropertyName = "writeOnly";

        
        /// <summary>
        /// JSON property name for <see cref="Examples"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ExamplesUtf8JsonPropertyName = new byte[] { 101, 120, 97, 109, 112, 108, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="Examples"/>.
        /// </summary>
        public static readonly string ExamplesJsonPropertyName = "examples";

        
        /// <summary>
        /// JSON property name for <see cref="Format"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> FormatUtf8JsonPropertyName = new byte[] { 102, 111, 114, 109, 97, 116 };

        /// <summary>
        /// JSON property name for <see cref="Format"/>.
        /// </summary>
        public static readonly string FormatJsonPropertyName = "format";

        
        /// <summary>
        /// JSON property name for <see cref="ContentEncoding"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentEncodingUtf8JsonPropertyName = new byte[] { 99, 111, 110, 116, 101, 110, 116, 69, 110, 99, 111, 100, 105, 110, 103 };

        /// <summary>
        /// JSON property name for <see cref="ContentEncoding"/>.
        /// </summary>
        public static readonly string ContentEncodingJsonPropertyName = "contentEncoding";

        
        /// <summary>
        /// JSON property name for <see cref="ContentMediaType"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentMediaTypeUtf8JsonPropertyName = new byte[] { 99, 111, 110, 116, 101, 110, 116, 77, 101, 100, 105, 97, 84, 121, 112, 101 };

        /// <summary>
        /// JSON property name for <see cref="ContentMediaType"/>.
        /// </summary>
        public static readonly string ContentMediaTypeJsonPropertyName = "contentMediaType";

        
        /// <summary>
        /// JSON property name for <see cref="ContentSchema"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentSchemaUtf8JsonPropertyName = new byte[] { 99, 111, 110, 116, 101, 110, 116, 83, 99, 104, 101, 109, 97 };

        /// <summary>
        /// JSON property name for <see cref="ContentSchema"/>.
        /// </summary>
        public static readonly string ContentSchemaJsonPropertyName = "contentSchema";

        
        /// <summary>
        /// JSON property name for <see cref="Definitions"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DefinitionsUtf8JsonPropertyName = new byte[] { 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115 };

        /// <summary>
        /// JSON property name for <see cref="Definitions"/>.
        /// </summary>
        public static readonly string DefinitionsJsonPropertyName = "definitions";

        
        /// <summary>
        /// JSON property name for <see cref="Dependencies"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DependenciesUtf8JsonPropertyName = new byte[] { 100, 101, 112, 101, 110, 100, 101, 110, 99, 105, 101, 115 };

        /// <summary>
        /// JSON property name for <see cref="Dependencies"/>.
        /// </summary>
        public static readonly string DependenciesJsonPropertyName = "dependencies";

        
        /// <summary>
        /// JSON property name for <see cref="RecursiveAnchor"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> RecursiveAnchorUtf8JsonPropertyName = new byte[] { 36, 114, 101, 99, 117, 114, 115, 105, 118, 101, 65, 110, 99, 104, 111, 114 };

        /// <summary>
        /// JSON property name for <see cref="RecursiveAnchor"/>.
        /// </summary>
        public static readonly string RecursiveAnchorJsonPropertyName = "$recursiveAnchor";

        
        /// <summary>
        /// JSON property name for <see cref="RecursiveRef"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> RecursiveRefUtf8JsonPropertyName = new byte[] { 36, 114, 101, 99, 117, 114, 115, 105, 118, 101, 82, 101, 102 };

        /// <summary>
        /// JSON property name for <see cref="RecursiveRef"/>.
        /// </summary>
        public static readonly string RecursiveRefJsonPropertyName = "$recursiveRef";

        
    
    
    
    
    
            private static readonly ImmutableDictionary<string, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
    
            private static readonly ImmutableDictionary<string, JsonAny> __MenesDefaults = BuildDefaults();
    

    
        private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
    
    
    
    
            private readonly bool? booleanBacking;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public Schema(JsonElement value)
        {
            this.jsonElementBacking = value;
                this.objectBacking = default;
                                this.booleanBacking = default;
            }

            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public Schema(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
                                            this.booleanBacking = default;
                }

        /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public Schema(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

                                            this.booleanBacking = default;
                }
    
    
    
    
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="jsonBoolean">The <see cref="JsonBoolean"/> from which to construct the value.</param>
        public Schema(JsonBoolean jsonBoolean)
        {
            if (jsonBoolean.HasJsonElement)
            {
                this.jsonElementBacking = jsonBoolean.AsJsonElement;
                this.booleanBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.booleanBacking = jsonBoolean.GetBoolean();
            }

                    this.objectBacking = default;
                                        }

                /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="boolean">The <see cref="bool"/> from which to construct the value.</param>
        public Schema(bool boolean)
        {
            this.jsonElementBacking = default;
            this.booleanBacking = boolean;

                    this.objectBacking = default;
                                        }

    
    
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core"/> from which to construct the value.</param>
        public Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                                    }
        }
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator"/> from which to construct the value.</param>
        public Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                                    }
        }
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated"/> from which to construct the value.</param>
        public Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                                    }
        }
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation"/> from which to construct the value.</param>
        public Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                                    }
        }
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData"/> from which to construct the value.</param>
        public Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                                    }
        }
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation"/> from which to construct the value.</param>
        public Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                                    }
        }
            /// <summary>
        /// Initializes a new instance of the <see cref="Schema"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content"/> from which to construct the value.</param>
        public Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                                    }
        }
    

    
            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core AsCore
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core" />.
        /// </summary>
        public bool IsCore
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core)this).Validate().IsValid;
            }
        }

            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator AsApplicator
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator" />.
        /// </summary>
        public bool IsApplicator
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator)this).Validate().IsValid;
            }
        }

            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated AsUnevaluated
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated" />.
        /// </summary>
        public bool IsUnevaluated
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated)this).Validate().IsValid;
            }
        }

            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation AsValidation
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation" />.
        /// </summary>
        public bool IsValidation
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation)this).Validate().IsValid;
            }
        }

            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData AsMetaData
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData" />.
        /// </summary>
        public bool IsMetaData
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData)this).Validate().IsValid;
            }
        }

            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation AsFormatAnnotation
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation" />.
        /// </summary>
        public bool IsFormatAnnotation
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation)this).Validate().IsValid;
            }
        }

            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content AsContent
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content" />.
        /// </summary>
        public bool IsContent
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content)this).Validate().IsValid;
            }
        }

    
    
            
        /// <summary>
        /// Gets Id.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.IdEntity Id
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(IdJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(IdUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.IdEntity(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Schema1.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonUri Schema1
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(Schema1JsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(Schema1Utf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonUri(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Ref.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonUriReference Ref
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonUriReference(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Anchor.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue Anchor
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(AnchorJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(AnchorUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets DynamicRef.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonUriReference DynamicRef
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DynamicRefJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DynamicRefUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonUriReference(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets DynamicAnchor.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue DynamicAnchor
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DynamicAnchorJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DynamicAnchorUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Vocabulary.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.VocabularyValue Vocabulary
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(VocabularyJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(VocabularyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.VocabularyValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Comment.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Comment
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Defs.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.DefsValue Defs
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DefsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DefsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.DefsValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets PrefixItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray PrefixItems
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(PrefixItemsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PrefixItemsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Items.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema Items
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ItemsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ItemsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Contains.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema Contains
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ContainsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ContainsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets AdditionalProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema AdditionalProperties
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(AdditionalPropertiesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(AdditionalPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Properties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PropertiesValue Properties
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(PropertiesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PropertiesValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets PatternProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PatternPropertiesValue PatternProperties
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(PatternPropertiesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PatternPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PatternPropertiesValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets DependentSchemas.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.DependentSchemasValue DependentSchemas
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DependentSchemasJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DependentSchemasUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.DependentSchemasValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets PropertyNames.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema PropertyNames
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(PropertyNamesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PropertyNamesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets If.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema If
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(IfJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(IfUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Then.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema Then
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ThenJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ThenUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Else.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema Else
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ElseJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ElseUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets AllOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray AllOf
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(AllOfJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(AllOfUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets AnyOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray AnyOf
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(AnyOfJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(AnyOfUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets OneOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray OneOf
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(OneOfJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(OneOfUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Not.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema Not
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(NotJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(NotUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets UnevaluatedItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema UnevaluatedItems
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(UnevaluatedItemsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(UnevaluatedItemsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets UnevaluatedProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema UnevaluatedProperties
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(UnevaluatedPropertiesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(UnevaluatedPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Type.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.TypeEntity Type
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.TypeEntity(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Const.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonAny Const
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ConstJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ConstUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonAny(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Enum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonAnyArray Enum
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(EnumJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(EnumUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonAnyArray(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MultipleOf.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MultipleOfValue MultipleOf
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MultipleOfJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MultipleOfUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MultipleOfValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Maximum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber Maximum
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MaximumJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MaximumUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonNumber(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ExclusiveMaximum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber ExclusiveMaximum
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ExclusiveMaximumJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ExclusiveMaximumUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonNumber(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Minimum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber Minimum
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MinimumJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MinimumUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonNumber(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ExclusiveMinimum.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonNumber ExclusiveMinimum
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ExclusiveMinimumJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ExclusiveMinimumUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonNumber(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxLength.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxLength
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MaxLengthJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MaxLengthUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinLength.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity MinLength
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MinLengthJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MinLengthUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Pattern.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonRegex Pattern
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(PatternJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PatternUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonRegex(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxItems
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MaxItemsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MaxItemsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity MinItems
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MinItemsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MinItemsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets UniqueItems.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.UniqueItemsValue UniqueItems
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(UniqueItemsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(UniqueItemsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.UniqueItemsValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxContains.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxContains
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MaxContainsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MaxContainsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinContains.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MinContainsEntity MinContains
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MinContainsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MinContainsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MinContainsEntity(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MaxProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue MaxProperties
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MaxPropertiesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MaxPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets MinProperties.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity MinProperties
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(MinPropertiesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(MinPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Required.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray Required
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(RequiredJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(RequiredUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets DependentRequired.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.DependentRequiredValue DependentRequired
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DependentRequiredJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DependentRequiredUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.DependentRequiredValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Title.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Title
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(TitleJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(TitleUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Description.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Description
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Default.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonAny Default
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DefaultJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DefaultUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonAny(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Deprecated.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.DeprecatedValue Deprecated
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DeprecatedJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DeprecatedUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.DeprecatedValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ReadOnly.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.ReadOnlyValue ReadOnly
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ReadOnlyJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ReadOnlyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.ReadOnlyValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets WriteOnly.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.WriteOnlyValue WriteOnly
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(WriteOnlyJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(WriteOnlyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.WriteOnlyValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Examples.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.JsonAnyArray Examples
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ExamplesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ExamplesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.JsonAnyArray(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Format.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString Format
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(FormatJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(FormatUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ContentEncoding.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString ContentEncoding
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ContentEncodingJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ContentEncodingUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ContentMediaType.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonString ContentMediaType
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ContentMediaTypeJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ContentMediaTypeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets ContentSchema.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema ContentSchema
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(ContentSchemaJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ContentSchemaUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Definitions.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DefinitionsValue Definitions
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DefinitionsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DefinitionsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DefinitionsValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets Dependencies.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue Dependencies
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(DependenciesJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DependenciesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets RecursiveAnchor.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue RecursiveAnchor
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(RecursiveAnchorJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(RecursiveAnchorUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue(result);
                    }
                }

                return default;
            }
        }

        
        /// <summary>
        /// Gets RecursiveRef.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.Json.JsonUriReference RecursiveRef
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if(properties.TryGetValue(RecursiveRefJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(RecursiveRefUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new  Menes.Json.JsonUriReference(result);
                    }
                }

                return default;
            }
        }

                    /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
                this.objectBacking is null
            
    
                                    &&
                    this.booleanBacking is null
    
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
              
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

    
    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return JsonBoolean.BoolToJsonElement(booleanBacking);
                }

    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

    
    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                }

    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

    
    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return new JsonAny(booleanBacking);
                }

    
                return new JsonAny(this.jsonElementBacking);
            }
        }

            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core(Schema value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core(value.AsBoolean);
            }
                            return default;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator(Schema value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator(value.AsBoolean);
            }
                            return default;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated(Schema value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated(value.AsBoolean);
            }
                            return default;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation(Schema value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation(value.AsBoolean);
            }
                            return default;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData(Schema value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData(value.AsBoolean);
            }
                            return default;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation(Schema value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation(value.AsBoolean);
            }
                            return default;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content(Schema value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content(value.AsBoolean);
            }
                            return default;
        }
    
        
        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new Schema(value.AsJsonElement);
            }

            return value.As<Schema>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(Schema value)
        {
            return value.AsAny;
        }

    
    
        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonObject value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(Schema value)
        {
            return value.AsObject;
        }

                /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(Schema  value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema (ImmutableDictionary<string, JsonAny> value)
        {
            return new Schema (value);
        }

    
    
    
    
        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(bool value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to bool.
        /// </summary>
        /// <param name="boolean">The value from which to convert.</param>
        public static implicit operator bool(Schema boolean)
        {
            return boolean.AsBoolean.GetBoolean();
        }

        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Schema(JsonBoolean value)
        {
            return new Schema(value);
        }

        /// <summary>
        /// Conversion to bool.
        /// </summary>
        /// <param name="boolean">The value from which to convert.</param>
        public static implicit operator JsonBoolean(Schema boolean)
        {
            return boolean.AsBoolean;
        }

    
        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(Schema lhs, Schema rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(Schema lhs, Schema rhs)
        {
            return !lhs.Equals(rhs);
        }

    
            /// <summary>
        /// Creates an instance of a <see cref="Schema"/>.
        /// </summary>
        public static Schema Create(
                            IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.IdEntity? id = null
        ,             Menes.Json.JsonUri? schema1 = null
        ,             Menes.Json.JsonUriReference? @ref = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue? anchor = null
        ,             Menes.Json.JsonUriReference? dynamicRef = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue? dynamicAnchor = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.VocabularyValue? vocabulary = null
        ,             Menes.Json.JsonString? comment = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.DefsValue? defs = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray? prefixItems = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? items = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? contains = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? additionalProperties = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PropertiesValue? properties = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PatternPropertiesValue? patternProperties = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.DependentSchemasValue? dependentSchemas = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? propertyNames = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? @if = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? then = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? @else = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray? allOf = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray? anyOf = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray? oneOf = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? not = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? unevaluatedItems = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? unevaluatedProperties = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.TypeEntity? type = null
        ,             Menes.Json.JsonAny? @const = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonAnyArray? @enum = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MultipleOfValue? multipleOf = null
        ,             Menes.Json.JsonNumber? maximum = null
        ,             Menes.Json.JsonNumber? exclusiveMaximum = null
        ,             Menes.Json.JsonNumber? minimum = null
        ,             Menes.Json.JsonNumber? exclusiveMinimum = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue? maxLength = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity? minLength = null
        ,             Menes.Json.JsonRegex? pattern = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue? maxItems = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity? minItems = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.UniqueItemsValue? uniqueItems = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue? maxContains = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MinContainsEntity? minContains = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue? maxProperties = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity? minProperties = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray? required = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.DependentRequiredValue? dependentRequired = null
        ,             Menes.Json.JsonString? title = null
        ,             Menes.Json.JsonString? description = null
        ,             Menes.Json.JsonAny? @default = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.DeprecatedValue? deprecated = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.ReadOnlyValue? readOnly = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.WriteOnlyValue? writeOnly = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.JsonAnyArray? examples = null
        ,             Menes.Json.JsonString? format = null
        ,             Menes.Json.JsonString? contentEncoding = null
        ,             Menes.Json.JsonString? contentMediaType = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema? contentSchema = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DefinitionsValue? definitions = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue? dependencies = null
        ,             IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue? recursiveAnchor = null
        ,             Menes.Json.JsonUriReference? recursiveRef = null
        
        )
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
                            if (id is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.IdEntity id__)
            {
                builder.Add(IdJsonPropertyName, id__);
            }
                    if (schema1 is Menes.Json.JsonUri schema1__)
            {
                builder.Add(Schema1JsonPropertyName, schema1__);
            }
                    if (@ref is Menes.Json.JsonUriReference @ref__)
            {
                builder.Add(RefJsonPropertyName, @ref__);
            }
                    if (anchor is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue anchor__)
            {
                builder.Add(AnchorJsonPropertyName, anchor__);
            }
                    if (dynamicRef is Menes.Json.JsonUriReference dynamicRef__)
            {
                builder.Add(DynamicRefJsonPropertyName, dynamicRef__);
            }
                    if (dynamicAnchor is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue dynamicAnchor__)
            {
                builder.Add(DynamicAnchorJsonPropertyName, dynamicAnchor__);
            }
                    if (vocabulary is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.VocabularyValue vocabulary__)
            {
                builder.Add(VocabularyJsonPropertyName, vocabulary__);
            }
                    if (comment is Menes.Json.JsonString comment__)
            {
                builder.Add(CommentJsonPropertyName, comment__);
            }
                    if (defs is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.DefsValue defs__)
            {
                builder.Add(DefsJsonPropertyName, defs__);
            }
                    if (prefixItems is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray prefixItems__)
            {
                builder.Add(PrefixItemsJsonPropertyName, prefixItems__);
            }
                    if (items is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema items__)
            {
                builder.Add(ItemsJsonPropertyName, items__);
            }
                    if (contains is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema contains__)
            {
                builder.Add(ContainsJsonPropertyName, contains__);
            }
                    if (additionalProperties is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema additionalProperties__)
            {
                builder.Add(AdditionalPropertiesJsonPropertyName, additionalProperties__);
            }
                    if (properties is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PropertiesValue properties__)
            {
                builder.Add(PropertiesJsonPropertyName, properties__);
            }
                    if (patternProperties is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PatternPropertiesValue patternProperties__)
            {
                builder.Add(PatternPropertiesJsonPropertyName, patternProperties__);
            }
                    if (dependentSchemas is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.DependentSchemasValue dependentSchemas__)
            {
                builder.Add(DependentSchemasJsonPropertyName, dependentSchemas__);
            }
                    if (propertyNames is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema propertyNames__)
            {
                builder.Add(PropertyNamesJsonPropertyName, propertyNames__);
            }
                    if (@if is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema @if__)
            {
                builder.Add(IfJsonPropertyName, @if__);
            }
                    if (then is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema then__)
            {
                builder.Add(ThenJsonPropertyName, then__);
            }
                    if (@else is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema @else__)
            {
                builder.Add(ElseJsonPropertyName, @else__);
            }
                    if (allOf is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray allOf__)
            {
                builder.Add(AllOfJsonPropertyName, allOf__);
            }
                    if (anyOf is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray anyOf__)
            {
                builder.Add(AnyOfJsonPropertyName, anyOf__);
            }
                    if (oneOf is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray oneOf__)
            {
                builder.Add(OneOfJsonPropertyName, oneOf__);
            }
                    if (not is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema not__)
            {
                builder.Add(NotJsonPropertyName, not__);
            }
                    if (unevaluatedItems is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema unevaluatedItems__)
            {
                builder.Add(UnevaluatedItemsJsonPropertyName, unevaluatedItems__);
            }
                    if (unevaluatedProperties is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema unevaluatedProperties__)
            {
                builder.Add(UnevaluatedPropertiesJsonPropertyName, unevaluatedProperties__);
            }
                    if (type is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.TypeEntity type__)
            {
                builder.Add(TypeJsonPropertyName, type__);
            }
                    if (@const is Menes.Json.JsonAny @const__)
            {
                builder.Add(ConstJsonPropertyName, @const__);
            }
                    if (@enum is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonAnyArray @enum__)
            {
                builder.Add(EnumJsonPropertyName, @enum__);
            }
                    if (multipleOf is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MultipleOfValue multipleOf__)
            {
                builder.Add(MultipleOfJsonPropertyName, multipleOf__);
            }
                    if (maximum is Menes.Json.JsonNumber maximum__)
            {
                builder.Add(MaximumJsonPropertyName, maximum__);
            }
                    if (exclusiveMaximum is Menes.Json.JsonNumber exclusiveMaximum__)
            {
                builder.Add(ExclusiveMaximumJsonPropertyName, exclusiveMaximum__);
            }
                    if (minimum is Menes.Json.JsonNumber minimum__)
            {
                builder.Add(MinimumJsonPropertyName, minimum__);
            }
                    if (exclusiveMinimum is Menes.Json.JsonNumber exclusiveMinimum__)
            {
                builder.Add(ExclusiveMinimumJsonPropertyName, exclusiveMinimum__);
            }
                    if (maxLength is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue maxLength__)
            {
                builder.Add(MaxLengthJsonPropertyName, maxLength__);
            }
                    if (minLength is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity minLength__)
            {
                builder.Add(MinLengthJsonPropertyName, minLength__);
            }
                    if (pattern is Menes.Json.JsonRegex pattern__)
            {
                builder.Add(PatternJsonPropertyName, pattern__);
            }
                    if (maxItems is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue maxItems__)
            {
                builder.Add(MaxItemsJsonPropertyName, maxItems__);
            }
                    if (minItems is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity minItems__)
            {
                builder.Add(MinItemsJsonPropertyName, minItems__);
            }
                    if (uniqueItems is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.UniqueItemsValue uniqueItems__)
            {
                builder.Add(UniqueItemsJsonPropertyName, uniqueItems__);
            }
                    if (maxContains is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue maxContains__)
            {
                builder.Add(MaxContainsJsonPropertyName, maxContains__);
            }
                    if (minContains is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MinContainsEntity minContains__)
            {
                builder.Add(MinContainsJsonPropertyName, minContains__);
            }
                    if (maxProperties is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue maxProperties__)
            {
                builder.Add(MaxPropertiesJsonPropertyName, maxProperties__);
            }
                    if (minProperties is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity minProperties__)
            {
                builder.Add(MinPropertiesJsonPropertyName, minProperties__);
            }
                    if (required is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray required__)
            {
                builder.Add(RequiredJsonPropertyName, required__);
            }
                    if (dependentRequired is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.DependentRequiredValue dependentRequired__)
            {
                builder.Add(DependentRequiredJsonPropertyName, dependentRequired__);
            }
                    if (title is Menes.Json.JsonString title__)
            {
                builder.Add(TitleJsonPropertyName, title__);
            }
                    if (description is Menes.Json.JsonString description__)
            {
                builder.Add(DescriptionJsonPropertyName, description__);
            }
                    if (@default is Menes.Json.JsonAny @default__)
            {
                builder.Add(DefaultJsonPropertyName, @default__);
            }
                    if (deprecated is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.DeprecatedValue deprecated__)
            {
                builder.Add(DeprecatedJsonPropertyName, deprecated__);
            }
                    if (readOnly is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.ReadOnlyValue readOnly__)
            {
                builder.Add(ReadOnlyJsonPropertyName, readOnly__);
            }
                    if (writeOnly is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.WriteOnlyValue writeOnly__)
            {
                builder.Add(WriteOnlyJsonPropertyName, writeOnly__);
            }
                    if (examples is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.JsonAnyArray examples__)
            {
                builder.Add(ExamplesJsonPropertyName, examples__);
            }
                    if (format is Menes.Json.JsonString format__)
            {
                builder.Add(FormatJsonPropertyName, format__);
            }
                    if (contentEncoding is Menes.Json.JsonString contentEncoding__)
            {
                builder.Add(ContentEncodingJsonPropertyName, contentEncoding__);
            }
                    if (contentMediaType is Menes.Json.JsonString contentMediaType__)
            {
                builder.Add(ContentMediaTypeJsonPropertyName, contentMediaType__);
            }
                    if (contentSchema is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema contentSchema__)
            {
                builder.Add(ContentSchemaJsonPropertyName, contentSchema__);
            }
                    if (definitions is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DefinitionsValue definitions__)
            {
                builder.Add(DefinitionsJsonPropertyName, definitions__);
            }
                    if (dependencies is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue dependencies__)
            {
                builder.Add(DependenciesJsonPropertyName, dependencies__);
            }
                    if (recursiveAnchor is IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue recursiveAnchor__)
            {
                builder.Add(RecursiveAnchorJsonPropertyName, recursiveAnchor__);
            }
                    if (recursiveRef is Menes.Json.JsonUriReference recursiveRef__)
            {
                builder.Add(RecursiveRefJsonPropertyName, recursiveRef__);
            }
                    return builder.ToImmutable();
        }

        
        /// <summary>
        /// Sets $id.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithId(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.IdEntity value)
        {
            return this.SetProperty(IdJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $schema.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithSchema1(Menes.Json.JsonUri value)
        {
            return this.SetProperty(Schema1JsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $ref.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRef(Menes.Json.JsonUriReference value)
        {
            return this.SetProperty(RefJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $anchor.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAnchor(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue value)
        {
            return this.SetProperty(AnchorJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $dynamicRef.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDynamicRef(Menes.Json.JsonUriReference value)
        {
            return this.SetProperty(DynamicRefJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $dynamicAnchor.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDynamicAnchor(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue value)
        {
            return this.SetProperty(DynamicAnchorJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $vocabulary.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithVocabulary(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.VocabularyValue value)
        {
            return this.SetProperty(VocabularyJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $comment.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithComment(Menes.Json.JsonString value)
        {
            return this.SetProperty(CommentJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $defs.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDefs(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.DefsValue value)
        {
            return this.SetProperty(DefsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets prefixItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithPrefixItems(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray value)
        {
            return this.SetProperty(PrefixItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets items.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithItems(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contains.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContains(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ContainsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets additionalProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAdditionalProperties(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(AdditionalPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets properties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithProperties(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PropertiesValue value)
        {
            return this.SetProperty(PropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets patternProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithPatternProperties(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.PatternPropertiesValue value)
        {
            return this.SetProperty(PatternPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets dependentSchemas.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDependentSchemas(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.DependentSchemasValue value)
        {
            return this.SetProperty(DependentSchemasJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets propertyNames.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithPropertyNames(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(PropertyNamesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets if.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithIf(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(IfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets then.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithThen(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ThenJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets else.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithElse(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ElseJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets allOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAllOf(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray value)
        {
            return this.SetProperty(AllOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets anyOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithAnyOf(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray value)
        {
            return this.SetProperty(AnyOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets oneOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithOneOf(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator.SchemaArray value)
        {
            return this.SetProperty(OneOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets not.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithNot(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(NotJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets unevaluatedItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithUnevaluatedItems(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(UnevaluatedItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets unevaluatedProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithUnevaluatedProperties(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(UnevaluatedPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets type.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithType(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.TypeEntity value)
        {
            return this.SetProperty(TypeJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets const.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithConst(Menes.Json.JsonAny value)
        {
            return this.SetProperty(ConstJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets enum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithEnum(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonAnyArray value)
        {
            return this.SetProperty(EnumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets multipleOf.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMultipleOf(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MultipleOfValue value)
        {
            return this.SetProperty(MultipleOfJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maximum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaximum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(MaximumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets exclusiveMaximum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithExclusiveMaximum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(ExclusiveMaximumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minimum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinimum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(MinimumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets exclusiveMinimum.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithExclusiveMinimum(Menes.Json.JsonNumber value)
        {
            return this.SetProperty(ExclusiveMinimumJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxLength.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxLength(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxLengthJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minLength.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinLength(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity value)
        {
            return this.SetProperty(MinLengthJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets pattern.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithPattern(Menes.Json.JsonRegex value)
        {
            return this.SetProperty(PatternJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxItems(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinItems(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity value)
        {
            return this.SetProperty(MinItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets uniqueItems.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithUniqueItems(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.UniqueItemsValue value)
        {
            return this.SetProperty(UniqueItemsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxContains.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxContains(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxContainsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minContains.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinContains(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.MinContainsEntity value)
        {
            return this.SetProperty(MinContainsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets maxProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMaxProperties(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerValue value)
        {
            return this.SetProperty(MaxPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets minProperties.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithMinProperties(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.NonNegativeIntegerDefault0Entity value)
        {
            return this.SetProperty(MinPropertiesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets required.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRequired(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray value)
        {
            return this.SetProperty(RequiredJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets dependentRequired.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDependentRequired(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.DependentRequiredValue value)
        {
            return this.SetProperty(DependentRequiredJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets title.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithTitle(Menes.Json.JsonString value)
        {
            return this.SetProperty(TitleJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets description.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDescription(Menes.Json.JsonString value)
        {
            return this.SetProperty(DescriptionJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets default.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDefault(Menes.Json.JsonAny value)
        {
            return this.SetProperty(DefaultJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets deprecated.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDeprecated(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.DeprecatedValue value)
        {
            return this.SetProperty(DeprecatedJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets readOnly.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithReadOnly(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.ReadOnlyValue value)
        {
            return this.SetProperty(ReadOnlyJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets writeOnly.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithWriteOnly(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.WriteOnlyValue value)
        {
            return this.SetProperty(WriteOnlyJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets examples.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithExamples(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData.JsonAnyArray value)
        {
            return this.SetProperty(ExamplesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets format.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithFormat(Menes.Json.JsonString value)
        {
            return this.SetProperty(FormatJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contentEncoding.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContentEncoding(Menes.Json.JsonString value)
        {
            return this.SetProperty(ContentEncodingJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contentMediaType.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContentMediaType(Menes.Json.JsonString value)
        {
            return this.SetProperty(ContentMediaTypeJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets contentSchema.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithContentSchema(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return this.SetProperty(ContentSchemaJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets definitions.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDefinitions(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DefinitionsValue value)
        {
            return this.SetProperty(DefinitionsJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets dependencies.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithDependencies(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue value)
        {
            return this.SetProperty(DependenciesJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $recursiveAnchor.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRecursiveAnchor(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue value)
        {
            return this.SetProperty(RecursiveAnchorJsonPropertyName, value);
        }

        
        /// <summary>
        /// Sets $recursiveRef.
        /// </summary>
        /// <param name="value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Schema WithRecursiveRef(Menes.Json.JsonUriReference value)
        {
            return this.SetProperty(RecursiveRefJsonPropertyName, value);
        }

        
    
        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is Schema entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.GetHashCode(),
                        JsonValueKind.Array => this.AsArray().GetHashCode(),
                        JsonValueKind.Number => this.AsNumber().GetHashCode(),
                        JsonValueKind.String => this.AsString().GetHashCode(),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.GetHashCode(),
                    JsonValueKind.Null => JsonNull.NullHashCode,
                _ => 0,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

    
    
    
    
                if (this.booleanBacking is bool booleanBacking)
            {
                writer.WriteBooleanValue(booleanBacking);
                return;
            }
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
        
        
        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

    
    
    
        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

                /// <inheritdoc/>
        public bool TryGetDefault(string name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name.ToString(), out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out value);
        }

        /// <inheritdoc/>
        public bool HasDefault(string name)
        {
            return __MenesDefaults.TryGetValue(name, out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<char> name)
        {
            return __MenesDefaults.TryGetValue(name.ToString(), out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<byte> utf8name)
        {
            return __MenesDefaults.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
        }

        
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                        JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(Schema other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                        JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

    
        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Schema RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

    
    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<Schema, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }
        
        

    
                JsonValueKind valueKind = this.ValueKind;
    
    
                    result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
        
        
        
        
    
    
    
        
    
    
    
                result = this.ValidateAllOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
    
    
    
                result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

    

                return result;
        }

            /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }
    
    
    
    
            /// <summary>
        /// Gets the value as a <see cref="JsonBoolean"/>.
        /// </summary>
        private JsonBoolean AsBoolean
        {
            get
            {
                if (this.booleanBacking is bool booleanBacking)
                {
                    return new JsonBoolean(booleanBacking);
                }

                return new JsonBoolean(this.jsonElementBacking);
            }
        }
    
    
    
            private static ImmutableDictionary<string, JsonAny> BuildDefaults()
        {
            ImmutableDictionary<string, JsonAny>.Builder builder =
                ImmutableDictionary.CreateBuilder<string, JsonAny>();

                    builder.Add(PropertiesJsonPropertyName, JsonAny.Parse("{}"));
                    builder.Add(PatternPropertiesJsonPropertyName, JsonAny.Parse("{}"));
                    builder.Add(DependentSchemasJsonPropertyName, JsonAny.Parse("{}"));
                    builder.Add(MinLengthJsonPropertyName, JsonAny.Parse("0"));
                    builder.Add(MinItemsJsonPropertyName, JsonAny.Parse("0"));
                    builder.Add(UniqueItemsJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(MinContainsJsonPropertyName, JsonAny.Parse("1"));
                    builder.Add(MinPropertiesJsonPropertyName, JsonAny.Parse("0"));
                    builder.Add(RequiredJsonPropertyName, JsonAny.Parse("[]"));
                    builder.Add(DeprecatedJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(ReadOnlyJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(WriteOnlyJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(DefinitionsJsonPropertyName, JsonAny.Parse("{}"));
                    builder.Add(DependenciesJsonPropertyName, JsonAny.Parse("{}"));
                    return builder.ToImmutable();
        }
    
    
    
        private static ImmutableDictionary<string, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<string, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                ImmutableDictionary.CreateBuilder<string, Func<Schema, ValidationContext, ValidationLevel, ValidationContext>>();

                    builder.Add(
                DefinitionsJsonPropertyName,
                (that, validationContext, level) =>
                {
                    IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DefinitionsValue property = that.Definitions;
                    return property.Validate(validationContext, level);
                });
                    builder.Add(
                DependenciesJsonPropertyName,
                (that, validationContext, level) =>
                {
                    IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue property = that.Dependencies;
                    return property.Validate(validationContext, level);
                });
                    builder.Add(
                RecursiveAnchorJsonPropertyName,
                (that, validationContext, level) =>
                {
                    IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core.AnchorStringValue property = that.RecursiveAnchor;
                    return property.Validate(validationContext, level);
                });
                    builder.Add(
                RecursiveRefJsonPropertyName,
                (that, validationContext, level) =>
                {
                    Menes.Json.JsonUriReference property = that.RecursiveRef;
                    return property.Validate(validationContext, level);
                });
        
            return builder.ToImmutable();
        }

    
    
    
            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        
        
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;

        
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<Schema, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    var propertyResult = propertyValidator(this, result, level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

            
                }
        
        
        
        
        
        
                    }

        
        
        
            return result;
        }

    
            

            

            
        private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

                

            ValidationContext allOfResult0 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult1 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult1.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult2 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult2.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult3 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult3.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult4 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult4.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult5 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult5.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult5, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult5, level >= ValidationLevel.Detailed);
            }

                

            ValidationContext allOfResult6 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content>().Validate(validationContext.CreateChildContext(), level);

            if (!allOfResult6.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult6, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult6, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult6, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult6, level >= ValidationLevel.Detailed);
            }

        
            return result;
        }

            

            

    
    
    
            
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        
                
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        
        
        
        
                
            ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
            {
                return validationContext;
            }

            if (localResultBoolean.IsValid)
            {
                isValid = true;
            }

        
        
            result = result.MergeResults(
                isValid,
                level
        
                
                , localResultObject
        
        
        
                
                , localResultBoolean
        
                        );

            return result;
        }

    
    
    
    
        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct DefinitionsValue :
            IJsonObject<DefinitionsValue>,
                    IEquatable<DefinitionsValue>
    {

        
    
    
    
    
    
    
    

    
        private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
    
    
    
    
    
        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsValue"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public DefinitionsValue(JsonElement value)
        {
            this.jsonElementBacking = value;
                this.objectBacking = default;
                            }

            /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsValue"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public DefinitionsValue(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
                                        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsValue"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public DefinitionsValue(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

                                        }
    
    
    
    
    
    
    

    
    
    
            /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
                this.objectBacking is null
            
    
                
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
              
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

    
    
    
    
    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

    
    
    
    
    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

    
    
    
    
    
                return new JsonAny(this.jsonElementBacking);
            }
        }

    
        
        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DefinitionsValue(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new DefinitionsValue(value.AsJsonElement);
            }

            return value.As<DefinitionsValue>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(DefinitionsValue value)
        {
            return value.AsAny;
        }

    
    
        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DefinitionsValue(JsonObject value)
        {
            return new DefinitionsValue(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(DefinitionsValue value)
        {
            return value.AsObject;
        }

                /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(DefinitionsValue  value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DefinitionsValue (ImmutableDictionary<string, JsonAny> value)
        {
            return new DefinitionsValue (value);
        }

    
    
    
    
        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(DefinitionsValue lhs, DefinitionsValue rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(DefinitionsValue lhs, DefinitionsValue rhs)
        {
            return !lhs.Equals(rhs);
        }

    
    
        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is DefinitionsValue entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.GetHashCode(),
                        JsonValueKind.Array => this.AsArray().GetHashCode(),
                        JsonValueKind.Number => this.AsNumber().GetHashCode(),
                        JsonValueKind.String => this.AsString().GetHashCode(),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(),
                    JsonValueKind.Null => JsonNull.NullHashCode,
                _ => 0,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

    
    
    
    
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
                /// <summary>
        /// Enumerate the object as the given item type
        /// </summary>
        public JsonObjectEnumerator<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema> EnumerateProperties()
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return new JsonObjectEnumerator<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema>(properties);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return new JsonObjectEnumerator<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema>(this.jsonElementBacking);
            }

            return default;

        }
        
        
        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

    
    
    
        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                        JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(DefinitionsValue other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                        JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

    
        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public DefinitionsValue SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DefinitionsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

    
    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<DefinitionsValue, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }
                    result = result.UsingEvaluatedProperties();
        
        

    
                JsonValueKind valueKind = this.ValueKind;
    
    
                    result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
        
        
        
        
    
    
    
        
    
    
    
    
    
    
                result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

    

                return result;
        }

            /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }
    
    
    
    
    
    
    
    
    
    
    
    
            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        
        
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;

        
        
        
        
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                {
                    result = property.ValueAs<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyName);
                }
        
        
        
                    }

        
        
        
            return result;
        }

    
            

            

            

            

    
    
    
            
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        
                
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        
        
        
        
        
        
            result = result.MergeResults(
                isValid,
                level
        
                
                , localResultObject
        
        
        
        
                        );

            return result;
        }

    
    
    
    }
    

    
    
        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct DependenciesValue :
            IJsonObject<DependenciesValue>,
                    IEquatable<DependenciesValue>
    {

        
    
    
    
    
    
    
    

    
        private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
    
    
    
    
    
        /// <summary>
        /// Initializes a new instance of the <see cref="DependenciesValue"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public DependenciesValue(JsonElement value)
        {
            this.jsonElementBacking = value;
                this.objectBacking = default;
                            }

            /// <summary>
        /// Initializes a new instance of the <see cref="DependenciesValue"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public DependenciesValue(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
                                        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DependenciesValue"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public DependenciesValue(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

                                        }
    
    
    
    
    
    
    

    
    
    
            /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
                this.objectBacking is null
            
    
                
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
              
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

    
    
    
    
    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

    
    
    
    
    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

    
    
    
    
    
                return new JsonAny(this.jsonElementBacking);
            }
        }

    
        
        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DependenciesValue(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new DependenciesValue(value.AsJsonElement);
            }

            return value.As<DependenciesValue>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(DependenciesValue value)
        {
            return value.AsAny;
        }

    
    
        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DependenciesValue(JsonObject value)
        {
            return new DependenciesValue(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(DependenciesValue value)
        {
            return value.AsObject;
        }

                /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(DependenciesValue  value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator DependenciesValue (ImmutableDictionary<string, JsonAny> value)
        {
            return new DependenciesValue (value);
        }

    
    
    
    
        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(DependenciesValue lhs, DependenciesValue rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(DependenciesValue lhs, DependenciesValue rhs)
        {
            return !lhs.Equals(rhs);
        }

    
    
        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is DependenciesValue entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.GetHashCode(),
                        JsonValueKind.Array => this.AsArray().GetHashCode(),
                        JsonValueKind.Number => this.AsNumber().GetHashCode(),
                        JsonValueKind.String => this.AsString().GetHashCode(),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(),
                    JsonValueKind.Null => JsonNull.NullHashCode,
                _ => 0,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

    
    
    
    
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
                /// <summary>
        /// Enumerate the object as the given item type
        /// </summary>
        public JsonObjectEnumerator<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity> EnumerateProperties()
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return new JsonObjectEnumerator<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity>(properties);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return new JsonObjectEnumerator<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity>(this.jsonElementBacking);
            }

            return default;

        }
        
        
        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

    
    
    
        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                        JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(DependenciesValue other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                        JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

    
        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public DependenciesValue SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public DependenciesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

    
    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<DependenciesValue, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }
                    result = result.UsingEvaluatedProperties();
        
        

    
                JsonValueKind valueKind = this.ValueKind;
    
    
                    result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
        
        
        
        
    
    
    
        
    
    
    
    
    
    
                result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

    

                return result;
        }

            /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }
    
    
    
    
    
    
    
    
    
    
    
    
            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        
        
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;

        
        
        
        
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                {
                    result = property.ValueAs<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyName);
                }
        
        
        
                    }

        
        
        
            return result;
        }

    
            

            

            

            

    
    
    
            
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        
                
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        
        
        
        
        
        
            result = result.MergeResults(
                isValid,
                level
        
                
                , localResultObject
        
        
        
        
                        );

            return result;
        }

    
    
    
    
        /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct AdditionalPropertiesEntity :
            IJsonObject<AdditionalPropertiesEntity>,
                IJsonArray<AdditionalPropertiesEntity>,
                IEquatable<AdditionalPropertiesEntity>
    {

        
    
    
    
    
    
    
    

    
        private readonly JsonElement jsonElementBacking;

            private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
    
            private readonly ImmutableList<JsonAny>? arrayBacking;
    
    
    
            private readonly bool? booleanBacking;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="value">The backing <see cref="JsonElement"/>.</param>
        public AdditionalPropertiesEntity(JsonElement value)
        {
            this.jsonElementBacking = value;
                this.objectBacking = default;
                    this.arrayBacking = default;
                            this.booleanBacking = default;
            }

            /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="value">A property dictionary.</param>
        public AdditionalPropertiesEntity(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
                    this.arrayBacking = default;
                                            this.booleanBacking = default;
                }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="jsonObject">The <see cref="JsonObject"/> from which to construct the value.</param>
        public AdditionalPropertiesEntity(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

                    this.arrayBacking = default;
                                            this.booleanBacking = default;
                }
    
            /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="value">An array list.</param>
        public AdditionalPropertiesEntity(ImmutableList<JsonAny> value)
        {
            this.jsonElementBacking = default;
                    this.objectBacking = default;
                                            this.booleanBacking = default;
                    this.arrayBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="jsonArray">The <see cref="JsonArray"/> from which to construct the value.</param>
        public AdditionalPropertiesEntity(JsonArray jsonArray)
        {
            if (jsonArray.HasJsonElement)
            {
                this.jsonElementBacking = jsonArray.AsJsonElement;
                this.arrayBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.arrayBacking = jsonArray.AsItemsList;
            }

                    this.objectBacking = default;
                                            this.booleanBacking = default;
                }
    
    
    
            /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="jsonBoolean">The <see cref="JsonBoolean"/> from which to construct the value.</param>
        public AdditionalPropertiesEntity(JsonBoolean jsonBoolean)
        {
            if (jsonBoolean.HasJsonElement)
            {
                this.jsonElementBacking = jsonBoolean.AsJsonElement;
                this.booleanBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.booleanBacking = jsonBoolean.GetBoolean();
            }

                    this.objectBacking = default;
                            this.arrayBacking = default;
                                }

                /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="boolean">The <see cref="bool"/> from which to construct the value.</param>
        public AdditionalPropertiesEntity(bool boolean)
        {
            this.jsonElementBacking = default;
            this.booleanBacking = boolean;

                    this.objectBacking = default;
                            this.arrayBacking = default;
                                }

    
    
            /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema"/> from which to construct the value.</param>
        public AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                        this.arrayBacking = default;
                                    }
            else
            {
                this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
                                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        
                        this.arrayBacking = default;
                                    }
        }
            /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesEntity"/> struct.
        /// </summary>
        /// <param name="conversion">The <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray"/> from which to construct the value.</param>
        public AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                        this.arrayBacking = default;
                                    }
            else
            {
                this.jsonElementBacking = default;
                        this.objectBacking = default;
                                this.booleanBacking = default;
        
                        if (conversion.ValueKind == JsonValueKind.Array)
                {
                    this.arrayBacking = conversion;
                }
                else
                {
                    this.arrayBacking = default;
                }
                                    }
        }
    

            /// <inheritdoc/>
        public int Length
        {
            get
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return items.Count;
                }

                return this.jsonElementBacking.GetArrayLength();
            }
        }
    
            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema AsSchema
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema" />.
        /// </summary>
        public bool IsSchema
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema)this).Validate().IsValid;
            }
        }

            /// <summary>
        /// Gets the value as a <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray" />.
        /// </summary>
        public IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray AsJsonStringArray
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray" />.
        /// </summary>
        public bool IsJsonStringArray
        {
            get
            {
                return ((IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray)this).Validate().IsValid;
            }
        }

    
    
            /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement =>
    
                this.objectBacking is null
            
    
                        &&
                    this.arrayBacking is null
                                    &&
                    this.booleanBacking is null
    
                ;

        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
              
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

    
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    return JsonArray.ItemsToJsonElement(arrayBacking);
                }
    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return JsonBoolean.BoolToJsonElement(booleanBacking);
                }

    
                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

    
                    if (this.arrayBacking is ImmutableList<JsonAny>)
                {
                    return JsonValueKind.Array;
                }

    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                }

    
                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                    if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

    
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    return new JsonAny(arrayBacking);
                }

    
    
    
                    if (this.booleanBacking is bool booleanBacking)
                {
                    return new JsonAny(booleanBacking);
                }

    
                return new JsonAny(this.jsonElementBacking);
            }
        }

            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema value)
        {
            return new AdditionalPropertiesEntity(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(AdditionalPropertiesEntity value)
        {
                    if (value.ValueKind == JsonValueKind.Object)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(value.AsObject);
            }
                                            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonValueKind.False)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema(value.AsBoolean);
            }
                            return default;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray value)
        {
            return new AdditionalPropertiesEntity(value);
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray(AdditionalPropertiesEntity value)
        {
                            if (value.ValueKind == JsonValueKind.Array)
            {
                return new IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray(value.AsArray);
            }
                                            return default;
        }
    
                /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Core(AdditionalPropertiesEntity value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Applicator(AdditionalPropertiesEntity value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Unevaluated(AdditionalPropertiesEntity value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation(AdditionalPropertiesEntity value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.MetaData(AdditionalPropertiesEntity value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.FormatAnnotation(AdditionalPropertiesEntity value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }
            /// <summary>
        /// Conversion from <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }

        /// <summary>
        /// Conversion to <see cref="IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content" />.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Content(AdditionalPropertiesEntity value)
        {
            return (IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema.DependenciesValue.AdditionalPropertiesEntity)value;
        }
    
        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new AdditionalPropertiesEntity(value.AsJsonElement);
            }

            return value.As<AdditionalPropertiesEntity>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(AdditionalPropertiesEntity value)
        {
            return value.AsAny;
        }

    
        /// <summary>
        /// Conversion from array.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(JsonArray value)
        {
            return new AdditionalPropertiesEntity(value);
        }

        /// <summary>
        /// Conversion to array.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonArray(AdditionalPropertiesEntity value)
        {
            return value.AsArray;
        }
       
        /// <summary>
        /// Implicit conversion to an <see cref="ImmutableList{T}"/> of <see cref="JsonAny"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator ImmutableList<JsonAny>(AdditionalPropertiesEntity value)
        {
            return value.AsArray.AsItemsList;
        }

        /// <summary>
        /// Implicit conversion from an <see cref="ImmutableList{T}"/> of <see cref="JsonAny"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(ImmutableList<JsonAny> value)
        {
            return new AdditionalPropertiesEntity(value);
        }
    
    
        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(JsonObject value)
        {
            return new AdditionalPropertiesEntity(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(AdditionalPropertiesEntity value)
        {
            return value.AsObject;
        }

                /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(AdditionalPropertiesEntity  value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity (ImmutableDictionary<string, JsonAny> value)
        {
            return new AdditionalPropertiesEntity (value);
        }

    
    
    
    
        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(bool value)
        {
            return new AdditionalPropertiesEntity(value);
        }

        /// <summary>
        /// Conversion to bool.
        /// </summary>
        /// <param name="boolean">The value from which to convert.</param>
        public static implicit operator bool(AdditionalPropertiesEntity boolean)
        {
            return boolean.AsBoolean.GetBoolean();
        }

        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator AdditionalPropertiesEntity(JsonBoolean value)
        {
            return new AdditionalPropertiesEntity(value);
        }

        /// <summary>
        /// Conversion to bool.
        /// </summary>
        /// <param name="boolean">The value from which to convert.</param>
        public static implicit operator JsonBoolean(AdditionalPropertiesEntity boolean)
        {
            return boolean.AsBoolean;
        }

    
        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(AdditionalPropertiesEntity lhs, AdditionalPropertiesEntity rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name="lhs">The left hand side of the comparison.</param>
        /// <param name="rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(AdditionalPropertiesEntity lhs, AdditionalPropertiesEntity rhs)
        {
            return !lhs.Equals(rhs);
        }

                            /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name="items">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static AdditionalPropertiesEntity From(params JsonAny[] items)
        {
            return new AdditionalPropertiesEntity(items.ToImmutableList());
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name="item1">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static AdditionalPropertiesEntity From(JsonAny item1)
        {
            return new AdditionalPropertiesEntity(ImmutableList.Create(item1));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name="item1">The first item from which to create the array.</param>
        /// <param name="item2">The second item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static AdditionalPropertiesEntity From(JsonAny item1, JsonAny item2)
        {
            return new AdditionalPropertiesEntity(ImmutableList.Create(item1, item2));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name="item1">The first item from which to create the array.</param>
        /// <param name="item2">The second item from which to create the array.</param>
        /// <param name="item3">The third item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static AdditionalPropertiesEntity From(JsonAny item1, JsonAny item2, JsonAny item3)
        {
            return new AdditionalPropertiesEntity(ImmutableList.Create(item1, item2, item3));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name="item1">The first item from which to create the array.</param>
        /// <param name="item2">The second item from which to create the array.</param>
        /// <param name="item3">The third item from which to create the array.</param>
        /// <param name="item4">The fourth item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static AdditionalPropertiesEntity From(JsonAny item1, JsonAny item2, JsonAny item3, JsonAny item4)
        {
            return new AdditionalPropertiesEntity(ImmutableList.Create(item1, item2, item3, item4));
        }
        
    
    
        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is AdditionalPropertiesEntity entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.GetHashCode(),
                        JsonValueKind.Array => this.AsArray.GetHashCode(),
                        JsonValueKind.Number => this.AsNumber().GetHashCode(),
                        JsonValueKind.String => this.AsString().GetHashCode(),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.GetHashCode(),
                    JsonValueKind.Null => JsonNull.NullHashCode,
                _ => 0,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref="Utf8JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

    
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
            {
                JsonArray.WriteItems(arrayBacking, writer);
                return;
            }

    
    
    
                if (this.booleanBacking is bool booleanBacking)
            {
                writer.WriteBooleanValue(booleanBacking);
                return;
            }
    
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

    
        
        
        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

    
    
                /// <inheritdoc/>
        public JsonArrayEnumerator EnumerateArray()
        {
            return this.AsArray.EnumerateArray();
        }
    
    
        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        
    
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                        JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(AdditionalPropertiesEntity other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                        JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                        JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                        JsonValueKind.String => this.AsString().Equals(other.AsString()),
                        JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                    JsonValueKind.Null => true,
                _ => false,
            };
        }

    
        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

    
    
        /// <inheritdoc/>
        public AdditionalPropertiesEntity Add<TItem>(TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Add(item);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity Insert<TItem>(int index, TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Insert(index, item);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity Replace<TItem>(TItem oldValue, TItem newValue)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.Replace(oldValue, newValue);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity RemoveAt(int index)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveAt(index);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity RemoveRange(int index, int count)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveRange(index, count);
            }

            return this;
        }

        /// <inheritdoc/>
        public AdditionalPropertiesEntity SetItem<TItem>(int index, TItem value)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.SetItem(index, value);
            }

            return this;
        }

    
        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<AdditionalPropertiesEntity, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }
        
        

    
    
    
    
    
        
    
    
    
    
                result = this.ValidateAnyOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
    
    
    

                return result;
        }

            /// <summary>
        /// Gets the value as a <see cref="JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }
    
            /// <summary>
        /// Gets the value as a <see cref="JsonArray"/>.
        /// </summary>
        private JsonArray AsArray
        {
            get
            {
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    return new JsonArray(arrayBacking);
                }

                return new JsonArray(this.jsonElementBacking);
            }
        }
    
    
    
            /// <summary>
        /// Gets the value as a <see cref="JsonBoolean"/>.
        /// </summary>
        private JsonBoolean AsBoolean
        {
            get
            {
                if (this.booleanBacking is bool booleanBacking)
                {
                    return new JsonBoolean(booleanBacking);
                }

                return new JsonBoolean(this.jsonElementBacking);
            }
        }
    
    
    
    
    
    
    
    
    
            

            
        private ValidationContext ValidateAnyOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            bool foundValid = false;

                

            ValidationContext anyOfResult0 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Schema>().Validate(validationContext.CreateChildContext(), level);

            if (anyOfResult0.IsValid)
            {
                result = result.MergeChildContext(anyOfResult0, level >= ValidationLevel.Detailed);
                            if (level == ValidationLevel.Flag)
                {
                    return result;
                }
                else
                {
                    foundValid = true;
                }
                        }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult0);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult0);
                }
            }

                

            ValidationContext anyOfResult1 = this.As<IdDraft202012Feature.InvalidUseOfFragmentsInLocationIndependentId.Validation.JsonStringArray>().Validate(validationContext.CreateChildContext(), level);

            if (anyOfResult1.IsValid)
            {
                result = result.MergeChildContext(anyOfResult1, level >= ValidationLevel.Detailed);
                            if (level == ValidationLevel.Flag)
                {
                    return result;
                }
                else
                {
                    foundValid = true;
                }
                        }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult1);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult1);
                }
            }

        
            if (foundValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, "Validation 10.2.1.2. anyOf - validated against the anyOf schema.");
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

            

            

            

    
    
    
    
    
    
    }
    

    
    }
    

    
    }
    }
    