//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Menes.OpenApi
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Linq;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct Type20210415 : IJsonObject<Type20210415>, IEquatable<Type20210415>
    {
        /// <summary>
        /// JSON property name for <see cref = "Openapi"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> OpenapiUtf8JsonPropertyName = new byte[]{111, 112, 101, 110, 97, 112, 105};
        /// <summary>
        /// JSON property name for <see cref = "Openapi"/>.
        /// </summary>
        public static readonly JsonEncodedText OpenapiJsonPropertyName = JsonEncodedText.Encode(OpenapiUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "Info"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> InfoUtf8JsonPropertyName = new byte[]{105, 110, 102, 111};
        /// <summary>
        /// JSON property name for <see cref = "Info"/>.
        /// </summary>
        public static readonly JsonEncodedText InfoJsonPropertyName = JsonEncodedText.Encode(InfoUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "JsonSchemaDialect"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> JsonSchemaDialectUtf8JsonPropertyName = new byte[]{106, 115, 111, 110, 83, 99, 104, 101, 109, 97, 68, 105, 97, 108, 101, 99, 116};
        /// <summary>
        /// JSON property name for <see cref = "JsonSchemaDialect"/>.
        /// </summary>
        public static readonly JsonEncodedText JsonSchemaDialectJsonPropertyName = JsonEncodedText.Encode(JsonSchemaDialectUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "Servers"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ServersUtf8JsonPropertyName = new byte[]{115, 101, 114, 118, 101, 114, 115};
        /// <summary>
        /// JSON property name for <see cref = "Servers"/>.
        /// </summary>
        public static readonly JsonEncodedText ServersJsonPropertyName = JsonEncodedText.Encode(ServersUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "Paths"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PathsUtf8JsonPropertyName = new byte[]{112, 97, 116, 104, 115};
        /// <summary>
        /// JSON property name for <see cref = "Paths"/>.
        /// </summary>
        public static readonly JsonEncodedText PathsJsonPropertyName = JsonEncodedText.Encode(PathsUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "Webhooks"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> WebhooksUtf8JsonPropertyName = new byte[]{119, 101, 98, 104, 111, 111, 107, 115};
        /// <summary>
        /// JSON property name for <see cref = "Webhooks"/>.
        /// </summary>
        public static readonly JsonEncodedText WebhooksJsonPropertyName = JsonEncodedText.Encode(WebhooksUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "Components"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ComponentsUtf8JsonPropertyName = new byte[]{99, 111, 109, 112, 111, 110, 101, 110, 116, 115};
        /// <summary>
        /// JSON property name for <see cref = "Components"/>.
        /// </summary>
        public static readonly JsonEncodedText ComponentsJsonPropertyName = JsonEncodedText.Encode(ComponentsUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "Security"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SecurityUtf8JsonPropertyName = new byte[]{115, 101, 99, 117, 114, 105, 116, 121};
        /// <summary>
        /// JSON property name for <see cref = "Security"/>.
        /// </summary>
        public static readonly JsonEncodedText SecurityJsonPropertyName = JsonEncodedText.Encode(SecurityUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "Tags"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TagsUtf8JsonPropertyName = new byte[]{116, 97, 103, 115};
        /// <summary>
        /// JSON property name for <see cref = "Tags"/>.
        /// </summary>
        public static readonly JsonEncodedText TagsJsonPropertyName = JsonEncodedText.Encode(TagsUtf8JsonPropertyName.Span);
        /// <summary>
        /// JSON property name for <see cref = "ExternalDocs"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ExternalDocsUtf8JsonPropertyName = new byte[]{101, 120, 116, 101, 114, 110, 97, 108, 68, 111, 99, 115};
        /// <summary>
        /// JSON property name for <see cref = "ExternalDocs"/>.
        /// </summary>
        public static readonly JsonEncodedText ExternalDocsJsonPropertyName = JsonEncodedText.Encode(ExternalDocsUtf8JsonPropertyName.Span);
        private static readonly ImmutableDictionary<JsonEncodedText, Func<Type20210415, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Type20210415"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public Type20210415(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Type20210415"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public Type20210415(ImmutableDictionary<JsonEncodedText, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Type20210415"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public Type20210415(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Type20210415"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.AnyOf0Entity"/> from which to construct the value.</param>
        public Type20210415(Menes.OpenApi.Type20210415.AnyOf0Entity conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Type20210415"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.AnyOf1Entity"/> from which to construct the value.</param>
        public Type20210415(Menes.OpenApi.Type20210415.AnyOf1Entity conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Type20210415"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.AnyOf2Entity"/> from which to construct the value.</param>
        public Type20210415(Menes.OpenApi.Type20210415.AnyOf2Entity conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Type20210415"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
        public Type20210415(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.AnyOf0Entity"/>.
        /// </summary>
        public Menes.OpenApi.Type20210415.AnyOf0Entity AsAnyOf0Entity
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.AnyOf0Entity"/>.
        /// </summary>
        public bool IsAnyOf0Entity
        {
            get
            {
                return ((Menes.OpenApi.Type20210415.AnyOf0Entity)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.AnyOf1Entity"/>.
        /// </summary>
        public Menes.OpenApi.Type20210415.AnyOf1Entity AsAnyOf1Entity
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.AnyOf1Entity"/>.
        /// </summary>
        public bool IsAnyOf1Entity
        {
            get
            {
                return ((Menes.OpenApi.Type20210415.AnyOf1Entity)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.AnyOf2Entity"/>.
        /// </summary>
        public Menes.OpenApi.Type20210415.AnyOf2Entity AsAnyOf2Entity
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.AnyOf2Entity"/>.
        /// </summary>
        public bool IsAnyOf2Entity
        {
            get
            {
                return ((Menes.OpenApi.Type20210415.AnyOf2Entity)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
        /// </summary>
        public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
        /// </summary>
        public bool IsSpecificationExtensionsEntity
        {
            get
            {
                return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets Openapi.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.OpenapiValue Openapi
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(OpenapiJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(OpenapiUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.OpenapiValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Info.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.InfoValue Info
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(InfoJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(InfoUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.InfoValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets JsonSchemaDialect.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.JsonSchemaDialectEntity JsonSchemaDialect
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(JsonSchemaDialectJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(JsonSchemaDialectUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.JsonSchemaDialectEntity(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Servers.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.ServerValueArray Servers
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(ServersJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ServersUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.ServerValueArray(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Paths.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.PathsValue Paths
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(PathsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PathsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.PathsValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Webhooks.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.WebhooksValue Webhooks
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(WebhooksJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(WebhooksUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.WebhooksValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Components.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.ComponentsValue Components
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(ComponentsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ComponentsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.ComponentsValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Security.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.SecurityRequirementValueArray Security
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(SecurityJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(SecurityUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.SecurityRequirementValueArray(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Tags.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.TagValueArray Tags
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(TagsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(TagsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.TagValueArray(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets ExternalDocs.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Menes.OpenApi.Type20210415.ExternalDocumentationValue ExternalDocs
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    if (properties.TryGetValue(ExternalDocsJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ExternalDocsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApi.Type20210415.ExternalDocumentationValue(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonArray"/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonNumber"/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
                return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonString"/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
                return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonBoolean"/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
                return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonNull"/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

        /// <summary>
        /// Conversion from <see cref = "Menes.OpenApi.Type20210415.AnyOf0Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Type20210415(Menes.OpenApi.Type20210415.AnyOf0Entity value)
        {
            return new Type20210415(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Menes.OpenApi.Type20210415.AnyOf0Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Menes.OpenApi.Type20210415.AnyOf0Entity(Type20210415 value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Menes.OpenApi.Type20210415.AnyOf0Entity(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Menes.OpenApi.Type20210415.AnyOf1Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Type20210415(Menes.OpenApi.Type20210415.AnyOf1Entity value)
        {
            return new Type20210415(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Menes.OpenApi.Type20210415.AnyOf1Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Menes.OpenApi.Type20210415.AnyOf1Entity(Type20210415 value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Menes.OpenApi.Type20210415.AnyOf1Entity(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Menes.OpenApi.Type20210415.AnyOf2Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Type20210415(Menes.OpenApi.Type20210415.AnyOf2Entity value)
        {
            return new Type20210415(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Menes.OpenApi.Type20210415.AnyOf2Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Menes.OpenApi.Type20210415.AnyOf2Entity(Type20210415 value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Menes.OpenApi.Type20210415.AnyOf2Entity(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Type20210415(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
        {
            return new Type20210415(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(Type20210415 value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Type20210415(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new Type20210415(value.AsJsonElement);
            }

            return value.As<Type20210415>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(Type20210415 value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Type20210415(JsonObject value)
        {
            return new Type20210415(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(Type20210415 value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(Type20210415 value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Type20210415(ImmutableDictionary<JsonEncodedText, JsonAny> value)
        {
            return new Type20210415(value);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "Type20210415"/>.
        /// </summary>
        public static Type20210415 Create(Menes.OpenApi.Type20210415.OpenapiValue openapi, Menes.OpenApi.Type20210415.InfoValue info, Menes.OpenApi.Type20210415.JsonSchemaDialectEntity? jsonSchemaDialect = null, Menes.OpenApi.Type20210415.ServerValueArray? servers = null, Menes.OpenApi.Type20210415.PathsValue? paths = null, Menes.OpenApi.Type20210415.WebhooksValue? webhooks = null, Menes.OpenApi.Type20210415.ComponentsValue? components = null, Menes.OpenApi.Type20210415.SecurityRequirementValueArray? security = null, Menes.OpenApi.Type20210415.TagValueArray? tags = null, Menes.OpenApi.Type20210415.ExternalDocumentationValue? externalDocs = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
            builder.Add(OpenapiJsonPropertyName, openapi);
            builder.Add(InfoJsonPropertyName, info);
            if (jsonSchemaDialect is Menes.OpenApi.Type20210415.JsonSchemaDialectEntity jsonSchemaDialect__)
            {
                builder.Add(JsonSchemaDialectJsonPropertyName, jsonSchemaDialect__);
            }

            if (servers is Menes.OpenApi.Type20210415.ServerValueArray servers__)
            {
                builder.Add(ServersJsonPropertyName, servers__);
            }

            if (paths is Menes.OpenApi.Type20210415.PathsValue paths__)
            {
                builder.Add(PathsJsonPropertyName, paths__);
            }

            if (webhooks is Menes.OpenApi.Type20210415.WebhooksValue webhooks__)
            {
                builder.Add(WebhooksJsonPropertyName, webhooks__);
            }

            if (components is Menes.OpenApi.Type20210415.ComponentsValue components__)
            {
                builder.Add(ComponentsJsonPropertyName, components__);
            }

            if (security is Menes.OpenApi.Type20210415.SecurityRequirementValueArray security__)
            {
                builder.Add(SecurityJsonPropertyName, security__);
            }

            if (tags is Menes.OpenApi.Type20210415.TagValueArray tags__)
            {
                builder.Add(TagsJsonPropertyName, tags__);
            }

            if (externalDocs is Menes.OpenApi.Type20210415.ExternalDocumentationValue externalDocs__)
            {
                builder.Add(ExternalDocsJsonPropertyName, externalDocs__);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets openapi.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithOpenapi(Menes.OpenApi.Type20210415.OpenapiValue value)
        {
            return this.SetProperty(OpenapiJsonPropertyName, value);
        }

        /// <summary>
        /// Sets info.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithInfo(Menes.OpenApi.Type20210415.InfoValue value)
        {
            return this.SetProperty(InfoJsonPropertyName, value);
        }

        /// <summary>
        /// Sets jsonSchemaDialect.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithJsonSchemaDialect(Menes.OpenApi.Type20210415.JsonSchemaDialectEntity value)
        {
            return this.SetProperty(JsonSchemaDialectJsonPropertyName, value);
        }

        /// <summary>
        /// Sets servers.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithServers(Menes.OpenApi.Type20210415.ServerValueArray value)
        {
            return this.SetProperty(ServersJsonPropertyName, value);
        }

        /// <summary>
        /// Sets paths.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithPaths(Menes.OpenApi.Type20210415.PathsValue value)
        {
            return this.SetProperty(PathsJsonPropertyName, value);
        }

        /// <summary>
        /// Sets webhooks.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithWebhooks(Menes.OpenApi.Type20210415.WebhooksValue value)
        {
            return this.SetProperty(WebhooksJsonPropertyName, value);
        }

        /// <summary>
        /// Sets components.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithComponents(Menes.OpenApi.Type20210415.ComponentsValue value)
        {
            return this.SetProperty(ComponentsJsonPropertyName, value);
        }

        /// <summary>
        /// Sets security.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithSecurity(Menes.OpenApi.Type20210415.SecurityRequirementValueArray value)
        {
            return this.SetProperty(SecurityJsonPropertyName, value);
        }

        /// <summary>
        /// Sets tags.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithTags(Menes.OpenApi.Type20210415.TagValueArray value)
        {
            return this.SetProperty(TagsJsonPropertyName, value);
        }

        /// <summary>
        /// Sets externalDocs.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Type20210415 WithExternalDocs(Menes.OpenApi.Type20210415.ExternalDocumentationValue value)
        {
            return this.SetProperty(ExternalDocsJsonPropertyName, value);
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(string name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
        }

        /// <inheritdoc/>
        public bool HasDefault(JsonEncodedText name)
        {
            return __MenesDefaults.TryGetValue(name, out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(string name)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<char> name)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<byte> utf8name)
        {
            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool Equals(Type20210415 other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

            ;
        }

        /// <inheritdoc/>
        public bool HasProperty(JsonEncodedText name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
            {
                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public Type20210415 SetProperty<TValue>(JsonEncodedText name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Type20210415 SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Type20210415 SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Type20210415 SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Type20210415 RemoveProperty(JsonEncodedText name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Type20210415 RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Type20210415 RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Type20210415 RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<Type20210415, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            result = this.ValidateRef(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            JsonValueKind valueKind = this.ValueKind;
            result = this.ValidateType(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateAnyOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
        {
            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
            builder.Add(JsonSchemaDialectJsonPropertyName, JsonAny.Parse("\"https://spec.openapis.org/oas/3.1/dialect/base\""));
            return builder.ToImmutable();
        }

        private static ImmutableDictionary<JsonEncodedText, Func<Type20210415, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<JsonEncodedText, Func<Type20210415, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<Type20210415, ValidationContext, ValidationLevel, ValidationContext>>();
            builder.Add(OpenapiJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.OpenapiValue property = that.Openapi;
                return property.Validate(validationContext, level);
            });
            builder.Add(InfoJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.InfoValue property = that.Info;
                return property.Validate(validationContext, level);
            });
            builder.Add(JsonSchemaDialectJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.JsonSchemaDialectEntity property = that.JsonSchemaDialect;
                return property.Validate(validationContext, level);
            });
            builder.Add(ServersJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.ServerValueArray property = that.Servers;
                return property.Validate(validationContext, level);
            });
            builder.Add(PathsJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.PathsValue property = that.Paths;
                return property.Validate(validationContext, level);
            });
            builder.Add(WebhooksJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.WebhooksValue property = that.Webhooks;
                return property.Validate(validationContext, level);
            });
            builder.Add(ComponentsJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.ComponentsValue property = that.Components;
                return property.Validate(validationContext, level);
            });
            builder.Add(SecurityJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.SecurityRequirementValueArray property = that.Security;
                return property.Validate(validationContext, level);
            });
            builder.Add(TagsJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.TagValueArray property = that.Tags;
                return property.Validate(validationContext, level);
            });
            builder.Add(ExternalDocsJsonPropertyName, (that, validationContext, level) =>
            {
                Menes.OpenApi.Type20210415.ExternalDocumentationValue property = that.ExternalDocs;
                return property.Validate(validationContext, level);
            });
            return builder.ToImmutable();
        }

        private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
            if (!refResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, refResult);
                }

                result = result.MergeChildContext(refResult, false);
            }

            return result;
        }

        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

            result = result.UsingEvaluatedProperties();
            bool foundOpenapi = false;
            bool foundInfo = false;
            foreach (Property property in this.EnumerateObject())
            {
                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<Type20210415, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    var propertyResult = propertyValidator(this, result, level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (OpenapiJsonPropertyName.Equals(propertyName))
                    {
                        foundOpenapi = true;
                    }
                    else if (InfoJsonPropertyName.Equals(propertyName))
                    {
                        foundInfo = true;
                    }
                }

                if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                {
                    result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalProperty(propertyName);
                }
            }

            if (!foundOpenapi && !HasDefault(OpenapiJsonPropertyName))
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"openapi\" not present.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            if (!foundInfo && !HasDefault(InfoJsonPropertyName))
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"info\" not present.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            return result;
        }

        private ValidationContext ValidateAnyOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool foundValid = false;
            ValidationContext anyOfResult0 = this.As<Menes.OpenApi.Type20210415.AnyOf0Entity>().Validate(validationContext.CreateChildContext(), level);
            if (anyOfResult0.IsValid)
            {
                result = result.MergeChildContext(anyOfResult0, level >= ValidationLevel.Detailed);
                foundValid = true;
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult0);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult0);
                }
            }

            ValidationContext anyOfResult1 = this.As<Menes.OpenApi.Type20210415.AnyOf1Entity>().Validate(validationContext.CreateChildContext(), level);
            if (anyOfResult1.IsValid)
            {
                result = result.MergeChildContext(anyOfResult1, level >= ValidationLevel.Detailed);
                foundValid = true;
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult1);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult1);
                }
            }

            ValidationContext anyOfResult2 = this.As<Menes.OpenApi.Type20210415.AnyOf2Entity>().Validate(validationContext.CreateChildContext(), level);
            if (anyOfResult2.IsValid)
            {
                result = result.MergeChildContext(anyOfResult2, level >= ValidationLevel.Detailed);
                foundValid = true;
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult2);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, anyOfResult2);
                }
            }

            if (foundValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, "Validation 10.2.1.2. anyOf - validated against the anyOf schema.");
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

            result = result.MergeResults(isValid, level, localResultObject);
            return result;
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct AnyOf0Entity : IJsonObject<AnyOf0Entity>, IEquatable<AnyOf0Entity>
        {
            /// <summary>
            /// JSON property name for <see cref = "Paths"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> PathsUtf8JsonPropertyName = new byte[]{112, 97, 116, 104, 115};
            /// <summary>
            /// JSON property name for <see cref = "Paths"/>.
            /// </summary>
            public static readonly JsonEncodedText PathsJsonPropertyName = JsonEncodedText.Encode(PathsUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<AnyOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf0Entity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public AnyOf0Entity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf0Entity"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public AnyOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf0Entity"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public AnyOf0Entity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets Paths.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Paths
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(PathsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(PathsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf0Entity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new AnyOf0Entity(value.AsJsonElement);
                }

                return value.As<AnyOf0Entity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(AnyOf0Entity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf0Entity(JsonObject value)
            {
                return new AnyOf0Entity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(AnyOf0Entity value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(AnyOf0Entity value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new AnyOf0Entity(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "AnyOf0Entity"/>.
            /// </summary>
            public static AnyOf0Entity Create(Menes.Json.JsonAny paths)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(PathsJsonPropertyName, paths);
                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets paths.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AnyOf0Entity WithPaths(Menes.Json.JsonAny value)
            {
                return this.SetProperty(PathsJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(AnyOf0Entity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public AnyOf0Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf0Entity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf0Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf0Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf0Entity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf0Entity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf0Entity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf0Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<AnyOf0Entity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<AnyOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<AnyOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<AnyOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(PathsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.Paths;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                bool foundPaths = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<AnyOf0Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (PathsJsonPropertyName.Equals(propertyName))
                        {
                            foundPaths = true;
                        }
                    }
                }

                if (!foundPaths)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"paths\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct AnyOf1Entity : IJsonObject<AnyOf1Entity>, IEquatable<AnyOf1Entity>
        {
            /// <summary>
            /// JSON property name for <see cref = "Components"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ComponentsUtf8JsonPropertyName = new byte[]{99, 111, 109, 112, 111, 110, 101, 110, 116, 115};
            /// <summary>
            /// JSON property name for <see cref = "Components"/>.
            /// </summary>
            public static readonly JsonEncodedText ComponentsJsonPropertyName = JsonEncodedText.Encode(ComponentsUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<AnyOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf1Entity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public AnyOf1Entity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf1Entity"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public AnyOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf1Entity"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public AnyOf1Entity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets Components.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Components
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ComponentsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ComponentsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf1Entity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new AnyOf1Entity(value.AsJsonElement);
                }

                return value.As<AnyOf1Entity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(AnyOf1Entity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf1Entity(JsonObject value)
            {
                return new AnyOf1Entity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(AnyOf1Entity value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(AnyOf1Entity value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new AnyOf1Entity(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "AnyOf1Entity"/>.
            /// </summary>
            public static AnyOf1Entity Create(Menes.Json.JsonAny components)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(ComponentsJsonPropertyName, components);
                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets components.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AnyOf1Entity WithComponents(Menes.Json.JsonAny value)
            {
                return this.SetProperty(ComponentsJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(AnyOf1Entity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public AnyOf1Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf1Entity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf1Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf1Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf1Entity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf1Entity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf1Entity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf1Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<AnyOf1Entity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<AnyOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<AnyOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<AnyOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(ComponentsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.Components;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                bool foundComponents = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<AnyOf1Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (ComponentsJsonPropertyName.Equals(propertyName))
                        {
                            foundComponents = true;
                        }
                    }
                }

                if (!foundComponents)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"components\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct AnyOf2Entity : IJsonObject<AnyOf2Entity>, IEquatable<AnyOf2Entity>
        {
            /// <summary>
            /// JSON property name for <see cref = "Webhooks"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> WebhooksUtf8JsonPropertyName = new byte[]{119, 101, 98, 104, 111, 111, 107, 115};
            /// <summary>
            /// JSON property name for <see cref = "Webhooks"/>.
            /// </summary>
            public static readonly JsonEncodedText WebhooksJsonPropertyName = JsonEncodedText.Encode(WebhooksUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<AnyOf2Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf2Entity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public AnyOf2Entity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf2Entity"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public AnyOf2Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "AnyOf2Entity"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public AnyOf2Entity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets Webhooks.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Webhooks
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(WebhooksJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(WebhooksUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf2Entity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new AnyOf2Entity(value.AsJsonElement);
                }

                return value.As<AnyOf2Entity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(AnyOf2Entity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf2Entity(JsonObject value)
            {
                return new AnyOf2Entity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(AnyOf2Entity value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(AnyOf2Entity value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AnyOf2Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new AnyOf2Entity(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "AnyOf2Entity"/>.
            /// </summary>
            public static AnyOf2Entity Create(Menes.Json.JsonAny webhooks)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(WebhooksJsonPropertyName, webhooks);
                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets webhooks.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AnyOf2Entity WithWebhooks(Menes.Json.JsonAny value)
            {
                return this.SetProperty(WebhooksJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(AnyOf2Entity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public AnyOf2Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf2Entity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf2Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf2Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf2Entity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf2Entity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf2Entity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public AnyOf2Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<AnyOf2Entity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<AnyOf2Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<AnyOf2Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<AnyOf2Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(WebhooksJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.Webhooks;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                bool foundWebhooks = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<AnyOf2Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (WebhooksJsonPropertyName.Equals(propertyName))
                        {
                            foundWebhooks = true;
                        }
                    }
                }

                if (!foundWebhooks)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"webhooks\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct OpenapiValue : IJsonValue, IEquatable<OpenapiValue>
        {
            private static readonly Regex __MenesPatternExpression = new Regex("^3\\.1\\.\\d+(-.+)?$", RegexOptions.Compiled);
            private readonly JsonElement jsonElementBacking;
            private readonly JsonEncodedText? stringBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "OpenapiValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public OpenapiValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.stringBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpenapiValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OpenapiValue(string value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = JsonEncodedText.Encode(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpenapiValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OpenapiValue(JsonEncodedText value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpenapiValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OpenapiValue(ReadOnlySpan<char> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = JsonEncodedText.Encode(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpenapiValue"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OpenapiValue(ReadOnlySpan<byte> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = JsonEncodedText.Encode(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpenapiValue"/> struct.
            /// </summary>
            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
            public OpenapiValue(JsonString jsonString)
            {
                if (jsonString.HasJsonElement)
                {
                    this.jsonElementBacking = jsonString.AsJsonElement;
                    this.stringBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = jsonString.GetJsonEncodedText();
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.stringBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.stringBacking is JsonEncodedText stringBacking)
                    {
                        return JsonString.StringToJsonElement(stringBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.stringBacking is JsonEncodedText)
                    {
                        return JsonValueKind.String;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.stringBacking is JsonEncodedText stringBacking)
                    {
                        return new JsonAny(stringBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    if (this.stringBacking is JsonEncodedText stringBacking)
                    {
                        return new JsonString(stringBacking);
                    }

                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpenapiValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new OpenapiValue(value.AsJsonElement);
                }

                return value.As<OpenapiValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(OpenapiValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpenapiValue(string value)
            {
                return new OpenapiValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator string (OpenapiValue value)
            {
                return value.AsString.GetString();
            }

            /// <summary>
            /// Conversion from <see cref = "JsonEncodedText"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpenapiValue(JsonEncodedText value)
            {
                return new OpenapiValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "JsonEncodedText"/>.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator JsonEncodedText(OpenapiValue value)
            {
                return value.AsString.GetJsonEncodedText();
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpenapiValue(ReadOnlySpan<char> value)
            {
                return new OpenapiValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<char>(OpenapiValue value)
            {
                return value.AsString.AsSpan();
            }

            /// <summary>
            /// Conversion from utf8 bytes.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpenapiValue(ReadOnlySpan<byte> value)
            {
                return new OpenapiValue(value);
            }

            /// <summary>
            /// Conversion to utf8 bytes.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<byte>(OpenapiValue value)
            {
                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpenapiValue(JsonString value)
            {
                return new OpenapiValue(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonString(OpenapiValue value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.stringBacking is JsonEncodedText stringBacking)
                {
                    writer.WriteStringValue(stringBacking);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(OpenapiValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<OpenapiValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = Menes.Json.Validate.ValidateString(this, result, level, null, null, __MenesPatternExpression);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultString.IsValid)
                {
                    return validationContext;
                }

                if (localResultString.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultString);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct InfoValue : IJsonObject<InfoValue>, IEquatable<InfoValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Title"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> TitleUtf8JsonPropertyName = new byte[]{116, 105, 116, 108, 101};
            /// <summary>
            /// JSON property name for <see cref = "Title"/>.
            /// </summary>
            public static readonly JsonEncodedText TitleJsonPropertyName = JsonEncodedText.Encode(TitleUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Version"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> VersionUtf8JsonPropertyName = new byte[]{118, 101, 114, 115, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Version"/>.
            /// </summary>
            public static readonly JsonEncodedText VersionJsonPropertyName = JsonEncodedText.Encode(VersionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly JsonEncodedText SummaryJsonPropertyName = JsonEncodedText.Encode(SummaryUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "TermsOfService"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> TermsOfServiceUtf8JsonPropertyName = new byte[]{116, 101, 114, 109, 115, 79, 102, 83, 101, 114, 118, 105, 99, 101};
            /// <summary>
            /// JSON property name for <see cref = "TermsOfService"/>.
            /// </summary>
            public static readonly JsonEncodedText TermsOfServiceJsonPropertyName = JsonEncodedText.Encode(TermsOfServiceUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Contact"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ContactUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 97, 99, 116};
            /// <summary>
            /// JSON property name for <see cref = "Contact"/>.
            /// </summary>
            public static readonly JsonEncodedText ContactJsonPropertyName = JsonEncodedText.Encode(ContactUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "License"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> LicenseUtf8JsonPropertyName = new byte[]{108, 105, 99, 101, 110, 115, 101};
            /// <summary>
            /// JSON property name for <see cref = "License"/>.
            /// </summary>
            public static readonly JsonEncodedText LicenseJsonPropertyName = JsonEncodedText.Encode(LicenseUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<InfoValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "InfoValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public InfoValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "InfoValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public InfoValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "InfoValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public InfoValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "InfoValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public InfoValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Title.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Title
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(TitleJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(TitleUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Version.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Version
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(VersionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(VersionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Summary.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Summary
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets TermsOfService.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString TermsOfService
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(TermsOfServiceJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(TermsOfServiceUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Contact.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ContactValue Contact
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ContactJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ContactUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ContactValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets License.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.LicenseValue License
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(LicenseJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(LicenseUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.LicenseValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator InfoValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new InfoValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(InfoValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator InfoValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new InfoValue(value.AsJsonElement);
                }

                return value.As<InfoValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(InfoValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator InfoValue(JsonObject value)
            {
                return new InfoValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(InfoValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(InfoValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator InfoValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new InfoValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "InfoValue"/>.
            /// </summary>
            public static InfoValue Create(Menes.Json.JsonString title, Menes.Json.JsonString version, Menes.Json.JsonString? summary = null, Menes.Json.JsonString? description = null, Menes.Json.JsonString? termsOfService = null, Menes.OpenApi.Type20210415.ContactValue? contact = null, Menes.OpenApi.Type20210415.LicenseValue? license = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(TitleJsonPropertyName, title);
                builder.Add(VersionJsonPropertyName, version);
                if (summary is Menes.Json.JsonString summary__)
                {
                    builder.Add(SummaryJsonPropertyName, summary__);
                }

                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (termsOfService is Menes.Json.JsonString termsOfService__)
                {
                    builder.Add(TermsOfServiceJsonPropertyName, termsOfService__);
                }

                if (contact is Menes.OpenApi.Type20210415.ContactValue contact__)
                {
                    builder.Add(ContactJsonPropertyName, contact__);
                }

                if (license is Menes.OpenApi.Type20210415.LicenseValue license__)
                {
                    builder.Add(LicenseJsonPropertyName, license__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets title.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public InfoValue WithTitle(Menes.Json.JsonString value)
            {
                return this.SetProperty(TitleJsonPropertyName, value);
            }

            /// <summary>
            /// Sets version.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public InfoValue WithVersion(Menes.Json.JsonString value)
            {
                return this.SetProperty(VersionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets summary.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public InfoValue WithSummary(Menes.Json.JsonString value)
            {
                return this.SetProperty(SummaryJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public InfoValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets termsOfService.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public InfoValue WithTermsOfService(Menes.Json.JsonString value)
            {
                return this.SetProperty(TermsOfServiceJsonPropertyName, value);
            }

            /// <summary>
            /// Sets contact.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public InfoValue WithContact(Menes.OpenApi.Type20210415.ContactValue value)
            {
                return this.SetProperty(ContactJsonPropertyName, value);
            }

            /// <summary>
            /// Sets license.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public InfoValue WithLicense(Menes.OpenApi.Type20210415.LicenseValue value)
            {
                return this.SetProperty(LicenseJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(InfoValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public InfoValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public InfoValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public InfoValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public InfoValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public InfoValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public InfoValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public InfoValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public InfoValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<InfoValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<InfoValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<InfoValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<InfoValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(TitleJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Title;
                    return property.Validate(validationContext, level);
                });
                builder.Add(VersionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Version;
                    return property.Validate(validationContext, level);
                });
                builder.Add(SummaryJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Summary;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(TermsOfServiceJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.TermsOfService;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ContactJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ContactValue property = that.Contact;
                    return property.Validate(validationContext, level);
                });
                builder.Add(LicenseJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.LicenseValue property = that.License;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundTitle = false;
                bool foundVersion = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<InfoValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (TitleJsonPropertyName.Equals(propertyName))
                        {
                            foundTitle = true;
                        }
                        else if (VersionJsonPropertyName.Equals(propertyName))
                        {
                            foundVersion = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundTitle)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"title\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                if (!foundVersion)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"version\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct JsonSchemaDialectEntity : IJsonValue, IEquatable<JsonSchemaDialectEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "JsonSchemaDialectEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public JsonSchemaDialectEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonSchemaDialectEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new JsonSchemaDialectEntity(value.AsJsonElement);
                }

                return value.As<JsonSchemaDialectEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(JsonSchemaDialectEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(JsonSchemaDialectEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<JsonSchemaDialectEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.Json.JsonUri>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ServerValueArray : IJsonArray<ServerValueArray>, IEquatable<ServerValueArray>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableList<JsonAny>? arrayBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ServerValueArray(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.arrayBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
            /// </summary>
            /// <param name = "value">An array list.</param>
            public ServerValueArray(ImmutableList<JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.arrayBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
            /// </summary>
            /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
            public ServerValueArray(JsonArray jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.jsonElementBacking = jsonArray.AsJsonElement;
                    this.arrayBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = jsonArray.AsItemsList;
                }
            }

            /// <inheritdoc/>
            public int Length
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return items.Count;
                    }

                    return this.jsonElementBacking.GetArrayLength();
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.arrayBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return JsonArray.ItemsToJsonElement(arrayBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny>)
                    {
                        return JsonValueKind.Array;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonAny(arrayBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonArray(arrayBacking);
                    }

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerValueArray(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ServerValueArray(value.AsJsonElement);
                }

                return value.As<ServerValueArray>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ServerValueArray value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerValueArray(JsonArray value)
            {
                return new ServerValueArray(value);
            }

            /// <summary>
            /// Conversion to array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonArray(ServerValueArray value)
            {
                return value.AsArray;
            }

            /// <summary>
            /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableList<JsonAny>(ServerValueArray value)
            {
                return value.AsArray.AsItemsList;
            }

            /// <summary>
            /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerValueArray(ImmutableList<JsonAny> value)
            {
                return new ServerValueArray(value);
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "items">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static ServerValueArray From(params Menes.OpenApi.Type20210415.ServerValue[] items)
            {
                return new ServerValueArray(items.Select(i => (JsonAny)i).ToImmutableList());
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1)
            {
                return new ServerValueArray(ImmutableList.Create((JsonAny)item1));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2)
            {
                return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2, Menes.OpenApi.Type20210415.ServerValue item3)
            {
                return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <param name = "item4">The fourth item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2, Menes.OpenApi.Type20210415.ServerValue item3, Menes.OpenApi.Type20210415.ServerValue item4)
            {
                return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    JsonArray.WriteItems(arrayBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.ServerValue"/>.
            /// </summary>
            public JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue> EnumerateItems()
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue>(items);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonArrayEnumerator EnumerateArray()
            {
                return this.AsArray.EnumerateArray();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ServerValueArray other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public ServerValueArray Add<TItem>(TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Add(item);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValueArray Insert<TItem>(int index, TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Insert(index, item);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.Replace(oldValue, newValue);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValueArray RemoveAt(int index)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveAt(index);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValueArray RemoveRange(int index, int count)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveRange(index, count);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValueArray SetItem<TItem>(int index, TItem value)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.SetItem(index, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ServerValueArray, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Array)
                {
                    return result;
                }

                int arrayLength = 0;
                JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                while (arrayEnumerator.MoveNext())
                {
                    result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.ServerValue>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    arrayLength++;
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultArray.IsValid)
                {
                    return validationContext;
                }

                if (localResultArray.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultArray);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct PathsValue : IJsonObject<PathsValue>, IEquatable<PathsValue>
        {
            /// <summary>
            /// A pattern property matching ^/ producing a <see cref = "Menes.OpenApi.Type20210415.PathItemValue"/>.
            /// </summary>
            public static Regex PatternPropertyPathItemValue = new Regex("^/", RegexOptions.Compiled);
            private static readonly ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = CreatePatternPropertiesValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "PathsValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public PathsValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PathsValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public PathsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PathsValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public PathsValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PathsValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public PathsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new PathsValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(PathsValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathsValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new PathsValue(value.AsJsonElement);
                }

                return value.As<PathsValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(PathsValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathsValue(JsonObject value)
            {
                return new PathsValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(PathsValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(PathsValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new PathsValue(value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(PathsValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public PathsValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathsValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathsValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathsValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathsValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<PathsValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
            {
                ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(PatternPropertyPathItemValue, (property, validationContext, level) =>
                {
                    return property.ValueAs<Menes.OpenApi.Type20210415.PathItemValue>().Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    string propertyNameAsString = property.Name;
                    foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                    {
                        if (patternProperty.Key.IsMatch(propertyNameAsString))
                        {
                            result = result.WithLocalProperty(propertyName);
                            result = patternProperty.Value(property, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct WebhooksValue : IJsonObject<WebhooksValue>, IEquatable<WebhooksValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "WebhooksValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public WebhooksValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "WebhooksValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public WebhooksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "WebhooksValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public WebhooksValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator WebhooksValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new WebhooksValue(value.AsJsonElement);
                }

                return value.As<WebhooksValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(WebhooksValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator WebhooksValue(JsonObject value)
            {
                return new WebhooksValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(WebhooksValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(WebhooksValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator WebhooksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new WebhooksValue(value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the object as the given item type
            /// </summary>
            public JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity> EnumerateProperties()
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>(properties);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(WebhooksValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public WebhooksValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public WebhooksValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public WebhooksValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public WebhooksValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public WebhooksValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public WebhooksValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public WebhooksValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public WebhooksValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<WebhooksValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (!result.HasEvaluatedLocalProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ComponentsValue : IJsonObject<ComponentsValue>, IEquatable<ComponentsValue>
        {
            /// <summary>
            /// A pattern property matching ^(schemas|responses|parameters|examples|requestBodies|headers|securitySchemes|links|callbacks|pathItems)$ producing a <see cref = "Menes.OpenApi.Type20210415.ComponentsValue.SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity"/>.
            /// </summary>
            public static Regex PatternPropertySchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity = new Regex("^(schemas|responses|parameters|examples|requestBodies|headers|securitySchemes|links|callbacks|pathItems)$", RegexOptions.Compiled);
            /// <summary>
            /// JSON property name for <see cref = "Schemas"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SchemasUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 97, 115};
            /// <summary>
            /// JSON property name for <see cref = "Schemas"/>.
            /// </summary>
            public static readonly JsonEncodedText SchemasJsonPropertyName = JsonEncodedText.Encode(SchemasUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Responses"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ResponsesUtf8JsonPropertyName = new byte[]{114, 101, 115, 112, 111, 110, 115, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Responses"/>.
            /// </summary>
            public static readonly JsonEncodedText ResponsesJsonPropertyName = JsonEncodedText.Encode(ResponsesUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ParametersUtf8JsonPropertyName = new byte[]{112, 97, 114, 97, 109, 101, 116, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly JsonEncodedText ParametersJsonPropertyName = JsonEncodedText.Encode(ParametersUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExamplesUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public static readonly JsonEncodedText ExamplesJsonPropertyName = JsonEncodedText.Encode(ExamplesUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "RequestBodies"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RequestBodiesUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 101, 115, 116, 66, 111, 100, 105, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "RequestBodies"/>.
            /// </summary>
            public static readonly JsonEncodedText RequestBodiesJsonPropertyName = JsonEncodedText.Encode(RequestBodiesUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> HeadersUtf8JsonPropertyName = new byte[]{104, 101, 97, 100, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public static readonly JsonEncodedText HeadersJsonPropertyName = JsonEncodedText.Encode(HeadersUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "SecuritySchemes"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SecuritySchemesUtf8JsonPropertyName = new byte[]{115, 101, 99, 117, 114, 105, 116, 121, 83, 99, 104, 101, 109, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "SecuritySchemes"/>.
            /// </summary>
            public static readonly JsonEncodedText SecuritySchemesJsonPropertyName = JsonEncodedText.Encode(SecuritySchemesUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Links"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> LinksUtf8JsonPropertyName = new byte[]{108, 105, 110, 107, 115};
            /// <summary>
            /// JSON property name for <see cref = "Links"/>.
            /// </summary>
            public static readonly JsonEncodedText LinksJsonPropertyName = JsonEncodedText.Encode(LinksUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Callbacks"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> CallbacksUtf8JsonPropertyName = new byte[]{99, 97, 108, 108, 98, 97, 99, 107, 115};
            /// <summary>
            /// JSON property name for <see cref = "Callbacks"/>.
            /// </summary>
            public static readonly JsonEncodedText CallbacksJsonPropertyName = JsonEncodedText.Encode(CallbacksUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "PathItems"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> PathItemsUtf8JsonPropertyName = new byte[]{112, 97, 116, 104, 73, 116, 101, 109, 115};
            /// <summary>
            /// JSON property name for <see cref = "PathItems"/>.
            /// </summary>
            public static readonly JsonEncodedText PathItemsJsonPropertyName = JsonEncodedText.Encode(PathItemsUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ComponentsValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = CreatePatternPropertiesValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ComponentsValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ComponentsValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ComponentsValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ComponentsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ComponentsValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ComponentsValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ComponentsValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ComponentsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Schemas.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.SchemasValue Schemas
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SchemasJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SchemasUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.SchemasValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Responses.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.ResponsesValue Responses
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ResponsesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ResponsesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.ResponsesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Parameters.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.ParametersValue Parameters
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ParametersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ParametersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.ParametersValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Examples.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.ExamplesValue Examples
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExamplesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExamplesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.ExamplesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets RequestBodies.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.RequestBodiesValue RequestBodies
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RequestBodiesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RequestBodiesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.RequestBodiesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Headers.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.HeadersValue Headers
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(HeadersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(HeadersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.HeadersValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets SecuritySchemes.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.SecuritySchemesValue SecuritySchemes
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SecuritySchemesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SecuritySchemesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.SecuritySchemesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Links.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.LinksValue Links
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(LinksJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(LinksUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.LinksValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Callbacks.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.CallbacksValue Callbacks
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(CallbacksJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(CallbacksUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.CallbacksValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets PathItems.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ComponentsValue.PathItemsValue PathItems
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(PathItemsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(PathItemsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ComponentsValue.PathItemsValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ComponentsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ComponentsValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ComponentsValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ComponentsValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ComponentsValue(value.AsJsonElement);
                }

                return value.As<ComponentsValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ComponentsValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ComponentsValue(JsonObject value)
            {
                return new ComponentsValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ComponentsValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ComponentsValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ComponentsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ComponentsValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ComponentsValue"/>.
            /// </summary>
            public static ComponentsValue Create(Menes.OpenApi.Type20210415.ComponentsValue.SchemasValue? schemas = null, Menes.OpenApi.Type20210415.ComponentsValue.ResponsesValue? responses = null, Menes.OpenApi.Type20210415.ComponentsValue.ParametersValue? parameters = null, Menes.OpenApi.Type20210415.ComponentsValue.ExamplesValue? examples = null, Menes.OpenApi.Type20210415.ComponentsValue.RequestBodiesValue? requestBodies = null, Menes.OpenApi.Type20210415.ComponentsValue.HeadersValue? headers = null, Menes.OpenApi.Type20210415.ComponentsValue.SecuritySchemesValue? securitySchemes = null, Menes.OpenApi.Type20210415.ComponentsValue.LinksValue? links = null, Menes.OpenApi.Type20210415.ComponentsValue.CallbacksValue? callbacks = null, Menes.OpenApi.Type20210415.ComponentsValue.PathItemsValue? pathItems = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (schemas is Menes.OpenApi.Type20210415.ComponentsValue.SchemasValue schemas__)
                {
                    builder.Add(SchemasJsonPropertyName, schemas__);
                }

                if (responses is Menes.OpenApi.Type20210415.ComponentsValue.ResponsesValue responses__)
                {
                    builder.Add(ResponsesJsonPropertyName, responses__);
                }

                if (parameters is Menes.OpenApi.Type20210415.ComponentsValue.ParametersValue parameters__)
                {
                    builder.Add(ParametersJsonPropertyName, parameters__);
                }

                if (examples is Menes.OpenApi.Type20210415.ComponentsValue.ExamplesValue examples__)
                {
                    builder.Add(ExamplesJsonPropertyName, examples__);
                }

                if (requestBodies is Menes.OpenApi.Type20210415.ComponentsValue.RequestBodiesValue requestBodies__)
                {
                    builder.Add(RequestBodiesJsonPropertyName, requestBodies__);
                }

                if (headers is Menes.OpenApi.Type20210415.ComponentsValue.HeadersValue headers__)
                {
                    builder.Add(HeadersJsonPropertyName, headers__);
                }

                if (securitySchemes is Menes.OpenApi.Type20210415.ComponentsValue.SecuritySchemesValue securitySchemes__)
                {
                    builder.Add(SecuritySchemesJsonPropertyName, securitySchemes__);
                }

                if (links is Menes.OpenApi.Type20210415.ComponentsValue.LinksValue links__)
                {
                    builder.Add(LinksJsonPropertyName, links__);
                }

                if (callbacks is Menes.OpenApi.Type20210415.ComponentsValue.CallbacksValue callbacks__)
                {
                    builder.Add(CallbacksJsonPropertyName, callbacks__);
                }

                if (pathItems is Menes.OpenApi.Type20210415.ComponentsValue.PathItemsValue pathItems__)
                {
                    builder.Add(PathItemsJsonPropertyName, pathItems__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets schemas.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithSchemas(Menes.OpenApi.Type20210415.ComponentsValue.SchemasValue value)
            {
                return this.SetProperty(SchemasJsonPropertyName, value);
            }

            /// <summary>
            /// Sets responses.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithResponses(Menes.OpenApi.Type20210415.ComponentsValue.ResponsesValue value)
            {
                return this.SetProperty(ResponsesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets parameters.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithParameters(Menes.OpenApi.Type20210415.ComponentsValue.ParametersValue value)
            {
                return this.SetProperty(ParametersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets examples.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithExamples(Menes.OpenApi.Type20210415.ComponentsValue.ExamplesValue value)
            {
                return this.SetProperty(ExamplesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets requestBodies.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithRequestBodies(Menes.OpenApi.Type20210415.ComponentsValue.RequestBodiesValue value)
            {
                return this.SetProperty(RequestBodiesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets headers.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithHeaders(Menes.OpenApi.Type20210415.ComponentsValue.HeadersValue value)
            {
                return this.SetProperty(HeadersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets securitySchemes.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithSecuritySchemes(Menes.OpenApi.Type20210415.ComponentsValue.SecuritySchemesValue value)
            {
                return this.SetProperty(SecuritySchemesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets links.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithLinks(Menes.OpenApi.Type20210415.ComponentsValue.LinksValue value)
            {
                return this.SetProperty(LinksJsonPropertyName, value);
            }

            /// <summary>
            /// Sets callbacks.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithCallbacks(Menes.OpenApi.Type20210415.ComponentsValue.CallbacksValue value)
            {
                return this.SetProperty(CallbacksJsonPropertyName, value);
            }

            /// <summary>
            /// Sets pathItems.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ComponentsValue WithPathItems(Menes.OpenApi.Type20210415.ComponentsValue.PathItemsValue value)
            {
                return this.SetProperty(PathItemsJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ComponentsValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ComponentsValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ComponentsValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ComponentsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ComponentsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ComponentsValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ComponentsValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ComponentsValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ComponentsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ComponentsValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
            {
                ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(PatternPropertySchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity, (property, validationContext, level) =>
                {
                    return property.ValueAs<Menes.OpenApi.Type20210415.ComponentsValue.SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity>().Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ComponentsValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ComponentsValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ComponentsValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(SchemasJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.SchemasValue property = that.Schemas;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ResponsesJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.ResponsesValue property = that.Responses;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ParametersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.ParametersValue property = that.Parameters;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ExamplesJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.ExamplesValue property = that.Examples;
                    return property.Validate(validationContext, level);
                });
                builder.Add(RequestBodiesJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.RequestBodiesValue property = that.RequestBodies;
                    return property.Validate(validationContext, level);
                });
                builder.Add(HeadersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.HeadersValue property = that.Headers;
                    return property.Validate(validationContext, level);
                });
                builder.Add(SecuritySchemesJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.SecuritySchemesValue property = that.SecuritySchemes;
                    return property.Validate(validationContext, level);
                });
                builder.Add(LinksJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.LinksValue property = that.Links;
                    return property.Validate(validationContext, level);
                });
                builder.Add(CallbacksJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.CallbacksValue property = that.Callbacks;
                    return property.Validate(validationContext, level);
                });
                builder.Add(PathItemsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ComponentsValue.PathItemsValue property = that.PathItems;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ComponentsValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    string propertyNameAsString = property.Name;
                    foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                    {
                        if (patternProperty.Key.IsMatch(propertyNameAsString))
                        {
                            result = result.WithLocalProperty(propertyName);
                            result = patternProperty.Value(property, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity : IJsonObject<SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity>, IEquatable<SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(value.AsJsonElement);
                    }

                    return value.As<SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(JsonObject value)
                {
                    return new SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        string propertyNameAsString = property.Name;
                        result = new JsonString(propertyNameAsString).As<Menes.OpenApi.Type20210415.ComponentsValue.SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsEntity.PropertyNamesEntity>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct PropertyNamesEntity : IJsonValue, IEquatable<PropertyNamesEntity>
                {
                    private static readonly Regex __MenesPatternExpression = new Regex("^[a-zA-Z0-9._-]+$", RegexOptions.Compiled);
                    private readonly JsonElement jsonElementBacking;
                    private readonly JsonEncodedText? stringBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public PropertyNamesEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.stringBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public PropertyNamesEntity(string value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = JsonEncodedText.Encode(value);
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public PropertyNamesEntity(JsonEncodedText value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public PropertyNamesEntity(ReadOnlySpan<char> value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = JsonEncodedText.Encode(value);
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public PropertyNamesEntity(ReadOnlySpan<byte> value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = JsonEncodedText.Encode(value);
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                    public PropertyNamesEntity(JsonString jsonString)
                    {
                        if (jsonString.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonString.AsJsonElement;
                            this.stringBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = jsonString.GetJsonEncodedText();
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.stringBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                return JsonString.StringToJsonElement(stringBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText)
                            {
                                return JsonValueKind.String;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                return new JsonAny(stringBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                return new JsonString(stringBacking);
                            }

                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator PropertyNamesEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new PropertyNamesEntity(value.AsJsonElement);
                        }

                        return value.As<PropertyNamesEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(PropertyNamesEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator PropertyNamesEntity(string value)
                    {
                        return new PropertyNamesEntity(value);
                    }

                    /// <summary>
                    /// Conversion to string.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator string (PropertyNamesEntity value)
                    {
                        return value.AsString.GetString();
                    }

                    /// <summary>
                    /// Conversion from <see cref = "JsonEncodedText"/>.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator PropertyNamesEntity(JsonEncodedText value)
                    {
                        return new PropertyNamesEntity(value);
                    }

                    /// <summary>
                    /// Conversion to <see cref = "JsonEncodedText"/>.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator JsonEncodedText(PropertyNamesEntity value)
                    {
                        return value.AsString.GetJsonEncodedText();
                    }

                    /// <summary>
                    /// Conversion from string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator PropertyNamesEntity(ReadOnlySpan<char> value)
                    {
                        return new PropertyNamesEntity(value);
                    }

                    /// <summary>
                    /// Conversion to string.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator ReadOnlySpan<char>(PropertyNamesEntity value)
                    {
                        return value.AsString.AsSpan();
                    }

                    /// <summary>
                    /// Conversion from utf8 bytes.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator PropertyNamesEntity(ReadOnlySpan<byte> value)
                    {
                        return new PropertyNamesEntity(value);
                    }

                    /// <summary>
                    /// Conversion to utf8 bytes.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator ReadOnlySpan<byte>(PropertyNamesEntity value)
                    {
                        return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                    }

                    /// <summary>
                    /// Conversion from string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator PropertyNamesEntity(JsonString value)
                    {
                        return new PropertyNamesEntity(value);
                    }

                    /// <summary>
                    /// Conversion to string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonString(PropertyNamesEntity value)
                    {
                        return value.AsString;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            writer.WriteStringValue(stringBacking);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(PropertyNamesEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<PropertyNamesEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        result = Menes.Json.Validate.ValidateString(this, result, level, null, null, __MenesPatternExpression);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct SchemasValue : IJsonObject<SchemasValue>, IEquatable<SchemasValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemasValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public SchemasValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemasValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public SchemasValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemasValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public SchemasValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemasValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new SchemasValue(value.AsJsonElement);
                    }

                    return value.As<SchemasValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(SchemasValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemasValue(JsonObject value)
                {
                    return new SchemasValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(SchemasValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SchemasValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemasValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new SchemasValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.Json.JsonAny> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.Json.JsonAny>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.Json.JsonAny>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(SchemasValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public SchemasValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemasValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<SchemasValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.Json.JsonAny>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ResponsesValue : IJsonObject<ResponsesValue>, IEquatable<ResponsesValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ResponsesValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ResponsesValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ResponsesValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public ResponsesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ResponsesValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public ResponsesValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ResponsesValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ResponsesValue(value.AsJsonElement);
                    }

                    return value.As<ResponsesValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ResponsesValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ResponsesValue(JsonObject value)
                {
                    return new ResponsesValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(ResponsesValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ResponsesValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ResponsesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new ResponsesValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.ResponseOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ResponseOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ResponseOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ResponsesValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public ResponsesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ResponsesValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ResponsesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ResponsesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ResponsesValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ResponsesValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ResponsesValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ResponsesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ResponsesValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.ResponseOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ParametersValue : IJsonObject<ParametersValue>, IEquatable<ParametersValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ParametersValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ParametersValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ParametersValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public ParametersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ParametersValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public ParametersValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParametersValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ParametersValue(value.AsJsonElement);
                    }

                    return value.As<ParametersValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ParametersValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParametersValue(JsonObject value)
                {
                    return new ParametersValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(ParametersValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ParametersValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParametersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new ParametersValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ParametersValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public ParametersValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParametersValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParametersValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParametersValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParametersValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParametersValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParametersValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParametersValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ParametersValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ExamplesValue : IJsonObject<ExamplesValue>, IEquatable<ExamplesValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ExamplesValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ExamplesValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ExamplesValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public ExamplesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ExamplesValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public ExamplesValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ExamplesValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ExamplesValue(value.AsJsonElement);
                    }

                    return value.As<ExamplesValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ExamplesValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ExamplesValue(JsonObject value)
                {
                    return new ExamplesValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(ExamplesValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ExamplesValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ExamplesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new ExamplesValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ExamplesValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ExamplesValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct RequestBodiesValue : IJsonObject<RequestBodiesValue>, IEquatable<RequestBodiesValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "RequestBodiesValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public RequestBodiesValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequestBodiesValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public RequestBodiesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequestBodiesValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public RequestBodiesValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequestBodiesValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new RequestBodiesValue(value.AsJsonElement);
                    }

                    return value.As<RequestBodiesValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(RequestBodiesValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequestBodiesValue(JsonObject value)
                {
                    return new RequestBodiesValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(RequestBodiesValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(RequestBodiesValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequestBodiesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new RequestBodiesValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(RequestBodiesValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public RequestBodiesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public RequestBodiesValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public RequestBodiesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public RequestBodiesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public RequestBodiesValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public RequestBodiesValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public RequestBodiesValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public RequestBodiesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<RequestBodiesValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct HeadersValue : IJsonObject<HeadersValue>, IEquatable<HeadersValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public HeadersValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public HeadersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public HeadersValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new HeadersValue(value.AsJsonElement);
                    }

                    return value.As<HeadersValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(HeadersValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(JsonObject value)
                {
                    return new HeadersValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(HeadersValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(HeadersValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new HeadersValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(HeadersValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<HeadersValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct SecuritySchemesValue : IJsonObject<SecuritySchemesValue>, IEquatable<SecuritySchemesValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "SecuritySchemesValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public SecuritySchemesValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SecuritySchemesValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public SecuritySchemesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SecuritySchemesValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public SecuritySchemesValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SecuritySchemesValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new SecuritySchemesValue(value.AsJsonElement);
                    }

                    return value.As<SecuritySchemesValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(SecuritySchemesValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SecuritySchemesValue(JsonObject value)
                {
                    return new SecuritySchemesValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(SecuritySchemesValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SecuritySchemesValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SecuritySchemesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new SecuritySchemesValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.SecuritySchemeOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.SecuritySchemeOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.SecuritySchemeOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(SecuritySchemesValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecuritySchemesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<SecuritySchemesValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.SecuritySchemeOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct LinksValue : IJsonObject<LinksValue>, IEquatable<LinksValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public LinksValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public LinksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public LinksValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator LinksValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new LinksValue(value.AsJsonElement);
                    }

                    return value.As<LinksValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(LinksValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator LinksValue(JsonObject value)
                {
                    return new LinksValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(LinksValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(LinksValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator LinksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new LinksValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.LinkOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.LinkOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.LinkOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(LinksValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<LinksValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.LinkOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct CallbacksValue : IJsonObject<CallbacksValue>, IEquatable<CallbacksValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public CallbacksValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public CallbacksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public CallbacksValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator CallbacksValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new CallbacksValue(value.AsJsonElement);
                    }

                    return value.As<CallbacksValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(CallbacksValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator CallbacksValue(JsonObject value)
                {
                    return new CallbacksValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(CallbacksValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(CallbacksValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator CallbacksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new CallbacksValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(CallbacksValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<CallbacksValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct PathItemsValue : IJsonObject<PathItemsValue>, IEquatable<PathItemsValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "PathItemsValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public PathItemsValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "PathItemsValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public PathItemsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "PathItemsValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public PathItemsValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PathItemsValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new PathItemsValue(value.AsJsonElement);
                    }

                    return value.As<PathItemsValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(PathItemsValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PathItemsValue(JsonObject value)
                {
                    return new PathItemsValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(PathItemsValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(PathItemsValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PathItemsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new PathItemsValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(PathItemsValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public PathItemsValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PathItemsValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PathItemsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PathItemsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PathItemsValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PathItemsValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PathItemsValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PathItemsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<PathItemsValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct SecurityRequirementValueArray : IJsonArray<SecurityRequirementValueArray>, IEquatable<SecurityRequirementValueArray>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableList<JsonAny>? arrayBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "SecurityRequirementValueArray"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public SecurityRequirementValueArray(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.arrayBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecurityRequirementValueArray"/> struct.
            /// </summary>
            /// <param name = "value">An array list.</param>
            public SecurityRequirementValueArray(ImmutableList<JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.arrayBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecurityRequirementValueArray"/> struct.
            /// </summary>
            /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
            public SecurityRequirementValueArray(JsonArray jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.jsonElementBacking = jsonArray.AsJsonElement;
                    this.arrayBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = jsonArray.AsItemsList;
                }
            }

            /// <inheritdoc/>
            public int Length
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return items.Count;
                    }

                    return this.jsonElementBacking.GetArrayLength();
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.arrayBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return JsonArray.ItemsToJsonElement(arrayBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny>)
                    {
                        return JsonValueKind.Array;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonAny(arrayBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonArray(arrayBacking);
                    }

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecurityRequirementValueArray(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new SecurityRequirementValueArray(value.AsJsonElement);
                }

                return value.As<SecurityRequirementValueArray>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(SecurityRequirementValueArray value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecurityRequirementValueArray(JsonArray value)
            {
                return new SecurityRequirementValueArray(value);
            }

            /// <summary>
            /// Conversion to array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonArray(SecurityRequirementValueArray value)
            {
                return value.AsArray;
            }

            /// <summary>
            /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableList<JsonAny>(SecurityRequirementValueArray value)
            {
                return value.AsArray.AsItemsList;
            }

            /// <summary>
            /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecurityRequirementValueArray(ImmutableList<JsonAny> value)
            {
                return new SecurityRequirementValueArray(value);
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "items">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static SecurityRequirementValueArray From(params Menes.OpenApi.Type20210415.SecurityRequirementValue[] items)
            {
                return new SecurityRequirementValueArray(items.Select(i => (JsonAny)i).ToImmutableList());
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1)
            {
                return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1, Menes.OpenApi.Type20210415.SecurityRequirementValue item2)
            {
                return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1, Menes.OpenApi.Type20210415.SecurityRequirementValue item2, Menes.OpenApi.Type20210415.SecurityRequirementValue item3)
            {
                return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <param name = "item4">The fourth item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1, Menes.OpenApi.Type20210415.SecurityRequirementValue item2, Menes.OpenApi.Type20210415.SecurityRequirementValue item3, Menes.OpenApi.Type20210415.SecurityRequirementValue item4)
            {
                return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    JsonArray.WriteItems(arrayBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.SecurityRequirementValue"/>.
            /// </summary>
            public JsonArrayEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue> EnumerateItems()
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue>(items);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonArrayEnumerator EnumerateArray()
            {
                return this.AsArray.EnumerateArray();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(SecurityRequirementValueArray other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public SecurityRequirementValueArray Add<TItem>(TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Add(item);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValueArray Insert<TItem>(int index, TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Insert(index, item);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.Replace(oldValue, newValue);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValueArray RemoveAt(int index)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveAt(index);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValueArray RemoveRange(int index, int count)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveRange(index, count);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValueArray SetItem<TItem>(int index, TItem value)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.SetItem(index, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<SecurityRequirementValueArray, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Array)
                {
                    return result;
                }

                int arrayLength = 0;
                JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                while (arrayEnumerator.MoveNext())
                {
                    result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.SecurityRequirementValue>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    arrayLength++;
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultArray.IsValid)
                {
                    return validationContext;
                }

                if (localResultArray.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultArray);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct TagValueArray : IJsonArray<TagValueArray>, IEquatable<TagValueArray>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableList<JsonAny>? arrayBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "TagValueArray"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public TagValueArray(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.arrayBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TagValueArray"/> struct.
            /// </summary>
            /// <param name = "value">An array list.</param>
            public TagValueArray(ImmutableList<JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.arrayBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TagValueArray"/> struct.
            /// </summary>
            /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
            public TagValueArray(JsonArray jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.jsonElementBacking = jsonArray.AsJsonElement;
                    this.arrayBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = jsonArray.AsItemsList;
                }
            }

            /// <inheritdoc/>
            public int Length
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return items.Count;
                    }

                    return this.jsonElementBacking.GetArrayLength();
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.arrayBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return JsonArray.ItemsToJsonElement(arrayBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny>)
                    {
                        return JsonValueKind.Array;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonAny(arrayBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        return new JsonArray(arrayBacking);
                    }

                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TagValueArray(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new TagValueArray(value.AsJsonElement);
                }

                return value.As<TagValueArray>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(TagValueArray value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TagValueArray(JsonArray value)
            {
                return new TagValueArray(value);
            }

            /// <summary>
            /// Conversion to array.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonArray(TagValueArray value)
            {
                return value.AsArray;
            }

            /// <summary>
            /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableList<JsonAny>(TagValueArray value)
            {
                return value.AsArray.AsItemsList;
            }

            /// <summary>
            /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TagValueArray(ImmutableList<JsonAny> value)
            {
                return new TagValueArray(value);
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "items">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static TagValueArray From(params Menes.OpenApi.Type20210415.TagValue[] items)
            {
                return new TagValueArray(items.Select(i => (JsonAny)i).ToImmutableList());
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The items from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static TagValueArray From(Menes.OpenApi.Type20210415.TagValue item1)
            {
                return new TagValueArray(ImmutableList.Create((JsonAny)item1));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static TagValueArray From(Menes.OpenApi.Type20210415.TagValue item1, Menes.OpenApi.Type20210415.TagValue item2)
            {
                return new TagValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static TagValueArray From(Menes.OpenApi.Type20210415.TagValue item1, Menes.OpenApi.Type20210415.TagValue item2, Menes.OpenApi.Type20210415.TagValue item3)
            {
                return new TagValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
            }

            /// <summary>
            /// Create an array from the given items.
            /// </summary>
            /// <param name = "item1">The first item from which to create the array.</param>
            /// <param name = "item2">The second item from which to create the array.</param>
            /// <param name = "item3">The third item from which to create the array.</param>
            /// <param name = "item4">The fourth item from which to create the array.</param>
            /// <returns>The new array created from the items.</returns>
            public static TagValueArray From(Menes.OpenApi.Type20210415.TagValue item1, Menes.OpenApi.Type20210415.TagValue item2, Menes.OpenApi.Type20210415.TagValue item3, Menes.OpenApi.Type20210415.TagValue item4)
            {
                return new TagValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    JsonArray.WriteItems(arrayBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.TagValue"/>.
            /// </summary>
            public JsonArrayEnumerator<Menes.OpenApi.Type20210415.TagValue> EnumerateItems()
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.TagValue>(items);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.TagValue>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonArrayEnumerator EnumerateArray()
            {
                return this.AsArray.EnumerateArray();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(TagValueArray other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public TagValueArray Add<TItem>(TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Add(item);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValueArray Insert<TItem>(int index, TItem item)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsArray.Insert(index, item);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.Replace(oldValue, newValue);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValueArray RemoveAt(int index)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveAt(index);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValueArray RemoveRange(int index, int count)
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.RemoveRange(index, count);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValueArray SetItem<TItem>(int index, TItem value)
                where TItem : struct, IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Array)
                {
                    return this.AsArray.SetItem(index, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<TagValueArray, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Array)
                {
                    return result;
                }

                int arrayLength = 0;
                JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                while (arrayEnumerator.MoveNext())
                {
                    result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.TagValue>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    arrayLength++;
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultArray.IsValid)
                {
                    return validationContext;
                }

                if (localResultArray.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultArray);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ExternalDocumentationValue : IJsonObject<ExternalDocumentationValue>, IEquatable<ExternalDocumentationValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> UrlUtf8JsonPropertyName = new byte[]{117, 114, 108};
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly JsonEncodedText UrlJsonPropertyName = JsonEncodedText.Encode(UrlUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ExternalDocumentationValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ExternalDocumentationValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ExternalDocumentationValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExternalDocumentationValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ExternalDocumentationValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExternalDocumentationValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ExternalDocumentationValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExternalDocumentationValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ExternalDocumentationValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Url.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonUri Url
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(UrlJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(UrlUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonUri(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExternalDocumentationValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ExternalDocumentationValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ExternalDocumentationValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExternalDocumentationValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ExternalDocumentationValue(value.AsJsonElement);
                }

                return value.As<ExternalDocumentationValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ExternalDocumentationValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExternalDocumentationValue(JsonObject value)
            {
                return new ExternalDocumentationValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ExternalDocumentationValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ExternalDocumentationValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExternalDocumentationValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ExternalDocumentationValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ExternalDocumentationValue"/>.
            /// </summary>
            public static ExternalDocumentationValue Create(Menes.Json.JsonUri url, Menes.Json.JsonString? description = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(UrlJsonPropertyName, url);
                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets url.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExternalDocumentationValue WithUrl(Menes.Json.JsonUri value)
            {
                return this.SetProperty(UrlJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExternalDocumentationValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ExternalDocumentationValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExternalDocumentationValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ExternalDocumentationValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ExternalDocumentationValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ExternalDocumentationValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ExternalDocumentationValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(UrlJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonUri property = that.Url;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundUrl = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ExternalDocumentationValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (UrlJsonPropertyName.Equals(propertyName))
                        {
                            foundUrl = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundUrl)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"url\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct SpecificationExtensionsEntity : IJsonObject<SpecificationExtensionsEntity>, IEquatable<SpecificationExtensionsEntity>
        {
            /// <summary>
            /// A pattern property matching ^x- producing a <see cref = "Menes.Json.JsonAny"/>.
            /// </summary>
            public static Regex PatternPropertyJsonAny = new Regex("^x-", RegexOptions.Compiled);
            private static readonly ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = CreatePatternPropertiesValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "SpecificationExtensionsEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public SpecificationExtensionsEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SpecificationExtensionsEntity"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public SpecificationExtensionsEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SpecificationExtensionsEntity"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public SpecificationExtensionsEntity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SpecificationExtensionsEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new SpecificationExtensionsEntity(value.AsJsonElement);
                }

                return value.As<SpecificationExtensionsEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(SpecificationExtensionsEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SpecificationExtensionsEntity(JsonObject value)
            {
                return new SpecificationExtensionsEntity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(SpecificationExtensionsEntity value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SpecificationExtensionsEntity value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SpecificationExtensionsEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new SpecificationExtensionsEntity(value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(SpecificationExtensionsEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SpecificationExtensionsEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<SpecificationExtensionsEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
            {
                ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(PatternPropertyJsonAny, (property, validationContext, level) =>
                {
                    return property.ValueAs<Menes.Json.JsonAny>().Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    string propertyNameAsString = property.Name;
                    foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                    {
                        if (patternProperty.Key.IsMatch(propertyNameAsString))
                        {
                            result = result.WithLocalProperty(propertyName);
                            result = patternProperty.Value(property, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }
                }

                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ContactValue : IJsonObject<ContactValue>, IEquatable<ContactValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly JsonEncodedText NameJsonPropertyName = JsonEncodedText.Encode(NameUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> UrlUtf8JsonPropertyName = new byte[]{117, 114, 108};
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly JsonEncodedText UrlJsonPropertyName = JsonEncodedText.Encode(UrlUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Email"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> EmailUtf8JsonPropertyName = new byte[]{101, 109, 97, 105, 108};
            /// <summary>
            /// JSON property name for <see cref = "Email"/>.
            /// </summary>
            public static readonly JsonEncodedText EmailJsonPropertyName = JsonEncodedText.Encode(EmailUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ContactValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ContactValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ContactValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ContactValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ContactValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ContactValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ContactValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ContactValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ContactValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Name.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Name
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(NameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Url.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Url
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(UrlJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(UrlUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Email.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Email
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(EmailJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(EmailUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ContactValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ContactValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ContactValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ContactValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ContactValue(value.AsJsonElement);
                }

                return value.As<ContactValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ContactValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ContactValue(JsonObject value)
            {
                return new ContactValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ContactValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ContactValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ContactValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ContactValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ContactValue"/>.
            /// </summary>
            public static ContactValue Create(Menes.Json.JsonString? name = null, Menes.Json.JsonString? url = null, Menes.Json.JsonString? email = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (name is Menes.Json.JsonString name__)
                {
                    builder.Add(NameJsonPropertyName, name__);
                }

                if (url is Menes.Json.JsonString url__)
                {
                    builder.Add(UrlJsonPropertyName, url__);
                }

                if (email is Menes.Json.JsonString email__)
                {
                    builder.Add(EmailJsonPropertyName, email__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets name.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ContactValue WithName(Menes.Json.JsonString value)
            {
                return this.SetProperty(NameJsonPropertyName, value);
            }

            /// <summary>
            /// Sets url.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ContactValue WithUrl(Menes.Json.JsonString value)
            {
                return this.SetProperty(UrlJsonPropertyName, value);
            }

            /// <summary>
            /// Sets email.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ContactValue WithEmail(Menes.Json.JsonString value)
            {
                return this.SetProperty(EmailJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ContactValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ContactValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContactValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContactValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContactValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContactValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContactValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContactValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContactValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ContactValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ContactValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ContactValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ContactValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(NameJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Name;
                    return property.Validate(validationContext, level);
                });
                builder.Add(UrlJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Url;
                    return property.Validate(validationContext, level);
                });
                builder.Add(EmailJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Email;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ContactValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct LicenseValue : IJsonObject<LicenseValue>, IEquatable<LicenseValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly JsonEncodedText NameJsonPropertyName = JsonEncodedText.Encode(NameUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Identifier"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> IdentifierUtf8JsonPropertyName = new byte[]{105, 100, 101, 110, 116, 105, 102, 105, 101, 114};
            /// <summary>
            /// JSON property name for <see cref = "Identifier"/>.
            /// </summary>
            public static readonly JsonEncodedText IdentifierJsonPropertyName = JsonEncodedText.Encode(IdentifierUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> UrlUtf8JsonPropertyName = new byte[]{117, 114, 108};
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly JsonEncodedText UrlJsonPropertyName = JsonEncodedText.Encode(UrlUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<LicenseValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "LicenseValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public LicenseValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LicenseValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public LicenseValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LicenseValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public LicenseValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LicenseValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity"/> from which to construct the value.</param>
            public LicenseValue(Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LicenseValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity"/> from which to construct the value.</param>
            public LicenseValue(Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LicenseValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public LicenseValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity AsOneOf0Entity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity"/>.
            /// </summary>
            public bool IsOneOf0Entity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity AsOneOf1Entity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity"/>.
            /// </summary>
            public bool IsOneOf1Entity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Name.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Name
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(NameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Identifier.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Identifier
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(IdentifierJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(IdentifierUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Url.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonUri Url
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(UrlJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(UrlUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonUri(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LicenseValue(Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity value)
            {
                return new LicenseValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity(LicenseValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LicenseValue(Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity value)
            {
                return new LicenseValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity(LicenseValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LicenseValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new LicenseValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(LicenseValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LicenseValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new LicenseValue(value.AsJsonElement);
                }

                return value.As<LicenseValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(LicenseValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LicenseValue(JsonObject value)
            {
                return new LicenseValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(LicenseValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(LicenseValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LicenseValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new LicenseValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "LicenseValue"/>.
            /// </summary>
            public static LicenseValue Create(Menes.Json.JsonString name, Menes.Json.JsonString? identifier = null, Menes.Json.JsonUri? url = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(NameJsonPropertyName, name);
                if (identifier is Menes.Json.JsonString identifier__)
                {
                    builder.Add(IdentifierJsonPropertyName, identifier__);
                }

                if (url is Menes.Json.JsonUri url__)
                {
                    builder.Add(UrlJsonPropertyName, url__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets name.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LicenseValue WithName(Menes.Json.JsonString value)
            {
                return this.SetProperty(NameJsonPropertyName, value);
            }

            /// <summary>
            /// Sets identifier.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LicenseValue WithIdentifier(Menes.Json.JsonString value)
            {
                return this.SetProperty(IdentifierJsonPropertyName, value);
            }

            /// <summary>
            /// Sets url.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LicenseValue WithUrl(Menes.Json.JsonUri value)
            {
                return this.SetProperty(UrlJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(LicenseValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public LicenseValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LicenseValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LicenseValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LicenseValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LicenseValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LicenseValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LicenseValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LicenseValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<LicenseValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateOneOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<LicenseValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<LicenseValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<LicenseValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(NameJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Name;
                    return property.Validate(validationContext, level);
                });
                builder.Add(IdentifierJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Identifier;
                    return property.Validate(validationContext, level);
                });
                builder.Add(UrlJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonUri property = that.Url;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundName = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<LicenseValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (NameJsonPropertyName.Equals(propertyName))
                        {
                            foundName = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundName)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"name\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateOneOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                int oneOfCount = 0;
                ValidationContext oneOfResult0 = this.As<Menes.OpenApi.Type20210415.LicenseValue.OneOf0Entity>().Validate(validationContext.CreateChildContext(), level);
                if (oneOfResult0.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Detailed);
                    oneOfCount += 1;
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(oneOfResult0, true);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(oneOfResult0, true);
                    }
                    else
                    {
                        result = result.MergeChildContext(oneOfResult0, false);
                    }
                }

                ValidationContext oneOfResult1 = this.As<Menes.OpenApi.Type20210415.LicenseValue.OneOf1Entity>().Validate(validationContext.CreateChildContext(), level);
                if (oneOfResult1.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Detailed);
                    oneOfCount += 1;
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(oneOfResult1, true);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(oneOfResult1, true);
                    }
                    else
                    {
                        result = result.MergeChildContext(oneOfResult1, false);
                    }
                }

                if (oneOfCount == 1)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: true, "Validation 10.2.1.3. onef - validated against the oneOf schema.");
                    }
                }
                else if (oneOfCount == 0)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - validated against more than one of the oneOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against more than one of the oneOf schema.");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct OneOf0Entity : IJsonObject<OneOf0Entity>, IEquatable<OneOf0Entity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Identifier"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> IdentifierUtf8JsonPropertyName = new byte[]{105, 100, 101, 110, 116, 105, 102, 105, 101, 114};
                /// <summary>
                /// JSON property name for <see cref = "Identifier"/>.
                /// </summary>
                public static readonly JsonEncodedText IdentifierJsonPropertyName = JsonEncodedText.Encode(IdentifierUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public OneOf0Entity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public OneOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public OneOf0Entity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Identifier.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Identifier
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(IdentifierJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(IdentifierUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new OneOf0Entity(value.AsJsonElement);
                    }

                    return value.As<OneOf0Entity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(OneOf0Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(JsonObject value)
                {
                    return new OneOf0Entity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(OneOf0Entity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OneOf0Entity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new OneOf0Entity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "OneOf0Entity"/>.
                /// </summary>
                public static OneOf0Entity Create(Menes.Json.JsonAny identifier)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(IdentifierJsonPropertyName, identifier);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets identifier.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public OneOf0Entity WithIdentifier(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(IdentifierJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(OneOf0Entity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<OneOf0Entity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(IdentifierJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Identifier;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundIdentifier = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (IdentifierJsonPropertyName.Equals(propertyName))
                            {
                                foundIdentifier = true;
                            }
                        }
                    }

                    if (!foundIdentifier)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"identifier\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct OneOf1Entity : IJsonObject<OneOf1Entity>, IEquatable<OneOf1Entity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Url"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> UrlUtf8JsonPropertyName = new byte[]{117, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "Url"/>.
                /// </summary>
                public static readonly JsonEncodedText UrlJsonPropertyName = JsonEncodedText.Encode(UrlUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public OneOf1Entity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public OneOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public OneOf1Entity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Url.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Url
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(UrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(UrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new OneOf1Entity(value.AsJsonElement);
                    }

                    return value.As<OneOf1Entity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(OneOf1Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(JsonObject value)
                {
                    return new OneOf1Entity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(OneOf1Entity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OneOf1Entity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new OneOf1Entity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "OneOf1Entity"/>.
                /// </summary>
                public static OneOf1Entity Create(Menes.Json.JsonAny url)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(UrlJsonPropertyName, url);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets url.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public OneOf1Entity WithUrl(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(UrlJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(OneOf1Entity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<OneOf1Entity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(UrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Url;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundUrl = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (UrlJsonPropertyName.Equals(propertyName))
                            {
                                foundUrl = true;
                            }
                        }
                    }

                    if (!foundUrl)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"url\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ServerValue : IJsonObject<ServerValue>, IEquatable<ServerValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> UrlUtf8JsonPropertyName = new byte[]{117, 114, 108};
            /// <summary>
            /// JSON property name for <see cref = "Url"/>.
            /// </summary>
            public static readonly JsonEncodedText UrlJsonPropertyName = JsonEncodedText.Encode(UrlUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Variables"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> VariablesUtf8JsonPropertyName = new byte[]{118, 97, 114, 105, 97, 98, 108, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Variables"/>.
            /// </summary>
            public static readonly JsonEncodedText VariablesJsonPropertyName = JsonEncodedText.Encode(VariablesUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ServerValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ServerValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ServerValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ServerValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ServerValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Url.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonUri Url
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(UrlJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(UrlUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonUri(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Variables.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ServerValue.VariablesValue Variables
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(VariablesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(VariablesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ServerValue.VariablesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ServerValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ServerValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ServerValue(value.AsJsonElement);
                }

                return value.As<ServerValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ServerValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerValue(JsonObject value)
            {
                return new ServerValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ServerValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ServerValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ServerValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ServerValue"/>.
            /// </summary>
            public static ServerValue Create(Menes.Json.JsonUri url, Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.ServerValue.VariablesValue? variables = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(UrlJsonPropertyName, url);
                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (variables is Menes.OpenApi.Type20210415.ServerValue.VariablesValue variables__)
                {
                    builder.Add(VariablesJsonPropertyName, variables__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets url.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ServerValue WithUrl(Menes.Json.JsonUri value)
            {
                return this.SetProperty(UrlJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ServerValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets variables.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ServerValue WithVariables(Menes.OpenApi.Type20210415.ServerValue.VariablesValue value)
            {
                return this.SetProperty(VariablesJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ServerValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ServerValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ServerValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ServerValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ServerValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ServerValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(UrlJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonUri property = that.Url;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(VariablesJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ServerValue.VariablesValue property = that.Variables;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundUrl = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ServerValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (UrlJsonPropertyName.Equals(propertyName))
                        {
                            foundUrl = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundUrl)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"url\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct VariablesValue : IJsonObject<VariablesValue>, IEquatable<VariablesValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "VariablesValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public VariablesValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "VariablesValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public VariablesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "VariablesValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public VariablesValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator VariablesValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new VariablesValue(value.AsJsonElement);
                    }

                    return value.As<VariablesValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(VariablesValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator VariablesValue(JsonObject value)
                {
                    return new VariablesValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(VariablesValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(VariablesValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator VariablesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new VariablesValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.ServerVariableValue> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ServerVariableValue>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ServerVariableValue>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(VariablesValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public VariablesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public VariablesValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public VariablesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public VariablesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public VariablesValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public VariablesValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public VariablesValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public VariablesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<VariablesValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.ServerVariableValue>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct PathItemValue : IJsonObject<PathItemValue>, IEquatable<PathItemValue>
        {
            /// <summary>
            /// A pattern property matching ^(get|put|post|delete|options|head|patch|trace)$ producing a <see cref = "Menes.OpenApi.Type20210415.OperationValue"/>.
            /// </summary>
            public static Regex PatternPropertyOperationValue = new Regex("^(get|put|post|delete|options|head|patch|trace)$", RegexOptions.Compiled);
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly JsonEncodedText SummaryJsonPropertyName = JsonEncodedText.Encode(SummaryUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Servers"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ServersUtf8JsonPropertyName = new byte[]{115, 101, 114, 118, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Servers"/>.
            /// </summary>
            public static readonly JsonEncodedText ServersJsonPropertyName = JsonEncodedText.Encode(ServersUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ParametersUtf8JsonPropertyName = new byte[]{112, 97, 114, 97, 109, 101, 116, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly JsonEncodedText ParametersJsonPropertyName = JsonEncodedText.Encode(ParametersUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<PathItemValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = CreatePatternPropertiesValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "PathItemValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public PathItemValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PathItemValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public PathItemValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PathItemValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public PathItemValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "PathItemValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public PathItemValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Summary.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Summary
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Servers.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.PathItemValue.ServerValueArray Servers
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ServersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ServersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.PathItemValue.ServerValueArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Parameters.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.PathItemValue.ParameterOrReferenceEntityArray Parameters
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ParametersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ParametersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.PathItemValue.ParameterOrReferenceEntityArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathItemValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new PathItemValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(PathItemValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathItemValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new PathItemValue(value.AsJsonElement);
                }

                return value.As<PathItemValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(PathItemValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathItemValue(JsonObject value)
            {
                return new PathItemValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(PathItemValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(PathItemValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathItemValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new PathItemValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "PathItemValue"/>.
            /// </summary>
            public static PathItemValue Create(Menes.Json.JsonString? summary = null, Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.PathItemValue.ServerValueArray? servers = null, Menes.OpenApi.Type20210415.PathItemValue.ParameterOrReferenceEntityArray? parameters = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (summary is Menes.Json.JsonString summary__)
                {
                    builder.Add(SummaryJsonPropertyName, summary__);
                }

                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (servers is Menes.OpenApi.Type20210415.PathItemValue.ServerValueArray servers__)
                {
                    builder.Add(ServersJsonPropertyName, servers__);
                }

                if (parameters is Menes.OpenApi.Type20210415.PathItemValue.ParameterOrReferenceEntityArray parameters__)
                {
                    builder.Add(ParametersJsonPropertyName, parameters__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets summary.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public PathItemValue WithSummary(Menes.Json.JsonString value)
            {
                return this.SetProperty(SummaryJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public PathItemValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets servers.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public PathItemValue WithServers(Menes.OpenApi.Type20210415.PathItemValue.ServerValueArray value)
            {
                return this.SetProperty(ServersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets parameters.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public PathItemValue WithParameters(Menes.OpenApi.Type20210415.PathItemValue.ParameterOrReferenceEntityArray value)
            {
                return this.SetProperty(ParametersJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(PathItemValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public PathItemValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathItemValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathItemValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathItemValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathItemValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathItemValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathItemValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public PathItemValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<PathItemValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
            {
                ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(PatternPropertyOperationValue, (property, validationContext, level) =>
                {
                    return property.ValueAs<Menes.OpenApi.Type20210415.OperationValue>().Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<PathItemValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<PathItemValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<PathItemValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(SummaryJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Summary;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ServersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.PathItemValue.ServerValueArray property = that.Servers;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ParametersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.PathItemValue.ParameterOrReferenceEntityArray property = that.Parameters;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<PathItemValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    string propertyNameAsString = property.Name;
                    foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                    {
                        if (patternProperty.Key.IsMatch(propertyNameAsString))
                        {
                            result = result.WithLocalProperty(propertyName);
                            result = patternProperty.Value(property, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ServerValueArray : IJsonArray<ServerValueArray>, IEquatable<ServerValueArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ServerValueArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public ServerValueArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public ServerValueArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ServerValueArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ServerValueArray(value.AsJsonElement);
                    }

                    return value.As<ServerValueArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ServerValueArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ServerValueArray(JsonArray value)
                {
                    return new ServerValueArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(ServerValueArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(ServerValueArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ServerValueArray(ImmutableList<JsonAny> value)
                {
                    return new ServerValueArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(params Menes.OpenApi.Type20210415.ServerValue[] items)
                {
                    return new ServerValueArray(items.Select(i => (JsonAny)i).ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2, Menes.OpenApi.Type20210415.ServerValue item3)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2, Menes.OpenApi.Type20210415.ServerValue item3, Menes.OpenApi.Type20210415.ServerValue item4)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.ServerValue"/>.
                /// </summary>
                public JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue> EnumerateItems()
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue>(items);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ServerValueArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public ServerValueArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ServerValueArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.ServerValue>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ParameterOrReferenceEntityArray : IJsonArray<ParameterOrReferenceEntityArray>, IEquatable<ParameterOrReferenceEntityArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ParameterOrReferenceEntityArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ParameterOrReferenceEntityArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ParameterOrReferenceEntityArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public ParameterOrReferenceEntityArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ParameterOrReferenceEntityArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public ParameterOrReferenceEntityArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParameterOrReferenceEntityArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ParameterOrReferenceEntityArray(value.AsJsonElement);
                    }

                    return value.As<ParameterOrReferenceEntityArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ParameterOrReferenceEntityArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParameterOrReferenceEntityArray(JsonArray value)
                {
                    return new ParameterOrReferenceEntityArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(ParameterOrReferenceEntityArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(ParameterOrReferenceEntityArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParameterOrReferenceEntityArray(ImmutableList<JsonAny> value)
                {
                    return new ParameterOrReferenceEntityArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(params Menes.OpenApi.Type20210415.ParameterOrReferenceEntity[] items)
                {
                    return new ParameterOrReferenceEntityArray(items.Select(i => (JsonAny)i).ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item2)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item2, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item3)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item2, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item3, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item4)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.ParameterOrReferenceEntity"/>.
                /// </summary>
                public JsonArrayEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity> EnumerateItems()
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>(items);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ParameterOrReferenceEntityArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ParameterOrReferenceEntityArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct PathItemOrReferenceEntity : IJsonValue, IEquatable<PathItemOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "PathItemOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public PathItemOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PathItemOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new PathItemOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<PathItemOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(PathItemOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(PathItemOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<PathItemOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.PathItemValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct SecurityRequirementValue : IJsonObject<SecurityRequirementValue>, IEquatable<SecurityRequirementValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "SecurityRequirementValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public SecurityRequirementValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecurityRequirementValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public SecurityRequirementValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecurityRequirementValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public SecurityRequirementValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecurityRequirementValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new SecurityRequirementValue(value.AsJsonElement);
                }

                return value.As<SecurityRequirementValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(SecurityRequirementValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecurityRequirementValue(JsonObject value)
            {
                return new SecurityRequirementValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(SecurityRequirementValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SecurityRequirementValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecurityRequirementValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new SecurityRequirementValue(value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the object as the given item type
            /// </summary>
            public JsonObjectEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue.JsonStringArray> EnumerateProperties()
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue.JsonStringArray>(properties);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue.JsonStringArray>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(SecurityRequirementValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecurityRequirementValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<SecurityRequirementValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (!result.HasEvaluatedLocalProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.OpenApi.Type20210415.SecurityRequirementValue.JsonStringArray>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct JsonStringArray : IJsonArray<JsonStringArray>, IEquatable<JsonStringArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonStringArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public JsonStringArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonStringArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public JsonStringArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonStringArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public JsonStringArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonStringArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new JsonStringArray(value.AsJsonElement);
                    }

                    return value.As<JsonStringArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(JsonStringArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonStringArray(JsonArray value)
                {
                    return new JsonStringArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(JsonStringArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(JsonStringArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonStringArray(ImmutableList<JsonAny> value)
                {
                    return new JsonStringArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(params Menes.Json.JsonString[] items)
                {
                    return new JsonStringArray(items.Select(i => (JsonAny)i).ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1, Menes.Json.JsonString item2)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1, Menes.Json.JsonString item2, Menes.Json.JsonString item3)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1, Menes.Json.JsonString item2, Menes.Json.JsonString item3, Menes.Json.JsonString item4)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the items in the array as a <see cref = "Menes.Json.JsonString"/>.
                /// </summary>
                public JsonArrayEnumerator<Menes.Json.JsonString> EnumerateItems()
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return new JsonArrayEnumerator<Menes.Json.JsonString>(items);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                    {
                        return new JsonArrayEnumerator<Menes.Json.JsonString>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(JsonStringArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public JsonStringArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<JsonStringArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.Json.JsonString>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct TagValue : IJsonObject<TagValue>, IEquatable<TagValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly JsonEncodedText NameJsonPropertyName = JsonEncodedText.Encode(NameUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "ExternalDocs"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExternalDocsUtf8JsonPropertyName = new byte[]{101, 120, 116, 101, 114, 110, 97, 108, 68, 111, 99, 115};
            /// <summary>
            /// JSON property name for <see cref = "ExternalDocs"/>.
            /// </summary>
            public static readonly JsonEncodedText ExternalDocsJsonPropertyName = JsonEncodedText.Encode(ExternalDocsUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<TagValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "TagValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public TagValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TagValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public TagValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TagValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public TagValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "TagValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public TagValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Name.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Name
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(NameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets ExternalDocs.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ExternalDocumentationValue ExternalDocs
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExternalDocsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExternalDocsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ExternalDocumentationValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TagValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new TagValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(TagValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TagValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new TagValue(value.AsJsonElement);
                }

                return value.As<TagValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(TagValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TagValue(JsonObject value)
            {
                return new TagValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(TagValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(TagValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator TagValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new TagValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "TagValue"/>.
            /// </summary>
            public static TagValue Create(Menes.Json.JsonString name, Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.ExternalDocumentationValue? externalDocs = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(NameJsonPropertyName, name);
                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (externalDocs is Menes.OpenApi.Type20210415.ExternalDocumentationValue externalDocs__)
                {
                    builder.Add(ExternalDocsJsonPropertyName, externalDocs__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets name.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public TagValue WithName(Menes.Json.JsonString value)
            {
                return this.SetProperty(NameJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public TagValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets externalDocs.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public TagValue WithExternalDocs(Menes.OpenApi.Type20210415.ExternalDocumentationValue value)
            {
                return this.SetProperty(ExternalDocsJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(TagValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public TagValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public TagValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<TagValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<TagValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<TagValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<TagValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(NameJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Name;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ExternalDocsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ExternalDocumentationValue property = that.ExternalDocs;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundName = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<TagValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (NameJsonPropertyName.Equals(propertyName))
                        {
                            foundName = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundName)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"name\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct OperationValue : IJsonObject<OperationValue>, IEquatable<OperationValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Tags"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> TagsUtf8JsonPropertyName = new byte[]{116, 97, 103, 115};
            /// <summary>
            /// JSON property name for <see cref = "Tags"/>.
            /// </summary>
            public static readonly JsonEncodedText TagsJsonPropertyName = JsonEncodedText.Encode(TagsUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly JsonEncodedText SummaryJsonPropertyName = JsonEncodedText.Encode(SummaryUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "ExternalDocs"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExternalDocsUtf8JsonPropertyName = new byte[]{101, 120, 116, 101, 114, 110, 97, 108, 68, 111, 99, 115};
            /// <summary>
            /// JSON property name for <see cref = "ExternalDocs"/>.
            /// </summary>
            public static readonly JsonEncodedText ExternalDocsJsonPropertyName = JsonEncodedText.Encode(ExternalDocsUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "OperationId"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> OperationIdUtf8JsonPropertyName = new byte[]{111, 112, 101, 114, 97, 116, 105, 111, 110, 73, 100};
            /// <summary>
            /// JSON property name for <see cref = "OperationId"/>.
            /// </summary>
            public static readonly JsonEncodedText OperationIdJsonPropertyName = JsonEncodedText.Encode(OperationIdUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ParametersUtf8JsonPropertyName = new byte[]{112, 97, 114, 97, 109, 101, 116, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly JsonEncodedText ParametersJsonPropertyName = JsonEncodedText.Encode(ParametersUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "RequestBody"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RequestBodyUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 101, 115, 116, 66, 111, 100, 121};
            /// <summary>
            /// JSON property name for <see cref = "RequestBody"/>.
            /// </summary>
            public static readonly JsonEncodedText RequestBodyJsonPropertyName = JsonEncodedText.Encode(RequestBodyUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Responses"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ResponsesUtf8JsonPropertyName = new byte[]{114, 101, 115, 112, 111, 110, 115, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Responses"/>.
            /// </summary>
            public static readonly JsonEncodedText ResponsesJsonPropertyName = JsonEncodedText.Encode(ResponsesUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Callbacks"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> CallbacksUtf8JsonPropertyName = new byte[]{99, 97, 108, 108, 98, 97, 99, 107, 115};
            /// <summary>
            /// JSON property name for <see cref = "Callbacks"/>.
            /// </summary>
            public static readonly JsonEncodedText CallbacksJsonPropertyName = JsonEncodedText.Encode(CallbacksUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Deprecated"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DeprecatedUtf8JsonPropertyName = new byte[]{100, 101, 112, 114, 101, 99, 97, 116, 101, 100};
            /// <summary>
            /// JSON property name for <see cref = "Deprecated"/>.
            /// </summary>
            public static readonly JsonEncodedText DeprecatedJsonPropertyName = JsonEncodedText.Encode(DeprecatedUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Security"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SecurityUtf8JsonPropertyName = new byte[]{115, 101, 99, 117, 114, 105, 116, 121};
            /// <summary>
            /// JSON property name for <see cref = "Security"/>.
            /// </summary>
            public static readonly JsonEncodedText SecurityJsonPropertyName = JsonEncodedText.Encode(SecurityUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Servers"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ServersUtf8JsonPropertyName = new byte[]{115, 101, 114, 118, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Servers"/>.
            /// </summary>
            public static readonly JsonEncodedText ServersJsonPropertyName = JsonEncodedText.Encode(ServersUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<OperationValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "OperationValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public OperationValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OperationValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public OperationValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OperationValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public OperationValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OperationValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public OperationValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Tags.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OperationValue.JsonStringArray Tags
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(TagsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(TagsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OperationValue.JsonStringArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Summary.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Summary
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets ExternalDocs.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ExternalDocumentationValue ExternalDocs
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExternalDocsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExternalDocsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ExternalDocumentationValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets OperationId.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString OperationId
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(OperationIdJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(OperationIdUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Parameters.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OperationValue.ParameterOrReferenceEntityArray Parameters
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ParametersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ParametersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OperationValue.ParameterOrReferenceEntityArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets RequestBody.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity RequestBody
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RequestBodyJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RequestBodyUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Responses.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ResponsesValue Responses
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ResponsesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ResponsesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ResponsesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Callbacks.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OperationValue.CallbacksValue Callbacks
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(CallbacksJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(CallbacksUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OperationValue.CallbacksValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Deprecated.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OperationValue.DeprecatedValue Deprecated
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DeprecatedJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DeprecatedUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OperationValue.DeprecatedValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Security.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OperationValue.SecurityRequirementValueArray Security
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SecurityJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SecurityUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OperationValue.SecurityRequirementValueArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Servers.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OperationValue.ServerValueArray Servers
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ServersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ServersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OperationValue.ServerValueArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OperationValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new OperationValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(OperationValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OperationValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new OperationValue(value.AsJsonElement);
                }

                return value.As<OperationValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(OperationValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OperationValue(JsonObject value)
            {
                return new OperationValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(OperationValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OperationValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OperationValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new OperationValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "OperationValue"/>.
            /// </summary>
            public static OperationValue Create(Menes.OpenApi.Type20210415.OperationValue.JsonStringArray? tags = null, Menes.Json.JsonString? summary = null, Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.ExternalDocumentationValue? externalDocs = null, Menes.Json.JsonString? operationId = null, Menes.OpenApi.Type20210415.OperationValue.ParameterOrReferenceEntityArray? parameters = null, Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity? requestBody = null, Menes.OpenApi.Type20210415.ResponsesValue? responses = null, Menes.OpenApi.Type20210415.OperationValue.CallbacksValue? callbacks = null, Menes.OpenApi.Type20210415.OperationValue.DeprecatedValue? deprecated = null, Menes.OpenApi.Type20210415.OperationValue.SecurityRequirementValueArray? security = null, Menes.OpenApi.Type20210415.OperationValue.ServerValueArray? servers = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (tags is Menes.OpenApi.Type20210415.OperationValue.JsonStringArray tags__)
                {
                    builder.Add(TagsJsonPropertyName, tags__);
                }

                if (summary is Menes.Json.JsonString summary__)
                {
                    builder.Add(SummaryJsonPropertyName, summary__);
                }

                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (externalDocs is Menes.OpenApi.Type20210415.ExternalDocumentationValue externalDocs__)
                {
                    builder.Add(ExternalDocsJsonPropertyName, externalDocs__);
                }

                if (operationId is Menes.Json.JsonString operationId__)
                {
                    builder.Add(OperationIdJsonPropertyName, operationId__);
                }

                if (parameters is Menes.OpenApi.Type20210415.OperationValue.ParameterOrReferenceEntityArray parameters__)
                {
                    builder.Add(ParametersJsonPropertyName, parameters__);
                }

                if (requestBody is Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity requestBody__)
                {
                    builder.Add(RequestBodyJsonPropertyName, requestBody__);
                }

                if (responses is Menes.OpenApi.Type20210415.ResponsesValue responses__)
                {
                    builder.Add(ResponsesJsonPropertyName, responses__);
                }

                if (callbacks is Menes.OpenApi.Type20210415.OperationValue.CallbacksValue callbacks__)
                {
                    builder.Add(CallbacksJsonPropertyName, callbacks__);
                }

                if (deprecated is Menes.OpenApi.Type20210415.OperationValue.DeprecatedValue deprecated__)
                {
                    builder.Add(DeprecatedJsonPropertyName, deprecated__);
                }

                if (security is Menes.OpenApi.Type20210415.OperationValue.SecurityRequirementValueArray security__)
                {
                    builder.Add(SecurityJsonPropertyName, security__);
                }

                if (servers is Menes.OpenApi.Type20210415.OperationValue.ServerValueArray servers__)
                {
                    builder.Add(ServersJsonPropertyName, servers__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets tags.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithTags(Menes.OpenApi.Type20210415.OperationValue.JsonStringArray value)
            {
                return this.SetProperty(TagsJsonPropertyName, value);
            }

            /// <summary>
            /// Sets summary.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithSummary(Menes.Json.JsonString value)
            {
                return this.SetProperty(SummaryJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets externalDocs.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithExternalDocs(Menes.OpenApi.Type20210415.ExternalDocumentationValue value)
            {
                return this.SetProperty(ExternalDocsJsonPropertyName, value);
            }

            /// <summary>
            /// Sets operationId.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithOperationId(Menes.Json.JsonString value)
            {
                return this.SetProperty(OperationIdJsonPropertyName, value);
            }

            /// <summary>
            /// Sets parameters.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithParameters(Menes.OpenApi.Type20210415.OperationValue.ParameterOrReferenceEntityArray value)
            {
                return this.SetProperty(ParametersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets requestBody.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithRequestBody(Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity value)
            {
                return this.SetProperty(RequestBodyJsonPropertyName, value);
            }

            /// <summary>
            /// Sets responses.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithResponses(Menes.OpenApi.Type20210415.ResponsesValue value)
            {
                return this.SetProperty(ResponsesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets callbacks.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithCallbacks(Menes.OpenApi.Type20210415.OperationValue.CallbacksValue value)
            {
                return this.SetProperty(CallbacksJsonPropertyName, value);
            }

            /// <summary>
            /// Sets deprecated.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithDeprecated(Menes.OpenApi.Type20210415.OperationValue.DeprecatedValue value)
            {
                return this.SetProperty(DeprecatedJsonPropertyName, value);
            }

            /// <summary>
            /// Sets security.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithSecurity(Menes.OpenApi.Type20210415.OperationValue.SecurityRequirementValueArray value)
            {
                return this.SetProperty(SecurityJsonPropertyName, value);
            }

            /// <summary>
            /// Sets servers.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OperationValue WithServers(Menes.OpenApi.Type20210415.OperationValue.ServerValueArray value)
            {
                return this.SetProperty(ServersJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(string name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
            }

            /// <inheritdoc/>
            public bool HasDefault(JsonEncodedText name)
            {
                return __MenesDefaults.TryGetValue(name, out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(string name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<char> name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<byte> utf8name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(OperationValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public OperationValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OperationValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OperationValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OperationValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OperationValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public OperationValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public OperationValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public OperationValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<OperationValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
            {
                ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(DeprecatedJsonPropertyName, JsonAny.Parse("false"));
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<OperationValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<OperationValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OperationValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(TagsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OperationValue.JsonStringArray property = that.Tags;
                    return property.Validate(validationContext, level);
                });
                builder.Add(SummaryJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Summary;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ExternalDocsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ExternalDocumentationValue property = that.ExternalDocs;
                    return property.Validate(validationContext, level);
                });
                builder.Add(OperationIdJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.OperationId;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ParametersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OperationValue.ParameterOrReferenceEntityArray property = that.Parameters;
                    return property.Validate(validationContext, level);
                });
                builder.Add(RequestBodyJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity property = that.RequestBody;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ResponsesJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ResponsesValue property = that.Responses;
                    return property.Validate(validationContext, level);
                });
                builder.Add(CallbacksJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OperationValue.CallbacksValue property = that.Callbacks;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DeprecatedJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OperationValue.DeprecatedValue property = that.Deprecated;
                    return property.Validate(validationContext, level);
                });
                builder.Add(SecurityJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OperationValue.SecurityRequirementValueArray property = that.Security;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ServersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OperationValue.ServerValueArray property = that.Servers;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OperationValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct JsonStringArray : IJsonArray<JsonStringArray>, IEquatable<JsonStringArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonStringArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public JsonStringArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonStringArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public JsonStringArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonStringArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public JsonStringArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonStringArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new JsonStringArray(value.AsJsonElement);
                    }

                    return value.As<JsonStringArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(JsonStringArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonStringArray(JsonArray value)
                {
                    return new JsonStringArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(JsonStringArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(JsonStringArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonStringArray(ImmutableList<JsonAny> value)
                {
                    return new JsonStringArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(params Menes.Json.JsonString[] items)
                {
                    return new JsonStringArray(items.Select(i => (JsonAny)i).ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1, Menes.Json.JsonString item2)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1, Menes.Json.JsonString item2, Menes.Json.JsonString item3)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonStringArray From(Menes.Json.JsonString item1, Menes.Json.JsonString item2, Menes.Json.JsonString item3, Menes.Json.JsonString item4)
                {
                    return new JsonStringArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the items in the array as a <see cref = "Menes.Json.JsonString"/>.
                /// </summary>
                public JsonArrayEnumerator<Menes.Json.JsonString> EnumerateItems()
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return new JsonArrayEnumerator<Menes.Json.JsonString>(items);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                    {
                        return new JsonArrayEnumerator<Menes.Json.JsonString>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(JsonStringArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public JsonStringArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonStringArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<JsonStringArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.Json.JsonString>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ParameterOrReferenceEntityArray : IJsonArray<ParameterOrReferenceEntityArray>, IEquatable<ParameterOrReferenceEntityArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ParameterOrReferenceEntityArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ParameterOrReferenceEntityArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ParameterOrReferenceEntityArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public ParameterOrReferenceEntityArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ParameterOrReferenceEntityArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public ParameterOrReferenceEntityArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParameterOrReferenceEntityArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ParameterOrReferenceEntityArray(value.AsJsonElement);
                    }

                    return value.As<ParameterOrReferenceEntityArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ParameterOrReferenceEntityArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParameterOrReferenceEntityArray(JsonArray value)
                {
                    return new ParameterOrReferenceEntityArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(ParameterOrReferenceEntityArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(ParameterOrReferenceEntityArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ParameterOrReferenceEntityArray(ImmutableList<JsonAny> value)
                {
                    return new ParameterOrReferenceEntityArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(params Menes.OpenApi.Type20210415.ParameterOrReferenceEntity[] items)
                {
                    return new ParameterOrReferenceEntityArray(items.Select(i => (JsonAny)i).ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item2)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item2, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item3)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ParameterOrReferenceEntityArray From(Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item1, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item2, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item3, Menes.OpenApi.Type20210415.ParameterOrReferenceEntity item4)
                {
                    return new ParameterOrReferenceEntityArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.ParameterOrReferenceEntity"/>.
                /// </summary>
                public JsonArrayEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity> EnumerateItems()
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>(items);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ParameterOrReferenceEntityArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ParameterOrReferenceEntityArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ParameterOrReferenceEntityArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct CallbacksValue : IJsonObject<CallbacksValue>, IEquatable<CallbacksValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public CallbacksValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public CallbacksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public CallbacksValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator CallbacksValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new CallbacksValue(value.AsJsonElement);
                    }

                    return value.As<CallbacksValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(CallbacksValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator CallbacksValue(JsonObject value)
                {
                    return new CallbacksValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(CallbacksValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(CallbacksValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator CallbacksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new CallbacksValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(CallbacksValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public CallbacksValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<CallbacksValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct DeprecatedValue : IJsonValue, IEquatable<DeprecatedValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public DeprecatedValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public DeprecatedValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public DeprecatedValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new DeprecatedValue(value.AsJsonElement);
                    }

                    return value.As<DeprecatedValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(DeprecatedValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(bool value)
                {
                    return new DeprecatedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (DeprecatedValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(JsonBoolean value)
                {
                    return new DeprecatedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(DeprecatedValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(DeprecatedValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<DeprecatedValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct SecurityRequirementValueArray : IJsonArray<SecurityRequirementValueArray>, IEquatable<SecurityRequirementValueArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "SecurityRequirementValueArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public SecurityRequirementValueArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SecurityRequirementValueArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public SecurityRequirementValueArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SecurityRequirementValueArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public SecurityRequirementValueArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SecurityRequirementValueArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new SecurityRequirementValueArray(value.AsJsonElement);
                    }

                    return value.As<SecurityRequirementValueArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(SecurityRequirementValueArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SecurityRequirementValueArray(JsonArray value)
                {
                    return new SecurityRequirementValueArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(SecurityRequirementValueArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(SecurityRequirementValueArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SecurityRequirementValueArray(ImmutableList<JsonAny> value)
                {
                    return new SecurityRequirementValueArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static SecurityRequirementValueArray From(params Menes.OpenApi.Type20210415.SecurityRequirementValue[] items)
                {
                    return new SecurityRequirementValueArray(items.Select(i => (JsonAny)i).ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1)
                {
                    return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1, Menes.OpenApi.Type20210415.SecurityRequirementValue item2)
                {
                    return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1, Menes.OpenApi.Type20210415.SecurityRequirementValue item2, Menes.OpenApi.Type20210415.SecurityRequirementValue item3)
                {
                    return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static SecurityRequirementValueArray From(Menes.OpenApi.Type20210415.SecurityRequirementValue item1, Menes.OpenApi.Type20210415.SecurityRequirementValue item2, Menes.OpenApi.Type20210415.SecurityRequirementValue item3, Menes.OpenApi.Type20210415.SecurityRequirementValue item4)
                {
                    return new SecurityRequirementValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.SecurityRequirementValue"/>.
                /// </summary>
                public JsonArrayEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue> EnumerateItems()
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue>(items);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.SecurityRequirementValue>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(SecurityRequirementValueArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public SecurityRequirementValueArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecurityRequirementValueArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecurityRequirementValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecurityRequirementValueArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecurityRequirementValueArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SecurityRequirementValueArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<SecurityRequirementValueArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.SecurityRequirementValue>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ServerValueArray : IJsonArray<ServerValueArray>, IEquatable<ServerValueArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ServerValueArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public ServerValueArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ServerValueArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public ServerValueArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ServerValueArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ServerValueArray(value.AsJsonElement);
                    }

                    return value.As<ServerValueArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ServerValueArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ServerValueArray(JsonArray value)
                {
                    return new ServerValueArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(ServerValueArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(ServerValueArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ServerValueArray(ImmutableList<JsonAny> value)
                {
                    return new ServerValueArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(params Menes.OpenApi.Type20210415.ServerValue[] items)
                {
                    return new ServerValueArray(items.Select(i => (JsonAny)i).ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2, Menes.OpenApi.Type20210415.ServerValue item3)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static ServerValueArray From(Menes.OpenApi.Type20210415.ServerValue item1, Menes.OpenApi.Type20210415.ServerValue item2, Menes.OpenApi.Type20210415.ServerValue item3, Menes.OpenApi.Type20210415.ServerValue item4)
                {
                    return new ServerValueArray(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the items in the array as a <see cref = "Menes.OpenApi.Type20210415.ServerValue"/>.
                /// </summary>
                public JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue> EnumerateItems()
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> items)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue>(items);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Array)
                    {
                        return new JsonArrayEnumerator<Menes.OpenApi.Type20210415.ServerValue>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ServerValueArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public ServerValueArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ServerValueArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ServerValueArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.OpenApi.Type20210415.ServerValue>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ReferenceValue : IJsonObject<ReferenceValue>, IEquatable<ReferenceValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Ref"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
            /// <summary>
            /// JSON property name for <see cref = "Ref"/>.
            /// </summary>
            public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly JsonEncodedText SummaryJsonPropertyName = JsonEncodedText.Encode(SummaryUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ReferenceValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ReferenceValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ReferenceValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ReferenceValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ReferenceValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ReferenceValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ReferenceValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets Ref.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonUri Ref
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonUri(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Summary.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Summary
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ReferenceValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ReferenceValue(value.AsJsonElement);
                }

                return value.As<ReferenceValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ReferenceValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ReferenceValue(JsonObject value)
            {
                return new ReferenceValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ReferenceValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ReferenceValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ReferenceValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ReferenceValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ReferenceValue"/>.
            /// </summary>
            public static ReferenceValue Create(Menes.Json.JsonUri? @ref = null, Menes.Json.JsonString? summary = null, Menes.Json.JsonString? description = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (@ref is Menes.Json.JsonUri @ref__)
                {
                    builder.Add(RefJsonPropertyName, @ref__);
                }

                if (summary is Menes.Json.JsonString summary__)
                {
                    builder.Add(SummaryJsonPropertyName, summary__);
                }

                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets $ref.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ReferenceValue WithRef(Menes.Json.JsonUri value)
            {
                return this.SetProperty(RefJsonPropertyName, value);
            }

            /// <summary>
            /// Sets summary.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ReferenceValue WithSummary(Menes.Json.JsonString value)
            {
                return this.SetProperty(SummaryJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ReferenceValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ReferenceValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ReferenceValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ReferenceValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ReferenceValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ReferenceValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ReferenceValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ReferenceValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ReferenceValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ReferenceValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ReferenceValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ReferenceValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ReferenceValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ReferenceValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonUri property = that.Ref;
                    return property.Validate(validationContext, level);
                });
                builder.Add(SummaryJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Summary;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ReferenceValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ResponseOrReferenceEntity : IJsonValue, IEquatable<ResponseOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponseOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ResponseOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponseOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ResponseOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<ResponseOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ResponseOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ResponseOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ResponseOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ResponseOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.ResponseValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ParameterOrReferenceEntity : IJsonValue, IEquatable<ParameterOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ParameterOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ParameterOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ParameterOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ParameterOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<ParameterOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ParameterOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ParameterOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ParameterOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ParameterOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.ParameterValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ExampleOrReferenceEntity : IJsonValue, IEquatable<ExampleOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ExampleOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ExampleOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExampleOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ExampleOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<ExampleOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ExampleOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ExampleOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ExampleOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.ExampleValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct RequestBodyOrReferenceEntity : IJsonValue, IEquatable<RequestBodyOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "RequestBodyOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public RequestBodyOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator RequestBodyOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new RequestBodyOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<RequestBodyOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(RequestBodyOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(RequestBodyOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<RequestBodyOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.RequestBodyOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.RequestBodyValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct HeaderOrReferenceEntity : IJsonValue, IEquatable<HeaderOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "HeaderOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public HeaderOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator HeaderOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new HeaderOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<HeaderOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(HeaderOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(HeaderOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<HeaderOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.HeaderValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct SecuritySchemeOrReferenceEntity : IJsonValue, IEquatable<SecuritySchemeOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public SecuritySchemeOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new SecuritySchemeOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<SecuritySchemeOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(SecuritySchemeOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(SecuritySchemeOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<SecuritySchemeOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct LinkOrReferenceEntity : IJsonValue, IEquatable<LinkOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "LinkOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public LinkOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinkOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new LinkOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<LinkOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(LinkOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(LinkOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<LinkOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.LinkOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.LinkValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct CallbacksOrReferenceEntity : IJsonValue, IEquatable<CallbacksOrReferenceEntity>
        {
            private readonly JsonElement jsonElementBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "CallbacksOrReferenceEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public CallbacksOrReferenceEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => true;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator CallbacksOrReferenceEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new CallbacksOrReferenceEntity(value.AsJsonElement);
                }

                return value.As<CallbacksOrReferenceEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(CallbacksOrReferenceEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(CallbacksOrReferenceEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<CallbacksOrReferenceEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateIfThenElse(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.CallbacksOrReferenceEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }

                    result = result.MergeChildContext(ifResult, false);
                }

                if (ifResult.IsValid)
                {
                    ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ReferenceValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }

                        result = result.MergeChildContext(thenResult, false);
                    }
                }

                if (!ifResult.IsValid)
                {
                    ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.CallbacksValue>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }

                        result = result.MergeChildContext(elseResult, false);
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "Ref"/>.
                /// </summary>
                public static readonly JsonEncodedText RefJsonPropertyName = JsonEncodedText.Encode(RefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public IfEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public IfEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Ref.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Ref
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new IfEntity(value.AsJsonElement);
                    }

                    return value.As<IfEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(IfEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(JsonObject value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(IfEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new IfEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "IfEntity"/>.
                /// </summary>
                public static IfEntity Create(Menes.Json.JsonAny @ref)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(RefJsonPropertyName, @ref);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets $ref.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public IfEntity WithRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(RefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(IfEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<IfEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(RefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Ref;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (RefJsonPropertyName.Equals(propertyName))
                            {
                                foundRef = true;
                            }
                        }
                    }

                    if (!foundRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"$ref\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ServerVariableValue : IJsonObject<ServerVariableValue>, IEquatable<ServerVariableValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Default"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DefaultUtf8JsonPropertyName = new byte[]{100, 101, 102, 97, 117, 108, 116};
            /// <summary>
            /// JSON property name for <see cref = "Default"/>.
            /// </summary>
            public static readonly JsonEncodedText DefaultJsonPropertyName = JsonEncodedText.Encode(DefaultUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Enum"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> EnumUtf8JsonPropertyName = new byte[]{101, 110, 117, 109};
            /// <summary>
            /// JSON property name for <see cref = "Enum"/>.
            /// </summary>
            public static readonly JsonEncodedText EnumJsonPropertyName = JsonEncodedText.Encode(EnumUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Descriptions"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionsUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115};
            /// <summary>
            /// JSON property name for <see cref = "Descriptions"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionsJsonPropertyName = JsonEncodedText.Encode(DescriptionsUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ServerVariableValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerVariableValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ServerVariableValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerVariableValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ServerVariableValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerVariableValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ServerVariableValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ServerVariableValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ServerVariableValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Default.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Default
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DefaultJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DefaultUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Enum.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ServerVariableValue.JsonAnyArray Enum
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(EnumJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(EnumUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ServerVariableValue.JsonAnyArray(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Descriptions.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Descriptions
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerVariableValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ServerVariableValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ServerVariableValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerVariableValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ServerVariableValue(value.AsJsonElement);
                }

                return value.As<ServerVariableValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ServerVariableValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerVariableValue(JsonObject value)
            {
                return new ServerVariableValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ServerVariableValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ServerVariableValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ServerVariableValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ServerVariableValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ServerVariableValue"/>.
            /// </summary>
            public static ServerVariableValue Create(Menes.Json.JsonString @default, Menes.OpenApi.Type20210415.ServerVariableValue.JsonAnyArray? @enum = null, Menes.Json.JsonString? descriptions = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(DefaultJsonPropertyName, @default);
                if (@enum is Menes.OpenApi.Type20210415.ServerVariableValue.JsonAnyArray @enum__)
                {
                    builder.Add(EnumJsonPropertyName, @enum__);
                }

                if (descriptions is Menes.Json.JsonString descriptions__)
                {
                    builder.Add(DescriptionsJsonPropertyName, descriptions__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets default.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ServerVariableValue WithDefault(Menes.Json.JsonString value)
            {
                return this.SetProperty(DefaultJsonPropertyName, value);
            }

            /// <summary>
            /// Sets enum.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ServerVariableValue WithEnum(Menes.OpenApi.Type20210415.ServerVariableValue.JsonAnyArray value)
            {
                return this.SetProperty(EnumJsonPropertyName, value);
            }

            /// <summary>
            /// Sets descriptions.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ServerVariableValue WithDescriptions(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionsJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ServerVariableValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ServerVariableValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerVariableValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerVariableValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerVariableValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerVariableValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerVariableValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerVariableValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ServerVariableValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ServerVariableValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ServerVariableValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ServerVariableValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ServerVariableValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(DefaultJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Default;
                    return property.Validate(validationContext, level);
                });
                builder.Add(EnumJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ServerVariableValue.JsonAnyArray property = that.Enum;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Descriptions;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundDefault = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ServerVariableValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (DefaultJsonPropertyName.Equals(propertyName))
                        {
                            foundDefault = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundDefault)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"default\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct JsonAnyArray : IJsonArray<JsonAnyArray>, IEquatable<JsonAnyArray>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableList<JsonAny>? arrayBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonAnyArray"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public JsonAnyArray(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.arrayBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonAnyArray"/> struct.
                /// </summary>
                /// <param name = "value">An array list.</param>
                public JsonAnyArray(ImmutableList<JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.arrayBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "JsonAnyArray"/> struct.
                /// </summary>
                /// <param name = "jsonArray">The <see cref = "JsonArray"/> from which to construct the value.</param>
                public JsonAnyArray(JsonArray jsonArray)
                {
                    if (jsonArray.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonArray.AsJsonElement;
                        this.arrayBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.arrayBacking = jsonArray.AsItemsList;
                    }
                }

                /// <inheritdoc/>
                public int Length
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> items)
                        {
                            return items.Count;
                        }

                        return this.jsonElementBacking.GetArrayLength();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.arrayBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return JsonArray.ItemsToJsonElement(arrayBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny>)
                        {
                            return JsonValueKind.Array;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonAny(arrayBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                        {
                            return new JsonArray(arrayBacking);
                        }

                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAnyArray(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new JsonAnyArray(value.AsJsonElement);
                    }

                    return value.As<JsonAnyArray>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(JsonAnyArray value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAnyArray(JsonArray value)
                {
                    return new JsonAnyArray(value);
                }

                /// <summary>
                /// Conversion to array.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonArray(JsonAnyArray value)
                {
                    return value.AsArray;
                }

                /// <summary>
                /// Implicit conversion to an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonAny>(JsonAnyArray value)
                {
                    return value.AsArray.AsItemsList;
                }

                /// <summary>
                /// Implicit conversion from an <see cref = "ImmutableList{T}"/> of <see cref = "JsonAny"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAnyArray(ImmutableList<JsonAny> value)
                {
                    return new JsonAnyArray(value);
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "items">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonAnyArray From(params JsonAny[] items)
                {
                    return new JsonAnyArray(items.ToImmutableList());
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The items from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonAnyArray From(JsonAny item1)
                {
                    return new JsonAnyArray(ImmutableList.Create(item1));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonAnyArray From(JsonAny item1, JsonAny item2)
                {
                    return new JsonAnyArray(ImmutableList.Create(item1, item2));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonAnyArray From(JsonAny item1, JsonAny item2, JsonAny item3)
                {
                    return new JsonAnyArray(ImmutableList.Create(item1, item2, item3));
                }

                /// <summary>
                /// Create an array from the given items.
                /// </summary>
                /// <param name = "item1">The first item from which to create the array.</param>
                /// <param name = "item2">The second item from which to create the array.</param>
                /// <param name = "item3">The third item from which to create the array.</param>
                /// <param name = "item4">The fourth item from which to create the array.</param>
                /// <returns>The new array created from the items.</returns>
                public static JsonAnyArray From(JsonAny item1, JsonAny item2, JsonAny item3, JsonAny item4)
                {
                    return new JsonAnyArray(ImmutableList.Create(item1, item2, item3, item4));
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                    {
                        JsonArray.WriteItems(arrayBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonArrayEnumerator EnumerateArray()
                {
                    return this.AsArray.EnumerateArray();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(JsonAnyArray other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public JsonAnyArray Add<TItem>(TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Add(item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonAnyArray Insert<TItem>(int index, TItem item)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsArray.Insert(index, item);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonAnyArray Replace<TItem>(TItem oldValue, TItem newValue)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.Replace(oldValue, newValue);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonAnyArray RemoveAt(int index)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveAt(index);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonAnyArray RemoveRange(int index, int count)
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.RemoveRange(index, count);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public JsonAnyArray SetItem<TItem>(int index, TItem value)
                    where TItem : struct, IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Array)
                    {
                        return this.AsArray.SetItem(index, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<JsonAnyArray, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        return result;
                    }

                    int arrayLength = 0;
                    JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        result = arrayEnumerator.Current.As<Menes.Json.JsonAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        arrayLength++;
                    }

                    if (arrayLength < 1)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.4.2. minItems - {arrayLength} is less than the minimum number of items 1.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.4.2. minItems - item count is less than the minimum number of items 1.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultArray);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ResponsesValue : IJsonObject<ResponsesValue>, IEquatable<ResponsesValue>
        {
            /// <summary>
            /// A pattern property matching ^[1-5][0-9X]{2}$ producing a <see cref = "Menes.OpenApi.Type20210415.ResponseOrReferenceEntity"/>.
            /// </summary>
            public static Regex PatternPropertyResponseOrReferenceEntity = new Regex("^[1-5][0-9X]{2}$", RegexOptions.Compiled);
            /// <summary>
            /// JSON property name for <see cref = "Default"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DefaultUtf8JsonPropertyName = new byte[]{100, 101, 102, 97, 117, 108, 116};
            /// <summary>
            /// JSON property name for <see cref = "Default"/>.
            /// </summary>
            public static readonly JsonEncodedText DefaultJsonPropertyName = JsonEncodedText.Encode(DefaultUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ResponsesValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = CreatePatternPropertiesValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponsesValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ResponsesValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponsesValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ResponsesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponsesValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ResponsesValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponsesValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ResponsesValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Default.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ResponseOrReferenceEntity Default
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DefaultJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DefaultUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ResponseOrReferenceEntity(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponsesValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ResponsesValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ResponsesValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponsesValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ResponsesValue(value.AsJsonElement);
                }

                return value.As<ResponsesValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ResponsesValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponsesValue(JsonObject value)
            {
                return new ResponsesValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ResponsesValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ResponsesValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponsesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ResponsesValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ResponsesValue"/>.
            /// </summary>
            public static ResponsesValue Create(Menes.OpenApi.Type20210415.ResponseOrReferenceEntity? @default = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (@default is Menes.OpenApi.Type20210415.ResponseOrReferenceEntity @default__)
                {
                    builder.Add(DefaultJsonPropertyName, @default__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets default.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ResponsesValue WithDefault(Menes.OpenApi.Type20210415.ResponseOrReferenceEntity value)
            {
                return this.SetProperty(DefaultJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ResponsesValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ResponsesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponsesValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponsesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponsesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponsesValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponsesValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponsesValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponsesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ResponsesValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
            {
                ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(PatternPropertyResponseOrReferenceEntity, (property, validationContext, level) =>
                {
                    return property.ValueAs<Menes.OpenApi.Type20210415.ResponseOrReferenceEntity>().Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ResponsesValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ResponsesValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ResponsesValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(DefaultJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ResponseOrReferenceEntity property = that.Default;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ResponsesValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    string propertyNameAsString = property.Name;
                    foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                    {
                        if (patternProperty.Key.IsMatch(propertyNameAsString))
                        {
                            result = result.WithLocalProperty(propertyName);
                            result = patternProperty.Value(property, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ResponseValue : IJsonObject<ResponseValue>, IEquatable<ResponseValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> HeadersUtf8JsonPropertyName = new byte[]{104, 101, 97, 100, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public static readonly JsonEncodedText HeadersJsonPropertyName = JsonEncodedText.Encode(HeadersUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Content"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ContentUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116};
            /// <summary>
            /// JSON property name for <see cref = "Content"/>.
            /// </summary>
            public static readonly JsonEncodedText ContentJsonPropertyName = JsonEncodedText.Encode(ContentUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Links"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> LinksUtf8JsonPropertyName = new byte[]{108, 105, 110, 107, 115};
            /// <summary>
            /// JSON property name for <see cref = "Links"/>.
            /// </summary>
            public static readonly JsonEncodedText LinksJsonPropertyName = JsonEncodedText.Encode(LinksUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ResponseValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponseValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ResponseValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponseValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ResponseValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponseValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ResponseValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ResponseValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ResponseValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Headers.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ResponseValue.HeadersValue Headers
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(HeadersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(HeadersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ResponseValue.HeadersValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Content.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ContentValue Content
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ContentJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ContentUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ContentValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Links.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ResponseValue.LinksValue Links
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(LinksJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(LinksUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ResponseValue.LinksValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponseValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ResponseValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ResponseValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponseValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ResponseValue(value.AsJsonElement);
                }

                return value.As<ResponseValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ResponseValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponseValue(JsonObject value)
            {
                return new ResponseValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ResponseValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ResponseValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ResponseValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ResponseValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ResponseValue"/>.
            /// </summary>
            public static ResponseValue Create(Menes.Json.JsonString description, Menes.OpenApi.Type20210415.ResponseValue.HeadersValue? headers = null, Menes.OpenApi.Type20210415.ContentValue? content = null, Menes.OpenApi.Type20210415.ResponseValue.LinksValue? links = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(DescriptionJsonPropertyName, description);
                if (headers is Menes.OpenApi.Type20210415.ResponseValue.HeadersValue headers__)
                {
                    builder.Add(HeadersJsonPropertyName, headers__);
                }

                if (content is Menes.OpenApi.Type20210415.ContentValue content__)
                {
                    builder.Add(ContentJsonPropertyName, content__);
                }

                if (links is Menes.OpenApi.Type20210415.ResponseValue.LinksValue links__)
                {
                    builder.Add(LinksJsonPropertyName, links__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ResponseValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets headers.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ResponseValue WithHeaders(Menes.OpenApi.Type20210415.ResponseValue.HeadersValue value)
            {
                return this.SetProperty(HeadersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets content.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ResponseValue WithContent(Menes.OpenApi.Type20210415.ContentValue value)
            {
                return this.SetProperty(ContentJsonPropertyName, value);
            }

            /// <summary>
            /// Sets links.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ResponseValue WithLinks(Menes.OpenApi.Type20210415.ResponseValue.LinksValue value)
            {
                return this.SetProperty(LinksJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ResponseValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ResponseValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponseValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponseValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponseValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponseValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponseValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponseValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ResponseValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ResponseValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ResponseValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ResponseValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ResponseValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(HeadersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ResponseValue.HeadersValue property = that.Headers;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ContentJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ContentValue property = that.Content;
                    return property.Validate(validationContext, level);
                });
                builder.Add(LinksJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ResponseValue.LinksValue property = that.Links;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundDescription = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ResponseValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (DescriptionJsonPropertyName.Equals(propertyName))
                        {
                            foundDescription = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundDescription)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"description\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct HeadersValue : IJsonObject<HeadersValue>, IEquatable<HeadersValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public HeadersValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public HeadersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public HeadersValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new HeadersValue(value.AsJsonElement);
                    }

                    return value.As<HeadersValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(HeadersValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(JsonObject value)
                {
                    return new HeadersValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(HeadersValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(HeadersValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new HeadersValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(HeadersValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<HeadersValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct LinksValue : IJsonObject<LinksValue>, IEquatable<LinksValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public LinksValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public LinksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "LinksValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public LinksValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator LinksValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new LinksValue(value.AsJsonElement);
                    }

                    return value.As<LinksValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(LinksValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator LinksValue(JsonObject value)
                {
                    return new LinksValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(LinksValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(LinksValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator LinksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new LinksValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.LinkOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.LinkOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.LinkOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(LinksValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public LinksValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<LinksValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.LinkOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ParameterValue : IJsonObject<ParameterValue>, IEquatable<ParameterValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "In"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> InUtf8JsonPropertyName = new byte[]{105, 110};
            /// <summary>
            /// JSON property name for <see cref = "In"/>.
            /// </summary>
            public static readonly JsonEncodedText InJsonPropertyName = JsonEncodedText.Encode(InUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static readonly JsonEncodedText NameJsonPropertyName = JsonEncodedText.Encode(NameUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Required"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RequiredUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 105, 114, 101, 100};
            /// <summary>
            /// JSON property name for <see cref = "Required"/>.
            /// </summary>
            public static readonly JsonEncodedText RequiredJsonPropertyName = JsonEncodedText.Encode(RequiredUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Deprecated"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DeprecatedUtf8JsonPropertyName = new byte[]{100, 101, 112, 114, 101, 99, 97, 116, 101, 100};
            /// <summary>
            /// JSON property name for <see cref = "Deprecated"/>.
            /// </summary>
            public static readonly JsonEncodedText DeprecatedJsonPropertyName = JsonEncodedText.Encode(DeprecatedUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "AllowEmptyValue"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> AllowEmptyValueUtf8JsonPropertyName = new byte[]{97, 108, 108, 111, 119, 69, 109, 112, 116, 121, 86, 97, 108, 117, 101};
            /// <summary>
            /// JSON property name for <see cref = "AllowEmptyValue"/>.
            /// </summary>
            public static readonly JsonEncodedText AllowEmptyValueJsonPropertyName = JsonEncodedText.Encode(AllowEmptyValueUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Schema"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SchemaUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 97};
            /// <summary>
            /// JSON property name for <see cref = "Schema"/>.
            /// </summary>
            public static readonly JsonEncodedText SchemaJsonPropertyName = JsonEncodedText.Encode(SchemaUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Content"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ContentUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116};
            /// <summary>
            /// JSON property name for <see cref = "Content"/>.
            /// </summary>
            public static readonly JsonEncodedText ContentJsonPropertyName = JsonEncodedText.Encode(ContentUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesDependentSchema = CreateDependentSchemaValidators();
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ParameterValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ParameterValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ParameterValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ParameterValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ParameterValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ParameterValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ParameterValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity"/> from which to construct the value.</param>
            public ParameterValue(Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ParameterValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity"/> from which to construct the value.</param>
            public ParameterValue(Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ParameterValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ParameterValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity AsOneOf0Entity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity"/>.
            /// </summary>
            public bool IsOneOf0Entity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity AsOneOf1Entity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity"/>.
            /// </summary>
            public bool IsOneOf1Entity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets In.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ParameterValue.InEntity In
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(InJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(InUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ParameterValue.InEntity(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Name.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Name
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(NameJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Required.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ParameterValue.RequiredValue Required
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RequiredJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RequiredUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ParameterValue.RequiredValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Deprecated.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ParameterValue.DeprecatedValue Deprecated
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DeprecatedJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DeprecatedUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ParameterValue.DeprecatedValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets AllowEmptyValue.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ParameterValue.AllowEmptyValueValue AllowEmptyValue
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(AllowEmptyValueJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(AllowEmptyValueUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ParameterValue.AllowEmptyValueValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Schema.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Schema
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SchemaJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SchemaUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Content.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ContentValue Content
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ContentJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ContentUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ContentValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ParameterValue(Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity value)
            {
                return new ParameterValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity(ParameterValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ParameterValue(Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity value)
            {
                return new ParameterValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity(ParameterValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ParameterValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ParameterValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ParameterValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ParameterValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ParameterValue(value.AsJsonElement);
                }

                return value.As<ParameterValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ParameterValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ParameterValue(JsonObject value)
            {
                return new ParameterValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ParameterValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ParameterValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ParameterValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ParameterValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ParameterValue"/>.
            /// </summary>
            public static ParameterValue Create(Menes.OpenApi.Type20210415.ParameterValue.InEntity @in, Menes.Json.JsonString? name = null, Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.ParameterValue.RequiredValue? required = null, Menes.OpenApi.Type20210415.ParameterValue.DeprecatedValue? deprecated = null, Menes.OpenApi.Type20210415.ParameterValue.AllowEmptyValueValue? allowEmptyValue = null, Menes.Json.JsonAny? schema = null, Menes.OpenApi.Type20210415.ContentValue? content = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(InJsonPropertyName, @in);
                if (name is Menes.Json.JsonString name__)
                {
                    builder.Add(NameJsonPropertyName, name__);
                }

                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (required is Menes.OpenApi.Type20210415.ParameterValue.RequiredValue required__)
                {
                    builder.Add(RequiredJsonPropertyName, required__);
                }

                if (deprecated is Menes.OpenApi.Type20210415.ParameterValue.DeprecatedValue deprecated__)
                {
                    builder.Add(DeprecatedJsonPropertyName, deprecated__);
                }

                if (allowEmptyValue is Menes.OpenApi.Type20210415.ParameterValue.AllowEmptyValueValue allowEmptyValue__)
                {
                    builder.Add(AllowEmptyValueJsonPropertyName, allowEmptyValue__);
                }

                if (schema is Menes.Json.JsonAny schema__)
                {
                    builder.Add(SchemaJsonPropertyName, schema__);
                }

                if (content is Menes.OpenApi.Type20210415.ContentValue content__)
                {
                    builder.Add(ContentJsonPropertyName, content__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets in.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithIn(Menes.OpenApi.Type20210415.ParameterValue.InEntity value)
            {
                return this.SetProperty(InJsonPropertyName, value);
            }

            /// <summary>
            /// Sets name.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithName(Menes.Json.JsonString value)
            {
                return this.SetProperty(NameJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets required.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithRequired(Menes.OpenApi.Type20210415.ParameterValue.RequiredValue value)
            {
                return this.SetProperty(RequiredJsonPropertyName, value);
            }

            /// <summary>
            /// Sets deprecated.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithDeprecated(Menes.OpenApi.Type20210415.ParameterValue.DeprecatedValue value)
            {
                return this.SetProperty(DeprecatedJsonPropertyName, value);
            }

            /// <summary>
            /// Sets allowEmptyValue.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithAllowEmptyValue(Menes.OpenApi.Type20210415.ParameterValue.AllowEmptyValueValue value)
            {
                return this.SetProperty(AllowEmptyValueJsonPropertyName, value);
            }

            /// <summary>
            /// Sets schema.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithSchema(Menes.Json.JsonAny value)
            {
                return this.SetProperty(SchemaJsonPropertyName, value);
            }

            /// <summary>
            /// Sets content.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ParameterValue WithContent(Menes.OpenApi.Type20210415.ContentValue value)
            {
                return this.SetProperty(ContentJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(string name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
            }

            /// <inheritdoc/>
            public bool HasDefault(JsonEncodedText name)
            {
                return __MenesDefaults.TryGetValue(name, out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(string name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<char> name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<byte> utf8name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ParameterValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ParameterValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ParameterValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ParameterValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ParameterValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ParameterValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ParameterValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ParameterValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ParameterValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ParameterValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateOneOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>> CreateDependentSchemaValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(JsonEncodedText.Encode("schema"), (entity, validationContext, level) =>
                {
                    return entity.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity>().Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
            {
                ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(RequiredJsonPropertyName, JsonAny.Parse("false"));
                builder.Add(DeprecatedJsonPropertyName, JsonAny.Parse("false"));
                builder.Add(AllowEmptyValueJsonPropertyName, JsonAny.Parse("false"));
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(InJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ParameterValue.InEntity property = that.In;
                    return property.Validate(validationContext, level);
                });
                builder.Add(NameJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Name;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(RequiredJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ParameterValue.RequiredValue property = that.Required;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DeprecatedJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ParameterValue.DeprecatedValue property = that.Deprecated;
                    return property.Validate(validationContext, level);
                });
                builder.Add(AllowEmptyValueJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ParameterValue.AllowEmptyValueValue property = that.AllowEmptyValue;
                    return property.Validate(validationContext, level);
                });
                builder.Add(SchemaJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.Schema;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ContentJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ContentValue property = that.Content;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundIn = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (InJsonPropertyName.Equals(propertyName))
                        {
                            foundIn = true;
                        }
                    }

                    if (__MenesDependentSchema.TryGetValue(propertyName, out Func<ParameterValue, ValidationContext, ValidationLevel, ValidationContext>? dependentSchemaValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = dependentSchemaValidator(this, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundIn && !HasDefault(InJsonPropertyName))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"in\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateOneOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                int oneOfCount = 0;
                ValidationContext oneOfResult0 = this.As<Menes.OpenApi.Type20210415.ParameterValue.OneOf0Entity>().Validate(validationContext.CreateChildContext(), level);
                if (oneOfResult0.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Detailed);
                    oneOfCount += 1;
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(oneOfResult0, true);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(oneOfResult0, true);
                    }
                    else
                    {
                        result = result.MergeChildContext(oneOfResult0, false);
                    }
                }

                ValidationContext oneOfResult1 = this.As<Menes.OpenApi.Type20210415.ParameterValue.OneOf1Entity>().Validate(validationContext.CreateChildContext(), level);
                if (oneOfResult1.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Detailed);
                    oneOfCount += 1;
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(oneOfResult1, true);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(oneOfResult1, true);
                    }
                    else
                    {
                        result = result.MergeChildContext(oneOfResult1, false);
                    }
                }

                if (oneOfCount == 1)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: true, "Validation 10.2.1.3. onef - validated against the oneOf schema.");
                    }
                }
                else if (oneOfCount == 0)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - validated against more than one of the oneOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against more than one of the oneOf schema.");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct SchemaEntity : IJsonObject<SchemaEntity>, IEquatable<SchemaEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Example"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ExampleUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101};
                /// <summary>
                /// JSON property name for <see cref = "Example"/>.
                /// </summary>
                public static readonly JsonEncodedText ExampleJsonPropertyName = JsonEncodedText.Encode(ExampleUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Examples"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ExamplesUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101, 115};
                /// <summary>
                /// JSON property name for <see cref = "Examples"/>.
                /// </summary>
                public static readonly JsonEncodedText ExamplesJsonPropertyName = JsonEncodedText.Encode(ExamplesUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Style"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                /// <summary>
                /// JSON property name for <see cref = "Style"/>.
                /// </summary>
                public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Explode"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
                /// <summary>
                /// JSON property name for <see cref = "Explode"/>.
                /// </summary>
                public static readonly JsonEncodedText ExplodeJsonPropertyName = JsonEncodedText.Encode(ExplodeUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "AllowReserved"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> AllowReservedUtf8JsonPropertyName = new byte[]{97, 108, 108, 111, 119, 82, 101, 115, 101, 114, 118, 101, 100};
                /// <summary>
                /// JSON property name for <see cref = "AllowReserved"/>.
                /// </summary>
                public static readonly JsonEncodedText AllowReservedJsonPropertyName = JsonEncodedText.Encode(AllowReservedUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public SchemaEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public SchemaEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public SchemaEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/> from which to construct the value.</param>
                public SchemaEntity(Menes.OpenApi.Type20210415.ExamplesEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                        {
                            this.objectBacking = conversion;
                        }
                        else
                        {
                            this.objectBacking = default;
                        }
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity"/> from which to construct the value.</param>
                public SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = default;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity"/> from which to construct the value.</param>
                public SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = default;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity"/> from which to construct the value.</param>
                public SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = default;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity"/> from which to construct the value.</param>
                public SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = default;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity"/> from which to construct the value.</param>
                public SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = default;
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.ExamplesEntity AsExamplesEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                public bool IsExamplesEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.ExamplesEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity AsStylesForPathEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity"/>.
                /// </summary>
                public bool IsStylesForPathEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity AsStylesForHeaderEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity"/>.
                /// </summary>
                public bool IsStylesForHeaderEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity AsStylesForQueryEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity"/>.
                /// </summary>
                public bool IsStylesForQueryEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity AsStylesForCookieEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity"/>.
                /// </summary>
                public bool IsStylesForCookieEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity AsStylesForFormEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity"/>.
                /// </summary>
                public bool IsStylesForFormEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets Example.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Example
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ExampleJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ExampleUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Examples.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue Examples
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ExamplesJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ExamplesUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Style.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString Style
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Explode.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonBoolean Explode
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonBoolean(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets AllowReserved.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.AllowReservedValue AllowReserved
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(AllowReservedJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(AllowReservedUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.AllowReservedValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(Menes.OpenApi.Type20210415.ExamplesEntity value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.ExamplesEntity(SchemaEntity value)
                {
                    if (value.ValueKind == JsonValueKind.Object)
                    {
                        return new Menes.OpenApi.Type20210415.ExamplesEntity(value.AsObject);
                    }

                    return default;
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity(SchemaEntity value)
                {
                    return default;
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity(SchemaEntity value)
                {
                    return default;
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity(SchemaEntity value)
                {
                    return default;
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity(SchemaEntity value)
                {
                    return default;
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity(SchemaEntity value)
                {
                    return default;
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new SchemaEntity(value.AsJsonElement);
                    }

                    return value.As<SchemaEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(SchemaEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(JsonObject value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(SchemaEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SchemaEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "SchemaEntity"/>.
                /// </summary>
                public static SchemaEntity Create(Menes.Json.JsonAny? example = null, Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue? examples = null, Menes.Json.JsonString? style = null, Menes.Json.JsonBoolean? explode = null, Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.AllowReservedValue? allowReserved = null)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    if (example is Menes.Json.JsonAny example__)
                    {
                        builder.Add(ExampleJsonPropertyName, example__);
                    }

                    if (examples is Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue examples__)
                    {
                        builder.Add(ExamplesJsonPropertyName, examples__);
                    }

                    if (style is Menes.Json.JsonString style__)
                    {
                        builder.Add(StyleJsonPropertyName, style__);
                    }

                    if (explode is Menes.Json.JsonBoolean explode__)
                    {
                        builder.Add(ExplodeJsonPropertyName, explode__);
                    }

                    if (allowReserved is Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.AllowReservedValue allowReserved__)
                    {
                        builder.Add(AllowReservedJsonPropertyName, allowReserved__);
                    }

                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets example.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithExample(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(ExampleJsonPropertyName, value);
                }

                /// <summary>
                /// Sets examples.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithExamples(Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue value)
                {
                    return this.SetProperty(ExamplesJsonPropertyName, value);
                }

                /// <summary>
                /// Sets style.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithStyle(Menes.Json.JsonString value)
                {
                    return this.SetProperty(StyleJsonPropertyName, value);
                }

                /// <summary>
                /// Sets explode.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithExplode(Menes.Json.JsonBoolean value)
                {
                    return this.SetProperty(ExplodeJsonPropertyName, value);
                }

                /// <summary>
                /// Sets allowReserved.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithAllowReserved(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.AllowReservedValue value)
                {
                    return this.SetProperty(AllowReservedJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(string name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                }

                /// <inheritdoc/>
                public bool HasDefault(JsonEncodedText name)
                {
                    return __MenesDefaults.TryGetValue(name, out _);
                }

                /// <inheritdoc/>
                public bool HasDefault(string name)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                /// <inheritdoc/>
                public bool HasDefault(ReadOnlySpan<char> name)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                /// <inheritdoc/>
                public bool HasDefault(ReadOnlySpan<byte> utf8name)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(SchemaEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<SchemaEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateAllOf(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                {
                    ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(AllowReservedJsonPropertyName, JsonAny.Parse("false"));
                    return builder.ToImmutable();
                }

                private static ImmutableDictionary<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.Style;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(ExplodeJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonBoolean property = that.Explode;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(AllowReservedJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.AllowReservedValue property = that.AllowReserved;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext allOfResult0 = this.As<Menes.OpenApi.Type20210415.ExamplesEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!allOfResult0.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult1 = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!allOfResult1.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult2 = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!allOfResult2.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult3 = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!allOfResult3.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult4 = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!allOfResult4.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult5 = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!allOfResult5.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult5, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult5, level >= ValidationLevel.Detailed);
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct StylesForPathEntity : IJsonValue, IEquatable<StylesForPathEntity>
                {
                    private readonly JsonElement jsonElementBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StylesForPathEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public StylesForPathEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => true;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StylesForPathEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new StylesForPathEntity(value.AsJsonElement);
                        }

                        return value.As<StylesForPathEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(StylesForPathEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(StylesForPathEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<StylesForPathEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        result = this.ValidateIfThenElse(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!ifResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(ifResult, true);
                            }

                            result = result.MergeChildContext(ifResult, false);
                        }

                        if (ifResult.IsValid)
                        {
                            ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                            if (!thenResult.IsValid)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else
                                {
                                    result = validationContext.WithResult(isValid: false);
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Basic)
                                {
                                    result = result.MergeChildContext(thenResult, true);
                                }

                                result = result.MergeChildContext(thenResult, false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> InUtf8JsonPropertyName = new byte[]{105, 110};
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly JsonEncodedText InJsonPropertyName = JsonEncodedText.Encode(InUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public IfEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public IfEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets In.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.IfEntity.InEntity In
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(InJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(InUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.IfEntity.InEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new IfEntity(value.AsJsonElement);
                            }

                            return value.As<IfEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(IfEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonObject value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(IfEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "IfEntity"/>.
                        /// </summary>
                        public static IfEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.IfEntity.InEntity @in)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(InJsonPropertyName, @in);
                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets in.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public IfEntity WithIn(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.IfEntity.InEntity value)
                        {
                            return this.SetProperty(InJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(IfEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<IfEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(InJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.IfEntity.InEntity property = that.In;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            bool foundIn = false;
                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }

                                    if (InJsonPropertyName.Equals(propertyName))
                                    {
                                        foundIn = true;
                                    }
                                }
                            }

                            if (!foundIn)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"in\" not present.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                                }
                                else
                                {
                                    return result.WithResult(isValid: false);
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct InEntity : IJsonValue, IEquatable<InEntity>
                        {
                            private static readonly InEntity __MenesConstValue = JsonAny.Parse("\"path\"");
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public InEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public InEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new InEntity(value.AsJsonElement);
                                }

                                return value.As<InEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(InEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(string value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (InEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonEncodedText value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<char> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(InEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<byte> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonString value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(InEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(InEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<InEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }
                        }
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "Required"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> RequiredUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 105, 114, 101, 100};
                        /// <summary>
                        /// JSON property name for <see cref = "Required"/>.
                        /// </summary>
                        public static readonly JsonEncodedText RequiredJsonPropertyName = JsonEncodedText.Encode(RequiredUtf8JsonPropertyName.Span);
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ThenEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public ThenEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets Required.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.RequiredEntity Required
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(RequiredJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(RequiredUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.RequiredEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets Style.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.StyleEntity Style
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.StyleEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ThenEntity(value.AsJsonElement);
                            }

                            return value.As<ThenEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ThenEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonObject value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(ThenEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "ThenEntity"/>.
                        /// </summary>
                        public static ThenEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.RequiredEntity required, Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.StyleEntity? style = null)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(RequiredJsonPropertyName, required);
                            if (style is Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.StyleEntity style__)
                            {
                                builder.Add(StyleJsonPropertyName, style__);
                            }

                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets required.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public ThenEntity WithRequired(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.RequiredEntity value)
                        {
                            return this.SetProperty(RequiredJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Sets style.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public ThenEntity WithStyle(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.StyleEntity value)
                        {
                            return this.SetProperty(StyleJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(string name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(JsonEncodedText name)
                        {
                            return __MenesDefaults.TryGetValue(name, out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(string name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<char> name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<byte> utf8name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ThenEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ThenEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                        {
                            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(StyleJsonPropertyName, JsonAny.Parse("\"simple\""));
                            return builder.ToImmutable();
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(RequiredJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.RequiredEntity property = that.Required;
                                return property.Validate(validationContext, level);
                            });
                            builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForPathEntity.ThenEntity.StyleEntity property = that.Style;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            bool foundRequired = false;
                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }

                                    if (RequiredJsonPropertyName.Equals(propertyName))
                                    {
                                        foundRequired = true;
                                    }
                                }
                            }

                            if (!foundRequired && !HasDefault(RequiredJsonPropertyName))
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"required\" not present.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                                }
                                else
                                {
                                    return result.WithResult(isValid: false);
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
                        {
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public StyleEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public StyleEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new StyleEntity(value.AsJsonElement);
                                }

                                return value.As<StyleEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(StyleEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(string value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (StyleEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonEncodedText value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonString value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(StyleEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(StyleEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<StyleEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0, EnumValues.Item1, EnumValues.Item2);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }

                            /// <summary>
                            /// Permitted values.
                            /// </summary>
                            public static class EnumValues
                            {
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity Matrix = JsonAny.Parse("\"matrix\"");
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity Label = JsonAny.Parse("\"label\"");
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity Simple = JsonAny.Parse("\"simple\"");
                                /// <summary>
                                /// [{Title} || Item 0] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item0 = JsonAny.Parse("\"matrix\"");
                                /// <summary>
                                /// [{Title} || Item 1] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item1 = JsonAny.Parse("\"label\"");
                                /// <summary>
                                /// [{Title} || Item 2] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item2 = JsonAny.Parse("\"simple\"");
                            }
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct RequiredEntity : IJsonValue, IEquatable<RequiredEntity>
                        {
                            private static readonly RequiredEntity __MenesConstValue = JsonAny.Parse("true");
                            private readonly JsonElement jsonElementBacking;
                            private readonly bool? booleanBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "RequiredEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public RequiredEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.booleanBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "RequiredEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                            public RequiredEntity(JsonBoolean jsonBoolean)
                            {
                                if (jsonBoolean.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonBoolean.AsJsonElement;
                                    this.booleanBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.booleanBacking = jsonBoolean.GetBoolean();
                                }
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "RequiredEntity"/> struct.
                            /// </summary>
                            /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                            public RequiredEntity(bool boolean)
                            {
                                this.jsonElementBacking = default;
                                this.booleanBacking = boolean;
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.booleanBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.booleanBacking is bool booleanBacking)
                                    {
                                        return JsonBoolean.BoolToJsonElement(booleanBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.booleanBacking is bool booleanBacking)
                                    {
                                        return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.booleanBacking is bool booleanBacking)
                                    {
                                        return new JsonAny(booleanBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    if (this.booleanBacking is bool booleanBacking)
                                    {
                                        return new JsonBoolean(booleanBacking);
                                    }

                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator RequiredEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new RequiredEntity(value.AsJsonElement);
                                }

                                return value.As<RequiredEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(RequiredEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from bool.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator RequiredEntity(bool value)
                            {
                                return new RequiredEntity(value);
                            }

                            /// <summary>
                            /// Conversion to bool.
                            /// </summary>
                            /// <param name = "boolean">The value from which to convert.</param>
                            public static implicit operator bool (RequiredEntity boolean)
                            {
                                return boolean.AsBoolean.GetBoolean();
                            }

                            /// <summary>
                            /// Conversion from bool.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator RequiredEntity(JsonBoolean value)
                            {
                                return new RequiredEntity(value);
                            }

                            /// <summary>
                            /// Conversion to bool.
                            /// </summary>
                            /// <param name = "boolean">The value from which to convert.</param>
                            public static implicit operator JsonBoolean(RequiredEntity boolean)
                            {
                                return boolean.AsBoolean;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.booleanBacking is bool booleanBacking)
                                {
                                    writer.WriteBooleanValue(booleanBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(RequiredEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<RequiredEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct StylesForHeaderEntity : IJsonValue, IEquatable<StylesForHeaderEntity>
                {
                    private readonly JsonElement jsonElementBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StylesForHeaderEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public StylesForHeaderEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => true;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StylesForHeaderEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new StylesForHeaderEntity(value.AsJsonElement);
                        }

                        return value.As<StylesForHeaderEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(StylesForHeaderEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(StylesForHeaderEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<StylesForHeaderEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        result = this.ValidateIfThenElse(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!ifResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(ifResult, true);
                            }

                            result = result.MergeChildContext(ifResult, false);
                        }

                        if (ifResult.IsValid)
                        {
                            ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                            if (!thenResult.IsValid)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else
                                {
                                    result = validationContext.WithResult(isValid: false);
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Basic)
                                {
                                    result = result.MergeChildContext(thenResult, true);
                                }

                                result = result.MergeChildContext(thenResult, false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> InUtf8JsonPropertyName = new byte[]{105, 110};
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly JsonEncodedText InJsonPropertyName = JsonEncodedText.Encode(InUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public IfEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public IfEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets In.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.IfEntity.InEntity In
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(InJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(InUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.IfEntity.InEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new IfEntity(value.AsJsonElement);
                            }

                            return value.As<IfEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(IfEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonObject value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(IfEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "IfEntity"/>.
                        /// </summary>
                        public static IfEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.IfEntity.InEntity @in)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(InJsonPropertyName, @in);
                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets in.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public IfEntity WithIn(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.IfEntity.InEntity value)
                        {
                            return this.SetProperty(InJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(IfEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<IfEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(InJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.IfEntity.InEntity property = that.In;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            bool foundIn = false;
                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }

                                    if (InJsonPropertyName.Equals(propertyName))
                                    {
                                        foundIn = true;
                                    }
                                }
                            }

                            if (!foundIn)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"in\" not present.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                                }
                                else
                                {
                                    return result.WithResult(isValid: false);
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct InEntity : IJsonValue, IEquatable<InEntity>
                        {
                            private static readonly InEntity __MenesConstValue = JsonAny.Parse("\"header\"");
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public InEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public InEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new InEntity(value.AsJsonElement);
                                }

                                return value.As<InEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(InEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(string value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (InEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonEncodedText value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<char> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(InEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<byte> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonString value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(InEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(InEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<InEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }
                        }
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ThenEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public ThenEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets Style.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.ThenEntity.StyleEntity Style
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.ThenEntity.StyleEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ThenEntity(value.AsJsonElement);
                            }

                            return value.As<ThenEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ThenEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonObject value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(ThenEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "ThenEntity"/>.
                        /// </summary>
                        public static ThenEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.ThenEntity.StyleEntity? style = null)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            if (style is Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.ThenEntity.StyleEntity style__)
                            {
                                builder.Add(StyleJsonPropertyName, style__);
                            }

                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets style.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public ThenEntity WithStyle(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.ThenEntity.StyleEntity value)
                        {
                            return this.SetProperty(StyleJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(string name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(JsonEncodedText name)
                        {
                            return __MenesDefaults.TryGetValue(name, out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(string name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<char> name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<byte> utf8name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ThenEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ThenEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                        {
                            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(StyleJsonPropertyName, JsonAny.Parse("\"simple\""));
                            return builder.ToImmutable();
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForHeaderEntity.ThenEntity.StyleEntity property = that.Style;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
                        {
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public StyleEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public StyleEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new StyleEntity(value.AsJsonElement);
                                }

                                return value.As<StyleEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(StyleEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(string value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (StyleEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonEncodedText value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonString value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(StyleEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(StyleEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<StyleEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }

                            /// <summary>
                            /// Permitted values.
                            /// </summary>
                            public static class EnumValues
                            {
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity Simple = JsonAny.Parse("\"simple\"");
                                /// <summary>
                                /// [{Title} || Item 0] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item0 = JsonAny.Parse("\"simple\"");
                            }
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct StylesForQueryEntity : IJsonValue, IEquatable<StylesForQueryEntity>
                {
                    private readonly JsonElement jsonElementBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StylesForQueryEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public StylesForQueryEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => true;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StylesForQueryEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new StylesForQueryEntity(value.AsJsonElement);
                        }

                        return value.As<StylesForQueryEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(StylesForQueryEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(StylesForQueryEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<StylesForQueryEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        result = this.ValidateIfThenElse(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!ifResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(ifResult, true);
                            }

                            result = result.MergeChildContext(ifResult, false);
                        }

                        if (ifResult.IsValid)
                        {
                            ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                            if (!thenResult.IsValid)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else
                                {
                                    result = validationContext.WithResult(isValid: false);
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Basic)
                                {
                                    result = result.MergeChildContext(thenResult, true);
                                }

                                result = result.MergeChildContext(thenResult, false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> InUtf8JsonPropertyName = new byte[]{105, 110};
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly JsonEncodedText InJsonPropertyName = JsonEncodedText.Encode(InUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public IfEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public IfEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets In.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.IfEntity.InEntity In
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(InJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(InUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.IfEntity.InEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new IfEntity(value.AsJsonElement);
                            }

                            return value.As<IfEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(IfEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonObject value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(IfEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "IfEntity"/>.
                        /// </summary>
                        public static IfEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.IfEntity.InEntity @in)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(InJsonPropertyName, @in);
                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets in.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public IfEntity WithIn(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.IfEntity.InEntity value)
                        {
                            return this.SetProperty(InJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(IfEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<IfEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(InJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.IfEntity.InEntity property = that.In;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            bool foundIn = false;
                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }

                                    if (InJsonPropertyName.Equals(propertyName))
                                    {
                                        foundIn = true;
                                    }
                                }
                            }

                            if (!foundIn)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"in\" not present.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                                }
                                else
                                {
                                    return result.WithResult(isValid: false);
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct InEntity : IJsonValue, IEquatable<InEntity>
                        {
                            private static readonly InEntity __MenesConstValue = JsonAny.Parse("\"query\"");
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public InEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public InEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new InEntity(value.AsJsonElement);
                                }

                                return value.As<InEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(InEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(string value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (InEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonEncodedText value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<char> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(InEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<byte> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonString value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(InEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(InEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<InEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }
                        }
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ThenEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public ThenEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets Style.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.ThenEntity.StyleEntity Style
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.ThenEntity.StyleEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ThenEntity(value.AsJsonElement);
                            }

                            return value.As<ThenEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ThenEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonObject value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(ThenEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "ThenEntity"/>.
                        /// </summary>
                        public static ThenEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.ThenEntity.StyleEntity? style = null)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            if (style is Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.ThenEntity.StyleEntity style__)
                            {
                                builder.Add(StyleJsonPropertyName, style__);
                            }

                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets style.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public ThenEntity WithStyle(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.ThenEntity.StyleEntity value)
                        {
                            return this.SetProperty(StyleJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(string name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(JsonEncodedText name)
                        {
                            return __MenesDefaults.TryGetValue(name, out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(string name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<char> name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<byte> utf8name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ThenEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ThenEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                        {
                            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(StyleJsonPropertyName, JsonAny.Parse("\"form\""));
                            return builder.ToImmutable();
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForQueryEntity.ThenEntity.StyleEntity property = that.Style;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
                        {
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public StyleEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public StyleEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new StyleEntity(value.AsJsonElement);
                                }

                                return value.As<StyleEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(StyleEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(string value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (StyleEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonEncodedText value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonString value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(StyleEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(StyleEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<StyleEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0, EnumValues.Item1, EnumValues.Item2, EnumValues.Item3);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }

                            /// <summary>
                            /// Permitted values.
                            /// </summary>
                            public static class EnumValues
                            {
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity Form = JsonAny.Parse("\"form\"");
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity SpaceDelimited = JsonAny.Parse("\"spaceDelimited\"");
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity PipeDelimited = JsonAny.Parse("\"pipeDelimited\"");
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity DeepObject = JsonAny.Parse("\"deepObject\"");
                                /// <summary>
                                /// [{Title} || Item 0] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item0 = JsonAny.Parse("\"form\"");
                                /// <summary>
                                /// [{Title} || Item 1] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item1 = JsonAny.Parse("\"spaceDelimited\"");
                                /// <summary>
                                /// [{Title} || Item 2] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item2 = JsonAny.Parse("\"pipeDelimited\"");
                                /// <summary>
                                /// [{Title} || Item 3] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item3 = JsonAny.Parse("\"deepObject\"");
                            }
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct StylesForCookieEntity : IJsonValue, IEquatable<StylesForCookieEntity>
                {
                    private readonly JsonElement jsonElementBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StylesForCookieEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public StylesForCookieEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => true;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StylesForCookieEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new StylesForCookieEntity(value.AsJsonElement);
                        }

                        return value.As<StylesForCookieEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(StylesForCookieEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(StylesForCookieEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<StylesForCookieEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        result = this.ValidateIfThenElse(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!ifResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(ifResult, true);
                            }

                            result = result.MergeChildContext(ifResult, false);
                        }

                        if (ifResult.IsValid)
                        {
                            ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                            if (!thenResult.IsValid)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else
                                {
                                    result = validationContext.WithResult(isValid: false);
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Basic)
                                {
                                    result = result.MergeChildContext(thenResult, true);
                                }

                                result = result.MergeChildContext(thenResult, false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> InUtf8JsonPropertyName = new byte[]{105, 110};
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static readonly JsonEncodedText InJsonPropertyName = JsonEncodedText.Encode(InUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public IfEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public IfEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets In.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.IfEntity.InEntity In
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(InJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(InUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.IfEntity.InEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new IfEntity(value.AsJsonElement);
                            }

                            return value.As<IfEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(IfEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonObject value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(IfEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "IfEntity"/>.
                        /// </summary>
                        public static IfEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.IfEntity.InEntity @in)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(InJsonPropertyName, @in);
                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets in.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public IfEntity WithIn(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.IfEntity.InEntity value)
                        {
                            return this.SetProperty(InJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(IfEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<IfEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(InJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.IfEntity.InEntity property = that.In;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            bool foundIn = false;
                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }

                                    if (InJsonPropertyName.Equals(propertyName))
                                    {
                                        foundIn = true;
                                    }
                                }
                            }

                            if (!foundIn)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"in\" not present.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                                }
                                else
                                {
                                    return result.WithResult(isValid: false);
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct InEntity : IJsonValue, IEquatable<InEntity>
                        {
                            private static readonly InEntity __MenesConstValue = JsonAny.Parse("\"cookie\"");
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public InEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public InEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public InEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new InEntity(value.AsJsonElement);
                                }

                                return value.As<InEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(InEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(string value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (InEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonEncodedText value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<char> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(InEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(ReadOnlySpan<byte> value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(InEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator InEntity(JsonString value)
                            {
                                return new InEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(InEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(InEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<InEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }
                        }
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ThenEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public ThenEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets Style.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.ThenEntity.StyleEntity Style
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.ThenEntity.StyleEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ThenEntity(value.AsJsonElement);
                            }

                            return value.As<ThenEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ThenEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonObject value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(ThenEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "ThenEntity"/>.
                        /// </summary>
                        public static ThenEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.ThenEntity.StyleEntity? style = null)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            if (style is Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.ThenEntity.StyleEntity style__)
                            {
                                builder.Add(StyleJsonPropertyName, style__);
                            }

                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets style.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public ThenEntity WithStyle(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.ThenEntity.StyleEntity value)
                        {
                            return this.SetProperty(StyleJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(string name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(JsonEncodedText name)
                        {
                            return __MenesDefaults.TryGetValue(name, out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(string name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<char> name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<byte> utf8name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ThenEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ThenEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                        {
                            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(StyleJsonPropertyName, JsonAny.Parse("\"form\""));
                            return builder.ToImmutable();
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForCookieEntity.ThenEntity.StyleEntity property = that.Style;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
                        {
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public StyleEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public StyleEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new StyleEntity(value.AsJsonElement);
                                }

                                return value.As<StyleEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(StyleEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(string value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (StyleEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonEncodedText value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonString value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(StyleEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(StyleEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<StyleEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }

                            /// <summary>
                            /// Permitted values.
                            /// </summary>
                            public static class EnumValues
                            {
                                /// <summary>
                                /// enumValue.AsPropertyName.
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                public static readonly StyleEntity Form = JsonAny.Parse("\"form\"");
                                /// <summary>
                                /// [{Title} || Item 0] (with predictable naming).
                                /// </summary>
                                /// <remarks>
                                /// {Description}.
                                /// </remarks>
                                internal static readonly StyleEntity Item0 = JsonAny.Parse("\"form\"");
                            }
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct StylesForFormEntity : IJsonValue, IEquatable<StylesForFormEntity>
                {
                    private readonly JsonElement jsonElementBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StylesForFormEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public StylesForFormEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => true;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StylesForFormEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new StylesForFormEntity(value.AsJsonElement);
                        }

                        return value.As<StylesForFormEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(StylesForFormEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(StylesForFormEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<StylesForFormEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        result = this.ValidateIfThenElse(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!ifResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, ifResult);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(ifResult, true);
                            }

                            result = result.MergeChildContext(ifResult, false);
                        }

                        if (ifResult.IsValid)
                        {
                            ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                            if (!thenResult.IsValid)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                                }
                                else
                                {
                                    result = validationContext.WithResult(isValid: false);
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Basic)
                                {
                                    result = result.MergeChildContext(thenResult, true);
                                }

                                result = result.MergeChildContext(thenResult, false);
                            }
                        }

                        if (!ifResult.IsValid)
                        {
                            ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ElseEntity>().Validate(validationContext.CreateChildContext(), level);
                            if (!elseResult.IsValid)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                                }
                                else
                                {
                                    result = validationContext.WithResult(isValid: false);
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Basic)
                                {
                                    result = result.MergeChildContext(elseResult, true);
                                }

                                result = result.MergeChildContext(elseResult, false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ElseEntity : IJsonObject<ElseEntity>, IEquatable<ElseEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "Explode"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
                        /// <summary>
                        /// JSON property name for <see cref = "Explode"/>.
                        /// </summary>
                        public static readonly JsonEncodedText ExplodeJsonPropertyName = JsonEncodedText.Encode(ExplodeUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ElseEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ElseEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ElseEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public ElseEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ElseEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public ElseEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets Explode.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ElseEntity.ExplodeEntity Explode
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ElseEntity.ExplodeEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ElseEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ElseEntity(value.AsJsonElement);
                            }

                            return value.As<ElseEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ElseEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ElseEntity(JsonObject value)
                        {
                            return new ElseEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(ElseEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ElseEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ElseEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new ElseEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "ElseEntity"/>.
                        /// </summary>
                        public static ElseEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ElseEntity.ExplodeEntity? explode = null)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            if (explode is Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ElseEntity.ExplodeEntity explode__)
                            {
                                builder.Add(ExplodeJsonPropertyName, explode__);
                            }

                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets explode.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public ElseEntity WithExplode(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ElseEntity.ExplodeEntity value)
                        {
                            return this.SetProperty(ExplodeJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(string name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(JsonEncodedText name)
                        {
                            return __MenesDefaults.TryGetValue(name, out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(string name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<char> name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<byte> utf8name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ElseEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public ElseEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ElseEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ElseEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ElseEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ElseEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ElseEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ElseEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ElseEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ElseEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                        {
                            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(ExplodeJsonPropertyName, JsonAny.Parse("false"));
                            return builder.ToImmutable();
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(ExplodeJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ElseEntity.ExplodeEntity property = that.Explode;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct ExplodeEntity : IJsonValue, IEquatable<ExplodeEntity>
                        {
                            private readonly JsonElement jsonElementBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "ExplodeEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public ExplodeEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => true;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator ExplodeEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new ExplodeEntity(value.AsJsonElement);
                                }

                                return value.As<ExplodeEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(ExplodeEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(ExplodeEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<ExplodeEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                return result;
                            }
                        }
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                        /// <summary>
                        /// JSON property name for <see cref = "Style"/>.
                        /// </summary>
                        public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public IfEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public IfEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets Style.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.IfEntity.StyleEntity Style
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.IfEntity.StyleEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new IfEntity(value.AsJsonElement);
                            }

                            return value.As<IfEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(IfEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(JsonObject value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(IfEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new IfEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "IfEntity"/>.
                        /// </summary>
                        public static IfEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.IfEntity.StyleEntity style)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(StyleJsonPropertyName, style);
                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets style.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public IfEntity WithStyle(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.IfEntity.StyleEntity value)
                        {
                            return this.SetProperty(StyleJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(IfEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<IfEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.IfEntity.StyleEntity property = that.Style;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            bool foundStyle = false;
                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }

                                    if (StyleJsonPropertyName.Equals(propertyName))
                                    {
                                        foundStyle = true;
                                    }
                                }
                            }

                            if (!foundStyle)
                            {
                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"style\" not present.");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                                }
                                else
                                {
                                    return result.WithResult(isValid: false);
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
                        {
                            private static readonly StyleEntity __MenesConstValue = JsonAny.Parse("\"form\"");
                            private readonly JsonElement jsonElementBacking;
                            private readonly JsonEncodedText? stringBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public StyleEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                                this.stringBacking = default;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(string value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(JsonEncodedText value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = value;
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<char> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">A string value.</param>
                            public StyleEntity(ReadOnlySpan<byte> value)
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = JsonEncodedText.Encode(value);
                            }

                            /// <summary>
                            /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                            /// </summary>
                            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                            public StyleEntity(JsonString jsonString)
                            {
                                if (jsonString.HasJsonElement)
                                {
                                    this.jsonElementBacking = jsonString.AsJsonElement;
                                    this.stringBacking = default;
                                }
                                else
                                {
                                    this.jsonElementBacking = default;
                                    this.stringBacking = jsonString.GetJsonEncodedText();
                                }
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => this.stringBacking is null;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return JsonString.StringToJsonElement(stringBacking);
                                    }

                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText)
                                    {
                                        return JsonValueKind.String;
                                    }

                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonAny(stringBacking);
                                    }

                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    if (this.stringBacking is JsonEncodedText stringBacking)
                                    {
                                        return new JsonString(stringBacking);
                                    }

                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new StyleEntity(value.AsJsonElement);
                                }

                                return value.As<StyleEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(StyleEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(string value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator string (StyleEntity value)
                            {
                                return value.AsString.GetString();
                            }

                            /// <summary>
                            /// Conversion from <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonEncodedText value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to <see cref = "JsonEncodedText"/>.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator JsonEncodedText(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText();
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                            {
                                return value.AsString.AsSpan();
                            }

                            /// <summary>
                            /// Conversion from utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to utf8 bytes.
                            /// </summary>
                            /// <param name = "value">The number from which to convert.</param>
                            public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                            {
                                return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                            }

                            /// <summary>
                            /// Conversion from string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator StyleEntity(JsonString value)
                            {
                                return new StyleEntity(value);
                            }

                            /// <summary>
                            /// Conversion to string.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonString(StyleEntity value)
                            {
                                return value.AsString;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    writer.WriteStringValue(stringBacking);
                                    return;
                                }

                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(StyleEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<StyleEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                return result;
                            }
                        }
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "Explode"/>.
                        /// </summary>
                        public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
                        /// <summary>
                        /// JSON property name for <see cref = "Explode"/>.
                        /// </summary>
                        public static readonly JsonEncodedText ExplodeJsonPropertyName = JsonEncodedText.Encode(ExplodeUtf8JsonPropertyName.Span);
                        private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                        private readonly JsonElement jsonElementBacking;
                        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ThenEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.objectBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A property dictionary.</param>
                        public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                        public ThenEntity(JsonObject jsonObject)
                        {
                            if (jsonObject.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonObject.AsJsonElement;
                                this.objectBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.objectBacking = jsonObject.AsPropertyDictionary;
                            }
                        }

                        /// <summary>
                        /// Gets Explode.
                        /// </summary>
                        /// <remarks>
                        /// {Property title}.
                        /// {Property description}.
                        /// </remarks>
                        /// <example>
                        /// {Property examples}.
                        /// </example>
                        public Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ThenEntity.ExplodeEntity Explode
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                                {
                                    if (properties.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                                    {
                                        return result;
                                    }
                                }

                                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                                {
                                    if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                                    {
                                        return new Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ThenEntity.ExplodeEntity(result);
                                    }
                                }

                                return default;
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.objectBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return JsonObject.PropertiesToJsonElement(objectBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                                {
                                    return JsonValueKind.Object;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonAny(objectBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                                {
                                    return new JsonObject(objectBacking);
                                }

                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ThenEntity(value.AsJsonElement);
                            }

                            return value.As<ThenEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ThenEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(JsonObject value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Conversion to object.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonObject(ThenEntity value)
                        {
                            return value.AsObject;
                        }

                        /// <summary>
                        /// Implicit conversion to a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                        {
                            return value.AsObject.AsPropertyDictionary;
                        }

                        /// <summary>
                        /// Implicit conversion from a property dictionary.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                        {
                            return new ThenEntity(value);
                        }

                        /// <summary>
                        /// Creates an instance of a <see cref = "ThenEntity"/>.
                        /// </summary>
                        public static ThenEntity Create(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ThenEntity.ExplodeEntity? explode = null)
                        {
                            var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            if (explode is Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ThenEntity.ExplodeEntity explode__)
                            {
                                builder.Add(ExplodeJsonPropertyName, explode__);
                            }

                            return builder.ToImmutable();
                        }

                        /// <summary>
                        /// Sets explode.
                        /// </summary>
                        /// <param name = "value">The value to set.</param>
                        /// <returns>The entity with the updated property.</returns>
                        public ThenEntity WithExplode(Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ThenEntity.ExplodeEntity value)
                        {
                            return this.SetProperty(ExplodeJsonPropertyName, value);
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                JsonObject.WriteProperties(objectBacking, writer);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public JsonObjectEnumerator EnumerateObject()
                        {
                            return this.AsObject.EnumerateObject();
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(string name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return this.AsObject.TryGetProperty(utf8name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(name, out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(string name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                        }

                        /// <inheritdoc/>
                        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(JsonEncodedText name)
                        {
                            return __MenesDefaults.TryGetValue(name, out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(string name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<char> name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        /// <inheritdoc/>
                        public bool HasDefault(ReadOnlySpan<byte> utf8name)
                        {
                            return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ThenEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(JsonEncodedText name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(name, out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(string name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<char> name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public bool HasProperty(ReadOnlySpan<byte> utf8name)
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                            }

                            return false;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(string name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                            where TValue : IJsonValue
                        {
                            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                            {
                                return this.AsObject.SetProperty(utf8name, value);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(JsonEncodedText name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(string name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                        {
                            if (this.ValueKind == JsonValueKind.Object)
                            {
                                return this.AsObject.RemoveProperty(utf8Name);
                            }

                            return this;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ThenEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            JsonValueKind valueKind = this.ValueKind;
                            result = this.ValidateObject(valueKind, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                        {
                            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                            builder.Add(ExplodeJsonPropertyName, JsonAny.Parse("true"));
                            return builder.ToImmutable();
                        }

                        private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                        {
                            ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                            builder.Add(ExplodeJsonPropertyName, (that, validationContext, level) =>
                            {
                                Menes.OpenApi.Type20210415.ParameterValue.SchemaEntity.StylesForFormEntity.ThenEntity.ExplodeEntity property = that.Explode;
                                return property.Validate(validationContext, level);
                            });
                            return builder.ToImmutable();
                        }

                        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                        {
                            ValidationContext result = validationContext;
                            if (valueKind != JsonValueKind.Object)
                            {
                                return result;
                            }

                            foreach (Property property in this.EnumerateObject())
                            {
                                JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                                {
                                    result = result.WithLocalProperty(propertyName);
                                    var propertyResult = propertyValidator(this, result, level);
                                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                    if (level == ValidationLevel.Flag && !result.IsValid)
                                    {
                                        return result;
                                    }
                                }
                            }

                            return result;
                        }

                        /// <summary>
                        /// A type generated from a JsonSchema specification.
                        /// </summary>
                        public readonly struct ExplodeEntity : IJsonValue, IEquatable<ExplodeEntity>
                        {
                            private readonly JsonElement jsonElementBacking;
                            /// <summary>
                            /// Initializes a new instance of the <see cref = "ExplodeEntity"/> struct.
                            /// </summary>
                            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                            public ExplodeEntity(JsonElement value)
                            {
                                this.jsonElementBacking = value;
                            }

                            /// <summary>
                            /// Gets a value indicating whether this is backed by a JSON element.
                            /// </summary>
                            public bool HasJsonElement => true;
                            /// <summary>
                            /// Gets the value as a JsonElement.
                            /// </summary>
                            public JsonElement AsJsonElement
                            {
                                get
                                {
                                    return this.jsonElementBacking;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonValueKind ValueKind
                            {
                                get
                                {
                                    return this.jsonElementBacking.ValueKind;
                                }
                            }

                            /// <inheritdoc/>
                            public JsonAny AsAny
                            {
                                get
                                {
                                    return new JsonAny(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonObject"/>.
                            /// </summary>
                            public JsonObject AsObject
                            {
                                get
                                {
                                    return new JsonObject(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonArray"/>.
                            /// </summary>
                            public JsonArray AsArray
                            {
                                get
                                {
                                    return new JsonArray(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNumber"/>.
                            /// </summary>
                            public JsonNumber AsNumber
                            {
                                get
                                {
                                    return new JsonNumber(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonString"/>.
                            /// </summary>
                            public JsonString AsString
                            {
                                get
                                {
                                    return new JsonString(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonBoolean"/>.
                            /// </summary>
                            public JsonBoolean AsBoolean
                            {
                                get
                                {
                                    return new JsonBoolean(this.jsonElementBacking);
                                }
                            }

                            /// <summary>
                            /// Gets the value as a <see cref = "JsonNull"/>.
                            /// </summary>
                            public JsonNull AsNull
                            {
                                get
                                {
                                    return default;
                                }
                            }

                            /// <summary>
                            /// Conversion from any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator ExplodeEntity(JsonAny value)
                            {
                                if (value.HasJsonElement)
                                {
                                    return new ExplodeEntity(value.AsJsonElement);
                                }

                                return value.As<ExplodeEntity>();
                            }

                            /// <summary>
                            /// Conversion to any.
                            /// </summary>
                            /// <param name = "value">The value from which to convert.</param>
                            public static implicit operator JsonAny(ExplodeEntity value)
                            {
                                return value.AsAny;
                            }

                            /// <summary>
                            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                            /// </summary>
                            /// <param name = "writer">The writer to which to write the object.</param>
                            public void WriteTo(Utf8JsonWriter writer)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                                {
                                    this.jsonElementBacking.WriteTo(writer);
                                    return;
                                }

                                writer.WriteNullValue();
                            }

                            /// <inheritdoc/>
                            public bool Equals<T>(T other)
                                where T : struct, IJsonValue
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public bool Equals(ExplodeEntity other)
                            {
                                JsonValueKind valueKind = this.ValueKind;
                                if (other.ValueKind != valueKind)
                                {
                                    return false;
                                }

                                return valueKind switch
                                {
                                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                                ;
                            }

                            /// <inheritdoc/>
                            public T As<T>()
                                where T : struct, IJsonValue
                            {
                                return this.As<ExplodeEntity, T>();
                            }

                            /// <inheritdoc/>
                            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                                if (level != ValidationLevel.Flag)
                                {
                                    result = result.UsingStack();
                                }

                                return result;
                            }
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct AllowReservedValue : IJsonValue, IEquatable<AllowReservedValue>
                {
                    private readonly JsonElement jsonElementBacking;
                    private readonly bool? booleanBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public AllowReservedValue(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.booleanBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                    /// </summary>
                    /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                    public AllowReservedValue(JsonBoolean jsonBoolean)
                    {
                        if (jsonBoolean.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonBoolean.AsJsonElement;
                            this.booleanBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.booleanBacking = jsonBoolean.GetBoolean();
                        }
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                    /// </summary>
                    /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                    public AllowReservedValue(bool boolean)
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = boolean;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.booleanBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return JsonBoolean.BoolToJsonElement(booleanBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return new JsonAny(booleanBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return new JsonBoolean(booleanBacking);
                            }

                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator AllowReservedValue(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new AllowReservedValue(value.AsJsonElement);
                        }

                        return value.As<AllowReservedValue>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(AllowReservedValue value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from bool.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator AllowReservedValue(bool value)
                    {
                        return new AllowReservedValue(value);
                    }

                    /// <summary>
                    /// Conversion to bool.
                    /// </summary>
                    /// <param name = "boolean">The value from which to convert.</param>
                    public static implicit operator bool (AllowReservedValue boolean)
                    {
                        return boolean.AsBoolean.GetBoolean();
                    }

                    /// <summary>
                    /// Conversion from bool.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator AllowReservedValue(JsonBoolean value)
                    {
                        return new AllowReservedValue(value);
                    }

                    /// <summary>
                    /// Conversion to bool.
                    /// </summary>
                    /// <param name = "boolean">The value from which to convert.</param>
                    public static implicit operator JsonBoolean(AllowReservedValue boolean)
                    {
                        return boolean.AsBoolean;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            writer.WriteBooleanValue(booleanBacking);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(AllowReservedValue other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<AllowReservedValue, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateType(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        bool isValid = false;
                        ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                        if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                        {
                            return validationContext;
                        }

                        if (localResultBoolean.IsValid)
                        {
                            isValid = true;
                        }

                        result = result.MergeResults(isValid, level, localResultBoolean);
                        return result;
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct OneOf0Entity : IJsonObject<OneOf0Entity>, IEquatable<OneOf0Entity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Schema"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> SchemaUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 97};
                /// <summary>
                /// JSON property name for <see cref = "Schema"/>.
                /// </summary>
                public static readonly JsonEncodedText SchemaJsonPropertyName = JsonEncodedText.Encode(SchemaUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public OneOf0Entity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public OneOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public OneOf0Entity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Schema.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Schema
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(SchemaJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(SchemaUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new OneOf0Entity(value.AsJsonElement);
                    }

                    return value.As<OneOf0Entity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(OneOf0Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(JsonObject value)
                {
                    return new OneOf0Entity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(OneOf0Entity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OneOf0Entity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new OneOf0Entity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "OneOf0Entity"/>.
                /// </summary>
                public static OneOf0Entity Create(Menes.Json.JsonAny schema)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(SchemaJsonPropertyName, schema);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets schema.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public OneOf0Entity WithSchema(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(SchemaJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(OneOf0Entity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<OneOf0Entity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(SchemaJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Schema;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundSchema = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (SchemaJsonPropertyName.Equals(propertyName))
                            {
                                foundSchema = true;
                            }
                        }
                    }

                    if (!foundSchema)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"schema\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct OneOf1Entity : IJsonObject<OneOf1Entity>, IEquatable<OneOf1Entity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Content"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ContentUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116};
                /// <summary>
                /// JSON property name for <see cref = "Content"/>.
                /// </summary>
                public static readonly JsonEncodedText ContentJsonPropertyName = JsonEncodedText.Encode(ContentUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public OneOf1Entity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public OneOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public OneOf1Entity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Content.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Content
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ContentJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ContentUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new OneOf1Entity(value.AsJsonElement);
                    }

                    return value.As<OneOf1Entity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(OneOf1Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(JsonObject value)
                {
                    return new OneOf1Entity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(OneOf1Entity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OneOf1Entity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new OneOf1Entity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "OneOf1Entity"/>.
                /// </summary>
                public static OneOf1Entity Create(Menes.Json.JsonAny content)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(ContentJsonPropertyName, content);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets content.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public OneOf1Entity WithContent(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(ContentJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(OneOf1Entity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<OneOf1Entity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(ContentJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Content;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundContent = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (ContentJsonPropertyName.Equals(propertyName))
                            {
                                foundContent = true;
                            }
                        }
                    }

                    if (!foundContent)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"content\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct InEntity : IJsonValue, IEquatable<InEntity>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly JsonEncodedText? stringBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public InEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.stringBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public InEntity(string value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public InEntity(JsonEncodedText value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public InEntity(ReadOnlySpan<char> value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public InEntity(ReadOnlySpan<byte> value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                /// </summary>
                /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                public InEntity(JsonString jsonString)
                {
                    if (jsonString.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonString.AsJsonElement;
                        this.stringBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = jsonString.GetJsonEncodedText();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.stringBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return JsonString.StringToJsonElement(stringBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText)
                        {
                            return JsonValueKind.String;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return new JsonAny(stringBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return new JsonString(stringBacking);
                        }

                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator InEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new InEntity(value.AsJsonElement);
                    }

                    return value.As<InEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(InEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator InEntity(string value)
                {
                    return new InEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator string (InEntity value)
                {
                    return value.AsString.GetString();
                }

                /// <summary>
                /// Conversion from <see cref = "JsonEncodedText"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator InEntity(JsonEncodedText value)
                {
                    return new InEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "JsonEncodedText"/>.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator JsonEncodedText(InEntity value)
                {
                    return value.AsString.GetJsonEncodedText();
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator InEntity(ReadOnlySpan<char> value)
                {
                    return new InEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator ReadOnlySpan<char>(InEntity value)
                {
                    return value.AsString.AsSpan();
                }

                /// <summary>
                /// Conversion from utf8 bytes.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator InEntity(ReadOnlySpan<byte> value)
                {
                    return new InEntity(value);
                }

                /// <summary>
                /// Conversion to utf8 bytes.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator ReadOnlySpan<byte>(InEntity value)
                {
                    return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator InEntity(JsonString value)
                {
                    return new InEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonString(InEntity value)
                {
                    return value.AsString;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.stringBacking is JsonEncodedText stringBacking)
                    {
                        writer.WriteStringValue(stringBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(InEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<InEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0, EnumValues.Item1, EnumValues.Item2, EnumValues.Item3);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                /// <summary>
                /// Permitted values.
                /// </summary>
                public static class EnumValues
                {
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly InEntity Query = JsonAny.Parse("\"query\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly InEntity Header = JsonAny.Parse("\"header\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly InEntity Path = JsonAny.Parse("\"path\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly InEntity Cookie = JsonAny.Parse("\"cookie\"");
                    /// <summary>
                    /// [{Title} || Item 0] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly InEntity Item0 = JsonAny.Parse("\"query\"");
                    /// <summary>
                    /// [{Title} || Item 1] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly InEntity Item1 = JsonAny.Parse("\"header\"");
                    /// <summary>
                    /// [{Title} || Item 2] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly InEntity Item2 = JsonAny.Parse("\"path\"");
                    /// <summary>
                    /// [{Title} || Item 3] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly InEntity Item3 = JsonAny.Parse("\"cookie\"");
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct RequiredValue : IJsonValue, IEquatable<RequiredValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public RequiredValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public RequiredValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public RequiredValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new RequiredValue(value.AsJsonElement);
                    }

                    return value.As<RequiredValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(RequiredValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(bool value)
                {
                    return new RequiredValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (RequiredValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(JsonBoolean value)
                {
                    return new RequiredValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(RequiredValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(RequiredValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<RequiredValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct DeprecatedValue : IJsonValue, IEquatable<DeprecatedValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public DeprecatedValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public DeprecatedValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public DeprecatedValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new DeprecatedValue(value.AsJsonElement);
                    }

                    return value.As<DeprecatedValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(DeprecatedValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(bool value)
                {
                    return new DeprecatedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (DeprecatedValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(JsonBoolean value)
                {
                    return new DeprecatedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(DeprecatedValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(DeprecatedValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<DeprecatedValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct AllowEmptyValueValue : IJsonValue, IEquatable<AllowEmptyValueValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowEmptyValueValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public AllowEmptyValueValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowEmptyValueValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public AllowEmptyValueValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowEmptyValueValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public AllowEmptyValueValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowEmptyValueValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new AllowEmptyValueValue(value.AsJsonElement);
                    }

                    return value.As<AllowEmptyValueValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(AllowEmptyValueValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowEmptyValueValue(bool value)
                {
                    return new AllowEmptyValueValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (AllowEmptyValueValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowEmptyValueValue(JsonBoolean value)
                {
                    return new AllowEmptyValueValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(AllowEmptyValueValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(AllowEmptyValueValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<AllowEmptyValueValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ExampleValue : IJsonObject<ExampleValue>, IEquatable<ExampleValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
            /// <summary>
            /// JSON property name for <see cref = "Summary"/>.
            /// </summary>
            public static readonly JsonEncodedText SummaryJsonPropertyName = JsonEncodedText.Encode(SummaryUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Value"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ValueUtf8JsonPropertyName = new byte[]{118, 97, 108, 117, 101};
            /// <summary>
            /// JSON property name for <see cref = "Value"/>.
            /// </summary>
            public static readonly JsonEncodedText ValueJsonPropertyName = JsonEncodedText.Encode(ValueUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "ExternalValue"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExternalValueUtf8JsonPropertyName = new byte[]{101, 120, 116, 101, 114, 110, 97, 108, 86, 97, 108, 117, 101};
            /// <summary>
            /// JSON property name for <see cref = "ExternalValue"/>.
            /// </summary>
            public static readonly JsonEncodedText ExternalValueJsonPropertyName = JsonEncodedText.Encode(ExternalValueUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ExampleValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ExampleValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ExampleValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExampleValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ExampleValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExampleValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ExampleValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExampleValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public ExampleValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Summary.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Summary
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Value.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Value
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ValueJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ValueUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets ExternalValue.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonUri ExternalValue
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExternalValueJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExternalValueUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonUri(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExampleValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new ExampleValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ExampleValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExampleValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ExampleValue(value.AsJsonElement);
                }

                return value.As<ExampleValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ExampleValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExampleValue(JsonObject value)
            {
                return new ExampleValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ExampleValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ExampleValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExampleValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ExampleValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ExampleValue"/>.
            /// </summary>
            public static ExampleValue Create(Menes.Json.JsonString? summary = null, Menes.Json.JsonString? description = null, Menes.Json.JsonAny? value = null, Menes.Json.JsonUri? externalValue = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (summary is Menes.Json.JsonString summary__)
                {
                    builder.Add(SummaryJsonPropertyName, summary__);
                }

                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (value is Menes.Json.JsonAny value__)
                {
                    builder.Add(ValueJsonPropertyName, value__);
                }

                if (externalValue is Menes.Json.JsonUri externalValue__)
                {
                    builder.Add(ExternalValueJsonPropertyName, externalValue__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets summary.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExampleValue WithSummary(Menes.Json.JsonString value)
            {
                return this.SetProperty(SummaryJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExampleValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets value.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExampleValue WithValue(Menes.Json.JsonAny value)
            {
                return this.SetProperty(ValueJsonPropertyName, value);
            }

            /// <summary>
            /// Sets externalValue.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExampleValue WithExternalValue(Menes.Json.JsonUri value)
            {
                return this.SetProperty(ExternalValueJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ExampleValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ExampleValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExampleValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExampleValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExampleValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExampleValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExampleValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExampleValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExampleValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ExampleValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ExampleValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ExampleValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ExampleValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(SummaryJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Summary;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ValueJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.Value;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ExternalValueJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonUri property = that.ExternalValue;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ExampleValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct RequestBodyValue : IJsonObject<RequestBodyValue>, IEquatable<RequestBodyValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Content"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ContentUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116};
            /// <summary>
            /// JSON property name for <see cref = "Content"/>.
            /// </summary>
            public static readonly JsonEncodedText ContentJsonPropertyName = JsonEncodedText.Encode(ContentUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Required"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RequiredUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 105, 114, 101, 100};
            /// <summary>
            /// JSON property name for <see cref = "Required"/>.
            /// </summary>
            public static readonly JsonEncodedText RequiredJsonPropertyName = JsonEncodedText.Encode(RequiredUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<RequestBodyValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "RequestBodyValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public RequestBodyValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "RequestBodyValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public RequestBodyValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "RequestBodyValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public RequestBodyValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "RequestBodyValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public RequestBodyValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Content.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ContentValue Content
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ContentJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ContentUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ContentValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Required.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.RequestBodyValue.RequiredValue Required
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RequiredJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RequiredUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.RequestBodyValue.RequiredValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator RequestBodyValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new RequestBodyValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(RequestBodyValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator RequestBodyValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new RequestBodyValue(value.AsJsonElement);
                }

                return value.As<RequestBodyValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(RequestBodyValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator RequestBodyValue(JsonObject value)
            {
                return new RequestBodyValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(RequestBodyValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(RequestBodyValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator RequestBodyValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new RequestBodyValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "RequestBodyValue"/>.
            /// </summary>
            public static RequestBodyValue Create(Menes.OpenApi.Type20210415.ContentValue content, Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.RequestBodyValue.RequiredValue? required = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(ContentJsonPropertyName, content);
                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (required is Menes.OpenApi.Type20210415.RequestBodyValue.RequiredValue required__)
                {
                    builder.Add(RequiredJsonPropertyName, required__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets content.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public RequestBodyValue WithContent(Menes.OpenApi.Type20210415.ContentValue value)
            {
                return this.SetProperty(ContentJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public RequestBodyValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets required.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public RequestBodyValue WithRequired(Menes.OpenApi.Type20210415.RequestBodyValue.RequiredValue value)
            {
                return this.SetProperty(RequiredJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(string name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
            }

            /// <inheritdoc/>
            public bool HasDefault(JsonEncodedText name)
            {
                return __MenesDefaults.TryGetValue(name, out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(string name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<char> name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<byte> utf8name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(RequestBodyValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public RequestBodyValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public RequestBodyValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public RequestBodyValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public RequestBodyValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public RequestBodyValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public RequestBodyValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public RequestBodyValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public RequestBodyValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<RequestBodyValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
            {
                ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(RequiredJsonPropertyName, JsonAny.Parse("false"));
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<RequestBodyValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<RequestBodyValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<RequestBodyValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(ContentJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ContentValue property = that.Content;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(RequiredJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.RequestBodyValue.RequiredValue property = that.Required;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundContent = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<RequestBodyValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (ContentJsonPropertyName.Equals(propertyName))
                        {
                            foundContent = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundContent && !HasDefault(ContentJsonPropertyName))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"content\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct RequiredValue : IJsonValue, IEquatable<RequiredValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public RequiredValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public RequiredValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public RequiredValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new RequiredValue(value.AsJsonElement);
                    }

                    return value.As<RequiredValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(RequiredValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(bool value)
                {
                    return new RequiredValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (RequiredValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(JsonBoolean value)
                {
                    return new RequiredValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(RequiredValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(RequiredValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<RequiredValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct HeaderValue : IJsonObject<HeaderValue>, IEquatable<HeaderValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Required"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RequiredUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 105, 114, 101, 100};
            /// <summary>
            /// JSON property name for <see cref = "Required"/>.
            /// </summary>
            public static readonly JsonEncodedText RequiredJsonPropertyName = JsonEncodedText.Encode(RequiredUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Deprecated"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DeprecatedUtf8JsonPropertyName = new byte[]{100, 101, 112, 114, 101, 99, 97, 116, 101, 100};
            /// <summary>
            /// JSON property name for <see cref = "Deprecated"/>.
            /// </summary>
            public static readonly JsonEncodedText DeprecatedJsonPropertyName = JsonEncodedText.Encode(DeprecatedUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "AllowEmptyValue"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> AllowEmptyValueUtf8JsonPropertyName = new byte[]{97, 108, 108, 111, 119, 69, 109, 112, 116, 121, 86, 97, 108, 117, 101};
            /// <summary>
            /// JSON property name for <see cref = "AllowEmptyValue"/>.
            /// </summary>
            public static readonly JsonEncodedText AllowEmptyValueJsonPropertyName = JsonEncodedText.Encode(AllowEmptyValueUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesDependentSchema = CreateDependentSchemaValidators();
            private static readonly ImmutableDictionary<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "HeaderValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public HeaderValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "HeaderValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public HeaderValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "HeaderValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public HeaderValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "HeaderValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public HeaderValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Required.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.HeaderValue.RequiredValue Required
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RequiredJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RequiredUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.HeaderValue.RequiredValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Deprecated.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.HeaderValue.DeprecatedValue Deprecated
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DeprecatedJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DeprecatedUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.HeaderValue.DeprecatedValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets AllowEmptyValue.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.HeaderValue.AllowEmptyValueValue AllowEmptyValue
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(AllowEmptyValueJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(AllowEmptyValueUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.HeaderValue.AllowEmptyValueValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator HeaderValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new HeaderValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(HeaderValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator HeaderValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new HeaderValue(value.AsJsonElement);
                }

                return value.As<HeaderValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(HeaderValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator HeaderValue(JsonObject value)
            {
                return new HeaderValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(HeaderValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(HeaderValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator HeaderValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new HeaderValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "HeaderValue"/>.
            /// </summary>
            public static HeaderValue Create(Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.HeaderValue.RequiredValue? required = null, Menes.OpenApi.Type20210415.HeaderValue.DeprecatedValue? deprecated = null, Menes.OpenApi.Type20210415.HeaderValue.AllowEmptyValueValue? allowEmptyValue = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (required is Menes.OpenApi.Type20210415.HeaderValue.RequiredValue required__)
                {
                    builder.Add(RequiredJsonPropertyName, required__);
                }

                if (deprecated is Menes.OpenApi.Type20210415.HeaderValue.DeprecatedValue deprecated__)
                {
                    builder.Add(DeprecatedJsonPropertyName, deprecated__);
                }

                if (allowEmptyValue is Menes.OpenApi.Type20210415.HeaderValue.AllowEmptyValueValue allowEmptyValue__)
                {
                    builder.Add(AllowEmptyValueJsonPropertyName, allowEmptyValue__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public HeaderValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets required.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public HeaderValue WithRequired(Menes.OpenApi.Type20210415.HeaderValue.RequiredValue value)
            {
                return this.SetProperty(RequiredJsonPropertyName, value);
            }

            /// <summary>
            /// Sets deprecated.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public HeaderValue WithDeprecated(Menes.OpenApi.Type20210415.HeaderValue.DeprecatedValue value)
            {
                return this.SetProperty(DeprecatedJsonPropertyName, value);
            }

            /// <summary>
            /// Sets allowEmptyValue.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public HeaderValue WithAllowEmptyValue(Menes.OpenApi.Type20210415.HeaderValue.AllowEmptyValueValue value)
            {
                return this.SetProperty(AllowEmptyValueJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(string name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
            }

            /// <inheritdoc/>
            public bool HasDefault(JsonEncodedText name)
            {
                return __MenesDefaults.TryGetValue(name, out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(string name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<char> name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<byte> utf8name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(HeaderValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public HeaderValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public HeaderValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public HeaderValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public HeaderValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public HeaderValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public HeaderValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public HeaderValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public HeaderValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<HeaderValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>> CreateDependentSchemaValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(JsonEncodedText.Encode("schema"), (entity, validationContext, level) =>
                {
                    return entity.As<Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity>().Validate(validationContext, level);
                });
                builder.Add(JsonEncodedText.Encode("content"), (entity, validationContext, level) =>
                {
                    return entity.As<Menes.OpenApi.Type20210415.HeaderValue.ContentEntity>().Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
            {
                ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(RequiredJsonPropertyName, JsonAny.Parse("false"));
                builder.Add(DeprecatedJsonPropertyName, JsonAny.Parse("false"));
                builder.Add(AllowEmptyValueJsonPropertyName, JsonAny.Parse("false"));
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(RequiredJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.HeaderValue.RequiredValue property = that.Required;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DeprecatedJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.HeaderValue.DeprecatedValue property = that.Deprecated;
                    return property.Validate(validationContext, level);
                });
                builder.Add(AllowEmptyValueJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.HeaderValue.AllowEmptyValueValue property = that.AllowEmptyValue;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (__MenesDependentSchema.TryGetValue(propertyName, out Func<HeaderValue, ValidationContext, ValidationLevel, ValidationContext>? dependentSchemaValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = dependentSchemaValidator(this, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct SchemaEntity : IJsonObject<SchemaEntity>, IEquatable<SchemaEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Example"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ExampleUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101};
                /// <summary>
                /// JSON property name for <see cref = "Example"/>.
                /// </summary>
                public static readonly JsonEncodedText ExampleJsonPropertyName = JsonEncodedText.Encode(ExampleUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Examples"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ExamplesUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101, 115};
                /// <summary>
                /// JSON property name for <see cref = "Examples"/>.
                /// </summary>
                public static readonly JsonEncodedText ExamplesJsonPropertyName = JsonEncodedText.Encode(ExamplesUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Style"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                /// <summary>
                /// JSON property name for <see cref = "Style"/>.
                /// </summary>
                public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Explode"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
                /// <summary>
                /// JSON property name for <see cref = "Explode"/>.
                /// </summary>
                public static readonly JsonEncodedText ExplodeJsonPropertyName = JsonEncodedText.Encode(ExplodeUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "AllowReserved"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> AllowReservedUtf8JsonPropertyName = new byte[]{97, 108, 108, 111, 119, 82, 101, 115, 101, 114, 118, 101, 100};
                /// <summary>
                /// JSON property name for <see cref = "AllowReserved"/>.
                /// </summary>
                public static readonly JsonEncodedText AllowReservedJsonPropertyName = JsonEncodedText.Encode(AllowReservedUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Schema"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> SchemaUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 97};
                /// <summary>
                /// JSON property name for <see cref = "Schema"/>.
                /// </summary>
                public static readonly JsonEncodedText SchemaJsonPropertyName = JsonEncodedText.Encode(SchemaUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public SchemaEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public SchemaEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public SchemaEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "SchemaEntity"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/> from which to construct the value.</param>
                public SchemaEntity(Menes.OpenApi.Type20210415.ExamplesEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                        {
                            this.objectBacking = conversion;
                        }
                        else
                        {
                            this.objectBacking = default;
                        }
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.ExamplesEntity AsExamplesEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                public bool IsExamplesEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.ExamplesEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets Example.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Example
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ExampleJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ExampleUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Examples.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue Examples
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ExamplesJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ExamplesUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Style.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.StyleEntity Style
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.StyleEntity(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Explode.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.ExplodeValue Explode
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.ExplodeValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets AllowReserved.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.AllowReservedValue AllowReserved
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(AllowReservedJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(AllowReservedUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.AllowReservedValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Schema.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny Schema
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(SchemaJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(SchemaUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(Menes.OpenApi.Type20210415.ExamplesEntity value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.ExamplesEntity(SchemaEntity value)
                {
                    if (value.ValueKind == JsonValueKind.Object)
                    {
                        return new Menes.OpenApi.Type20210415.ExamplesEntity(value.AsObject);
                    }

                    return default;
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new SchemaEntity(value.AsJsonElement);
                    }

                    return value.As<SchemaEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(SchemaEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(JsonObject value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(SchemaEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SchemaEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator SchemaEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new SchemaEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "SchemaEntity"/>.
                /// </summary>
                public static SchemaEntity Create(Menes.Json.JsonAny? example = null, Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue? examples = null, Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.StyleEntity? style = null, Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.ExplodeValue? explode = null, Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.AllowReservedValue? allowReserved = null, Menes.Json.JsonAny? schema = null)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    if (example is Menes.Json.JsonAny example__)
                    {
                        builder.Add(ExampleJsonPropertyName, example__);
                    }

                    if (examples is Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue examples__)
                    {
                        builder.Add(ExamplesJsonPropertyName, examples__);
                    }

                    if (style is Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.StyleEntity style__)
                    {
                        builder.Add(StyleJsonPropertyName, style__);
                    }

                    if (explode is Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.ExplodeValue explode__)
                    {
                        builder.Add(ExplodeJsonPropertyName, explode__);
                    }

                    if (allowReserved is Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.AllowReservedValue allowReserved__)
                    {
                        builder.Add(AllowReservedJsonPropertyName, allowReserved__);
                    }

                    if (schema is Menes.Json.JsonAny schema__)
                    {
                        builder.Add(SchemaJsonPropertyName, schema__);
                    }

                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets example.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithExample(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(ExampleJsonPropertyName, value);
                }

                /// <summary>
                /// Sets examples.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithExamples(Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue value)
                {
                    return this.SetProperty(ExamplesJsonPropertyName, value);
                }

                /// <summary>
                /// Sets style.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithStyle(Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.StyleEntity value)
                {
                    return this.SetProperty(StyleJsonPropertyName, value);
                }

                /// <summary>
                /// Sets explode.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithExplode(Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.ExplodeValue value)
                {
                    return this.SetProperty(ExplodeJsonPropertyName, value);
                }

                /// <summary>
                /// Sets allowReserved.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithAllowReserved(Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.AllowReservedValue value)
                {
                    return this.SetProperty(AllowReservedJsonPropertyName, value);
                }

                /// <summary>
                /// Sets schema.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public SchemaEntity WithSchema(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(SchemaJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(string name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                }

                /// <inheritdoc/>
                public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                }

                /// <inheritdoc/>
                public bool HasDefault(JsonEncodedText name)
                {
                    return __MenesDefaults.TryGetValue(name, out _);
                }

                /// <inheritdoc/>
                public bool HasDefault(string name)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                /// <inheritdoc/>
                public bool HasDefault(ReadOnlySpan<char> name)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                /// <inheritdoc/>
                public bool HasDefault(ReadOnlySpan<byte> utf8name)
                {
                    return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(SchemaEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public SchemaEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<SchemaEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateRef(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                {
                    ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(StyleJsonPropertyName, JsonAny.Parse("\"simple\""));
                    builder.Add(ExplodeJsonPropertyName, JsonAny.Parse("false"));
                    builder.Add(AllowReservedJsonPropertyName, JsonAny.Parse("false"));
                    return builder.ToImmutable();
                }

                private static ImmutableDictionary<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.StyleEntity property = that.Style;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(ExplodeJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.ExplodeValue property = that.Explode;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(AllowReservedJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.HeaderValue.SchemaEntity.AllowReservedValue property = that.AllowReserved;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(SchemaJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.Schema;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.ExamplesEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!refResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeResults(result.IsValid, level, refResult);
                        }

                        result = result.MergeChildContext(refResult, false);
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<SchemaEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
                {
                    private readonly JsonElement jsonElementBacking;
                    private readonly JsonEncodedText? stringBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public StyleEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.stringBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public StyleEntity(string value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = JsonEncodedText.Encode(value);
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public StyleEntity(JsonEncodedText value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public StyleEntity(ReadOnlySpan<char> value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = JsonEncodedText.Encode(value);
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A string value.</param>
                    public StyleEntity(ReadOnlySpan<byte> value)
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = JsonEncodedText.Encode(value);
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                    public StyleEntity(JsonString jsonString)
                    {
                        if (jsonString.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonString.AsJsonElement;
                            this.stringBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = jsonString.GetJsonEncodedText();
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.stringBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                return JsonString.StringToJsonElement(stringBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText)
                            {
                                return JsonValueKind.String;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                return new JsonAny(stringBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                return new JsonString(stringBacking);
                            }

                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StyleEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new StyleEntity(value.AsJsonElement);
                        }

                        return value.As<StyleEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(StyleEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StyleEntity(string value)
                    {
                        return new StyleEntity(value);
                    }

                    /// <summary>
                    /// Conversion to string.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator string (StyleEntity value)
                    {
                        return value.AsString.GetString();
                    }

                    /// <summary>
                    /// Conversion from <see cref = "JsonEncodedText"/>.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StyleEntity(JsonEncodedText value)
                    {
                        return new StyleEntity(value);
                    }

                    /// <summary>
                    /// Conversion to <see cref = "JsonEncodedText"/>.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator JsonEncodedText(StyleEntity value)
                    {
                        return value.AsString.GetJsonEncodedText();
                    }

                    /// <summary>
                    /// Conversion from string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                    {
                        return new StyleEntity(value);
                    }

                    /// <summary>
                    /// Conversion to string.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                    {
                        return value.AsString.AsSpan();
                    }

                    /// <summary>
                    /// Conversion from utf8 bytes.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                    {
                        return new StyleEntity(value);
                    }

                    /// <summary>
                    /// Conversion to utf8 bytes.
                    /// </summary>
                    /// <param name = "value">The number from which to convert.</param>
                    public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                    {
                        return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                    }

                    /// <summary>
                    /// Conversion from string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator StyleEntity(JsonString value)
                    {
                        return new StyleEntity(value);
                    }

                    /// <summary>
                    /// Conversion to string.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonString(StyleEntity value)
                    {
                        return value.AsString;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            writer.WriteStringValue(stringBacking);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(StyleEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<StyleEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    /// <summary>
                    /// Permitted values.
                    /// </summary>
                    public static class EnumValues
                    {
                        /// <summary>
                        /// enumValue.AsPropertyName.
                        /// </summary>
                        /// <remarks>
                        /// {Description}.
                        /// </remarks>
                        public static readonly StyleEntity Simple = JsonAny.Parse("\"simple\"");
                        /// <summary>
                        /// [{Title} || Item 0] (with predictable naming).
                        /// </summary>
                        /// <remarks>
                        /// {Description}.
                        /// </remarks>
                        internal static readonly StyleEntity Item0 = JsonAny.Parse("\"simple\"");
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ExplodeValue : IJsonValue, IEquatable<ExplodeValue>
                {
                    private readonly JsonElement jsonElementBacking;
                    private readonly bool? booleanBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ExplodeValue"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ExplodeValue(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.booleanBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ExplodeValue"/> struct.
                    /// </summary>
                    /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                    public ExplodeValue(JsonBoolean jsonBoolean)
                    {
                        if (jsonBoolean.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonBoolean.AsJsonElement;
                            this.booleanBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.booleanBacking = jsonBoolean.GetBoolean();
                        }
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ExplodeValue"/> struct.
                    /// </summary>
                    /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                    public ExplodeValue(bool boolean)
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = boolean;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.booleanBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return JsonBoolean.BoolToJsonElement(booleanBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return new JsonAny(booleanBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return new JsonBoolean(booleanBacking);
                            }

                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ExplodeValue(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ExplodeValue(value.AsJsonElement);
                        }

                        return value.As<ExplodeValue>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ExplodeValue value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from bool.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ExplodeValue(bool value)
                    {
                        return new ExplodeValue(value);
                    }

                    /// <summary>
                    /// Conversion to bool.
                    /// </summary>
                    /// <param name = "boolean">The value from which to convert.</param>
                    public static implicit operator bool (ExplodeValue boolean)
                    {
                        return boolean.AsBoolean.GetBoolean();
                    }

                    /// <summary>
                    /// Conversion from bool.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ExplodeValue(JsonBoolean value)
                    {
                        return new ExplodeValue(value);
                    }

                    /// <summary>
                    /// Conversion to bool.
                    /// </summary>
                    /// <param name = "boolean">The value from which to convert.</param>
                    public static implicit operator JsonBoolean(ExplodeValue boolean)
                    {
                        return boolean.AsBoolean;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            writer.WriteBooleanValue(booleanBacking);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ExplodeValue other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ExplodeValue, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateType(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        bool isValid = false;
                        ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                        if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                        {
                            return validationContext;
                        }

                        if (localResultBoolean.IsValid)
                        {
                            isValid = true;
                        }

                        result = result.MergeResults(isValid, level, localResultBoolean);
                        return result;
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct AllowReservedValue : IJsonValue, IEquatable<AllowReservedValue>
                {
                    private readonly JsonElement jsonElementBacking;
                    private readonly bool? booleanBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public AllowReservedValue(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.booleanBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                    /// </summary>
                    /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                    public AllowReservedValue(JsonBoolean jsonBoolean)
                    {
                        if (jsonBoolean.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonBoolean.AsJsonElement;
                            this.booleanBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.booleanBacking = jsonBoolean.GetBoolean();
                        }
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                    /// </summary>
                    /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                    public AllowReservedValue(bool boolean)
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = boolean;
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.booleanBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return JsonBoolean.BoolToJsonElement(booleanBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return new JsonAny(booleanBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            if (this.booleanBacking is bool booleanBacking)
                            {
                                return new JsonBoolean(booleanBacking);
                            }

                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator AllowReservedValue(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new AllowReservedValue(value.AsJsonElement);
                        }

                        return value.As<AllowReservedValue>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(AllowReservedValue value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from bool.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator AllowReservedValue(bool value)
                    {
                        return new AllowReservedValue(value);
                    }

                    /// <summary>
                    /// Conversion to bool.
                    /// </summary>
                    /// <param name = "boolean">The value from which to convert.</param>
                    public static implicit operator bool (AllowReservedValue boolean)
                    {
                        return boolean.AsBoolean.GetBoolean();
                    }

                    /// <summary>
                    /// Conversion from bool.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator AllowReservedValue(JsonBoolean value)
                    {
                        return new AllowReservedValue(value);
                    }

                    /// <summary>
                    /// Conversion to bool.
                    /// </summary>
                    /// <param name = "boolean">The value from which to convert.</param>
                    public static implicit operator JsonBoolean(AllowReservedValue boolean)
                    {
                        return boolean.AsBoolean;
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            writer.WriteBooleanValue(booleanBacking);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(AllowReservedValue other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<AllowReservedValue, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateType(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        bool isValid = false;
                        ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                        if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                        {
                            return validationContext;
                        }

                        if (localResultBoolean.IsValid)
                        {
                            isValid = true;
                        }

                        result = result.MergeResults(isValid, level, localResultBoolean);
                        return result;
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ContentEntity : IJsonObject<ContentEntity>, IEquatable<ContentEntity>
            {
                /// <summary>
                /// JSON property name for <see cref = "Content"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ContentUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116};
                /// <summary>
                /// JSON property name for <see cref = "Content"/>.
                /// </summary>
                public static readonly JsonEncodedText ContentJsonPropertyName = JsonEncodedText.Encode(ContentUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<ContentEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ContentEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ContentEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ContentEntity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public ContentEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ContentEntity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public ContentEntity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets Content.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.ContentValue Content
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ContentJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ContentUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.ContentValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ContentEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ContentEntity(value.AsJsonElement);
                    }

                    return value.As<ContentEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ContentEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ContentEntity(JsonObject value)
                {
                    return new ContentEntity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(ContentEntity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ContentEntity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ContentEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new ContentEntity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "ContentEntity"/>.
                /// </summary>
                public static ContentEntity Create(Menes.OpenApi.Type20210415.ContentValue? content = null)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    if (content is Menes.OpenApi.Type20210415.ContentValue content__)
                    {
                        builder.Add(ContentJsonPropertyName, content__);
                    }

                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets content.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public ContentEntity WithContent(Menes.OpenApi.Type20210415.ContentValue value)
                {
                    return this.SetProperty(ContentJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ContentEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public ContentEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ContentEntity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ContentEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ContentEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ContentEntity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ContentEntity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ContentEntity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ContentEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ContentEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<ContentEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<ContentEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ContentEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(ContentJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.ContentValue property = that.Content;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ContentEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }
                        }
                    }

                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct RequiredValue : IJsonValue, IEquatable<RequiredValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public RequiredValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public RequiredValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "RequiredValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public RequiredValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new RequiredValue(value.AsJsonElement);
                    }

                    return value.As<RequiredValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(RequiredValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(bool value)
                {
                    return new RequiredValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (RequiredValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator RequiredValue(JsonBoolean value)
                {
                    return new RequiredValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(RequiredValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(RequiredValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<RequiredValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct DeprecatedValue : IJsonValue, IEquatable<DeprecatedValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public DeprecatedValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public DeprecatedValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "DeprecatedValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public DeprecatedValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new DeprecatedValue(value.AsJsonElement);
                    }

                    return value.As<DeprecatedValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(DeprecatedValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(bool value)
                {
                    return new DeprecatedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (DeprecatedValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator DeprecatedValue(JsonBoolean value)
                {
                    return new DeprecatedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(DeprecatedValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(DeprecatedValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<DeprecatedValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct AllowEmptyValueValue : IJsonValue, IEquatable<AllowEmptyValueValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowEmptyValueValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public AllowEmptyValueValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowEmptyValueValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public AllowEmptyValueValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowEmptyValueValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public AllowEmptyValueValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowEmptyValueValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new AllowEmptyValueValue(value.AsJsonElement);
                    }

                    return value.As<AllowEmptyValueValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(AllowEmptyValueValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowEmptyValueValue(bool value)
                {
                    return new AllowEmptyValueValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (AllowEmptyValueValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowEmptyValueValue(JsonBoolean value)
                {
                    return new AllowEmptyValueValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(AllowEmptyValueValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(AllowEmptyValueValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<AllowEmptyValueValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct SecuritySchemeValue : IJsonObject<SecuritySchemeValue>, IEquatable<SecuritySchemeValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Type"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
            /// <summary>
            /// JSON property name for <see cref = "Type"/>.
            /// </summary>
            public static readonly JsonEncodedText TypeJsonPropertyName = JsonEncodedText.Encode(TypeUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<SecuritySchemeValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public SecuritySchemeValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public SecuritySchemeValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public SecuritySchemeValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public SecuritySchemeValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity"/> from which to construct the value.</param>
            public SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = default;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity"/> from which to construct the value.</param>
            public SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = default;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity"/> from which to construct the value.</param>
            public SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = default;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity"/> from which to construct the value.</param>
            public SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = default;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "SecuritySchemeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity"/> from which to construct the value.</param>
            public SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = default;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity AsTypeApikeyEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity"/>.
            /// </summary>
            public bool IsTypeApikeyEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity AsTypeHttpEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity"/>.
            /// </summary>
            public bool IsTypeHttpEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity AsTypeHttpBearerEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity"/>.
            /// </summary>
            public bool IsTypeHttpBearerEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity AsTypeOauth2Entity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity"/>.
            /// </summary>
            public bool IsTypeOauth2Entity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity AsTypeOidcEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity"/>.
            /// </summary>
            public bool IsTypeOidcEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Type.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeEntity Type
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeEntity(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(SecuritySchemeValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity(SecuritySchemeValue value)
            {
                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity(SecuritySchemeValue value)
            {
                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity(SecuritySchemeValue value)
            {
                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity(SecuritySchemeValue value)
            {
                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity(SecuritySchemeValue value)
            {
                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new SecuritySchemeValue(value.AsJsonElement);
                }

                return value.As<SecuritySchemeValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(SecuritySchemeValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(JsonObject value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(SecuritySchemeValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(SecuritySchemeValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator SecuritySchemeValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new SecuritySchemeValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "SecuritySchemeValue"/>.
            /// </summary>
            public static SecuritySchemeValue Create(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeEntity type, Menes.Json.JsonString? description = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(TypeJsonPropertyName, type);
                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets type.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SecuritySchemeValue WithType(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeEntity value)
            {
                return this.SetProperty(TypeJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SecuritySchemeValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(SecuritySchemeValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public SecuritySchemeValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<SecuritySchemeValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateAllOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<SecuritySchemeValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<SecuritySchemeValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<SecuritySchemeValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(TypeJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeEntity property = that.Type;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                bool foundType = false;
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<SecuritySchemeValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (TypeJsonPropertyName.Equals(propertyName))
                        {
                            foundType = true;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                if (!foundType)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.5.3. required - required property \"type\" not present.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext allOfResult0 = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult0.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult1 = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult1.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult2 = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult2.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult3 = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult3.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult4 = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult4.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult5 = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult5.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult5, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult5, level >= ValidationLevel.Detailed);
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct TypeApikeyEntity : IJsonValue, IEquatable<TypeApikeyEntity>
            {
                private readonly JsonElement jsonElementBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeApikeyEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public TypeApikeyEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => true;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeApikeyEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new TypeApikeyEntity(value.AsJsonElement);
                    }

                    return value.As<TypeApikeyEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(TypeApikeyEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(TypeApikeyEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<TypeApikeyEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateIfThenElse(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!ifResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(ifResult, true);
                        }

                        result = result.MergeChildContext(ifResult, false);
                    }

                    if (ifResult.IsValid)
                    {
                        ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!thenResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else
                            {
                                result = validationContext.WithResult(isValid: false);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(thenResult, true);
                            }

                            result = result.MergeChildContext(thenResult, false);
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly JsonEncodedText TypeJsonPropertyName = JsonEncodedText.Encode(TypeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public IfEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public IfEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Type.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.IfEntity.TypeEntity Type
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.IfEntity.TypeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new IfEntity(value.AsJsonElement);
                        }

                        return value.As<IfEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(IfEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonObject value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(IfEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "IfEntity"/>.
                    /// </summary>
                    public static IfEntity Create(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.IfEntity.TypeEntity type)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(TypeJsonPropertyName, type);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets type.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public IfEntity WithType(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.IfEntity.TypeEntity value)
                    {
                        return this.SetProperty(TypeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(IfEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<IfEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(TypeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.IfEntity.TypeEntity property = that.Type;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundType = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (TypeJsonPropertyName.Equals(propertyName))
                                {
                                    foundType = true;
                                }
                            }
                        }

                        if (!foundType)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"type\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct TypeEntity : IJsonValue, IEquatable<TypeEntity>
                    {
                        private static readonly TypeEntity __MenesConstValue = JsonAny.Parse("\"apiKey\"");
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public TypeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public TypeEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new TypeEntity(value.AsJsonElement);
                            }

                            return value.As<TypeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(TypeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(string value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (TypeEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonEncodedText value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<char> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(TypeEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<byte> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonString value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(TypeEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(TypeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<TypeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Name"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Name"/>.
                    /// </summary>
                    public static readonly JsonEncodedText NameJsonPropertyName = JsonEncodedText.Encode(NameUtf8JsonPropertyName.Span);
                    /// <summary>
                    /// JSON property name for <see cref = "In"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> InUtf8JsonPropertyName = new byte[]{105, 110};
                    /// <summary>
                    /// JSON property name for <see cref = "In"/>.
                    /// </summary>
                    public static readonly JsonEncodedText InJsonPropertyName = JsonEncodedText.Encode(InUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ThenEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public ThenEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Name.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.Json.JsonString Name
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(NameJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.Json.JsonString(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets In.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.ThenEntity.InEntity In
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(InJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(InUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.ThenEntity.InEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ThenEntity(value.AsJsonElement);
                        }

                        return value.As<ThenEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ThenEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonObject value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(ThenEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "ThenEntity"/>.
                    /// </summary>
                    public static ThenEntity Create(Menes.Json.JsonString name, Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.ThenEntity.InEntity @in)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(NameJsonPropertyName, name);
                        builder.Add(InJsonPropertyName, @in);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets name.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithName(Menes.Json.JsonString value)
                    {
                        return this.SetProperty(NameJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Sets in.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithIn(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.ThenEntity.InEntity value)
                    {
                        return this.SetProperty(InJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ThenEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ThenEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(NameJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.Json.JsonString property = that.Name;
                            return property.Validate(validationContext, level);
                        });
                        builder.Add(InJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeApikeyEntity.ThenEntity.InEntity property = that.In;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundName = false;
                        bool foundIn = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (NameJsonPropertyName.Equals(propertyName))
                                {
                                    foundName = true;
                                }
                                else if (InJsonPropertyName.Equals(propertyName))
                                {
                                    foundIn = true;
                                }
                            }
                        }

                        if (!foundName)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"name\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        if (!foundIn)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"in\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct InEntity : IJsonValue, IEquatable<InEntity>
                    {
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public InEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public InEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public InEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public InEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public InEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "InEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public InEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator InEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new InEntity(value.AsJsonElement);
                            }

                            return value.As<InEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(InEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator InEntity(string value)
                        {
                            return new InEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (InEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator InEntity(JsonEncodedText value)
                        {
                            return new InEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(InEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator InEntity(ReadOnlySpan<char> value)
                        {
                            return new InEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(InEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator InEntity(ReadOnlySpan<byte> value)
                        {
                            return new InEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(InEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator InEntity(JsonString value)
                        {
                            return new InEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(InEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(InEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<InEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0, EnumValues.Item1, EnumValues.Item2);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }

                        /// <summary>
                        /// Permitted values.
                        /// </summary>
                        public static class EnumValues
                        {
                            /// <summary>
                            /// enumValue.AsPropertyName.
                            /// </summary>
                            /// <remarks>
                            /// {Description}.
                            /// </remarks>
                            public static readonly InEntity Query = JsonAny.Parse("\"query\"");
                            /// <summary>
                            /// enumValue.AsPropertyName.
                            /// </summary>
                            /// <remarks>
                            /// {Description}.
                            /// </remarks>
                            public static readonly InEntity Header = JsonAny.Parse("\"header\"");
                            /// <summary>
                            /// enumValue.AsPropertyName.
                            /// </summary>
                            /// <remarks>
                            /// {Description}.
                            /// </remarks>
                            public static readonly InEntity Cookie = JsonAny.Parse("\"cookie\"");
                            /// <summary>
                            /// [{Title} || Item 0] (with predictable naming).
                            /// </summary>
                            /// <remarks>
                            /// {Description}.
                            /// </remarks>
                            internal static readonly InEntity Item0 = JsonAny.Parse("\"query\"");
                            /// <summary>
                            /// [{Title} || Item 1] (with predictable naming).
                            /// </summary>
                            /// <remarks>
                            /// {Description}.
                            /// </remarks>
                            internal static readonly InEntity Item1 = JsonAny.Parse("\"header\"");
                            /// <summary>
                            /// [{Title} || Item 2] (with predictable naming).
                            /// </summary>
                            /// <remarks>
                            /// {Description}.
                            /// </remarks>
                            internal static readonly InEntity Item2 = JsonAny.Parse("\"cookie\"");
                        }
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct TypeHttpEntity : IJsonValue, IEquatable<TypeHttpEntity>
            {
                private readonly JsonElement jsonElementBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeHttpEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public TypeHttpEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => true;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeHttpEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new TypeHttpEntity(value.AsJsonElement);
                    }

                    return value.As<TypeHttpEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(TypeHttpEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(TypeHttpEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<TypeHttpEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateIfThenElse(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!ifResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(ifResult, true);
                        }

                        result = result.MergeChildContext(ifResult, false);
                    }

                    if (ifResult.IsValid)
                    {
                        ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!thenResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else
                            {
                                result = validationContext.WithResult(isValid: false);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(thenResult, true);
                            }

                            result = result.MergeChildContext(thenResult, false);
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly JsonEncodedText TypeJsonPropertyName = JsonEncodedText.Encode(TypeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public IfEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public IfEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Type.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity.IfEntity.TypeEntity Type
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity.IfEntity.TypeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new IfEntity(value.AsJsonElement);
                        }

                        return value.As<IfEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(IfEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonObject value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(IfEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "IfEntity"/>.
                    /// </summary>
                    public static IfEntity Create(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity.IfEntity.TypeEntity type)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(TypeJsonPropertyName, type);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets type.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public IfEntity WithType(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity.IfEntity.TypeEntity value)
                    {
                        return this.SetProperty(TypeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(IfEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<IfEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(TypeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpEntity.IfEntity.TypeEntity property = that.Type;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundType = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (TypeJsonPropertyName.Equals(propertyName))
                                {
                                    foundType = true;
                                }
                            }
                        }

                        if (!foundType)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"type\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct TypeEntity : IJsonValue, IEquatable<TypeEntity>
                    {
                        private static readonly TypeEntity __MenesConstValue = JsonAny.Parse("\"http\"");
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public TypeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public TypeEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new TypeEntity(value.AsJsonElement);
                            }

                            return value.As<TypeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(TypeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(string value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (TypeEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonEncodedText value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<char> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(TypeEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<byte> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonString value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(TypeEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(TypeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<TypeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Scheme"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> SchemeUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Scheme"/>.
                    /// </summary>
                    public static readonly JsonEncodedText SchemeJsonPropertyName = JsonEncodedText.Encode(SchemeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ThenEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public ThenEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Scheme.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.Json.JsonString Scheme
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(SchemeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(SchemeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.Json.JsonString(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ThenEntity(value.AsJsonElement);
                        }

                        return value.As<ThenEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ThenEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonObject value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(ThenEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "ThenEntity"/>.
                    /// </summary>
                    public static ThenEntity Create(Menes.Json.JsonString scheme)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(SchemeJsonPropertyName, scheme);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets scheme.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithScheme(Menes.Json.JsonString value)
                    {
                        return this.SetProperty(SchemeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ThenEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ThenEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(SchemeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.Json.JsonString property = that.Scheme;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundScheme = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (SchemeJsonPropertyName.Equals(propertyName))
                                {
                                    foundScheme = true;
                                }
                            }
                        }

                        if (!foundScheme)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"scheme\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct TypeHttpBearerEntity : IJsonValue, IEquatable<TypeHttpBearerEntity>
            {
                private readonly JsonElement jsonElementBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeHttpBearerEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public TypeHttpBearerEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => true;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeHttpBearerEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new TypeHttpBearerEntity(value.AsJsonElement);
                    }

                    return value.As<TypeHttpBearerEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(TypeHttpBearerEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(TypeHttpBearerEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<TypeHttpBearerEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateIfThenElse(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!ifResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(ifResult, true);
                        }

                        result = result.MergeChildContext(ifResult, false);
                    }

                    if (ifResult.IsValid)
                    {
                        ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!thenResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else
                            {
                                result = validationContext.WithResult(isValid: false);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(thenResult, true);
                            }

                            result = result.MergeChildContext(thenResult, false);
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly JsonEncodedText TypeJsonPropertyName = JsonEncodedText.Encode(TypeUtf8JsonPropertyName.Span);
                    /// <summary>
                    /// JSON property name for <see cref = "Scheme"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> SchemeUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Scheme"/>.
                    /// </summary>
                    public static readonly JsonEncodedText SchemeJsonPropertyName = JsonEncodedText.Encode(SchemeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public IfEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public IfEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Type.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.TypeEntity Type
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.TypeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets Scheme.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.SchemeEntity Scheme
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(SchemeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(SchemeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.SchemeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new IfEntity(value.AsJsonElement);
                        }

                        return value.As<IfEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(IfEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonObject value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(IfEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "IfEntity"/>.
                    /// </summary>
                    public static IfEntity Create(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.TypeEntity type, Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.SchemeEntity scheme)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(TypeJsonPropertyName, type);
                        builder.Add(SchemeJsonPropertyName, scheme);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets type.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public IfEntity WithType(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.TypeEntity value)
                    {
                        return this.SetProperty(TypeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Sets scheme.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public IfEntity WithScheme(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.SchemeEntity value)
                    {
                        return this.SetProperty(SchemeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(IfEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<IfEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(TypeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.TypeEntity property = that.Type;
                            return property.Validate(validationContext, level);
                        });
                        builder.Add(SchemeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeHttpBearerEntity.IfEntity.SchemeEntity property = that.Scheme;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundType = false;
                        bool foundScheme = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (TypeJsonPropertyName.Equals(propertyName))
                                {
                                    foundType = true;
                                }
                                else if (SchemeJsonPropertyName.Equals(propertyName))
                                {
                                    foundScheme = true;
                                }
                            }
                        }

                        if (!foundType)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"type\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        if (!foundScheme)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"scheme\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct TypeEntity : IJsonValue, IEquatable<TypeEntity>
                    {
                        private static readonly TypeEntity __MenesConstValue = JsonAny.Parse("\"http\"");
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public TypeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public TypeEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new TypeEntity(value.AsJsonElement);
                            }

                            return value.As<TypeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(TypeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(string value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (TypeEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonEncodedText value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<char> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(TypeEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<byte> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonString value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(TypeEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(TypeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<TypeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct SchemeEntity : IJsonValue, IEquatable<SchemeEntity>
                    {
                        private static readonly SchemeEntity __MenesConstValue = JsonAny.Parse("\"bearer\"");
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "SchemeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public SchemeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "SchemeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public SchemeEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "SchemeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public SchemeEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "SchemeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public SchemeEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "SchemeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public SchemeEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "SchemeEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public SchemeEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator SchemeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new SchemeEntity(value.AsJsonElement);
                            }

                            return value.As<SchemeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(SchemeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator SchemeEntity(string value)
                        {
                            return new SchemeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (SchemeEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator SchemeEntity(JsonEncodedText value)
                        {
                            return new SchemeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(SchemeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator SchemeEntity(ReadOnlySpan<char> value)
                        {
                            return new SchemeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(SchemeEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator SchemeEntity(ReadOnlySpan<byte> value)
                        {
                            return new SchemeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(SchemeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator SchemeEntity(JsonString value)
                        {
                            return new SchemeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(SchemeEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(SchemeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<SchemeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Scheme"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> SchemeUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Scheme"/>.
                    /// </summary>
                    public static readonly JsonEncodedText SchemeJsonPropertyName = JsonEncodedText.Encode(SchemeUtf8JsonPropertyName.Span);
                    /// <summary>
                    /// JSON property name for <see cref = "BearerFormat"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> BearerFormatUtf8JsonPropertyName = new byte[]{98, 101, 97, 114, 101, 114, 70, 111, 114, 109, 97, 116};
                    /// <summary>
                    /// JSON property name for <see cref = "BearerFormat"/>.
                    /// </summary>
                    public static readonly JsonEncodedText BearerFormatJsonPropertyName = JsonEncodedText.Encode(BearerFormatUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ThenEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public ThenEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Scheme.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.Json.JsonAny Scheme
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(SchemeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(SchemeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.Json.JsonAny(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets BearerFormat.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.Json.JsonString BearerFormat
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(BearerFormatJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(BearerFormatUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.Json.JsonString(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ThenEntity(value.AsJsonElement);
                        }

                        return value.As<ThenEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ThenEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonObject value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(ThenEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "ThenEntity"/>.
                    /// </summary>
                    public static ThenEntity Create(Menes.Json.JsonAny scheme, Menes.Json.JsonString? bearerFormat = null)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(SchemeJsonPropertyName, scheme);
                        if (bearerFormat is Menes.Json.JsonString bearerFormat__)
                        {
                            builder.Add(BearerFormatJsonPropertyName, bearerFormat__);
                        }

                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets scheme.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithScheme(Menes.Json.JsonAny value)
                    {
                        return this.SetProperty(SchemeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Sets bearerFormat.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithBearerFormat(Menes.Json.JsonString value)
                    {
                        return this.SetProperty(BearerFormatJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ThenEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ThenEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(SchemeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.Json.JsonAny property = that.Scheme;
                            return property.Validate(validationContext, level);
                        });
                        builder.Add(BearerFormatJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.Json.JsonString property = that.BearerFormat;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundScheme = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (SchemeJsonPropertyName.Equals(propertyName))
                                {
                                    foundScheme = true;
                                }
                            }
                        }

                        if (!foundScheme)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"scheme\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct TypeOauth2Entity : IJsonValue, IEquatable<TypeOauth2Entity>
            {
                private readonly JsonElement jsonElementBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeOauth2Entity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public TypeOauth2Entity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => true;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeOauth2Entity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new TypeOauth2Entity(value.AsJsonElement);
                    }

                    return value.As<TypeOauth2Entity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(TypeOauth2Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(TypeOauth2Entity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<TypeOauth2Entity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateIfThenElse(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!ifResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(ifResult, true);
                        }

                        result = result.MergeChildContext(ifResult, false);
                    }

                    if (ifResult.IsValid)
                    {
                        ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!thenResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else
                            {
                                result = validationContext.WithResult(isValid: false);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(thenResult, true);
                            }

                            result = result.MergeChildContext(thenResult, false);
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly JsonEncodedText TypeJsonPropertyName = JsonEncodedText.Encode(TypeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public IfEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public IfEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Type.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity.IfEntity.TypeEntity Type
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity.IfEntity.TypeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new IfEntity(value.AsJsonElement);
                        }

                        return value.As<IfEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(IfEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonObject value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(IfEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "IfEntity"/>.
                    /// </summary>
                    public static IfEntity Create(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity.IfEntity.TypeEntity type)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(TypeJsonPropertyName, type);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets type.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public IfEntity WithType(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity.IfEntity.TypeEntity value)
                    {
                        return this.SetProperty(TypeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(IfEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<IfEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(TypeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOauth2Entity.IfEntity.TypeEntity property = that.Type;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundType = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (TypeJsonPropertyName.Equals(propertyName))
                                {
                                    foundType = true;
                                }
                            }
                        }

                        if (!foundType)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"type\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct TypeEntity : IJsonValue, IEquatable<TypeEntity>
                    {
                        private static readonly TypeEntity __MenesConstValue = JsonAny.Parse("\"oauth2\"");
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public TypeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public TypeEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new TypeEntity(value.AsJsonElement);
                            }

                            return value.As<TypeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(TypeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(string value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (TypeEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonEncodedText value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<char> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(TypeEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<byte> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonString value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(TypeEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(TypeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<TypeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Flows"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> FlowsUtf8JsonPropertyName = new byte[]{102, 108, 111, 119, 115};
                    /// <summary>
                    /// JSON property name for <see cref = "Flows"/>.
                    /// </summary>
                    public static readonly JsonEncodedText FlowsJsonPropertyName = JsonEncodedText.Encode(FlowsUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ThenEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public ThenEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Flows.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.OauthFlowsValue Flows
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(FlowsJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(FlowsUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.OauthFlowsValue(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ThenEntity(value.AsJsonElement);
                        }

                        return value.As<ThenEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ThenEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonObject value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(ThenEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "ThenEntity"/>.
                    /// </summary>
                    public static ThenEntity Create(Menes.OpenApi.Type20210415.OauthFlowsValue flows)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(FlowsJsonPropertyName, flows);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets flows.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithFlows(Menes.OpenApi.Type20210415.OauthFlowsValue value)
                    {
                        return this.SetProperty(FlowsJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ThenEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ThenEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(FlowsJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.OauthFlowsValue property = that.Flows;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundFlows = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (FlowsJsonPropertyName.Equals(propertyName))
                                {
                                    foundFlows = true;
                                }
                            }
                        }

                        if (!foundFlows)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"flows\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct TypeOidcEntity : IJsonValue, IEquatable<TypeOidcEntity>
            {
                private readonly JsonElement jsonElementBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeOidcEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public TypeOidcEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => true;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeOidcEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new TypeOidcEntity(value.AsJsonElement);
                    }

                    return value.As<TypeOidcEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(TypeOidcEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(TypeOidcEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<TypeOidcEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateIfThenElse(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!ifResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(ifResult, true);
                        }

                        result = result.MergeChildContext(ifResult, false);
                    }

                    if (ifResult.IsValid)
                    {
                        ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!thenResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else
                            {
                                result = validationContext.WithResult(isValid: false);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(thenResult, true);
                            }

                            result = result.MergeChildContext(thenResult, false);
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Type"/>.
                    /// </summary>
                    public static readonly JsonEncodedText TypeJsonPropertyName = JsonEncodedText.Encode(TypeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public IfEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public IfEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Type.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity.IfEntity.TypeEntity Type
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity.IfEntity.TypeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new IfEntity(value.AsJsonElement);
                        }

                        return value.As<IfEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(IfEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonObject value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(IfEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "IfEntity"/>.
                    /// </summary>
                    public static IfEntity Create(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity.IfEntity.TypeEntity type)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(TypeJsonPropertyName, type);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets type.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public IfEntity WithType(Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity.IfEntity.TypeEntity value)
                    {
                        return this.SetProperty(TypeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(IfEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<IfEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(TypeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.SecuritySchemeValue.TypeOidcEntity.IfEntity.TypeEntity property = that.Type;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundType = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (TypeJsonPropertyName.Equals(propertyName))
                                {
                                    foundType = true;
                                }
                            }
                        }

                        if (!foundType)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"type\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct TypeEntity : IJsonValue, IEquatable<TypeEntity>
                    {
                        private static readonly TypeEntity __MenesConstValue = JsonAny.Parse("\"openIdConnect\"");
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public TypeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public TypeEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public TypeEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new TypeEntity(value.AsJsonElement);
                            }

                            return value.As<TypeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(TypeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(string value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (TypeEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonEncodedText value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<char> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(TypeEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(ReadOnlySpan<byte> value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(TypeEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator TypeEntity(JsonString value)
                        {
                            return new TypeEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(TypeEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(TypeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<TypeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "OpenIdConnectUrl"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> OpenIdConnectUrlUtf8JsonPropertyName = new byte[]{111, 112, 101, 110, 73, 100, 67, 111, 110, 110, 101, 99, 116, 85, 114, 108};
                    /// <summary>
                    /// JSON property name for <see cref = "OpenIdConnectUrl"/>.
                    /// </summary>
                    public static readonly JsonEncodedText OpenIdConnectUrlJsonPropertyName = JsonEncodedText.Encode(OpenIdConnectUrlUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ThenEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public ThenEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets OpenIdConnectUrl.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.Json.JsonUri OpenIdConnectUrl
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(OpenIdConnectUrlJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(OpenIdConnectUrlUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.Json.JsonUri(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ThenEntity(value.AsJsonElement);
                        }

                        return value.As<ThenEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ThenEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonObject value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(ThenEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "ThenEntity"/>.
                    /// </summary>
                    public static ThenEntity Create(Menes.Json.JsonUri openIdConnectUrl)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(OpenIdConnectUrlJsonPropertyName, openIdConnectUrl);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets openIdConnectUrl.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithOpenIdConnectUrl(Menes.Json.JsonUri value)
                    {
                        return this.SetProperty(OpenIdConnectUrlJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ThenEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ThenEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(OpenIdConnectUrlJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.Json.JsonUri property = that.OpenIdConnectUrl;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundOpenIdConnectUrl = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (OpenIdConnectUrlJsonPropertyName.Equals(propertyName))
                                {
                                    foundOpenIdConnectUrl = true;
                                }
                            }
                        }

                        if (!foundOpenIdConnectUrl)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"openIdConnectUrl\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct TypeEntity : IJsonValue, IEquatable<TypeEntity>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly JsonEncodedText? stringBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public TypeEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.stringBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public TypeEntity(string value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public TypeEntity(JsonEncodedText value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public TypeEntity(ReadOnlySpan<char> value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public TypeEntity(ReadOnlySpan<byte> value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "TypeEntity"/> struct.
                /// </summary>
                /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                public TypeEntity(JsonString jsonString)
                {
                    if (jsonString.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonString.AsJsonElement;
                        this.stringBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = jsonString.GetJsonEncodedText();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.stringBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return JsonString.StringToJsonElement(stringBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText)
                        {
                            return JsonValueKind.String;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return new JsonAny(stringBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return new JsonString(stringBacking);
                        }

                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new TypeEntity(value.AsJsonElement);
                    }

                    return value.As<TypeEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(TypeEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeEntity(string value)
                {
                    return new TypeEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator string (TypeEntity value)
                {
                    return value.AsString.GetString();
                }

                /// <summary>
                /// Conversion from <see cref = "JsonEncodedText"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeEntity(JsonEncodedText value)
                {
                    return new TypeEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "JsonEncodedText"/>.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator JsonEncodedText(TypeEntity value)
                {
                    return value.AsString.GetJsonEncodedText();
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeEntity(ReadOnlySpan<char> value)
                {
                    return new TypeEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator ReadOnlySpan<char>(TypeEntity value)
                {
                    return value.AsString.AsSpan();
                }

                /// <summary>
                /// Conversion from utf8 bytes.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeEntity(ReadOnlySpan<byte> value)
                {
                    return new TypeEntity(value);
                }

                /// <summary>
                /// Conversion to utf8 bytes.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator ReadOnlySpan<byte>(TypeEntity value)
                {
                    return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator TypeEntity(JsonString value)
                {
                    return new TypeEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonString(TypeEntity value)
                {
                    return value.AsString;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.stringBacking is JsonEncodedText stringBacking)
                    {
                        writer.WriteStringValue(stringBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(TypeEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<TypeEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0, EnumValues.Item1, EnumValues.Item2, EnumValues.Item3, EnumValues.Item4);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                /// <summary>
                /// Permitted values.
                /// </summary>
                public static class EnumValues
                {
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly TypeEntity ApiKey = JsonAny.Parse("\"apiKey\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly TypeEntity Http = JsonAny.Parse("\"http\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly TypeEntity MutualTL = JsonAny.Parse("\"mutualTLS\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly TypeEntity Oauth2 = JsonAny.Parse("\"oauth2\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly TypeEntity OpenIdConnect = JsonAny.Parse("\"openIdConnect\"");
                    /// <summary>
                    /// [{Title} || Item 0] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly TypeEntity Item0 = JsonAny.Parse("\"apiKey\"");
                    /// <summary>
                    /// [{Title} || Item 1] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly TypeEntity Item1 = JsonAny.Parse("\"http\"");
                    /// <summary>
                    /// [{Title} || Item 2] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly TypeEntity Item2 = JsonAny.Parse("\"mutualTLS\"");
                    /// <summary>
                    /// [{Title} || Item 3] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly TypeEntity Item3 = JsonAny.Parse("\"oauth2\"");
                    /// <summary>
                    /// [{Title} || Item 4] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly TypeEntity Item4 = JsonAny.Parse("\"openIdConnect\"");
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct LinkValue : IJsonObject<LinkValue>, IEquatable<LinkValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "OperationRef"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> OperationRefUtf8JsonPropertyName = new byte[]{111, 112, 101, 114, 97, 116, 105, 111, 110, 82, 101, 102};
            /// <summary>
            /// JSON property name for <see cref = "OperationRef"/>.
            /// </summary>
            public static readonly JsonEncodedText OperationRefJsonPropertyName = JsonEncodedText.Encode(OperationRefUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "OperationId"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> OperationIdUtf8JsonPropertyName = new byte[]{111, 112, 101, 114, 97, 116, 105, 111, 110, 73, 100};
            /// <summary>
            /// JSON property name for <see cref = "OperationId"/>.
            /// </summary>
            public static readonly JsonEncodedText OperationIdJsonPropertyName = JsonEncodedText.Encode(OperationIdUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ParametersUtf8JsonPropertyName = new byte[]{112, 97, 114, 97, 109, 101, 116, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static readonly JsonEncodedText ParametersJsonPropertyName = JsonEncodedText.Encode(ParametersUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "RequestBody"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> RequestBodyUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 101, 115, 116, 66, 111, 100, 121};
            /// <summary>
            /// JSON property name for <see cref = "RequestBody"/>.
            /// </summary>
            public static readonly JsonEncodedText RequestBodyJsonPropertyName = JsonEncodedText.Encode(RequestBodyUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static readonly JsonEncodedText DescriptionJsonPropertyName = JsonEncodedText.Encode(DescriptionUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Body"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> BodyUtf8JsonPropertyName = new byte[]{98, 111, 100, 121};
            /// <summary>
            /// JSON property name for <see cref = "Body"/>.
            /// </summary>
            public static readonly JsonEncodedText BodyJsonPropertyName = JsonEncodedText.Encode(BodyUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<LinkValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "LinkValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public LinkValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinkValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public LinkValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinkValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public LinkValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinkValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity"/> from which to construct the value.</param>
            public LinkValue(Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinkValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity"/> from which to construct the value.</param>
            public LinkValue(Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "LinkValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public LinkValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity AsOneOf0Entity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity"/>.
            /// </summary>
            public bool IsOneOf0Entity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity AsOneOf1Entity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity"/>.
            /// </summary>
            public bool IsOneOf1Entity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets OperationRef.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonUri OperationRef
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(OperationRefJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(OperationRefUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonUri(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets OperationId.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny OperationId
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(OperationIdJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(OperationIdUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Parameters.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.MapOfStringsValue Parameters
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ParametersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ParametersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.MapOfStringsValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets RequestBody.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny RequestBody
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(RequestBodyJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(RequestBodyUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Description.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString Description
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Body.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ServerValue Body
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(BodyJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(BodyUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ServerValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinkValue(Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity value)
            {
                return new LinkValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity(LinkValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinkValue(Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity value)
            {
                return new LinkValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity(LinkValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinkValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new LinkValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(LinkValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinkValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new LinkValue(value.AsJsonElement);
                }

                return value.As<LinkValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(LinkValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinkValue(JsonObject value)
            {
                return new LinkValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(LinkValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(LinkValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator LinkValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new LinkValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "LinkValue"/>.
            /// </summary>
            public static LinkValue Create(Menes.Json.JsonUri? operationRef = null, Menes.Json.JsonAny? operationId = null, Menes.OpenApi.Type20210415.MapOfStringsValue? parameters = null, Menes.Json.JsonAny? requestBody = null, Menes.Json.JsonString? description = null, Menes.OpenApi.Type20210415.ServerValue? body = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (operationRef is Menes.Json.JsonUri operationRef__)
                {
                    builder.Add(OperationRefJsonPropertyName, operationRef__);
                }

                if (operationId is Menes.Json.JsonAny operationId__)
                {
                    builder.Add(OperationIdJsonPropertyName, operationId__);
                }

                if (parameters is Menes.OpenApi.Type20210415.MapOfStringsValue parameters__)
                {
                    builder.Add(ParametersJsonPropertyName, parameters__);
                }

                if (requestBody is Menes.Json.JsonAny requestBody__)
                {
                    builder.Add(RequestBodyJsonPropertyName, requestBody__);
                }

                if (description is Menes.Json.JsonString description__)
                {
                    builder.Add(DescriptionJsonPropertyName, description__);
                }

                if (body is Menes.OpenApi.Type20210415.ServerValue body__)
                {
                    builder.Add(BodyJsonPropertyName, body__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets operationRef.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinkValue WithOperationRef(Menes.Json.JsonUri value)
            {
                return this.SetProperty(OperationRefJsonPropertyName, value);
            }

            /// <summary>
            /// Sets operationId.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinkValue WithOperationId(Menes.Json.JsonAny value)
            {
                return this.SetProperty(OperationIdJsonPropertyName, value);
            }

            /// <summary>
            /// Sets parameters.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinkValue WithParameters(Menes.OpenApi.Type20210415.MapOfStringsValue value)
            {
                return this.SetProperty(ParametersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets requestBody.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinkValue WithRequestBody(Menes.Json.JsonAny value)
            {
                return this.SetProperty(RequestBodyJsonPropertyName, value);
            }

            /// <summary>
            /// Sets description.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinkValue WithDescription(Menes.Json.JsonString value)
            {
                return this.SetProperty(DescriptionJsonPropertyName, value);
            }

            /// <summary>
            /// Sets body.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public LinkValue WithBody(Menes.OpenApi.Type20210415.ServerValue value)
            {
                return this.SetProperty(BodyJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(LinkValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public LinkValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinkValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinkValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinkValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinkValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinkValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinkValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public LinkValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<LinkValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateOneOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<LinkValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<LinkValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<LinkValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(OperationRefJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonUri property = that.OperationRef;
                    return property.Validate(validationContext, level);
                });
                builder.Add(OperationIdJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.OperationId;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ParametersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.MapOfStringsValue property = that.Parameters;
                    return property.Validate(validationContext, level);
                });
                builder.Add(RequestBodyJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.RequestBody;
                    return property.Validate(validationContext, level);
                });
                builder.Add(DescriptionJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.Description;
                    return property.Validate(validationContext, level);
                });
                builder.Add(BodyJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ServerValue property = that.Body;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<LinkValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateOneOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                int oneOfCount = 0;
                ValidationContext oneOfResult0 = this.As<Menes.OpenApi.Type20210415.LinkValue.OneOf0Entity>().Validate(validationContext.CreateChildContext(), level);
                if (oneOfResult0.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Detailed);
                    oneOfCount += 1;
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(oneOfResult0, true);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(oneOfResult0, true);
                    }
                    else
                    {
                        result = result.MergeChildContext(oneOfResult0, false);
                    }
                }

                ValidationContext oneOfResult1 = this.As<Menes.OpenApi.Type20210415.LinkValue.OneOf1Entity>().Validate(validationContext.CreateChildContext(), level);
                if (oneOfResult1.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Detailed);
                    oneOfCount += 1;
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(oneOfResult1, true);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(oneOfResult1, true);
                    }
                    else
                    {
                        result = result.MergeChildContext(oneOfResult1, false);
                    }
                }

                if (oneOfCount == 1)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: true, "Validation 10.2.1.3. onef - validated against the oneOf schema.");
                    }
                }
                else if (oneOfCount == 0)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - validated against more than one of the oneOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against more than one of the oneOf schema.");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct OneOf0Entity : IJsonObject<OneOf0Entity>, IEquatable<OneOf0Entity>
            {
                /// <summary>
                /// JSON property name for <see cref = "OperationRef"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> OperationRefUtf8JsonPropertyName = new byte[]{111, 112, 101, 114, 97, 116, 105, 111, 110, 82, 101, 102};
                /// <summary>
                /// JSON property name for <see cref = "OperationRef"/>.
                /// </summary>
                public static readonly JsonEncodedText OperationRefJsonPropertyName = JsonEncodedText.Encode(OperationRefUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public OneOf0Entity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public OneOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf0Entity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public OneOf0Entity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets OperationRef.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny OperationRef
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(OperationRefJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(OperationRefUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new OneOf0Entity(value.AsJsonElement);
                    }

                    return value.As<OneOf0Entity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(OneOf0Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(JsonObject value)
                {
                    return new OneOf0Entity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(OneOf0Entity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OneOf0Entity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf0Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new OneOf0Entity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "OneOf0Entity"/>.
                /// </summary>
                public static OneOf0Entity Create(Menes.Json.JsonAny operationRef)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(OperationRefJsonPropertyName, operationRef);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets operationRef.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public OneOf0Entity WithOperationRef(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(OperationRefJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(OneOf0Entity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf0Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<OneOf0Entity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(OperationRefJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.OperationRef;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundOperationRef = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OneOf0Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (OperationRefJsonPropertyName.Equals(propertyName))
                            {
                                foundOperationRef = true;
                            }
                        }
                    }

                    if (!foundOperationRef)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"operationRef\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct OneOf1Entity : IJsonObject<OneOf1Entity>, IEquatable<OneOf1Entity>
            {
                /// <summary>
                /// JSON property name for <see cref = "OperationId"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> OperationIdUtf8JsonPropertyName = new byte[]{111, 112, 101, 114, 97, 116, 105, 111, 110, 73, 100};
                /// <summary>
                /// JSON property name for <see cref = "OperationId"/>.
                /// </summary>
                public static readonly JsonEncodedText OperationIdJsonPropertyName = JsonEncodedText.Encode(OperationIdUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public OneOf1Entity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public OneOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "OneOf1Entity"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public OneOf1Entity(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets OperationId.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonAny OperationId
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(OperationIdJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(OperationIdUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonAny(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new OneOf1Entity(value.AsJsonElement);
                    }

                    return value.As<OneOf1Entity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(OneOf1Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(JsonObject value)
                {
                    return new OneOf1Entity(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(OneOf1Entity value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OneOf1Entity value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator OneOf1Entity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new OneOf1Entity(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "OneOf1Entity"/>.
                /// </summary>
                public static OneOf1Entity Create(Menes.Json.JsonAny operationId)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(OperationIdJsonPropertyName, operationId);
                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets operationId.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public OneOf1Entity WithOperationId(Menes.Json.JsonAny value)
                {
                    return this.SetProperty(OperationIdJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(OneOf1Entity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public OneOf1Entity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<OneOf1Entity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(OperationIdJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonAny property = that.OperationId;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    bool foundOperationId = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OneOf1Entity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (OperationIdJsonPropertyName.Equals(propertyName))
                            {
                                foundOperationId = true;
                            }
                        }
                    }

                    if (!foundOperationId)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"operationId\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct CallbacksValue : IJsonObject<CallbacksValue>, IEquatable<CallbacksValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public CallbacksValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public CallbacksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public CallbacksValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "CallbacksValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public CallbacksValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator CallbacksValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new CallbacksValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(CallbacksValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator CallbacksValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new CallbacksValue(value.AsJsonElement);
                }

                return value.As<CallbacksValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(CallbacksValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator CallbacksValue(JsonObject value)
            {
                return new CallbacksValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(CallbacksValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(CallbacksValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator CallbacksValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new CallbacksValue(value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the object as the given item type
            /// </summary>
            public JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity> EnumerateProperties()
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>(properties);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(CallbacksValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public CallbacksValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public CallbacksValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public CallbacksValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public CallbacksValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public CallbacksValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public CallbacksValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public CallbacksValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public CallbacksValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<CallbacksValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (!result.HasEvaluatedLocalProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.OpenApi.Type20210415.PathItemOrReferenceEntity>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ContentValue : IJsonObject<ContentValue>, IEquatable<ContentValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ContentValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ContentValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ContentValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ContentValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ContentValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ContentValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ContentValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ContentValue(value.AsJsonElement);
                }

                return value.As<ContentValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ContentValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ContentValue(JsonObject value)
            {
                return new ContentValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ContentValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ContentValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ContentValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ContentValue(value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the object as the given item type
            /// </summary>
            public JsonObjectEnumerator<Menes.OpenApi.Type20210415.MediaTypeValue> EnumerateProperties()
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.MediaTypeValue>(properties);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.MediaTypeValue>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ContentValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ContentValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContentValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContentValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContentValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContentValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContentValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContentValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ContentValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ContentValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    string propertyNameAsString = property.Name;
                    result = new JsonString(propertyNameAsString).As<Menes.OpenApi.Type20210415.ContentValue.PropertyNamesEntity>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (!result.HasEvaluatedLocalProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.OpenApi.Type20210415.MediaTypeValue>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct PropertyNamesEntity : IJsonValue, IEquatable<PropertyNamesEntity>
            {
                private readonly JsonElement jsonElementBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public PropertyNamesEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => true;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PropertyNamesEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new PropertyNamesEntity(value.AsJsonElement);
                    }

                    return value.As<PropertyNamesEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(PropertyNamesEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(PropertyNamesEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<PropertyNamesEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateFormat(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateFormat(JsonValueKind valueKind, ValidationContext result, ValidationLevel level)
                {
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct MapOfStringsValue : IJsonObject<MapOfStringsValue>, IEquatable<MapOfStringsValue>
        {
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "MapOfStringsValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public MapOfStringsValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "MapOfStringsValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public MapOfStringsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "MapOfStringsValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public MapOfStringsValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MapOfStringsValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new MapOfStringsValue(value.AsJsonElement);
                }

                return value.As<MapOfStringsValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(MapOfStringsValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MapOfStringsValue(JsonObject value)
            {
                return new MapOfStringsValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(MapOfStringsValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(MapOfStringsValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MapOfStringsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new MapOfStringsValue(value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <summary>
            /// Enumerate the object as the given item type
            /// </summary>
            public JsonObjectEnumerator<Menes.Json.JsonString> EnumerateProperties()
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return new JsonObjectEnumerator<Menes.Json.JsonString>(properties);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return new JsonObjectEnumerator<Menes.Json.JsonString>(this.jsonElementBacking);
                }

                return default;
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(MapOfStringsValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public MapOfStringsValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MapOfStringsValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MapOfStringsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MapOfStringsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MapOfStringsValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public MapOfStringsValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public MapOfStringsValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public MapOfStringsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<MapOfStringsValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (!result.HasEvaluatedLocalProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonString>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct MediaTypeValue : IJsonObject<MediaTypeValue>, IEquatable<MediaTypeValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Example"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExampleUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101};
            /// <summary>
            /// JSON property name for <see cref = "Example"/>.
            /// </summary>
            public static readonly JsonEncodedText ExampleJsonPropertyName = JsonEncodedText.Encode(ExampleUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExamplesUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public static readonly JsonEncodedText ExamplesJsonPropertyName = JsonEncodedText.Encode(ExamplesUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Schema"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> SchemaUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 97};
            /// <summary>
            /// JSON property name for <see cref = "Schema"/>.
            /// </summary>
            public static readonly JsonEncodedText SchemaJsonPropertyName = JsonEncodedText.Encode(SchemaUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Encoding"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> EncodingUtf8JsonPropertyName = new byte[]{101, 110, 99, 111, 100, 105, 110, 103};
            /// <summary>
            /// JSON property name for <see cref = "Encoding"/>.
            /// </summary>
            public static readonly JsonEncodedText EncodingJsonPropertyName = JsonEncodedText.Encode(EncodingUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<MediaTypeValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "MediaTypeValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public MediaTypeValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "MediaTypeValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public MediaTypeValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "MediaTypeValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public MediaTypeValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "MediaTypeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public MediaTypeValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "MediaTypeValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/> from which to construct the value.</param>
            public MediaTypeValue(Menes.OpenApi.Type20210415.ExamplesEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.ExamplesEntity AsExamplesEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
            /// </summary>
            public bool IsExamplesEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.ExamplesEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Example.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Example
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExampleJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExampleUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Examples.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue Examples
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExamplesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExamplesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Schema.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Schema
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(SchemaJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(SchemaUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Encoding.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.MediaTypeValue.EncodingValue Encoding
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(EncodingJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(EncodingUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.MediaTypeValue.EncodingValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MediaTypeValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new MediaTypeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(MediaTypeValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MediaTypeValue(Menes.OpenApi.Type20210415.ExamplesEntity value)
            {
                return new MediaTypeValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.ExamplesEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.ExamplesEntity(MediaTypeValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.ExamplesEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MediaTypeValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new MediaTypeValue(value.AsJsonElement);
                }

                return value.As<MediaTypeValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(MediaTypeValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MediaTypeValue(JsonObject value)
            {
                return new MediaTypeValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(MediaTypeValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(MediaTypeValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator MediaTypeValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new MediaTypeValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "MediaTypeValue"/>.
            /// </summary>
            public static MediaTypeValue Create(Menes.Json.JsonAny? example = null, Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue? examples = null, Menes.Json.JsonAny? schema = null, Menes.OpenApi.Type20210415.MediaTypeValue.EncodingValue? encoding = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (example is Menes.Json.JsonAny example__)
                {
                    builder.Add(ExampleJsonPropertyName, example__);
                }

                if (examples is Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue examples__)
                {
                    builder.Add(ExamplesJsonPropertyName, examples__);
                }

                if (schema is Menes.Json.JsonAny schema__)
                {
                    builder.Add(SchemaJsonPropertyName, schema__);
                }

                if (encoding is Menes.OpenApi.Type20210415.MediaTypeValue.EncodingValue encoding__)
                {
                    builder.Add(EncodingJsonPropertyName, encoding__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets example.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public MediaTypeValue WithExample(Menes.Json.JsonAny value)
            {
                return this.SetProperty(ExampleJsonPropertyName, value);
            }

            /// <summary>
            /// Sets examples.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public MediaTypeValue WithExamples(Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue value)
            {
                return this.SetProperty(ExamplesJsonPropertyName, value);
            }

            /// <summary>
            /// Sets schema.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public MediaTypeValue WithSchema(Menes.Json.JsonAny value)
            {
                return this.SetProperty(SchemaJsonPropertyName, value);
            }

            /// <summary>
            /// Sets encoding.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public MediaTypeValue WithEncoding(Menes.OpenApi.Type20210415.MediaTypeValue.EncodingValue value)
            {
                return this.SetProperty(EncodingJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(MediaTypeValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public MediaTypeValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MediaTypeValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MediaTypeValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MediaTypeValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public MediaTypeValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public MediaTypeValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public MediaTypeValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public MediaTypeValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<MediaTypeValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateAllOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<MediaTypeValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<MediaTypeValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<MediaTypeValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(SchemaJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.Schema;
                    return property.Validate(validationContext, level);
                });
                builder.Add(EncodingJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.MediaTypeValue.EncodingValue property = that.Encoding;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<MediaTypeValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext allOfResult0 = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult0.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult1 = this.As<Menes.OpenApi.Type20210415.ExamplesEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult1.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct EncodingValue : IJsonObject<EncodingValue>, IEquatable<EncodingValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public EncodingValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public EncodingValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public EncodingValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator EncodingValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new EncodingValue(value.AsJsonElement);
                    }

                    return value.As<EncodingValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(EncodingValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator EncodingValue(JsonObject value)
                {
                    return new EncodingValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(EncodingValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(EncodingValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator EncodingValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new EncodingValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.EncodingValue> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.EncodingValue>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.EncodingValue>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(EncodingValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public EncodingValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public EncodingValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public EncodingValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public EncodingValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public EncodingValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public EncodingValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public EncodingValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public EncodingValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<EncodingValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.EncodingValue>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct ExamplesEntity : IJsonObject<ExamplesEntity>, IEquatable<ExamplesEntity>
        {
            /// <summary>
            /// JSON property name for <see cref = "Example"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExampleUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101};
            /// <summary>
            /// JSON property name for <see cref = "Example"/>.
            /// </summary>
            public static readonly JsonEncodedText ExampleJsonPropertyName = JsonEncodedText.Encode(ExampleUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExamplesUtf8JsonPropertyName = new byte[]{101, 120, 97, 109, 112, 108, 101, 115};
            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public static readonly JsonEncodedText ExamplesJsonPropertyName = JsonEncodedText.Encode(ExamplesUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<ExamplesEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "ExamplesEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public ExamplesEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExamplesEntity"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public ExamplesEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "ExamplesEntity"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public ExamplesEntity(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Gets Example.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonAny Example
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExampleJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExampleUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonAny(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Examples.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue Examples
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExamplesJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExamplesUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExamplesEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new ExamplesEntity(value.AsJsonElement);
                }

                return value.As<ExamplesEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(ExamplesEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExamplesEntity(JsonObject value)
            {
                return new ExamplesEntity(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(ExamplesEntity value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ExamplesEntity value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ExamplesEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new ExamplesEntity(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "ExamplesEntity"/>.
            /// </summary>
            public static ExamplesEntity Create(Menes.Json.JsonAny? example = null, Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue? examples = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (example is Menes.Json.JsonAny example__)
                {
                    builder.Add(ExampleJsonPropertyName, example__);
                }

                if (examples is Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue examples__)
                {
                    builder.Add(ExamplesJsonPropertyName, examples__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets example.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExamplesEntity WithExample(Menes.Json.JsonAny value)
            {
                return this.SetProperty(ExampleJsonPropertyName, value);
            }

            /// <summary>
            /// Sets examples.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public ExamplesEntity WithExamples(Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue value)
            {
                return this.SetProperty(ExamplesJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(ExamplesEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public ExamplesEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExamplesEntity SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExamplesEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExamplesEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExamplesEntity RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExamplesEntity RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExamplesEntity RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public ExamplesEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<ExamplesEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<ExamplesEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<ExamplesEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ExamplesEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(ExampleJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonAny property = that.Example;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ExamplesJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.ExamplesEntity.ExamplesValue property = that.Examples;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ExamplesEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }
                }

                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ExamplesValue : IJsonObject<ExamplesValue>, IEquatable<ExamplesValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ExamplesValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ExamplesValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ExamplesValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public ExamplesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ExamplesValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public ExamplesValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ExamplesValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ExamplesValue(value.AsJsonElement);
                    }

                    return value.As<ExamplesValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ExamplesValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ExamplesValue(JsonObject value)
                {
                    return new ExamplesValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(ExamplesValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ExamplesValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ExamplesValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new ExamplesValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ExamplesValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ExamplesValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ExamplesValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.ExampleOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct OauthFlowsValue : IJsonObject<OauthFlowsValue>, IEquatable<OauthFlowsValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "Implicit"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ImplicitUtf8JsonPropertyName = new byte[]{105, 109, 112, 108, 105, 99, 105, 116};
            /// <summary>
            /// JSON property name for <see cref = "Implicit"/>.
            /// </summary>
            public static readonly JsonEncodedText ImplicitJsonPropertyName = JsonEncodedText.Encode(ImplicitUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Password"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> PasswordUtf8JsonPropertyName = new byte[]{112, 97, 115, 115, 119, 111, 114, 100};
            /// <summary>
            /// JSON property name for <see cref = "Password"/>.
            /// </summary>
            public static readonly JsonEncodedText PasswordJsonPropertyName = JsonEncodedText.Encode(PasswordUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "ClientCredentials"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ClientCredentialsUtf8JsonPropertyName = new byte[]{99, 108, 105, 101, 110, 116, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115};
            /// <summary>
            /// JSON property name for <see cref = "ClientCredentials"/>.
            /// </summary>
            public static readonly JsonEncodedText ClientCredentialsJsonPropertyName = JsonEncodedText.Encode(ClientCredentialsUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "AuthorizationCode"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> AuthorizationCodeUtf8JsonPropertyName = new byte[]{97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 67, 111, 100, 101};
            /// <summary>
            /// JSON property name for <see cref = "AuthorizationCode"/>.
            /// </summary>
            public static readonly JsonEncodedText AuthorizationCodeJsonPropertyName = JsonEncodedText.Encode(AuthorizationCodeUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<OauthFlowsValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "OauthFlowsValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public OauthFlowsValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OauthFlowsValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public OauthFlowsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OauthFlowsValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public OauthFlowsValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OauthFlowsValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public OauthFlowsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets Implicit.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OauthFlowsValue.ImplicitValue Implicit
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ImplicitJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ImplicitUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OauthFlowsValue.ImplicitValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Password.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OauthFlowsValue.PasswordValue Password
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(PasswordJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(PasswordUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OauthFlowsValue.PasswordValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets ClientCredentials.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OauthFlowsValue.ClientCredentialsValue ClientCredentials
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ClientCredentialsJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ClientCredentialsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OauthFlowsValue.ClientCredentialsValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets AuthorizationCode.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.OauthFlowsValue.AuthorizationCodeValue AuthorizationCode
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(AuthorizationCodeJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(AuthorizationCodeUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.OauthFlowsValue.AuthorizationCodeValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OauthFlowsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new OauthFlowsValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(OauthFlowsValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OauthFlowsValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new OauthFlowsValue(value.AsJsonElement);
                }

                return value.As<OauthFlowsValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(OauthFlowsValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OauthFlowsValue(JsonObject value)
            {
                return new OauthFlowsValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(OauthFlowsValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(OauthFlowsValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OauthFlowsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new OauthFlowsValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "OauthFlowsValue"/>.
            /// </summary>
            public static OauthFlowsValue Create(Menes.OpenApi.Type20210415.OauthFlowsValue.ImplicitValue? @implicit = null, Menes.OpenApi.Type20210415.OauthFlowsValue.PasswordValue? password = null, Menes.OpenApi.Type20210415.OauthFlowsValue.ClientCredentialsValue? clientCredentials = null, Menes.OpenApi.Type20210415.OauthFlowsValue.AuthorizationCodeValue? authorizationCode = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (@implicit is Menes.OpenApi.Type20210415.OauthFlowsValue.ImplicitValue @implicit__)
                {
                    builder.Add(ImplicitJsonPropertyName, @implicit__);
                }

                if (password is Menes.OpenApi.Type20210415.OauthFlowsValue.PasswordValue password__)
                {
                    builder.Add(PasswordJsonPropertyName, password__);
                }

                if (clientCredentials is Menes.OpenApi.Type20210415.OauthFlowsValue.ClientCredentialsValue clientCredentials__)
                {
                    builder.Add(ClientCredentialsJsonPropertyName, clientCredentials__);
                }

                if (authorizationCode is Menes.OpenApi.Type20210415.OauthFlowsValue.AuthorizationCodeValue authorizationCode__)
                {
                    builder.Add(AuthorizationCodeJsonPropertyName, authorizationCode__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets implicit.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OauthFlowsValue WithImplicit(Menes.OpenApi.Type20210415.OauthFlowsValue.ImplicitValue value)
            {
                return this.SetProperty(ImplicitJsonPropertyName, value);
            }

            /// <summary>
            /// Sets password.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OauthFlowsValue WithPassword(Menes.OpenApi.Type20210415.OauthFlowsValue.PasswordValue value)
            {
                return this.SetProperty(PasswordJsonPropertyName, value);
            }

            /// <summary>
            /// Sets clientCredentials.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OauthFlowsValue WithClientCredentials(Menes.OpenApi.Type20210415.OauthFlowsValue.ClientCredentialsValue value)
            {
                return this.SetProperty(ClientCredentialsJsonPropertyName, value);
            }

            /// <summary>
            /// Sets authorizationCode.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public OauthFlowsValue WithAuthorizationCode(Menes.OpenApi.Type20210415.OauthFlowsValue.AuthorizationCodeValue value)
            {
                return this.SetProperty(AuthorizationCodeJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(OauthFlowsValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public OauthFlowsValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OauthFlowsValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OauthFlowsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OauthFlowsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public OauthFlowsValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public OauthFlowsValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public OauthFlowsValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public OauthFlowsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<OauthFlowsValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = this.ValidateRef(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, Func<OauthFlowsValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<OauthFlowsValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<OauthFlowsValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(ImplicitJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OauthFlowsValue.ImplicitValue property = that.Implicit;
                    return property.Validate(validationContext, level);
                });
                builder.Add(PasswordJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OauthFlowsValue.PasswordValue property = that.Password;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ClientCredentialsJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OauthFlowsValue.ClientCredentialsValue property = that.ClientCredentials;
                    return property.Validate(validationContext, level);
                });
                builder.Add(AuthorizationCodeJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.OauthFlowsValue.AuthorizationCodeValue property = that.AuthorizationCode;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!refResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, refResult);
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeResults(result.IsValid, level, refResult);
                    }

                    result = result.MergeChildContext(refResult, false);
                }

                return result;
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<OauthFlowsValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ImplicitValue : IJsonObject<ImplicitValue>, IEquatable<ImplicitValue>
            {
                /// <summary>
                /// JSON property name for <see cref = "AuthorizationUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> AuthorizationUrlUtf8JsonPropertyName = new byte[]{97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "AuthorizationUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText AuthorizationUrlJsonPropertyName = JsonEncodedText.Encode(AuthorizationUrlUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ScopesUtf8JsonPropertyName = new byte[]{115, 99, 111, 112, 101, 115};
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly JsonEncodedText ScopesJsonPropertyName = JsonEncodedText.Encode(ScopesUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefreshUrlUtf8JsonPropertyName = new byte[]{114, 101, 102, 114, 101, 115, 104, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText RefreshUrlJsonPropertyName = JsonEncodedText.Encode(RefreshUrlUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<ImplicitValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ImplicitValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ImplicitValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ImplicitValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public ImplicitValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ImplicitValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public ImplicitValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ImplicitValue"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
                public ImplicitValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                        {
                            this.objectBacking = conversion;
                        }
                        else
                        {
                            this.objectBacking = default;
                        }
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public bool IsSpecificationExtensionsEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets AuthorizationUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString AuthorizationUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(AuthorizationUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(AuthorizationUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Scopes.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.MapOfStringsValue Scopes
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ScopesJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ScopesUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.MapOfStringsValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets RefreshUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString RefreshUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefreshUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefreshUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImplicitValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
                {
                    return new ImplicitValue(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ImplicitValue value)
                {
                    if (value.ValueKind == JsonValueKind.Object)
                    {
                        return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                    }

                    return default;
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImplicitValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ImplicitValue(value.AsJsonElement);
                    }

                    return value.As<ImplicitValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ImplicitValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImplicitValue(JsonObject value)
                {
                    return new ImplicitValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(ImplicitValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ImplicitValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImplicitValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new ImplicitValue(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "ImplicitValue"/>.
                /// </summary>
                public static ImplicitValue Create(Menes.Json.JsonString authorizationUrl, Menes.OpenApi.Type20210415.MapOfStringsValue scopes, Menes.Json.JsonString? refreshUrl = null)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(AuthorizationUrlJsonPropertyName, authorizationUrl);
                    builder.Add(ScopesJsonPropertyName, scopes);
                    if (refreshUrl is Menes.Json.JsonString refreshUrl__)
                    {
                        builder.Add(RefreshUrlJsonPropertyName, refreshUrl__);
                    }

                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets authorizationUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public ImplicitValue WithAuthorizationUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(AuthorizationUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Sets scopes.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public ImplicitValue WithScopes(Menes.OpenApi.Type20210415.MapOfStringsValue value)
                {
                    return this.SetProperty(ScopesJsonPropertyName, value);
                }

                /// <summary>
                /// Sets refreshUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public ImplicitValue WithRefreshUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(RefreshUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ImplicitValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public ImplicitValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ImplicitValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ImplicitValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ImplicitValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ImplicitValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ImplicitValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ImplicitValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ImplicitValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ImplicitValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateRef(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<ImplicitValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<ImplicitValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ImplicitValue, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(AuthorizationUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.AuthorizationUrl;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(ScopesJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.MapOfStringsValue property = that.Scopes;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(RefreshUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.RefreshUrl;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!refResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeResults(result.IsValid, level, refResult);
                        }

                        result = result.MergeChildContext(refResult, false);
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    bool foundAuthorizationUrl = false;
                    bool foundScopes = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ImplicitValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (AuthorizationUrlJsonPropertyName.Equals(propertyName))
                            {
                                foundAuthorizationUrl = true;
                            }
                            else if (ScopesJsonPropertyName.Equals(propertyName))
                            {
                                foundScopes = true;
                            }
                        }

                        if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    if (!foundAuthorizationUrl)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"authorizationUrl\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    if (!foundScopes)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"scopes\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct PasswordValue : IJsonObject<PasswordValue>, IEquatable<PasswordValue>
            {
                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> TokenUrlUtf8JsonPropertyName = new byte[]{116, 111, 107, 101, 110, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText TokenUrlJsonPropertyName = JsonEncodedText.Encode(TokenUrlUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ScopesUtf8JsonPropertyName = new byte[]{115, 99, 111, 112, 101, 115};
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly JsonEncodedText ScopesJsonPropertyName = JsonEncodedText.Encode(ScopesUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefreshUrlUtf8JsonPropertyName = new byte[]{114, 101, 102, 114, 101, 115, 104, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText RefreshUrlJsonPropertyName = JsonEncodedText.Encode(RefreshUrlUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<PasswordValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "PasswordValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public PasswordValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "PasswordValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public PasswordValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "PasswordValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public PasswordValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "PasswordValue"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
                public PasswordValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                        {
                            this.objectBacking = conversion;
                        }
                        else
                        {
                            this.objectBacking = default;
                        }
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public bool IsSpecificationExtensionsEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets TokenUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString TokenUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(TokenUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(TokenUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Scopes.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.MapOfStringsValue Scopes
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ScopesJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ScopesUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.MapOfStringsValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets RefreshUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString RefreshUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefreshUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefreshUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PasswordValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
                {
                    return new PasswordValue(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(PasswordValue value)
                {
                    if (value.ValueKind == JsonValueKind.Object)
                    {
                        return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                    }

                    return default;
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PasswordValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new PasswordValue(value.AsJsonElement);
                    }

                    return value.As<PasswordValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(PasswordValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PasswordValue(JsonObject value)
                {
                    return new PasswordValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(PasswordValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(PasswordValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PasswordValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new PasswordValue(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "PasswordValue"/>.
                /// </summary>
                public static PasswordValue Create(Menes.Json.JsonString tokenUrl, Menes.OpenApi.Type20210415.MapOfStringsValue scopes, Menes.Json.JsonString? refreshUrl = null)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(TokenUrlJsonPropertyName, tokenUrl);
                    builder.Add(ScopesJsonPropertyName, scopes);
                    if (refreshUrl is Menes.Json.JsonString refreshUrl__)
                    {
                        builder.Add(RefreshUrlJsonPropertyName, refreshUrl__);
                    }

                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets tokenUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public PasswordValue WithTokenUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(TokenUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Sets scopes.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public PasswordValue WithScopes(Menes.OpenApi.Type20210415.MapOfStringsValue value)
                {
                    return this.SetProperty(ScopesJsonPropertyName, value);
                }

                /// <summary>
                /// Sets refreshUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public PasswordValue WithRefreshUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(RefreshUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(PasswordValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public PasswordValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PasswordValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PasswordValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PasswordValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PasswordValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PasswordValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PasswordValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public PasswordValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<PasswordValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateRef(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<PasswordValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<PasswordValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<PasswordValue, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(TokenUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.TokenUrl;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(ScopesJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.MapOfStringsValue property = that.Scopes;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(RefreshUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.RefreshUrl;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!refResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeResults(result.IsValid, level, refResult);
                        }

                        result = result.MergeChildContext(refResult, false);
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    bool foundTokenUrl = false;
                    bool foundScopes = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<PasswordValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (TokenUrlJsonPropertyName.Equals(propertyName))
                            {
                                foundTokenUrl = true;
                            }
                            else if (ScopesJsonPropertyName.Equals(propertyName))
                            {
                                foundScopes = true;
                            }
                        }

                        if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    if (!foundTokenUrl)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"tokenUrl\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    if (!foundScopes)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"scopes\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ClientCredentialsValue : IJsonObject<ClientCredentialsValue>, IEquatable<ClientCredentialsValue>
            {
                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> TokenUrlUtf8JsonPropertyName = new byte[]{116, 111, 107, 101, 110, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText TokenUrlJsonPropertyName = JsonEncodedText.Encode(TokenUrlUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ScopesUtf8JsonPropertyName = new byte[]{115, 99, 111, 112, 101, 115};
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly JsonEncodedText ScopesJsonPropertyName = JsonEncodedText.Encode(ScopesUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefreshUrlUtf8JsonPropertyName = new byte[]{114, 101, 102, 114, 101, 115, 104, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText RefreshUrlJsonPropertyName = JsonEncodedText.Encode(RefreshUrlUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<ClientCredentialsValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ClientCredentialsValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ClientCredentialsValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ClientCredentialsValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public ClientCredentialsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ClientCredentialsValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public ClientCredentialsValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "ClientCredentialsValue"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
                public ClientCredentialsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                        {
                            this.objectBacking = conversion;
                        }
                        else
                        {
                            this.objectBacking = default;
                        }
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public bool IsSpecificationExtensionsEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets TokenUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString TokenUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(TokenUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(TokenUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Scopes.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.MapOfStringsValue Scopes
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ScopesJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ScopesUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.MapOfStringsValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets RefreshUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString RefreshUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefreshUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefreshUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ClientCredentialsValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
                {
                    return new ClientCredentialsValue(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(ClientCredentialsValue value)
                {
                    if (value.ValueKind == JsonValueKind.Object)
                    {
                        return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                    }

                    return default;
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ClientCredentialsValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ClientCredentialsValue(value.AsJsonElement);
                    }

                    return value.As<ClientCredentialsValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ClientCredentialsValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ClientCredentialsValue(JsonObject value)
                {
                    return new ClientCredentialsValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(ClientCredentialsValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ClientCredentialsValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ClientCredentialsValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new ClientCredentialsValue(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "ClientCredentialsValue"/>.
                /// </summary>
                public static ClientCredentialsValue Create(Menes.Json.JsonString tokenUrl, Menes.OpenApi.Type20210415.MapOfStringsValue scopes, Menes.Json.JsonString? refreshUrl = null)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(TokenUrlJsonPropertyName, tokenUrl);
                    builder.Add(ScopesJsonPropertyName, scopes);
                    if (refreshUrl is Menes.Json.JsonString refreshUrl__)
                    {
                        builder.Add(RefreshUrlJsonPropertyName, refreshUrl__);
                    }

                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets tokenUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public ClientCredentialsValue WithTokenUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(TokenUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Sets scopes.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public ClientCredentialsValue WithScopes(Menes.OpenApi.Type20210415.MapOfStringsValue value)
                {
                    return this.SetProperty(ScopesJsonPropertyName, value);
                }

                /// <summary>
                /// Sets refreshUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public ClientCredentialsValue WithRefreshUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(RefreshUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ClientCredentialsValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public ClientCredentialsValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ClientCredentialsValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateRef(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<ClientCredentialsValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<ClientCredentialsValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ClientCredentialsValue, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(TokenUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.TokenUrl;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(ScopesJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.MapOfStringsValue property = that.Scopes;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(RefreshUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.RefreshUrl;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!refResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeResults(result.IsValid, level, refResult);
                        }

                        result = result.MergeChildContext(refResult, false);
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    bool foundTokenUrl = false;
                    bool foundScopes = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ClientCredentialsValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (TokenUrlJsonPropertyName.Equals(propertyName))
                            {
                                foundTokenUrl = true;
                            }
                            else if (ScopesJsonPropertyName.Equals(propertyName))
                            {
                                foundScopes = true;
                            }
                        }

                        if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    if (!foundTokenUrl)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"tokenUrl\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    if (!foundScopes)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"scopes\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct AuthorizationCodeValue : IJsonObject<AuthorizationCodeValue>, IEquatable<AuthorizationCodeValue>
            {
                /// <summary>
                /// JSON property name for <see cref = "AuthorizationUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> AuthorizationUrlUtf8JsonPropertyName = new byte[]{97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "AuthorizationUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText AuthorizationUrlJsonPropertyName = JsonEncodedText.Encode(AuthorizationUrlUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> TokenUrlUtf8JsonPropertyName = new byte[]{116, 111, 107, 101, 110, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText TokenUrlJsonPropertyName = JsonEncodedText.Encode(TokenUrlUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> ScopesUtf8JsonPropertyName = new byte[]{115, 99, 111, 112, 101, 115};
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static readonly JsonEncodedText ScopesJsonPropertyName = JsonEncodedText.Encode(ScopesUtf8JsonPropertyName.Span);
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly ReadOnlyMemory<byte> RefreshUrlUtf8JsonPropertyName = new byte[]{114, 101, 102, 114, 101, 115, 104, 85, 114, 108};
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static readonly JsonEncodedText RefreshUrlJsonPropertyName = JsonEncodedText.Encode(RefreshUrlUtf8JsonPropertyName.Span);
                private static readonly ImmutableDictionary<JsonEncodedText, Func<AuthorizationCodeValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "AuthorizationCodeValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public AuthorizationCodeValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AuthorizationCodeValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public AuthorizationCodeValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AuthorizationCodeValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public AuthorizationCodeValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AuthorizationCodeValue"/> struct.
                /// </summary>
                /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
                public AuthorizationCodeValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
                {
                    if (conversion.HasJsonElement)
                    {
                        this.jsonElementBacking = conversion.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        if (conversion.ValueKind == JsonValueKind.Object)
                        {
                            this.objectBacking = conversion;
                        }
                        else
                        {
                            this.objectBacking = default;
                        }
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
                {
                    get
                    {
                        return this;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                public bool IsSpecificationExtensionsEntity
                {
                    get
                    {
                        return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                    }
                }

                /// <summary>
                /// Gets AuthorizationUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString AuthorizationUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(AuthorizationUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(AuthorizationUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets TokenUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString TokenUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(TokenUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(TokenUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets Scopes.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.OpenApi.Type20210415.MapOfStringsValue Scopes
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(ScopesJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(ScopesUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.OpenApi.Type20210415.MapOfStringsValue(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets RefreshUrl.
                /// </summary>
                /// <remarks>
                /// {Property title}.
                /// {Property description}.
                /// </remarks>
                /// <example>
                /// {Property examples}.
                /// </example>
                public Menes.Json.JsonString RefreshUrl
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            if (properties.TryGetValue(RefreshUrlJsonPropertyName, out JsonAny result))
                            {
                                return result;
                            }
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            if (this.jsonElementBacking.TryGetProperty(RefreshUrlUtf8JsonPropertyName.Span, out JsonElement result))
                            {
                                return new Menes.Json.JsonString(result);
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AuthorizationCodeValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
                {
                    return new AuthorizationCodeValue(value);
                }

                /// <summary>
                /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(AuthorizationCodeValue value)
                {
                    if (value.ValueKind == JsonValueKind.Object)
                    {
                        return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                    }

                    return default;
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AuthorizationCodeValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new AuthorizationCodeValue(value.AsJsonElement);
                    }

                    return value.As<AuthorizationCodeValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(AuthorizationCodeValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AuthorizationCodeValue(JsonObject value)
                {
                    return new AuthorizationCodeValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(AuthorizationCodeValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(AuthorizationCodeValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AuthorizationCodeValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new AuthorizationCodeValue(value);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "AuthorizationCodeValue"/>.
                /// </summary>
                public static AuthorizationCodeValue Create(Menes.Json.JsonString authorizationUrl, Menes.Json.JsonString tokenUrl, Menes.OpenApi.Type20210415.MapOfStringsValue scopes, Menes.Json.JsonString? refreshUrl = null)
                {
                    var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                    builder.Add(AuthorizationUrlJsonPropertyName, authorizationUrl);
                    builder.Add(TokenUrlJsonPropertyName, tokenUrl);
                    builder.Add(ScopesJsonPropertyName, scopes);
                    if (refreshUrl is Menes.Json.JsonString refreshUrl__)
                    {
                        builder.Add(RefreshUrlJsonPropertyName, refreshUrl__);
                    }

                    return builder.ToImmutable();
                }

                /// <summary>
                /// Sets authorizationUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public AuthorizationCodeValue WithAuthorizationUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(AuthorizationUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Sets tokenUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public AuthorizationCodeValue WithTokenUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(TokenUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Sets scopes.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public AuthorizationCodeValue WithScopes(Menes.OpenApi.Type20210415.MapOfStringsValue value)
                {
                    return this.SetProperty(ScopesJsonPropertyName, value);
                }

                /// <summary>
                /// Sets refreshUrl.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public AuthorizationCodeValue WithRefreshUrl(Menes.Json.JsonString value)
                {
                    return this.SetProperty(RefreshUrlJsonPropertyName, value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(AuthorizationCodeValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public AuthorizationCodeValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<AuthorizationCodeValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateRef(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private static ImmutableDictionary<JsonEncodedText, Func<AuthorizationCodeValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                {
                    ImmutableDictionary<JsonEncodedText, Func<AuthorizationCodeValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<AuthorizationCodeValue, ValidationContext, ValidationLevel, ValidationContext>>();
                    builder.Add(AuthorizationUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.AuthorizationUrl;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(TokenUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.TokenUrl;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(ScopesJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.OpenApi.Type20210415.MapOfStringsValue property = that.Scopes;
                        return property.Validate(validationContext, level);
                    });
                    builder.Add(RefreshUrlJsonPropertyName, (that, validationContext, level) =>
                    {
                        Menes.Json.JsonString property = that.RefreshUrl;
                        return property.Validate(validationContext, level);
                    });
                    return builder.ToImmutable();
                }

                private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext refResult = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!refResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, refResult);
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeResults(result.IsValid, level, refResult);
                        }

                        result = result.MergeChildContext(refResult, false);
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    bool foundAuthorizationUrl = false;
                    bool foundTokenUrl = false;
                    bool foundScopes = false;
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (__MenesLocalProperties.TryGetValue(propertyName, out Func<AuthorizationCodeValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                        {
                            result = result.WithLocalProperty(propertyName);
                            var propertyResult = propertyValidator(this, result, level);
                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (AuthorizationUrlJsonPropertyName.Equals(propertyName))
                            {
                                foundAuthorizationUrl = true;
                            }
                            else if (TokenUrlJsonPropertyName.Equals(propertyName))
                            {
                                foundTokenUrl = true;
                            }
                            else if (ScopesJsonPropertyName.Equals(propertyName))
                            {
                                foundScopes = true;
                            }
                        }

                        if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    if (!foundAuthorizationUrl)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"authorizationUrl\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    if (!foundTokenUrl)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"tokenUrl\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    if (!foundScopes)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"6.5.3. required - required property \"scopes\" not present.");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct EncodingValue : IJsonObject<EncodingValue>, IEquatable<EncodingValue>
        {
            /// <summary>
            /// JSON property name for <see cref = "ContentType"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ContentTypeUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101};
            /// <summary>
            /// JSON property name for <see cref = "ContentType"/>.
            /// </summary>
            public static readonly JsonEncodedText ContentTypeJsonPropertyName = JsonEncodedText.Encode(ContentTypeUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> HeadersUtf8JsonPropertyName = new byte[]{104, 101, 97, 100, 101, 114, 115};
            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public static readonly JsonEncodedText HeadersJsonPropertyName = JsonEncodedText.Encode(HeadersUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Style"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
            /// <summary>
            /// JSON property name for <see cref = "Style"/>.
            /// </summary>
            public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "Explode"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
            /// <summary>
            /// JSON property name for <see cref = "Explode"/>.
            /// </summary>
            public static readonly JsonEncodedText ExplodeJsonPropertyName = JsonEncodedText.Encode(ExplodeUtf8JsonPropertyName.Span);
            /// <summary>
            /// JSON property name for <see cref = "AllowReserved"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> AllowReservedUtf8JsonPropertyName = new byte[]{97, 108, 108, 111, 119, 82, 101, 115, 101, 114, 118, 101, 100};
            /// <summary>
            /// JSON property name for <see cref = "AllowReserved"/>.
            /// </summary>
            public static readonly JsonEncodedText AllowReservedJsonPropertyName = JsonEncodedText.Encode(AllowReservedUtf8JsonPropertyName.Span);
            private static readonly ImmutableDictionary<JsonEncodedText, Func<EncodingValue, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
            private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
            private readonly JsonElement jsonElementBacking;
            private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public EncodingValue(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.objectBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
            /// </summary>
            /// <param name = "value">A property dictionary.</param>
            public EncodingValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                this.jsonElementBacking = default;
                this.objectBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
            /// </summary>
            /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
            public EncodingValue(JsonObject jsonObject)
            {
                if (jsonObject.HasJsonElement)
                {
                    this.jsonElementBacking = jsonObject.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = jsonObject.AsPropertyDictionary;
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/> from which to construct the value.</param>
            public EncodingValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    if (conversion.ValueKind == JsonValueKind.Object)
                    {
                        this.objectBacking = conversion;
                    }
                    else
                    {
                        this.objectBacking = default;
                    }
                }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "EncodingValue"/> struct.
            /// </summary>
            /// <param name = "conversion">The <see cref = "Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity"/> from which to construct the value.</param>
            public EncodingValue(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity conversion)
            {
                if (conversion.HasJsonElement)
                {
                    this.jsonElementBacking = conversion.AsJsonElement;
                    this.objectBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = default;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.SpecificationExtensionsEntity AsSpecificationExtensionsEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            public bool IsSpecificationExtensionsEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.SpecificationExtensionsEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity"/>.
            /// </summary>
            public Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity AsExplodeDefaultEntity
            {
                get
                {
                    return this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity"/>.
            /// </summary>
            public bool IsExplodeDefaultEntity
            {
                get
                {
                    return ((Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity)this).Validate().IsValid;
                }
            }

            /// <summary>
            /// Gets ContentType.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonString ContentType
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ContentTypeJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ContentTypeUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonString(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Headers.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.EncodingValue.HeadersValue Headers
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(HeadersJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(HeadersUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.EncodingValue.HeadersValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Style.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.EncodingValue.StyleEntity Style
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.EncodingValue.StyleEntity(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Explode.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.Json.JsonBoolean Explode
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.Json.JsonBoolean(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets AllowReserved.
            /// </summary>
            /// <remarks>
            /// {Property title}.
            /// {Property description}.
            /// </remarks>
            /// <example>
            /// {Property examples}.
            /// </example>
            public Menes.OpenApi.Type20210415.EncodingValue.AllowReservedValue AllowReserved
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        if (properties.TryGetValue(AllowReservedJsonPropertyName, out JsonAny result))
                        {
                            return result;
                        }
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        if (this.jsonElementBacking.TryGetProperty(AllowReservedUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApi.Type20210415.EncodingValue.AllowReservedValue(result);
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.objectBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return JsonObject.PropertiesToJsonElement(objectBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                    {
                        return JsonValueKind.Object;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonAny(objectBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonObject"/>.
            /// </summary>
            public JsonObject AsObject
            {
                get
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        return new JsonObject(objectBacking);
                    }

                    return new JsonObject(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonArray"/>.
            /// </summary>
            public JsonArray AsArray
            {
                get
                {
                    return new JsonArray(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNumber"/>.
            /// </summary>
            public JsonNumber AsNumber
            {
                get
                {
                    return new JsonNumber(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            public JsonString AsString
            {
                get
                {
                    return new JsonString(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonBoolean"/>.
            /// </summary>
            public JsonBoolean AsBoolean
            {
                get
                {
                    return new JsonBoolean(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonNull"/>.
            /// </summary>
            public JsonNull AsNull
            {
                get
                {
                    return default;
                }
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EncodingValue(Menes.OpenApi.Type20210415.SpecificationExtensionsEntity value)
            {
                return new EncodingValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.SpecificationExtensionsEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(EncodingValue value)
            {
                if (value.ValueKind == JsonValueKind.Object)
                {
                    return new Menes.OpenApi.Type20210415.SpecificationExtensionsEntity(value.AsObject);
                }

                return default;
            }

            /// <summary>
            /// Conversion from <see cref = "Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EncodingValue(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity value)
            {
                return new EncodingValue(value);
            }

            /// <summary>
            /// Conversion to <see cref = "Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity"/>.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity(EncodingValue value)
            {
                return default;
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EncodingValue(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new EncodingValue(value.AsJsonElement);
                }

                return value.As<EncodingValue>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(EncodingValue value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EncodingValue(JsonObject value)
            {
                return new EncodingValue(value);
            }

            /// <summary>
            /// Conversion to object.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonObject(EncodingValue value)
            {
                return value.AsObject;
            }

            /// <summary>
            /// Implicit conversion to a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(EncodingValue value)
            {
                return value.AsObject.AsPropertyDictionary;
            }

            /// <summary>
            /// Implicit conversion from a property dictionary.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator EncodingValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
            {
                return new EncodingValue(value);
            }

            /// <summary>
            /// Creates an instance of a <see cref = "EncodingValue"/>.
            /// </summary>
            public static EncodingValue Create(Menes.Json.JsonString? contentType = null, Menes.OpenApi.Type20210415.EncodingValue.HeadersValue? headers = null, Menes.OpenApi.Type20210415.EncodingValue.StyleEntity? style = null, Menes.Json.JsonBoolean? explode = null, Menes.OpenApi.Type20210415.EncodingValue.AllowReservedValue? allowReserved = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                if (contentType is Menes.Json.JsonString contentType__)
                {
                    builder.Add(ContentTypeJsonPropertyName, contentType__);
                }

                if (headers is Menes.OpenApi.Type20210415.EncodingValue.HeadersValue headers__)
                {
                    builder.Add(HeadersJsonPropertyName, headers__);
                }

                if (style is Menes.OpenApi.Type20210415.EncodingValue.StyleEntity style__)
                {
                    builder.Add(StyleJsonPropertyName, style__);
                }

                if (explode is Menes.Json.JsonBoolean explode__)
                {
                    builder.Add(ExplodeJsonPropertyName, explode__);
                }

                if (allowReserved is Menes.OpenApi.Type20210415.EncodingValue.AllowReservedValue allowReserved__)
                {
                    builder.Add(AllowReservedJsonPropertyName, allowReserved__);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets contentType.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public EncodingValue WithContentType(Menes.Json.JsonString value)
            {
                return this.SetProperty(ContentTypeJsonPropertyName, value);
            }

            /// <summary>
            /// Sets headers.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public EncodingValue WithHeaders(Menes.OpenApi.Type20210415.EncodingValue.HeadersValue value)
            {
                return this.SetProperty(HeadersJsonPropertyName, value);
            }

            /// <summary>
            /// Sets style.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public EncodingValue WithStyle(Menes.OpenApi.Type20210415.EncodingValue.StyleEntity value)
            {
                return this.SetProperty(StyleJsonPropertyName, value);
            }

            /// <summary>
            /// Sets explode.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public EncodingValue WithExplode(Menes.Json.JsonBoolean value)
            {
                return this.SetProperty(ExplodeJsonPropertyName, value);
            }

            /// <summary>
            /// Sets allowReserved.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public EncodingValue WithAllowReserved(Menes.OpenApi.Type20210415.EncodingValue.AllowReservedValue value)
            {
                return this.SetProperty(AllowReservedJsonPropertyName, value);
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                {
                    JsonObject.WriteProperties(objectBacking, writer);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                return this.AsObject.EnumerateObject();
            }

            /// <inheritdoc/>
            public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return this.AsObject.TryGetProperty(utf8name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(name, out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(string name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
            }

            /// <inheritdoc/>
            public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
            }

            /// <inheritdoc/>
            public bool HasDefault(JsonEncodedText name)
            {
                return __MenesDefaults.TryGetValue(name, out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(string name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<char> name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
            }

            /// <inheritdoc/>
            public bool HasDefault(ReadOnlySpan<byte> utf8name)
            {
                return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool Equals(EncodingValue other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                ;
            }

            /// <inheritdoc/>
            public bool HasProperty(JsonEncodedText name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(name, out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(string name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public bool HasProperty(ReadOnlySpan<byte> utf8name)
            {
                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                {
                    return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                }

                return false;
            }

            /// <inheritdoc/>
            public EncodingValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public EncodingValue SetProperty<TValue>(string name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public EncodingValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public EncodingValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                where TValue : IJsonValue
            {
                if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                {
                    return this.AsObject.SetProperty(utf8name, value);
                }

                return this;
            }

            /// <inheritdoc/>
            public EncodingValue RemoveProperty(JsonEncodedText name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public EncodingValue RemoveProperty(string name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public EncodingValue RemoveProperty(ReadOnlySpan<char> name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(name);
                }

                return this;
            }

            /// <inheritdoc/>
            public EncodingValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
            {
                if (this.ValueKind == JsonValueKind.Object)
                {
                    return this.AsObject.RemoveProperty(utf8Name);
                }

                return this;
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<EncodingValue, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                JsonValueKind valueKind = this.ValueKind;
                result = this.ValidateType(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateAllOf(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = this.ValidateObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
            {
                ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                builder.Add(StyleJsonPropertyName, JsonAny.Parse("\"form\""));
                builder.Add(AllowReservedJsonPropertyName, JsonAny.Parse("false"));
                return builder.ToImmutable();
            }

            private static ImmutableDictionary<JsonEncodedText, Func<EncodingValue, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
            {
                ImmutableDictionary<JsonEncodedText, Func<EncodingValue, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<EncodingValue, ValidationContext, ValidationLevel, ValidationContext>>();
                builder.Add(ContentTypeJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonString property = that.ContentType;
                    return property.Validate(validationContext, level);
                });
                builder.Add(HeadersJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.EncodingValue.HeadersValue property = that.Headers;
                    return property.Validate(validationContext, level);
                });
                builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.EncodingValue.StyleEntity property = that.Style;
                    return property.Validate(validationContext, level);
                });
                builder.Add(ExplodeJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.Json.JsonBoolean property = that.Explode;
                    return property.Validate(validationContext, level);
                });
                builder.Add(AllowReservedJsonPropertyName, (that, validationContext, level) =>
                {
                    Menes.OpenApi.Type20210415.EncodingValue.AllowReservedValue property = that.AllowReserved;
                    return property.Validate(validationContext, level);
                });
                return builder.ToImmutable();
            }

            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                result = result.UsingEvaluatedProperties();
                foreach (Property property in this.EnumerateObject())
                {
                    JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                    if (__MenesLocalProperties.TryGetValue(propertyName, out Func<EncodingValue, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyName);
                        var propertyResult = propertyValidator(this, result, level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }

                    if (!result.HasEvaluatedLocalOrAppliedProperty(propertyName))
                    {
                        result = property.ValueAs<Menes.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalProperty(propertyName);
                    }
                }

                return result;
            }

            private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                ValidationContext allOfResult0 = this.As<Menes.OpenApi.Type20210415.SpecificationExtensionsEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult0.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult1 = this.As<Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity>().Validate(validationContext.CreateChildContext(), level);
                if (!allOfResult1.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
                }

                return result;
            }

            private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                bool isValid = false;
                ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                if (level == ValidationLevel.Flag && localResultObject.IsValid)
                {
                    return validationContext;
                }

                if (localResultObject.IsValid)
                {
                    isValid = true;
                }

                result = result.MergeResults(isValid, level, localResultObject);
                return result;
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct ExplodeDefaultEntity : IJsonValue, IEquatable<ExplodeDefaultEntity>
            {
                private readonly JsonElement jsonElementBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "ExplodeDefaultEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public ExplodeDefaultEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => true;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ExplodeDefaultEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new ExplodeDefaultEntity(value.AsJsonElement);
                    }

                    return value.As<ExplodeDefaultEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(ExplodeDefaultEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(ExplodeDefaultEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<ExplodeDefaultEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = this.ValidateIfThenElse(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    ValidationContext ifResult = this.As<Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.IfEntity>().Validate(validationContext.CreateChildContext(), level);
                    if (!ifResult.IsValid)
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, ifResult);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(ifResult, true);
                        }

                        result = result.MergeChildContext(ifResult, false);
                    }

                    if (ifResult.IsValid)
                    {
                        ValidationContext thenResult = this.As<Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ThenEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!thenResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                            }
                            else
                            {
                                result = validationContext.WithResult(isValid: false);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(thenResult, true);
                            }

                            result = result.MergeChildContext(thenResult, false);
                        }
                    }

                    if (!ifResult.IsValid)
                    {
                        ValidationContext elseResult = this.As<Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ElseEntity>().Validate(validationContext.CreateChildContext(), level);
                        if (!elseResult.IsValid)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                            }
                            else
                            {
                                result = validationContext.WithResult(isValid: false);
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeChildContext(elseResult, true);
                            }

                            result = result.MergeChildContext(elseResult, false);
                        }
                    }

                    return result;
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ElseEntity : IJsonObject<ElseEntity>, IEquatable<ElseEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Explode"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Explode"/>.
                    /// </summary>
                    public static readonly JsonEncodedText ExplodeJsonPropertyName = JsonEncodedText.Encode(ExplodeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ElseEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ElseEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ElseEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public ElseEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ElseEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public ElseEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Explode.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ElseEntity.ExplodeEntity Explode
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ElseEntity.ExplodeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ElseEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ElseEntity(value.AsJsonElement);
                        }

                        return value.As<ElseEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ElseEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ElseEntity(JsonObject value)
                    {
                        return new ElseEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(ElseEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ElseEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ElseEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new ElseEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "ElseEntity"/>.
                    /// </summary>
                    public static ElseEntity Create(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ElseEntity.ExplodeEntity? explode = null)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        if (explode is Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ElseEntity.ExplodeEntity explode__)
                        {
                            builder.Add(ExplodeJsonPropertyName, explode__);
                        }

                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets explode.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ElseEntity WithExplode(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ElseEntity.ExplodeEntity value)
                    {
                        return this.SetProperty(ExplodeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(string name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(JsonEncodedText name)
                    {
                        return __MenesDefaults.TryGetValue(name, out _);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(string name)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(ReadOnlySpan<char> name)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(ReadOnlySpan<byte> utf8name)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ElseEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public ElseEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ElseEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ElseEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ElseEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ElseEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ElseEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ElseEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ElseEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ElseEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                    {
                        ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(ExplodeJsonPropertyName, JsonAny.Parse("false"));
                        return builder.ToImmutable();
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(ExplodeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ElseEntity.ExplodeEntity property = that.Explode;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ElseEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ExplodeEntity : IJsonValue, IEquatable<ExplodeEntity>
                    {
                        private readonly JsonElement jsonElementBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ExplodeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ExplodeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => true;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ExplodeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ExplodeEntity(value.AsJsonElement);
                            }

                            return value.As<ExplodeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ExplodeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ExplodeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ExplodeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            return result;
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct IfEntity : IJsonObject<IfEntity>, IEquatable<IfEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Style"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Style"/>.
                    /// </summary>
                    public static readonly JsonEncodedText StyleJsonPropertyName = JsonEncodedText.Encode(StyleUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public IfEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "IfEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public IfEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Style.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.IfEntity.StyleEntity Style
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.IfEntity.StyleEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new IfEntity(value.AsJsonElement);
                        }

                        return value.As<IfEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(IfEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(JsonObject value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(IfEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(IfEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator IfEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new IfEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "IfEntity"/>.
                    /// </summary>
                    public static IfEntity Create(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.IfEntity.StyleEntity style)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(StyleJsonPropertyName, style);
                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets style.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public IfEntity WithStyle(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.IfEntity.StyleEntity value)
                    {
                        return this.SetProperty(StyleJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(IfEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public IfEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<IfEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(StyleJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.IfEntity.StyleEntity property = that.Style;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        bool foundStyle = false;
                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<IfEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }

                                if (StyleJsonPropertyName.Equals(propertyName))
                                {
                                    foundStyle = true;
                                }
                            }
                        }

                        if (!foundStyle)
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"style\" not present.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
                    {
                        private static readonly StyleEntity __MenesConstValue = JsonAny.Parse("\"form\"");
                        private readonly JsonElement jsonElementBacking;
                        private readonly JsonEncodedText? stringBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public StyleEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                            this.stringBacking = default;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public StyleEntity(string value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public StyleEntity(JsonEncodedText value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = value;
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public StyleEntity(ReadOnlySpan<char> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">A string value.</param>
                        public StyleEntity(ReadOnlySpan<byte> value)
                        {
                            this.jsonElementBacking = default;
                            this.stringBacking = JsonEncodedText.Encode(value);
                        }

                        /// <summary>
                        /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                        /// </summary>
                        /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                        public StyleEntity(JsonString jsonString)
                        {
                            if (jsonString.HasJsonElement)
                            {
                                this.jsonElementBacking = jsonString.AsJsonElement;
                                this.stringBacking = default;
                            }
                            else
                            {
                                this.jsonElementBacking = default;
                                this.stringBacking = jsonString.GetJsonEncodedText();
                            }
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => this.stringBacking is null;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return JsonString.StringToJsonElement(stringBacking);
                                }

                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText)
                                {
                                    return JsonValueKind.String;
                                }

                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonAny(stringBacking);
                                }

                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                if (this.stringBacking is JsonEncodedText stringBacking)
                                {
                                    return new JsonString(stringBacking);
                                }

                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator StyleEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new StyleEntity(value.AsJsonElement);
                            }

                            return value.As<StyleEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(StyleEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator StyleEntity(string value)
                        {
                            return new StyleEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator string (StyleEntity value)
                        {
                            return value.AsString.GetString();
                        }

                        /// <summary>
                        /// Conversion from <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator StyleEntity(JsonEncodedText value)
                        {
                            return new StyleEntity(value);
                        }

                        /// <summary>
                        /// Conversion to <see cref = "JsonEncodedText"/>.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator JsonEncodedText(StyleEntity value)
                        {
                            return value.AsString.GetJsonEncodedText();
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                        {
                            return new StyleEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                        {
                            return value.AsString.AsSpan();
                        }

                        /// <summary>
                        /// Conversion from utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                        {
                            return new StyleEntity(value);
                        }

                        /// <summary>
                        /// Conversion to utf8 bytes.
                        /// </summary>
                        /// <param name = "value">The number from which to convert.</param>
                        public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                        {
                            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                        }

                        /// <summary>
                        /// Conversion from string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator StyleEntity(JsonString value)
                        {
                            return new StyleEntity(value);
                        }

                        /// <summary>
                        /// Conversion to string.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonString(StyleEntity value)
                        {
                            return value.AsString;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.stringBacking is JsonEncodedText stringBacking)
                            {
                                writer.WriteStringValue(stringBacking);
                                return;
                            }

                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(StyleEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<StyleEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            result = Menes.Json.Validate.ValidateConst(this, result, level, __MenesConstValue);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            return result;
                        }
                    }
                }

                /// <summary>
                /// A type generated from a JsonSchema specification.
                /// </summary>
                public readonly struct ThenEntity : IJsonObject<ThenEntity>, IEquatable<ThenEntity>
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Explode"/>.
                    /// </summary>
                    public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
                    /// <summary>
                    /// JSON property name for <see cref = "Explode"/>.
                    /// </summary>
                    public static readonly JsonEncodedText ExplodeJsonPropertyName = JsonEncodedText.Encode(ExplodeUtf8JsonPropertyName.Span);
                    private static readonly ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties = CreateLocalPropertyValidators();
                    private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __MenesDefaults = BuildDefaults();
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                    public ThenEntity(JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.objectBacking = default;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "value">A property dictionary.</param>
                    public ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = value;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "ThenEntity"/> struct.
                    /// </summary>
                    /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                    public ThenEntity(JsonObject jsonObject)
                    {
                        if (jsonObject.HasJsonElement)
                        {
                            this.jsonElementBacking = jsonObject.AsJsonElement;
                            this.objectBacking = default;
                        }
                        else
                        {
                            this.jsonElementBacking = default;
                            this.objectBacking = jsonObject.AsPropertyDictionary;
                        }
                    }

                    /// <summary>
                    /// Gets Explode.
                    /// </summary>
                    /// <remarks>
                    /// {Property title}.
                    /// {Property description}.
                    /// </remarks>
                    /// <example>
                    /// {Property examples}.
                    /// </example>
                    public Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ThenEntity.ExplodeEntity Explode
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                            {
                                if (properties.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                                {
                                    return result;
                                }
                            }

                            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                            {
                                if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                                {
                                    return new Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ThenEntity.ExplodeEntity(result);
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets a value indicating whether this is backed by a JSON element.
                    /// </summary>
                    public bool HasJsonElement => this.objectBacking is null;
                    /// <summary>
                    /// Gets the value as a JsonElement.
                    /// </summary>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return JsonObject.PropertiesToJsonElement(objectBacking);
                            }

                            return this.jsonElementBacking;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                            {
                                return JsonValueKind.Object;
                            }

                            return this.jsonElementBacking.ValueKind;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonAny(objectBacking);
                            }

                            return new JsonAny(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonObject"/>.
                    /// </summary>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                            {
                                return new JsonObject(objectBacking);
                            }

                            return new JsonObject(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonArray"/>.
                    /// </summary>
                    public JsonArray AsArray
                    {
                        get
                        {
                            return new JsonArray(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNumber"/>.
                    /// </summary>
                    public JsonNumber AsNumber
                    {
                        get
                        {
                            return new JsonNumber(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonString"/>.
                    /// </summary>
                    public JsonString AsString
                    {
                        get
                        {
                            return new JsonString(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonBoolean"/>.
                    /// </summary>
                    public JsonBoolean AsBoolean
                    {
                        get
                        {
                            return new JsonBoolean(this.jsonElementBacking);
                        }
                    }

                    /// <summary>
                    /// Gets the value as a <see cref = "JsonNull"/>.
                    /// </summary>
                    public JsonNull AsNull
                    {
                        get
                        {
                            return default;
                        }
                    }

                    /// <summary>
                    /// Conversion from any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonAny value)
                    {
                        if (value.HasJsonElement)
                        {
                            return new ThenEntity(value.AsJsonElement);
                        }

                        return value.As<ThenEntity>();
                    }

                    /// <summary>
                    /// Conversion to any.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonAny(ThenEntity value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Conversion from object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(JsonObject value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Conversion to object.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(ThenEntity value)
                    {
                        return value.AsObject;
                    }

                    /// <summary>
                    /// Implicit conversion to a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(ThenEntity value)
                    {
                        return value.AsObject.AsPropertyDictionary;
                    }

                    /// <summary>
                    /// Implicit conversion from a property dictionary.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ThenEntity(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                    {
                        return new ThenEntity(value);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "ThenEntity"/>.
                    /// </summary>
                    public static ThenEntity Create(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ThenEntity.ExplodeEntity? explode = null)
                    {
                        var builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        if (explode is Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ThenEntity.ExplodeEntity explode__)
                        {
                            builder.Add(ExplodeJsonPropertyName, explode__);
                        }

                        return builder.ToImmutable();
                    }

                    /// <summary>
                    /// Sets explode.
                    /// </summary>
                    /// <param name = "value">The value to set.</param>
                    /// <returns>The entity with the updated property.</returns>
                    public ThenEntity WithExplode(Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ThenEntity.ExplodeEntity value)
                    {
                        return this.SetProperty(ExplodeJsonPropertyName, value);
                    }

                    /// <summary>
                    /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                    /// </summary>
                    /// <param name = "writer">The writer to which to write the object.</param>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            JsonObject.WriteProperties(objectBacking, writer);
                            return;
                        }

                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                            return;
                        }

                        writer.WriteNullValue();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        return this.AsObject.EnumerateObject();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return this.AsObject.TryGetProperty(utf8name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(JsonEncodedText name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(name, out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(string name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);
                    }

                    /// <inheritdoc/>
                    public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out value);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(JsonEncodedText name)
                    {
                        return __MenesDefaults.TryGetValue(name, out _);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(string name)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(ReadOnlySpan<char> name)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    /// <inheritdoc/>
                    public bool HasDefault(ReadOnlySpan<byte> utf8name)
                    {
                        return __MenesDefaults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(T other)
                        where T : struct, IJsonValue
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool Equals(ThenEntity other)
                    {
                        JsonValueKind valueKind = this.ValueKind;
                        if (other.ValueKind != valueKind)
                        {
                            return false;
                        }

                        return valueKind switch
                        {
                        JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                        ;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(JsonEncodedText name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(name, out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> utf8name)
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                        {
                            return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                        }

                        if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                        {
                            return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                        }

                        return false;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(JsonEncodedText name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(string name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                        where TValue : IJsonValue
                    {
                        if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                        {
                            return this.AsObject.SetProperty(utf8name, value);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(JsonEncodedText name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(string name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<char> name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public ThenEntity RemoveProperty(ReadOnlySpan<byte> utf8Name)
                    {
                        if (this.ValueKind == JsonValueKind.Object)
                        {
                            return this.AsObject.RemoveProperty(utf8Name);
                        }

                        return this;
                    }

                    /// <inheritdoc/>
                    public T As<T>()
                        where T : struct, IJsonValue
                    {
                        return this.As<ThenEntity, T>();
                    }

                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                        if (level != ValidationLevel.Flag)
                        {
                            result = result.UsingStack();
                        }

                        JsonValueKind valueKind = this.ValueKind;
                        result = this.ValidateObject(valueKind, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        return result;
                    }

                    private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
                    {
                        ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();
                        builder.Add(ExplodeJsonPropertyName, JsonAny.Parse("true"));
                        return builder.ToImmutable();
                    }

                    private static ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyValidators()
                    {
                        ImmutableDictionary<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>>();
                        builder.Add(ExplodeJsonPropertyName, (that, validationContext, level) =>
                        {
                            Menes.OpenApi.Type20210415.EncodingValue.ExplodeDefaultEntity.ThenEntity.ExplodeEntity property = that.Explode;
                            return property.Validate(validationContext, level);
                        });
                        return builder.ToImmutable();
                    }

                    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        if (valueKind != JsonValueKind.Object)
                        {
                            return result;
                        }

                        foreach (Property property in this.EnumerateObject())
                        {
                            JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                            if (__MenesLocalProperties.TryGetValue(propertyName, out Func<ThenEntity, ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                            {
                                result = result.WithLocalProperty(propertyName);
                                var propertyResult = propertyValidator(this, result, level);
                                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                                if (level == ValidationLevel.Flag && !result.IsValid)
                                {
                                    return result;
                                }
                            }
                        }

                        return result;
                    }

                    /// <summary>
                    /// A type generated from a JsonSchema specification.
                    /// </summary>
                    public readonly struct ExplodeEntity : IJsonValue, IEquatable<ExplodeEntity>
                    {
                        private readonly JsonElement jsonElementBacking;
                        /// <summary>
                        /// Initializes a new instance of the <see cref = "ExplodeEntity"/> struct.
                        /// </summary>
                        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                        public ExplodeEntity(JsonElement value)
                        {
                            this.jsonElementBacking = value;
                        }

                        /// <summary>
                        /// Gets a value indicating whether this is backed by a JSON element.
                        /// </summary>
                        public bool HasJsonElement => true;
                        /// <summary>
                        /// Gets the value as a JsonElement.
                        /// </summary>
                        public JsonElement AsJsonElement
                        {
                            get
                            {
                                return this.jsonElementBacking;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonValueKind ValueKind
                        {
                            get
                            {
                                return this.jsonElementBacking.ValueKind;
                            }
                        }

                        /// <inheritdoc/>
                        public JsonAny AsAny
                        {
                            get
                            {
                                return new JsonAny(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonObject"/>.
                        /// </summary>
                        public JsonObject AsObject
                        {
                            get
                            {
                                return new JsonObject(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonArray"/>.
                        /// </summary>
                        public JsonArray AsArray
                        {
                            get
                            {
                                return new JsonArray(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNumber"/>.
                        /// </summary>
                        public JsonNumber AsNumber
                        {
                            get
                            {
                                return new JsonNumber(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonString"/>.
                        /// </summary>
                        public JsonString AsString
                        {
                            get
                            {
                                return new JsonString(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonBoolean"/>.
                        /// </summary>
                        public JsonBoolean AsBoolean
                        {
                            get
                            {
                                return new JsonBoolean(this.jsonElementBacking);
                            }
                        }

                        /// <summary>
                        /// Gets the value as a <see cref = "JsonNull"/>.
                        /// </summary>
                        public JsonNull AsNull
                        {
                            get
                            {
                                return default;
                            }
                        }

                        /// <summary>
                        /// Conversion from any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator ExplodeEntity(JsonAny value)
                        {
                            if (value.HasJsonElement)
                            {
                                return new ExplodeEntity(value.AsJsonElement);
                            }

                            return value.As<ExplodeEntity>();
                        }

                        /// <summary>
                        /// Conversion to any.
                        /// </summary>
                        /// <param name = "value">The value from which to convert.</param>
                        public static implicit operator JsonAny(ExplodeEntity value)
                        {
                            return value.AsAny;
                        }

                        /// <summary>
                        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                        /// </summary>
                        /// <param name = "writer">The writer to which to write the object.</param>
                        public void WriteTo(Utf8JsonWriter writer)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                                return;
                            }

                            writer.WriteNullValue();
                        }

                        /// <inheritdoc/>
                        public bool Equals<T>(T other)
                            where T : struct, IJsonValue
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public bool Equals(ExplodeEntity other)
                        {
                            JsonValueKind valueKind = this.ValueKind;
                            if (other.ValueKind != valueKind)
                            {
                                return false;
                            }

                            return valueKind switch
                            {
                            JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                            ;
                        }

                        /// <inheritdoc/>
                        public T As<T>()
                            where T : struct, IJsonValue
                        {
                            return this.As<ExplodeEntity, T>();
                        }

                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                            if (level != ValidationLevel.Flag)
                            {
                                result = result.UsingStack();
                            }

                            return result;
                        }
                    }
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct HeadersValue : IJsonObject<HeadersValue>, IEquatable<HeadersValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public HeadersValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.objectBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "value">A property dictionary.</param>
                public HeadersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    this.jsonElementBacking = default;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "HeadersValue"/> struct.
                /// </summary>
                /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
                public HeadersValue(JsonObject jsonObject)
                {
                    if (jsonObject.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonObject.AsJsonElement;
                        this.objectBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.objectBacking = jsonObject.AsPropertyDictionary;
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.objectBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return JsonObject.PropertiesToJsonElement(objectBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny>)
                        {
                            return JsonValueKind.Object;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonAny(objectBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                        {
                            return new JsonObject(objectBacking);
                        }

                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new HeadersValue(value.AsJsonElement);
                    }

                    return value.As<HeadersValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(HeadersValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(JsonObject value)
                {
                    return new HeadersValue(value);
                }

                /// <summary>
                /// Conversion to object.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(HeadersValue value)
                {
                    return value.AsObject;
                }

                /// <summary>
                /// Implicit conversion to a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(HeadersValue value)
                {
                    return value.AsObject.AsPropertyDictionary;
                }

                /// <summary>
                /// Implicit conversion from a property dictionary.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator HeadersValue(ImmutableDictionary<JsonEncodedText, JsonAny> value)
                {
                    return new HeadersValue(value);
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> objectBacking)
                    {
                        JsonObject.WriteProperties(objectBacking, writer);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <summary>
                /// Enumerate the object as the given item type
                /// </summary>
                public JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity> EnumerateProperties()
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>(properties);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return new JsonObjectEnumerator<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>(this.jsonElementBacking);
                    }

                    return default;
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    return this.AsObject.EnumerateObject();
                }

                /// <inheritdoc/>
                public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(name, out value);
                }

                /// <inheritdoc/>
                public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
                {
                    return this.AsObject.TryGetProperty(utf8name, out value);
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(HeadersValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool HasProperty(JsonEncodedText name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(name, out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> utf8name)
                {
                    if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)
                    {
                        return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);
                    }

                    if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                    {
                        return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
                    }

                    return false;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(JsonEncodedText name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(string name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
                    where TValue : IJsonValue
                {
                    if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
                    {
                        return this.AsObject.SetProperty(utf8name, value);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(JsonEncodedText name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(string name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(ReadOnlySpan<char> name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public HeadersValue RemoveProperty(ReadOnlySpan<byte> utf8Name)
                {
                    if (this.ValueKind == JsonValueKind.Object)
                    {
                        return this.AsObject.RemoveProperty(utf8Name);
                    }

                    return this;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<HeadersValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = this.ValidateObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        return result;
                    }

                    result = result.UsingEvaluatedProperties();
                    foreach (Property property in this.EnumerateObject())
                    {
                        JsonEncodedText propertyName = property.NameAsJsonEncodedText;
                        if (!result.HasEvaluatedLocalProperty(propertyName))
                        {
                            result = property.ValueAs<Menes.OpenApi.Type20210415.HeaderOrReferenceEntity>().Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalProperty(propertyName);
                        }
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultObject.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultObject.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultObject);
                    return result;
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct StyleEntity : IJsonValue, IEquatable<StyleEntity>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly JsonEncodedText? stringBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public StyleEntity(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.stringBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public StyleEntity(string value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public StyleEntity(JsonEncodedText value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public StyleEntity(ReadOnlySpan<char> value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                /// </summary>
                /// <param name = "value">A string value.</param>
                public StyleEntity(ReadOnlySpan<byte> value)
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = JsonEncodedText.Encode(value);
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "StyleEntity"/> struct.
                /// </summary>
                /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
                public StyleEntity(JsonString jsonString)
                {
                    if (jsonString.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonString.AsJsonElement;
                        this.stringBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.stringBacking = jsonString.GetJsonEncodedText();
                    }
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.stringBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return JsonString.StringToJsonElement(stringBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText)
                        {
                            return JsonValueKind.String;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return new JsonAny(stringBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        if (this.stringBacking is JsonEncodedText stringBacking)
                        {
                            return new JsonString(stringBacking);
                        }

                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator StyleEntity(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new StyleEntity(value.AsJsonElement);
                    }

                    return value.As<StyleEntity>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(StyleEntity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator StyleEntity(string value)
                {
                    return new StyleEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator string (StyleEntity value)
                {
                    return value.AsString.GetString();
                }

                /// <summary>
                /// Conversion from <see cref = "JsonEncodedText"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator StyleEntity(JsonEncodedText value)
                {
                    return new StyleEntity(value);
                }

                /// <summary>
                /// Conversion to <see cref = "JsonEncodedText"/>.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator JsonEncodedText(StyleEntity value)
                {
                    return value.AsString.GetJsonEncodedText();
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator StyleEntity(ReadOnlySpan<char> value)
                {
                    return new StyleEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator ReadOnlySpan<char>(StyleEntity value)
                {
                    return value.AsString.AsSpan();
                }

                /// <summary>
                /// Conversion from utf8 bytes.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator StyleEntity(ReadOnlySpan<byte> value)
                {
                    return new StyleEntity(value);
                }

                /// <summary>
                /// Conversion to utf8 bytes.
                /// </summary>
                /// <param name = "value">The number from which to convert.</param>
                public static implicit operator ReadOnlySpan<byte>(StyleEntity value)
                {
                    return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
                }

                /// <summary>
                /// Conversion from string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator StyleEntity(JsonString value)
                {
                    return new StyleEntity(value);
                }

                /// <summary>
                /// Conversion to string.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonString(StyleEntity value)
                {
                    return value.AsString;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.stringBacking is JsonEncodedText stringBacking)
                    {
                        writer.WriteStringValue(stringBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(StyleEntity other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<StyleEntity, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    result = Menes.Json.Validate.ValidateEnum(this, result, level, EnumValues.Item0, EnumValues.Item1, EnumValues.Item2, EnumValues.Item3);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                /// <summary>
                /// Permitted values.
                /// </summary>
                public static class EnumValues
                {
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly StyleEntity Form = JsonAny.Parse("\"form\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly StyleEntity SpaceDelimited = JsonAny.Parse("\"spaceDelimited\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly StyleEntity PipeDelimited = JsonAny.Parse("\"pipeDelimited\"");
                    /// <summary>
                    /// enumValue.AsPropertyName.
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    public static readonly StyleEntity DeepObject = JsonAny.Parse("\"deepObject\"");
                    /// <summary>
                    /// [{Title} || Item 0] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly StyleEntity Item0 = JsonAny.Parse("\"form\"");
                    /// <summary>
                    /// [{Title} || Item 1] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly StyleEntity Item1 = JsonAny.Parse("\"spaceDelimited\"");
                    /// <summary>
                    /// [{Title} || Item 2] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly StyleEntity Item2 = JsonAny.Parse("\"pipeDelimited\"");
                    /// <summary>
                    /// [{Title} || Item 3] (with predictable naming).
                    /// </summary>
                    /// <remarks>
                    /// {Description}.
                    /// </remarks>
                    internal static readonly StyleEntity Item3 = JsonAny.Parse("\"deepObject\"");
                }
            }

            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly struct AllowReservedValue : IJsonValue, IEquatable<AllowReservedValue>
            {
                private readonly JsonElement jsonElementBacking;
                private readonly bool? booleanBacking;
                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                /// </summary>
                /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
                public AllowReservedValue(JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.booleanBacking = default;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                /// </summary>
                /// <param name = "jsonBoolean">The <see cref = "JsonBoolean"/> from which to construct the value.</param>
                public AllowReservedValue(JsonBoolean jsonBoolean)
                {
                    if (jsonBoolean.HasJsonElement)
                    {
                        this.jsonElementBacking = jsonBoolean.AsJsonElement;
                        this.booleanBacking = default;
                    }
                    else
                    {
                        this.jsonElementBacking = default;
                        this.booleanBacking = jsonBoolean.GetBoolean();
                    }
                }

                /// <summary>
                /// Initializes a new instance of the <see cref = "AllowReservedValue"/> struct.
                /// </summary>
                /// <param name = "boolean">The <see cref = "bool "/> from which to construct the value.</param>
                public AllowReservedValue(bool boolean)
                {
                    this.jsonElementBacking = default;
                    this.booleanBacking = boolean;
                }

                /// <summary>
                /// Gets a value indicating whether this is backed by a JSON element.
                /// </summary>
                public bool HasJsonElement => this.booleanBacking is null;
                /// <summary>
                /// Gets the value as a JsonElement.
                /// </summary>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return JsonBoolean.BoolToJsonElement(booleanBacking);
                        }

                        return this.jsonElementBacking;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return booleanBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        return this.jsonElementBacking.ValueKind;
                    }
                }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonAny(booleanBacking);
                        }

                        return new JsonAny(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonObject"/>.
                /// </summary>
                public JsonObject AsObject
                {
                    get
                    {
                        return new JsonObject(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonArray"/>.
                /// </summary>
                public JsonArray AsArray
                {
                    get
                    {
                        return new JsonArray(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNumber"/>.
                /// </summary>
                public JsonNumber AsNumber
                {
                    get
                    {
                        return new JsonNumber(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonString"/>.
                /// </summary>
                public JsonString AsString
                {
                    get
                    {
                        return new JsonString(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonBoolean"/>.
                /// </summary>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if (this.booleanBacking is bool booleanBacking)
                        {
                            return new JsonBoolean(booleanBacking);
                        }

                        return new JsonBoolean(this.jsonElementBacking);
                    }
                }

                /// <summary>
                /// Gets the value as a <see cref = "JsonNull"/>.
                /// </summary>
                public JsonNull AsNull
                {
                    get
                    {
                        return default;
                    }
                }

                /// <summary>
                /// Conversion from any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowReservedValue(JsonAny value)
                {
                    if (value.HasJsonElement)
                    {
                        return new AllowReservedValue(value.AsJsonElement);
                    }

                    return value.As<AllowReservedValue>();
                }

                /// <summary>
                /// Conversion to any.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonAny(AllowReservedValue value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowReservedValue(bool value)
                {
                    return new AllowReservedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator bool (AllowReservedValue boolean)
                {
                    return boolean.AsBoolean.GetBoolean();
                }

                /// <summary>
                /// Conversion from bool.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AllowReservedValue(JsonBoolean value)
                {
                    return new AllowReservedValue(value);
                }

                /// <summary>
                /// Conversion to bool.
                /// </summary>
                /// <param name = "boolean">The value from which to convert.</param>
                public static implicit operator JsonBoolean(AllowReservedValue boolean)
                {
                    return boolean.AsBoolean;
                }

                /// <summary>
                /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
                /// </summary>
                /// <param name = "writer">The writer to which to write the object.</param>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if (this.booleanBacking is bool booleanBacking)
                    {
                        writer.WriteBooleanValue(booleanBacking);
                        return;
                    }

                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                    {
                        this.jsonElementBacking.WriteTo(writer);
                        return;
                    }

                    writer.WriteNullValue();
                }

                /// <inheritdoc/>
                public bool Equals<T>(T other)
                    where T : struct, IJsonValue
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject()), JsonValueKind.Array => this.AsArray.Equals(other.AsArray()), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()), JsonValueKind.String => this.AsString.Equals(other.AsString()), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public bool Equals(AllowReservedValue other)
                {
                    JsonValueKind valueKind = this.ValueKind;
                    if (other.ValueKind != valueKind)
                    {
                        return false;
                    }

                    return valueKind switch
                    {
                    JsonValueKind.Object => this.AsObject.Equals(other.AsObject), JsonValueKind.Array => this.AsArray.Equals(other.AsArray), JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber), JsonValueKind.String => this.AsString.Equals(other.AsString), JsonValueKind.Null => true, JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean), _ => false, }

                    ;
                }

                /// <inheritdoc/>
                public T As<T>()
                    where T : struct, IJsonValue
                {
                    return this.As<AllowReservedValue, T>();
                }

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext ?? ValidationContext.ValidContext;
                    if (level != ValidationLevel.Flag)
                    {
                        result = result.UsingStack();
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    return result;
                }

                private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
                    if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultBoolean.IsValid)
                    {
                        isValid = true;
                    }

                    result = result.MergeResults(isValid, level, localResultBoolean);
                    return result;
                }
            }
        }
    }
}