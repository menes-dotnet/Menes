//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Menes.Json;
using System;
using System.Collections.Generic;

#pragma warning disable

public partial class SchemaEntity : SchemaEntityBase {
    
    public virtual string TransformText() {
        this.GenerationEnvironment = null;
        
        #line 4 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5 "SchemaEntity.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 9 "SchemaEntity.tt"
        this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace ");
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            Namespace ));
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity.tt"
        this.Write("\r\n{\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.C" +
                "ollections.Immutable;\r\n    using System.Text.Json;\r\n    using System.Text.Regula" +
                "rExpressions;\r\n    using Menes.Json;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 29 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 32 "SchemaEntity.tt"
        this.Write("    /// <summary>\r\n    /// A type generated from a JsonSchema specification.\r\n   " +
                " /// </summary>\r\n    public readonly struct ");
        
        #line default
        #line hidden
        
        #line 35 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 35 "SchemaEntity.tt"
        this.Write(" :\r\n    ");
        
        #line default
        #line hidden
        
        #line 36 "SchemaEntity.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 40 "SchemaEntity.tt"
        this.Write("        IJsonObject<");
        
        #line default
        #line hidden
        
        #line 40 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 40 "SchemaEntity.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 41 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 44 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 44 "SchemaEntity.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 48 "SchemaEntity.tt"
        this.Write("        IJsonArray<");
        
        #line default
        #line hidden
        
        #line 48 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 48 "SchemaEntity.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 49 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 52 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 52 "SchemaEntity.tt"

    if(!IsImplicitObject && !IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 56 "SchemaEntity.tt"
        this.Write("        IJsonValue,\r\n    ");
        
        #line default
        #line hidden
        
        #line 57 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 60 "SchemaEntity.tt"
        this.Write("        IEquatable<");
        
        #line default
        #line hidden
        
        #line 60 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 60 "SchemaEntity.tt"
        this.Write(">\r\n    {\r\n    ");
        
        #line default
        #line hidden
        
        #line 62 "SchemaEntity.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 66 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 67 "SchemaEntity.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 71 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// JSON property name for <see cref=\"");
        
        #line default
        #line hidden
        
        #line 73 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 73 "SchemaEntity.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static readonly JsonEncodedText ");
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity.tt"
        this.Write("JsonPropertyName = JsonEncodedText.Encode( new byte[] { ");
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                GetEncodedBytes(property.JsonPropertyName) ));
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity.tt"
        this.Write(" });\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 77 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 80 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 81 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 84 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 85 "SchemaEntity.tt"

    if(HasConstString)
    {
    
        
        #line default
        #line hidden
        
        #line 89 "SchemaEntity.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 89 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 89 "SchemaEntity.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 89 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            ConstString ));
        
        #line default
        #line hidden
        
        #line 89 "SchemaEntity.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 90 "SchemaEntity.tt"

    }
    else if(HasConstBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            ConstBoolean ));
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 96 "SchemaEntity.tt"

    }
    else if(HasConstNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 101 "SchemaEntity.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 101 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 101 "SchemaEntity.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 101 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            ConstNumber ));
        
        #line default
        #line hidden
        
        #line 101 "SchemaEntity.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 102 "SchemaEntity.tt"

    }
    else if(HasConstObject)
    {
    
        
        #line default
        #line hidden
        
        #line 107 "SchemaEntity.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 107 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 107 "SchemaEntity.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 107 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            ConstObject ));
        
        #line default
        #line hidden
        
        #line 107 "SchemaEntity.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 108 "SchemaEntity.tt"

    }
    else if(HasConstArray)
    {
    
        
        #line default
        #line hidden
        
        #line 113 "SchemaEntity.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 113 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 113 "SchemaEntity.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 113 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            ConstArray ));
        
        #line default
        #line hidden
        
        #line 113 "SchemaEntity.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 114 "SchemaEntity.tt"

    }
    else if(HasConstNull)
    {
    
        
        #line default
        #line hidden
        
        #line 119 "SchemaEntity.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 119 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 119 "SchemaEntity.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(\"null\");\r\n    ");
        
        #line default
        #line hidden
        
        #line 120 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 123 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 124 "SchemaEntity.tt"


    if(HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity.tt"
        this.Write("        private static readonly Regex __MenesPatternExpression = new Regex(\"");
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            Pattern ));
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity.tt"
        this.Write("\", RegexOptions.Compiled);\r\n    ");
        
        #line default
        #line hidden
        
        #line 130 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 133 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 134 "SchemaEntity.tt"

    if(HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 138 "SchemaEntity.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, ImmutableArr" +
                "ay<ReadOnlyMemory<byte>>> __MenesDependentRequired = BuildDependentRequired();\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 139 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 142 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 143 "SchemaEntity.tt"

    if(HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 147 "SchemaEntity.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 147 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 147 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> __MenesDependentSchema " +
                "= CreateDependentSchemaValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 148 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 151 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 152 "SchemaEntity.tt"

    if(HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 156 "SchemaEntity.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 156 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 156 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties " +
                "= CreateLocalPropertyValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 157 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 160 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 161 "SchemaEntity.tt"

    if(HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 165 "SchemaEntity.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __M" +
                "enesDefaults = BuildDefaults();\r\n    ");
        
        #line default
        #line hidden
        
        #line 166 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 169 "SchemaEntity.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 171 "SchemaEntity.tt"

    if(HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 175 "SchemaEntity.tt"
        this.Write("        private static readonly ImmutableDictionary<Regex, Func<Property, Validat" +
                "ionContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = Crea" +
                "tePatternPropertiesValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 176 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 179 "SchemaEntity.tt"
        this.Write("\r\n        private readonly JsonElement jsonElementBacking;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 182 "SchemaEntity.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 186 "SchemaEntity.tt"
        this.Write("        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBac" +
                "king;\r\n    ");
        
        #line default
        #line hidden
        
        #line 187 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 190 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 191 "SchemaEntity.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 195 "SchemaEntity.tt"
        this.Write("        private readonly ImmutableList<JsonAny>? arrayBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 196 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 199 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 200 "SchemaEntity.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 204 "SchemaEntity.tt"
        this.Write("        private readonly double? numberBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 205 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 208 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 209 "SchemaEntity.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 213 "SchemaEntity.tt"
        this.Write("        private readonly JsonEncodedText? stringBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 214 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 217 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 218 "SchemaEntity.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 222 "SchemaEntity.tt"
        this.Write("        private readonly bool? booleanBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 223 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 226 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Initializes a new instance of the <see cref=" +
                "\"");
        
        #line default
        #line hidden
        
        #line 228 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 228 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">The backing " +
                "<see cref=\"JsonElement\"/>.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 231 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 231 "SchemaEntity.tt"
        this.Write("(JsonElement value)\r\n        {\r\n            this.jsonElementBacking = value;\r\n   " +
                " ");
        
        #line default
        #line hidden
        
        #line 234 "SchemaEntity.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 238 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n            /* endif */\r\n    ");
        
        #line default
        #line hidden
        
        #line 240 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 243 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 243 "SchemaEntity.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 247 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 248 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 251 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 251 "SchemaEntity.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 255 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 256 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 259 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 259 "SchemaEntity.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 263 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 264 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 267 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 267 "SchemaEntity.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 271 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 272 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 275 "SchemaEntity.tt"
        this.Write("        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 277 "SchemaEntity.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 281 "SchemaEntity.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 282 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 282 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A property d" +
                "ictionary.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 285 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 285 "SchemaEntity.tt"
        this.Write("(ImmutableDictionary<JsonEncodedText, JsonAny> value)\r\n        {\r\n            thi" +
                "s.jsonElementBacking = default;\r\n            this.objectBacking = value;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 289 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 293 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 294 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 297 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 297 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 301 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 302 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 305 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 305 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 309 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 310 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 313 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 313 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 317 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 318 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 321 "SchemaEntity.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 324 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 324 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonObject\">The <se" +
                "e cref=\"JsonObject\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 327 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 327 "SchemaEntity.tt"
        this.Write(@"(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

        ");
        
        #line default
        #line hidden
        
        #line 340 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 344 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 345 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 348 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 348 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 352 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 353 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 356 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 356 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 360 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 361 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 364 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 364 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 368 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 369 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 372 "SchemaEntity.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 373 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 376 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 377 "SchemaEntity.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 381 "SchemaEntity.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 382 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 382 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">An array lis" +
                "t.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 385 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 385 "SchemaEntity.tt"
        this.Write("(ImmutableList<JsonAny> value)\r\n        {\r\n            this.jsonElementBacking = " +
                "default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 388 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 392 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 393 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 396 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 396 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 400 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 401 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 404 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 404 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 408 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 409 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 412 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 412 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 416 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 417 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 420 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n     " +
                "   /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 424 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 424 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonArray\">The <see" +
                " cref=\"JsonArray\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 427 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 427 "SchemaEntity.tt"
        this.Write(@"(JsonArray jsonArray)
        {
            if (jsonArray.HasJsonElement)
            {
                this.jsonElementBacking = jsonArray.AsJsonElement;
                this.arrayBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.arrayBacking = jsonArray.AsItemsList;
            }

        ");
        
        #line default
        #line hidden
        
        #line 440 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 444 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 445 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 448 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 448 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 452 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 453 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 456 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 456 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 460 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 461 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 464 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 464 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 468 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 469 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 472 "SchemaEntity.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 473 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 476 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 477 "SchemaEntity.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 481 "SchemaEntity.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 482 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 482 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonNumber\">The <se" +
                "e cref=\"JsonNumber\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 485 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 485 "SchemaEntity.tt"
        this.Write(@"(JsonNumber jsonNumber)
        {
            if (jsonNumber.HasJsonElement)
            {
                this.jsonElementBacking = jsonNumber.AsJsonElement;
                this.numberBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.numberBacking = jsonNumber.GetDouble();
            }
        ");
        
        #line default
        #line hidden
        
        #line 497 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 501 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 502 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 505 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 505 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 509 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 510 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 513 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 513 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 517 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 518 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 521 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 521 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 525 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 526 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 529 "SchemaEntity.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 532 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 532 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 535 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 535 "SchemaEntity.tt"
        this.Write("(double value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 538 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 542 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 543 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 546 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 546 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 550 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 551 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 554 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 554 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 558 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 559 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 562 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 562 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 566 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 567 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 570 "SchemaEntity.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 574 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 574 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 577 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 577 "SchemaEntity.tt"
        this.Write("(int value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 580 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 584 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 585 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 588 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 588 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 592 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 593 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 596 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 596 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 600 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 601 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 604 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 604 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 608 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 609 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 612 "SchemaEntity.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 616 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 616 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 619 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 619 "SchemaEntity.tt"
        this.Write("(float value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 622 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 626 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 627 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 630 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 630 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 634 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 635 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 638 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 638 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 642 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 643 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 646 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 646 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 650 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 651 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 654 "SchemaEntity.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 658 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 658 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 661 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 661 "SchemaEntity.tt"
        this.Write("(long value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        " +
                "");
        
        #line default
        #line hidden
        
        #line 664 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 668 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 669 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 672 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 672 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 676 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 677 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 680 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 680 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 684 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 685 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 688 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 688 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 692 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 693 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 696 "SchemaEntity.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 698 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 701 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 702 "SchemaEntity.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 706 "SchemaEntity.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 707 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 707 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 710 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 710 "SchemaEntity.tt"
        this.Write("(string value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 713 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 717 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 718 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 721 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 721 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 725 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 726 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 729 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 729 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 733 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 734 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 737 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 737 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 741 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 742 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 745 "SchemaEntity.tt"
        this.Write("            this.stringBacking = JsonEncodedText.Encode(value);\r\n        }\r\n\r\n   " +
                "     /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 749 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 749 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 752 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 752 "SchemaEntity.tt"
        this.Write("(JsonEncodedText value)\r\n        {\r\n            this.jsonElementBacking = default" +
                ";\r\n        ");
        
        #line default
        #line hidden
        
        #line 755 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 759 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 760 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 763 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 763 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 767 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 768 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 771 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 771 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 775 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 776 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 779 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 779 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 783 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 784 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 787 "SchemaEntity.tt"
        this.Write("            this.stringBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 791 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 791 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 794 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 794 "SchemaEntity.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 797 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 801 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 802 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 805 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 805 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 809 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 810 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 813 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 813 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 817 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 818 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 821 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 821 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 825 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 826 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 829 "SchemaEntity.tt"
        this.Write("            this.stringBacking = JsonEncodedText.Encode(value);\r\n        }\r\n\r\n   " +
                "     /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 833 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 833 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 836 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 836 "SchemaEntity.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 839 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 843 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 844 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 847 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 847 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 851 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 852 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 855 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 855 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 859 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 860 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 863 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 863 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 867 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 868 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 871 "SchemaEntity.tt"
        this.Write("            this.stringBacking = JsonEncodedText.Encode(value);\r\n        }\r\n\r\n   " +
                "     /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 875 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 875 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonString\">The <se" +
                "e cref=\"JsonString\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 878 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 878 "SchemaEntity.tt"
        this.Write(@"(JsonString jsonString)
        {
            if (jsonString.HasJsonElement)
            {
                this.jsonElementBacking = jsonString.AsJsonElement;
                this.stringBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.stringBacking = jsonString.GetJsonEncodedText();
            }

        ");
        
        #line default
        #line hidden
        
        #line 891 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 895 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 896 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 899 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 899 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 903 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 904 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 907 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 907 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 911 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 912 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 915 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 915 "SchemaEntity.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 919 "SchemaEntity.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 920 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 923 "SchemaEntity.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 924 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 927 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 928 "SchemaEntity.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 932 "SchemaEntity.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 933 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 933 "SchemaEntity.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonBoolean\">The <s" +
                "ee cref=\"JsonBoolean\"/> from which to construct the value.</param>\r\n        publ" +
                "ic ");
        
        #line default
        #line hidden
        
        #line 936 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 936 "SchemaEntity.tt"
        this.Write(@"(JsonBoolean jsonBoolean)
        {
            if (jsonBoolean.HasJsonElement)
            {
                this.jsonElementBacking = jsonBoolean.AsJsonElement;
                this.booleanBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.booleanBacking = jsonBoolean.GetBoolean();
            }

        ");
        
        #line default
        #line hidden
        
        #line 949 "SchemaEntity.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 953 "SchemaEntity.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 954 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 957 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 957 "SchemaEntity.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 961 "SchemaEntity.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 962 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 965 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 965 "SchemaEntity.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 969 "SchemaEntity.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 970 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 973 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 973 "SchemaEntity.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 977 "SchemaEntity.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 978 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 981 "SchemaEntity.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 982 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 985 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 986 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 990 "SchemaEntity.tt"
        this.Write(@"        /// <inheritdoc/>
        public int Length
        {
            get
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return items.Count;
                }

                return this.jsonElementBacking.GetArrayLength();
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 1003 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1006 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1007 "SchemaEntity.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 1011 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1011 "SchemaEntity.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 1015 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Gets ");
        
        #line default
        #line hidden
        
        #line 1017 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1017 "SchemaEntity.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// {Property title}.\r\n" +
                "        /// {Property description}.\r\n        /// </remarks>\r\n        /// <exampl" +
                "e>\r\n        /// {Property examples}.\r\n        /// </example>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1026 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1026 "SchemaEntity.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 1026 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1026 "SchemaEntity.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                if (this.TryGetPrope" +
                "rty(");
        
        #line default
        #line hidden
        
        #line 1030 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1030 "SchemaEntity.tt"
        this.Write("JsonPropertyName, out JsonAny result))\r\n                {\r\n                    re" +
                "turn result;\r\n                }\r\n\r\n                return default;\r\n            " +
                "}\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1039 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1042 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1042 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1045 "SchemaEntity.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this is backed" +
                " by a JSON element.\r\n        /// </summary>\r\n        public bool HasJsonElement " +
                "=>\r\n    ");
        
        #line default
        #line hidden
        
        #line 1049 "SchemaEntity.tt"

    bool isFirstProperty = true;
    
        
        #line default
        #line hidden
        
        #line 1052 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1053 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1057 "SchemaEntity.tt"
        this.Write("            this.objectBacking is null\r\n            \r\n    ");
        
        #line default
        #line hidden
        
        #line 1059 "SchemaEntity.tt"

        isFirstProperty = false;
    }
    
        
        #line default
        #line hidden
        
        #line 1063 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1064 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1068 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1068 "SchemaEntity.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1076 "SchemaEntity.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1077 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1080 "SchemaEntity.tt"
        this.Write("            this.arrayBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1081 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1084 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1084 "SchemaEntity.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1088 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1088 "SchemaEntity.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1096 "SchemaEntity.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1097 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1100 "SchemaEntity.tt"
        this.Write("            this.numberBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1101 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1104 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1104 "SchemaEntity.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1108 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1108 "SchemaEntity.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1116 "SchemaEntity.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1117 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1120 "SchemaEntity.tt"
        this.Write("            this.stringBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1121 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1124 "SchemaEntity.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1124 "SchemaEntity.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1128 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1128 "SchemaEntity.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1136 "SchemaEntity.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1137 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1140 "SchemaEntity.tt"
        this.Write("            this.booleanBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1141 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1144 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1145 "SchemaEntity.tt"

    if (!IsImplicitObject && !IsImplicitArray && !IsImplicitNumber && !IsImplicitBoolean && !IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1149 "SchemaEntity.tt"
        this.Write("    true\r\n    ");
        
        #line default
        #line hidden
        
        #line 1150 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1153 "SchemaEntity.tt"
        this.Write("            ;\r\n\r\n        /// <summary>\r\n        /// Gets the value as a JsonEleme" +
                "nt.\r\n        /// </summary>\r\n        public JsonElement AsJsonElement\r\n        {" +
                "\r\n            get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1162 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1166 "SchemaEntity.tt"
        this.Write("          \r\n                if (this.objectBacking is ImmutableDictionary<JsonEnc" +
                "odedText, JsonAny> objectBacking)\r\n                {\r\n                    return" +
                " JsonObject.PropertiesToJsonElement(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1172 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1175 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1176 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1180 "SchemaEntity.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return JsonArray.ItemsToJsonElement(arrayBa" +
                "cking);\r\n                }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1184 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1187 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1188 "SchemaEntity.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1192 "SchemaEntity.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return JsonNumber.NumberToJsonElement(numberBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1197 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1200 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1201 "SchemaEntity.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1205 "SchemaEntity.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText stringBacking)\r\n       " +
                "         {\r\n                    return JsonString.StringToJsonElement(stringBack" +
                "ing);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1210 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1213 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1214 "SchemaEntity.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1218 "SchemaEntity.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return JsonBoolean.BoolToJsonElement(booleanBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1226 "SchemaEntity.tt"
        this.Write("\r\n                return this.jsonElementBacking;\r\n            }\r\n        }\r\n\r\n  " +
                "      /// <inheritdoc/>\r\n        public JsonValueKind ValueKind\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1236 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1240 "SchemaEntity.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, Js" +
                "onAny>)\r\n                {\r\n                    return JsonValueKind.Object;\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1245 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1248 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1249 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1253 "SchemaEntity.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny>)\r\n               " +
                " {\r\n                    return JsonValueKind.Array;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1258 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1261 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1262 "SchemaEntity.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1266 "SchemaEntity.tt"
        this.Write("                if (this.numberBacking is double)\r\n                {\r\n           " +
                "         return JsonValueKind.Number;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1271 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1274 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1275 "SchemaEntity.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1279 "SchemaEntity.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText)\r\n                {\r\n  " +
                "                  return JsonValueKind.String;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1284 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1287 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1288 "SchemaEntity.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1292 "SchemaEntity.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return booleanBacking ? JsonValueKind.True : JsonValueKin" +
                "d.False;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1297 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1300 "SchemaEntity.tt"
        this.Write("\r\n                return this.jsonElementBacking.ValueKind;\r\n            }\r\n     " +
                "   }\r\n\r\n        /// <inheritdoc/>\r\n        public JsonAny AsAny\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1310 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1314 "SchemaEntity.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, Js" +
                "onAny> objectBacking)\r\n                {\r\n                    return new JsonAny" +
                "(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1319 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1322 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1323 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1327 "SchemaEntity.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return new JsonAny(arrayBacking);\r\n        " +
                "        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1332 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1335 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1336 "SchemaEntity.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1340 "SchemaEntity.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return new JsonAny(numberBacking);\r\n                }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 1345 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1348 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1349 "SchemaEntity.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1353 "SchemaEntity.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText stringBacking)\r\n       " +
                "         {\r\n                    return new JsonAny(stringBacking);\r\n            " +
                "    }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1358 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1361 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1362 "SchemaEntity.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1366 "SchemaEntity.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return new JsonAny(booleanBacking);\r\n                }\r\n\r" +
                "\n    ");
        
        #line default
        #line hidden
        
        #line 1371 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1374 "SchemaEntity.tt"
        this.Write(@"
                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonObject""/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1386 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1390 "SchemaEntity.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, Js" +
                "onAny> objectBacking)\r\n                {\r\n                    return new JsonObj" +
                "ect(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1395 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1398 "SchemaEntity.tt"
        this.Write(@"
                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonArray""/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1410 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1414 "SchemaEntity.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return new JsonArray(arrayBacking);\r\n      " +
                "          }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1419 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1422 "SchemaEntity.tt"
        this.Write(@"
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonNumber""/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1434 "SchemaEntity.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1438 "SchemaEntity.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return new JsonNumber(numberBacking);\r\n                }\r" +
                "\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1443 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1446 "SchemaEntity.tt"
        this.Write(@"                return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonString""/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1457 "SchemaEntity.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1461 "SchemaEntity.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText stringBacking)\r\n       " +
                "         {\r\n                    return new JsonString(stringBacking);\r\n         " +
                "       }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1466 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1469 "SchemaEntity.tt"
        this.Write(@"                return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonBoolean""/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1480 "SchemaEntity.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1484 "SchemaEntity.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return new JsonBoolean(booleanBacking);\r\n                " +
                "}\r\n    ");
        
        #line default
        #line hidden
        
        #line 1488 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1491 "SchemaEntity.tt"
        this.Write(@"                return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonNull""/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1510 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1510 "SchemaEntity.tt"
        this.Write("(JsonAny value)\r\n        {\r\n            if (value.HasJsonElement)\r\n            {\r" +
                "\n                return new ");
        
        #line default
        #line hidden
        
        #line 1514 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1514 "SchemaEntity.tt"
        this.Write("(value.AsJsonElement);\r\n            }\r\n\r\n            return value.As<");
        
        #line default
        #line hidden
        
        #line 1517 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1517 "SchemaEntity.tt"
        this.Write(">();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to any.\r\n       " +
                " /// </summary>\r\n        /// <param name=\"value\">The value from which to convert" +
                ".</param>\r\n        public static implicit operator JsonAny(");
        
        #line default
        #line hidden
        
        #line 1524 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1524 "SchemaEntity.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsAny;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1529 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1533 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from array.\r\n        /// </summar" +
                "y>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n  " +
                "      public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1538 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1538 "SchemaEntity.tt"
        this.Write("(JsonArray value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1540 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1540 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to array.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"value\">The value from which to c" +
                "onvert.</param>\r\n        public static implicit operator JsonArray(");
        
        #line default
        #line hidden
        
        #line 1547 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1547 "SchemaEntity.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsArray;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1552 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1555 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1556 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1560 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from object.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1565 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1565 "SchemaEntity.tt"
        this.Write("(JsonObject value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1567 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1567 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to object.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonObject(");
        
        #line default
        #line hidden
        
        #line 1574 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1574 "SchemaEntity.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsObject;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1579 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1582 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1583 "SchemaEntity.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1587 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from string.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1592 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1592 "SchemaEntity.tt"
        this.Write("(string value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1594 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1594 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator string(");
        
        #line default
        #line hidden
        
        #line 1601 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1601 "SchemaEntity.tt"
        this.Write(@" value)
        {
            return value.AsString.GetString();
        }

        /// <summary>
        /// Conversion from <see cref=""JsonEncodedText""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1610 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1610 "SchemaEntity.tt"
        this.Write("(JsonEncodedText value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1612 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1612 "SchemaEntity.tt"
        this.Write(@"(value);
        }

        /// <summary>
        /// Conversion to <see cref=""JsonEncodedText""/>.
        /// </summary>
        /// <param name=""value"">The number from which to convert.</param>
        public static implicit operator JsonEncodedText(");
        
        #line default
        #line hidden
        
        #line 1619 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1619 "SchemaEntity.tt"
        this.Write(@" value)
        {
            return value.AsString.GetJsonEncodedText();
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1628 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1628 "SchemaEntity.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1630 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1630 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator ReadOnlySpan<char>(");
        
        #line default
        #line hidden
        
        #line 1637 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1637 "SchemaEntity.tt"
        this.Write(@" value)
        {
            return value.AsString.AsSpan();
        }

        /// <summary>
        /// Conversion from utf8 bytes.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1646 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1646 "SchemaEntity.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1648 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1648 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to utf8 byte" +
                "s.\r\n        /// </summary>\r\n        /// <param name=\"value\">The number from whic" +
                "h to convert.</param>\r\n        public static implicit operator ReadOnlySpan<byte" +
                ">(");
        
        #line default
        #line hidden
        
        #line 1655 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1655 "SchemaEntity.tt"
        this.Write(@" value)
        {
            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1664 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1664 "SchemaEntity.tt"
        this.Write("(JsonString value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1666 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1666 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonString(");
        
        #line default
        #line hidden
        
        #line 1673 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1673 "SchemaEntity.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsString;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1678 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1681 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1682 "SchemaEntity.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1686 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from double.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1691 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1691 "SchemaEntity.tt"
        this.Write("(double value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1693 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1693 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to double.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The number from which t" +
                "o convert.</param>\r\n        public static implicit operator double(");
        
        #line default
        #line hidden
        
        #line 1700 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1700 "SchemaEntity.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetDouble();
        }

        /// <summary>
        /// Conversion from float.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1709 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1709 "SchemaEntity.tt"
        this.Write("(float value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1711 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1711 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to float.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"number\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator float(");
        
        #line default
        #line hidden
        
        #line 1718 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1718 "SchemaEntity.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetSingle();
        }

        /// <summary>
        /// Conversion from long.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1727 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1727 "SchemaEntity.tt"
        this.Write("(long value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1729 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1729 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to long.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"number\">The number from which to " +
                "convert.</param>\r\n        public static implicit operator long(");
        
        #line default
        #line hidden
        
        #line 1736 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1736 "SchemaEntity.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt64();
        }

        /// <summary>
        /// Conversion from int.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1745 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1745 "SchemaEntity.tt"
        this.Write("(int value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1747 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1747 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to int.\r\n   " +
                "     /// </summary>\r\n        /// <param name=\"number\">The number from which to c" +
                "onvert.</param>\r\n        public static implicit operator int(");
        
        #line default
        #line hidden
        
        #line 1754 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1754 "SchemaEntity.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt32();
        }

        /// <summary>
        /// Conversion from number.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1763 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1763 "SchemaEntity.tt"
        this.Write("(JsonNumber value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1765 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1765 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to number.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The value from which to" +
                " convert.</param>\r\n        public static implicit operator JsonNumber(");
        
        #line default
        #line hidden
        
        #line 1772 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1772 "SchemaEntity.tt"
        this.Write(" number)\r\n        {\r\n            return number.AsNumber;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1777 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1780 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1781 "SchemaEntity.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1785 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from bool.\r\n        /// </summary" +
                ">\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n   " +
                "     public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1790 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1790 "SchemaEntity.tt"
        this.Write("(bool value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1792 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1792 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator bool(");
        
        #line default
        #line hidden
        
        #line 1799 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1799 "SchemaEntity.tt"
        this.Write(@" boolean)
        {
            return boolean.AsBoolean.GetBoolean();
        }

        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1808 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1808 "SchemaEntity.tt"
        this.Write("(JsonBoolean value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1810 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1810 "SchemaEntity.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonBoolean(");
        
        #line default
        #line hidden
        
        #line 1817 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1817 "SchemaEntity.tt"
        this.Write(" boolean)\r\n        {\r\n            return boolean.AsBoolean;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1822 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1825 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1826 "SchemaEntity.tt"

    if (HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 1830 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1831 "SchemaEntity.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 1835 "SchemaEntity.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Sets ");
        
        #line default
        #line hidden
        
        #line 1837 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 1837 "SchemaEntity.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to set.</par" +
                "am>\r\n        /// <returns>The entity with the updated property.</returns>\r\n     " +
                "   public ");
        
        #line default
        #line hidden
        
        #line 1841 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1841 "SchemaEntity.tt"
        this.Write(" With");
        
        #line default
        #line hidden
        
        #line 1841 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1841 "SchemaEntity.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1841 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1841 "SchemaEntity.tt"
        this.Write(" value)\r\n        {\r\n            return this.SetProperty(");
        
        #line default
        #line hidden
        
        #line 1843 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1843 "SchemaEntity.tt"
        this.Write("JsonPropertyName, value);\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1846 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1849 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1850 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1853 "SchemaEntity.tt"
        this.Write(@"
        /// <summary>
        /// Writes the object to the <see cref=""Utf8JsonWriter""/>.
        /// </summary>
        /// <param name=""writer"">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
    ");
        
        #line default
        #line hidden
        
        #line 1860 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1864 "SchemaEntity.tt"
        this.Write("            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAn" +
                "y> objectBacking)\r\n            {\r\n                JsonObject.WriteProperties(obj" +
                "ectBacking, writer);\r\n                return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1870 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1873 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1874 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1878 "SchemaEntity.tt"
        this.Write("            if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n      " +
                "      {\r\n                JsonArray.WriteItems(arrayBacking, writer);\r\n          " +
                "      return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1884 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1887 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1888 "SchemaEntity.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1892 "SchemaEntity.tt"
        this.Write("            if (this.numberBacking is double numberBacking)\r\n            {\r\n     " +
                "           writer.WriteNumberValue(numberBacking);\r\n                return;\r\n   " +
                "         }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1898 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1901 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1902 "SchemaEntity.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1906 "SchemaEntity.tt"
        this.Write("            if (this.stringBacking is JsonEncodedText stringBacking)\r\n           " +
                " {\r\n                writer.WriteStringValue(stringBacking);\r\n                ret" +
                "urn;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1912 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1915 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1920 "SchemaEntity.tt"
        this.Write("            if (this.booleanBacking is bool booleanBacking)\r\n            {\r\n     " +
                "           writer.WriteBooleanValue(booleanBacking);\r\n                return;\r\n " +
                "           }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1928 "SchemaEntity.tt"
        this.Write("\r\n            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)\r\n" +
                "            {\r\n                this.jsonElementBacking.WriteTo(writer);\r\n       " +
                "         return;\r\n            }\r\n\r\n            writer.WriteNullValue();\r\n       " +
                " }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1938 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1942 "SchemaEntity.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public JsonObjectEnumerator EnumerateObject(" +
                ")\r\n        {\r\n            return this.AsObject.EnumerateObject();\r\n        }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 1949 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1952 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1953 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1957 "SchemaEntity.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public JsonArrayEnumerator EnumerateArray()\r" +
                "\n        {\r\n            return this.AsArray.EnumerateArray();\r\n        }\r\n\r\n    " +
                "");
        
        #line default
        #line hidden
        
        #line 1964 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1967 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1968 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1972 "SchemaEntity.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        ");
        
        #line default
        #line hidden
        
        #line 1997 "SchemaEntity.tt"

        if (HasDefaults)
        {
        
        
        #line default
        #line hidden
        
        #line 2001 "SchemaEntity.tt"
        this.Write("        /// <inheritdoc/>\r\n        public bool TryGetDefault(JsonEncodedText name" +
                ", out JsonAny value)\r\n        {\r\n            return __MenesDefaults.TryGetValue(" +
                "name, out value);\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool T" +
                "ryGetDefault(string name, out JsonAny value)\r\n        {\r\n            return __Me" +
                "nesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);\r\n        }\r\n\r\n" +
                "        /// <inheritdoc/>\r\n        public bool TryGetDefault(ReadOnlySpan<char> " +
                "name, out JsonAny value)\r\n        {\r\n            return __MenesDefaults.TryGetVa" +
                "lue(JsonEncodedText.Encode(name), out value);\r\n        }\r\n\r\n        /// <inherit" +
                "doc/>\r\n        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAn" +
                "y value)\r\n        {\r\n            return __MenesDefaults.TryGetValue(JsonEncodedT" +
                "ext.Encode(utf8name), out value);\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n     " +
                "   public bool HasDefault(JsonEncodedText name)\r\n        {\r\n            return _" +
                "_MenesDefaults.TryGetValue(name, out _);\r\n        }\r\n\r\n        /// <inheritdoc/>" +
                "\r\n        public bool HasDefault(string name)\r\n        {\r\n            return __M" +
                "enesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);\r\n        }\r\n\r\n   " +
                "     /// <inheritdoc/>\r\n        public bool HasDefault(ReadOnlySpan<char> name)\r" +
                "\n        {\r\n            return __MenesDefaults.TryGetValue(JsonEncodedText.Encod" +
                "e(name), out _);\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool Ha" +
                "sDefault(ReadOnlySpan<byte> utf8name)\r\n        {\r\n            return __MenesDefa" +
                "ults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);\r\n        }\r\n\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 2049 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2052 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2053 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2056 "SchemaEntity.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(");
        
        #line default
        #line hidden
        
        #line 2081 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2081 "SchemaEntity.tt"
        this.Write(@" other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }

    ");
        
        #line default
        #line hidden
        
        #line 2102 "SchemaEntity.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2106 "SchemaEntity.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public bool HasProperty(JsonEncodedText name" +
                ")\r\n        {\r\n            if (this.objectBacking is ImmutableDictionary<JsonEnco" +
                "dedText, JsonAny> properties)\r\n            {\r\n                return properties." +
                "TryGetValue(name, out _);\r\n            }\r\n\r\n            if (this.jsonElementBack" +
                "ing.ValueKind == JsonValueKind.Object)\r\n            {\r\n                return th" +
                "is.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);\r\n     " +
                "       }\r\n\r\n            return false;\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n " +
                "       public bool HasProperty(string name)\r\n        {\r\n            if (this.obj" +
                "ectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)\r\n       " +
                "     {\r\n                return properties.TryGetValue(JsonEncodedText.Encode(nam" +
                "e), out _);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKind " +
                "== JsonValueKind.Object)\r\n            {\r\n                return this.jsonElement" +
                "Backing.TryGetProperty(name, out JsonElement _);\r\n            }\r\n\r\n            r" +
                "eturn false;\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool HasPro" +
                "perty(ReadOnlySpan<char> name)\r\n        {\r\n            if (this.objectBacking is" +
                " ImmutableDictionary<JsonEncodedText, JsonAny> properties)\r\n            {\r\n     " +
                "           return properties.TryGetValue(JsonEncodedText.Encode(name), out _);\r\n" +
                "            }\r\n\r\n            if (this.jsonElementBacking.ValueKind == JsonValueK" +
                "ind.Object)\r\n            {\r\n                return this.jsonElementBacking.TryGe" +
                "tProperty(name, out JsonElement _);\r\n            }\r\n\r\n            return false; " +
                "       }\r\n\r\n        /// <inheritdoc/>\r\n        public bool HasProperty(ReadOnlyS" +
                "pan<byte> utf8name)\r\n        {\r\n            if (this.objectBacking is ImmutableD" +
                "ictionary<JsonEncodedText, JsonAny> properties)\r\n            {\r\n                " +
                "return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);\r\n       " +
                "     }\r\n\r\n            if (this.jsonElementBacking.ValueKind == JsonValueKind.Obj" +
                "ect)\r\n            {\r\n                return this.jsonElementBacking.TryGetProper" +
                "ty(utf8name, out JsonElement _);\r\n            }\r\n\r\n            return false;    " +
                "    }\r\n\r\n        /// <inheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 2170 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2170 "SchemaEntity.tt"
        this.Write(@" SetProperty<TValue>(JsonEncodedText name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2182 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2182 "SchemaEntity.tt"
        this.Write(@" SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2194 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2194 "SchemaEntity.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2206 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2206 "SchemaEntity.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2218 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2218 "SchemaEntity.tt"
        this.Write(@" RemoveProperty(JsonEncodedText name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2229 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2229 "SchemaEntity.tt"
        this.Write(@" RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2240 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2240 "SchemaEntity.tt"
        this.Write(@" RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2251 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2251 "SchemaEntity.tt"
        this.Write(" RemoveProperty(ReadOnlySpan<byte> utf8Name)\r\n        {\r\n            if (this.Val" +
                "ueKind == JsonValueKind.Object)\r\n            {\r\n                return this.AsOb" +
                "ject.RemoveProperty(utf8Name);\r\n            }\r\n\r\n            return this;\r\n     " +
                "   }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2261 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2264 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2265 "SchemaEntity.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2269 "SchemaEntity.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 2271 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2271 "SchemaEntity.tt"
        this.Write(@" Add<TItem>(TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Add(item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2283 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2283 "SchemaEntity.tt"
        this.Write(@" Insert<TItem>(int index, TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Insert(index, item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2295 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2295 "SchemaEntity.tt"
        this.Write(@" Replace<TItem>(TItem oldValue, TItem newValue)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.Replace(oldValue, newValue);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2307 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2307 "SchemaEntity.tt"
        this.Write(@" RemoveAt(int index)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveAt(index);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2318 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2318 "SchemaEntity.tt"
        this.Write(@" RemoveRange(int index, int count)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveRange(index, count);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2329 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2329 "SchemaEntity.tt"
        this.Write(@" SetItem<TItem>(int index, TItem value)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.SetItem(index, value);
            }

            return this;
        }

    ");
        
        #line default
        #line hidden
        
        #line 2340 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2343 "SchemaEntity.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public T As<T>()\r\n            where T : stru" +
                "ct, IJsonValue\r\n        {\r\n            return this.As<");
        
        #line default
        #line hidden
        
        #line 2348 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(        TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2348 "SchemaEntity.tt"
        this.Write(@", T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

    ");
        
        #line default
        #line hidden
        
        #line 2360 "SchemaEntity.tt"

    if (HasRef)
    {    
    
        
        #line default
        #line hidden
        
        #line 2364 "SchemaEntity.tt"
        this.Write("            result = this.ValidateRef(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2369 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2372 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2373 "SchemaEntity.tt"

    if ((HasExplicitType || HasFormat || HasMediaTypeOrEncoding) || (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems) || (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)))))
    {
    
        
        #line default
        #line hidden
        
        #line 2377 "SchemaEntity.tt"
        this.Write("            JsonValueKind valueKind = this.ValueKind;\r\n    ");
        
        #line default
        #line hidden
        
        #line 2378 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2381 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2382 "SchemaEntity.tt"

    if (HasExplicitType || HasFormat || HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 2386 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2387 "SchemaEntity.tt"

        if (HasExplicitType)
        {
        
        
        #line default
        #line hidden
        
        #line 2391 "SchemaEntity.tt"
        this.Write("            result = this.ValidateType(valueKind, result, level);\r\n            if" +
                " (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n            " +
                "    return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2396 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2399 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2400 "SchemaEntity.tt"

        if (HasFormat)
        {
        
        
        #line default
        #line hidden
        
        #line 2404 "SchemaEntity.tt"
        this.Write("            result = this.ValidateFormat(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2409 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2412 "SchemaEntity.tt"
        this.Write("\r\n        \r\n        ");
        
        #line default
        #line hidden
        
        #line 2414 "SchemaEntity.tt"

        if (HasMediaTypeOrEncoding)
        {
        
        
        #line default
        #line hidden
        
        #line 2418 "SchemaEntity.tt"
        this.Write("            result = this.ValidateMediaTypeAndEncoding(valueKind, result, level);" +
                "\r\n            if (level == ValidationLevel.Flag && !result.IsValid)\r\n           " +
                " {\r\n                return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2423 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2426 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2427 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2430 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2431 "SchemaEntity.tt"

    if (HasConst)
    {
    
        
        #line default
        #line hidden
        
        #line 2435 "SchemaEntity.tt"
        this.Write("            result = Menes.Json.Validate.ValidateConst(this, result, level, __Men" +
                "esConstValue);\r\n            if (level == ValidationLevel.Flag && !result.IsValid" +
                ")\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2441 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2444 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2445 "SchemaEntity.tt"

    if (HasEnum)
    {
    
        
        #line default
        #line hidden
        
        #line 2449 "SchemaEntity.tt"
        this.Write("            result = Menes.Json.Validate.ValidateEnum(\r\n                this,\r\n  " +
                "              result,\r\n                level\r\n        ");
        
        #line default
        #line hidden
        
        #line 2453 "SchemaEntity.tt"

        for(int enumIndex = 0; enumIndex < EnumValues.Length; ++enumIndex)
        {
        
        
        #line default
        #line hidden
        
        #line 2457 "SchemaEntity.tt"
        this.Write("                , __MenesEnumValues.Item");
        
        #line default
        #line hidden
        
        #line 2457 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                enumIndex ));
        
        #line default
        #line hidden
        
        #line 2457 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2458 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2461 "SchemaEntity.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2467 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2470 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2471 "SchemaEntity.tt"

    if (HasMultipleOf || HasMaximum || HasExclusiveMaximum|| HasMinimum || HasExclusiveMinimum)
    {
    
        
        #line default
        #line hidden
        
        #line 2475 "SchemaEntity.tt"
        this.Write("            result = Menes.Json.Validate.ValidateNumber(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2479 "SchemaEntity.tt"

        if (HasMultipleOf)
        {
        
        
        #line default
        #line hidden
        
        #line 2483 "SchemaEntity.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 2483 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MultipleOf ));
        
        #line default
        #line hidden
        
        #line 2483 "SchemaEntity.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 2484 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2489 "SchemaEntity.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2490 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2493 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2493 "SchemaEntity.tt"

        if (HasMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 2497 "SchemaEntity.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 2497 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Maximum ));
        
        #line default
        #line hidden
        
        #line 2497 "SchemaEntity.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 2498 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2503 "SchemaEntity.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2504 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2507 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2507 "SchemaEntity.tt"

        if (HasExclusiveMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                ExclusiveMaximum ));
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 2512 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2517 "SchemaEntity.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2518 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2521 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2521 "SchemaEntity.tt"

        if (HasMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 2525 "SchemaEntity.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 2525 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Minimum ));
        
        #line default
        #line hidden
        
        #line 2525 "SchemaEntity.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 2526 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2531 "SchemaEntity.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2532 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2535 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2535 "SchemaEntity.tt"

        if (HasExclusiveMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                ExclusiveMinimum ));
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2540 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2545 "SchemaEntity.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 2546 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2549 "SchemaEntity.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2556 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2559 "SchemaEntity.tt"
        this.Write("    \r\n    ");
        
        #line default
        #line hidden
        
        #line 2560 "SchemaEntity.tt"

    if (HasMaxLength || HasMinLength || HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 2564 "SchemaEntity.tt"
        this.Write("            result = Menes.Json.Validate.ValidateString(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2568 "SchemaEntity.tt"

        if (HasMaxLength)
        {
        
        
        #line default
        #line hidden
        
        #line 2572 "SchemaEntity.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 2572 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MaxLength ));
        
        #line default
        #line hidden
        
        #line 2572 "SchemaEntity.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 2573 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2578 "SchemaEntity.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2579 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2582 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2582 "SchemaEntity.tt"

        if (HasMinLength)
        {
        
        
        #line default
        #line hidden
        
        #line 2586 "SchemaEntity.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 2586 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MinLength ));
        
        #line default
        #line hidden
        
        #line 2586 "SchemaEntity.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 2587 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2592 "SchemaEntity.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 2593 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2596 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2596 "SchemaEntity.tt"

        if (HasPattern)
        {
        
        
        #line default
        #line hidden
        
        #line 2600 "SchemaEntity.tt"
        this.Write("                __MenesPatternExpression\r\n        ");
        
        #line default
        #line hidden
        
        #line 2601 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2606 "SchemaEntity.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 2607 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2610 "SchemaEntity.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2616 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2619 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2620 "SchemaEntity.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 2624 "SchemaEntity.tt"
        this.Write("            result = this.ValidateIfThenElse(result, level);\r\n            if (lev" +
                "el == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                r" +
                "eturn result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2630 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2633 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2634 "SchemaEntity.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 2638 "SchemaEntity.tt"
        this.Write("            result = this.ValidateNot(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2644 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2647 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2648 "SchemaEntity.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 2652 "SchemaEntity.tt"
        this.Write("            result = this.ValidateAllOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2657 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2660 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2661 "SchemaEntity.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 2665 "SchemaEntity.tt"
        this.Write("            result = this.ValidateAnyOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2670 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2673 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2674 "SchemaEntity.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 2678 "SchemaEntity.tt"
        this.Write("            result = this.ValidateOneOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2684 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2687 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2688 "SchemaEntity.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 2692 "SchemaEntity.tt"
        this.Write("            result = this.ValidateObject(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2698 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2701 "SchemaEntity.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2703 "SchemaEntity.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 2707 "SchemaEntity.tt"
        this.Write("            result = this.ValidateArray(valueKind, result, level);\r\n            i" +
                "f (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n           " +
                "     return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2712 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2715 "SchemaEntity.tt"
        this.Write("            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2718 "SchemaEntity.tt"

    if (HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 2722 "SchemaEntity.tt"
        this.Write(@"        private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
        {
            ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();

        ");
        
        #line default
        #line hidden
        
        #line 2727 "SchemaEntity.tt"

        foreach (var patternProperty in PatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2731 "SchemaEntity.tt"
        this.Write("            builder.Add(\r\n                new Regex(\"");
        
        #line default
        #line hidden
        
        #line 2732 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                patternProperty.Pattern ));
        
        #line default
        #line hidden
        
        #line 2732 "SchemaEntity.tt"
        this.Write("\", RegexOptions.Compiled),\r\n                (property, validationContext, level) " +
                "=>\r\n                {\r\n                    return property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 2735 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                patternProperty.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2735 "SchemaEntity.tt"
        this.Write(">().Validate(validationContext, level);\r\n                });\r\n        ");
        
        #line default
        #line hidden
        
        #line 2737 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2740 "SchemaEntity.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2744 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2747 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2748 "SchemaEntity.tt"

    if (HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 2752 "SchemaEntity.tt"
        this.Write("\r\n        private static ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 2753 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2753 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> CreateDependentSchemaVa" +
                "lidators()\r\n        {\r\n            ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 2755 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2755 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =\r\n    " +
                "            ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 2756 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2756 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2758 "SchemaEntity.tt"

        foreach (var dependentSchema in DependentSchemas)
        {
        
        
        #line default
        #line hidden
        
        #line 2762 "SchemaEntity.tt"
        this.Write("            builder.Add(\r\n                JsonEncodedText.Encode(\"");
        
        #line default
        #line hidden
        
        #line 2763 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                dependentSchema.Name ));
        
        #line default
        #line hidden
        
        #line 2763 "SchemaEntity.tt"
        this.Write("\"),\r\n                (entity, validationContext, level) =>\r\n                {\r\n  " +
                "                  return entity.As<");
        
        #line default
        #line hidden
        
        #line 2766 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                dependentSchema.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2766 "SchemaEntity.tt"
        this.Write(">().Validate(validationContext, level);\r\n                });\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2769 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2772 "SchemaEntity.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2775 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2778 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2779 "SchemaEntity.tt"

    if (HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 2783 "SchemaEntity.tt"
        this.Write(@"        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
        {
            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder =
                ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();

        ");
        
        #line default
        #line hidden
        
        #line 2788 "SchemaEntity.tt"

        foreach (var property in Defaults)
        {
        
        
        #line default
        #line hidden
        
        #line 2792 "SchemaEntity.tt"
        this.Write("            builder.Add(");
        
        #line default
        #line hidden
        
        #line 2792 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2792 "SchemaEntity.tt"
        this.Write("JsonPropertyName, JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 2792 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(property.DefaultValue, true) ));
        
        #line default
        #line hidden
        
        #line 2792 "SchemaEntity.tt"
        this.Write("));\r\n        ");
        
        #line default
        #line hidden
        
        #line 2793 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2796 "SchemaEntity.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2798 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2801 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2802 "SchemaEntity.tt"

    if (HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 2806 "SchemaEntity.tt"
        this.Write(@"
        private static ImmutableDictionary<JsonEncodedText, ImmutableArray<ReadOnlyMemory<byte>>> BuildDependentRequired()
        {
            ImmutableDictionary<JsonEncodedText, ImmutableArray<ReadOnlyMemory<byte>>>.Builder builder =
                ImmutableDictionary.CreateBuilder<JsonEncodedText, ImmutableArray<ReadOnlyMemory<byte>>>();

        ");
        
        #line default
        #line hidden
        
        #line 2812 "SchemaEntity.tt"

        foreach (var dependentRequired in DependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 2816 "SchemaEntity.tt"
        this.Write("            builder.Add(\r\n                    JsonEncodedText.Encode(");
        
        #line default
        #line hidden
        
        #line 2817 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(dependentRequired.Name, true) ));
        
        #line default
        #line hidden
        
        #line 2817 "SchemaEntity.tt"
        this.Write("),\r\n                    ImmutableArray.Create<ReadOnlyMemory<byte>>(\r\n           " +
                " ");
        
        #line default
        #line hidden
        
        #line 2819 "SchemaEntity.tt"

            bool isFirst1 = true;
            foreach (var dependentRequiredValue in dependentRequired.RequiredNames)
            {
            
        
        #line default
        #line hidden
        
        #line 2824 "SchemaEntity.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 2824 "SchemaEntity.tt"

                if (isFirst1)
                {
                    isFirst1 = false;
                
        
        #line default
        #line hidden
        
        #line 2829 "SchemaEntity.tt"
        this.Write("                        System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 2829 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 2829 "SchemaEntity.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 2830 "SchemaEntity.tt"

                }
                else
                {
                
        
        #line default
        #line hidden
        
        #line 2835 "SchemaEntity.tt"
        this.Write("                        , System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 2835 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 2835 "SchemaEntity.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 2836 "SchemaEntity.tt"

                }
                
        
        #line default
        #line hidden
        
        #line 2839 "SchemaEntity.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 2839 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 2842 "SchemaEntity.tt"
        this.Write("                        ));\r\n        ");
        
        #line default
        #line hidden
        
        #line 2843 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2846 "SchemaEntity.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2849 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2852 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2853 "SchemaEntity.tt"

    if (HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 2857 "SchemaEntity.tt"
        this.Write("\r\n        private static ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 2858 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2858 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyVali" +
                "dators()\r\n        {\r\n            ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 2860 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2860 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =\r\n    " +
                "            ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 2861 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2861 "SchemaEntity.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2863 "SchemaEntity.tt"

        foreach (var property in LocalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2867 "SchemaEntity.tt"
        this.Write("            builder.Add(\r\n                ");
        
        #line default
        #line hidden
        
        #line 2868 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2868 "SchemaEntity.tt"
        this.Write("JsonPropertyName,\r\n                (that, validationContext, level) =>\r\n         " +
                "       {\r\n                    ");
        
        #line default
        #line hidden
        
        #line 2871 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.Type.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2871 "SchemaEntity.tt"
        this.Write(" property = that.");
        
        #line default
        #line hidden
        
        #line 2871 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2871 "SchemaEntity.tt"
        this.Write(";\r\n                    return property.Validate(validationContext, level);\r\n     " +
                "           });\r\n        ");
        
        #line default
        #line hidden
        
        #line 2874 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2877 "SchemaEntity.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2881 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2884 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2885 "SchemaEntity.tt"

    if (HasRef)
    {
    
        
        #line default
        #line hidden
        
        #line 2889 "SchemaEntity.tt"
        this.Write("        private ValidationContext ValidateRef(in ValidationContext validationCont" +
                "ext, ValidationLevel level)\r\n        {\r\n            ValidationContext result = v" +
                "alidationContext;\r\n\r\n            ValidationContext refResult = this.As<");
        
        #line default
        #line hidden
        
        #line 2893 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            RefDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2893 "SchemaEntity.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!refResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, refResult);
                }

                result = result.MergeChildContext(refResult, false);
            }

            return result;
        }
    ");
        
        #line default
        #line hidden
        
        #line 2922 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2925 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2926 "SchemaEntity.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 2930 "SchemaEntity.tt"
        this.Write(@"        private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Array)
            {
                return result;
            }

         ");
        
        #line default
        #line hidden
        
        #line 2939 "SchemaEntity.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 2943 "SchemaEntity.tt"
        this.Write("\r\n            int arrayLength = 0;\r\n         ");
        
        #line default
        #line hidden
        
        #line 2945 "SchemaEntity.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2950 "SchemaEntity.tt"
        this.Write("            int arrayLength = this.Length;\r\n        ");
        
        #line default
        #line hidden
        
        #line 2951 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2954 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2955 "SchemaEntity.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 2959 "SchemaEntity.tt"
        this.Write("            int containsCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2961 "SchemaEntity.tt"

        }

        
        
        #line default
        #line hidden
        
        #line 2965 "SchemaEntity.tt"
        this.Write("\r\n         ");
        
        #line default
        #line hidden
        
        #line 2966 "SchemaEntity.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 2970 "SchemaEntity.tt"
        this.Write("            JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();\r\n\r\n     " +
                "       while (arrayEnumerator.MoveNext())\r\n            {\r\n        ");
        
        #line default
        #line hidden
        
        #line 2974 "SchemaEntity.tt"

            if (HasUniqueItems)
            {
        
        
        #line default
        #line hidden
        
        #line 2978 "SchemaEntity.tt"
        this.Write(@"                JsonArrayEnumerator innerEnumerator = this.EnumerateArray();
                int innerIndex = -1;
                while (innerIndex < arrayLength && innerEnumerator.MoveNext())
                {
                    innerIndex++;
                }

                while (innerEnumerator.MoveNext())
                {
                    if (innerEnumerator.Current.Equals(arrayEnumerator.Current))
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""6.4.3. uniqueItems - duplicate items were found at indices {arrayLength} and {innerIndex}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""6.4.3. uniqueItems - duplicate items were found."");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 3004 "SchemaEntity.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3007 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3008 "SchemaEntity.tt"

            if (HasContains)
            {
        
        
        #line default
        #line hidden
        
        #line 3012 "SchemaEntity.tt"
        this.Write("                ValidationContext containsResult = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3012 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    ContainsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3012 "SchemaEntity.tt"
        this.Write(">().Validate(result.CreateChildContext(), level);\r\n\r\n                if (contains" +
                "Result.IsValid)\r\n                {\r\n                    result = result.WithLoca" +
                "lItemIndex(arrayLength);\r\n                    containsCount++;\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3019 "SchemaEntity.tt"

                if (HasMaxContains)
                {
            
        
        #line default
        #line hidden
        
        #line 3023 "SchemaEntity.tt"
        this.Write("                    if (level == ValidationLevel.Flag && containsCount > ");
        
        #line default
        #line hidden
        
        #line 3023 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        MaxContains ));
        
        #line default
        #line hidden
        
        #line 3023 "SchemaEntity.tt"
        this.Write(")\r\n                    {\r\n                        return result.WithResult(isVali" +
                "d: false);\r\n                    }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3027 "SchemaEntity.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3030 "SchemaEntity.tt"
        this.Write("                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3032 "SchemaEntity.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3035 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3036 "SchemaEntity.tt"

            if (HasSingleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3040 "SchemaEntity.tt"
        this.Write("                result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3040 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3040 "SchemaEntity.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n\r\n                result = result.WithLocalItemIndex(arrayLength);" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3048 "SchemaEntity.tt"

            }
            else if (HasMultipleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3053 "SchemaEntity.tt"
        this.Write("                switch (arrayLength)\r\n                {\r\n            ");
        
        #line default
        #line hidden
        
        #line 3055 "SchemaEntity.tt"

                int itemsIndex = 0;
                foreach (var item in Items)
                {
            
        
        #line default
        #line hidden
        
        #line 3060 "SchemaEntity.tt"
        this.Write("                    case ");
        
        #line default
        #line hidden
        
        #line 3060 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        itemsIndex ));
        
        #line default
        #line hidden
        
        #line 3060 "SchemaEntity.tt"
        this.Write(":\r\n                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3061 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        item ));
        
        #line default
        #line hidden
        
        #line 3061 "SchemaEntity.tt"
        this.Write(@">().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        break;
            ");
        
        #line default
        #line hidden
        
        #line 3069 "SchemaEntity.tt"

                    itemsIndex++;
                }
            
        
        #line default
        #line hidden
        
        #line 3073 "SchemaEntity.tt"
        this.Write("\r\n                    default:\r\n            ");
        
        #line default
        #line hidden
        
        #line 3075 "SchemaEntity.tt"

                if (!AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3079 "SchemaEntity.tt"
        this.Write(@"                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""9.3.1.2. additionalItems - Additional items are not permitted at index {arrayLength}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""9.3.1.2. additionalItems - Additional items are not permitted."");
                        }
                        else if (level == ValidationLevel.Flag)
                        {
                            return result.WithResult(isValid: false);
                        }

            ");
        
        #line default
        #line hidden
        
        #line 3092 "SchemaEntity.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3095 "SchemaEntity.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3096 "SchemaEntity.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3100 "SchemaEntity.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3100 "SchemaEntity.tt"

                    if (HasAdditionalItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3104 "SchemaEntity.tt"
        this.Write("                    ");
        
        #line default
        #line hidden
        
        #line 3104 "SchemaEntity.tt"

                        if (HasAdditionalItemsSchema)
                        {
                    
        
        #line default
        #line hidden
        
        #line 3108 "SchemaEntity.tt"
        this.Write("                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3108 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                                AdditionalItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3108 "SchemaEntity.tt"
        this.Write(">().Validate(result, level);\r\n                        if (level == ValidationLeve" +
                "l.Flag && !result.IsValid)\r\n                        {\r\n                         " +
                "   return result;\r\n                        }\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3113 "SchemaEntity.tt"

                        }
                    
        
        #line default
        #line hidden
        
        #line 3116 "SchemaEntity.tt"
        this.Write("                        \r\n                        result = result.WithLocalItemIn" +
                "dex(arrayLength);\r\n\r\n                ");
        
        #line default
        #line hidden
        
        #line 3119 "SchemaEntity.tt"

                    }
                    else if (HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3124 "SchemaEntity.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n\r\n                            result = arrayEnu" +
                "merator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3127 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                            UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3127 "SchemaEntity.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);
                        }
                ");
        
        #line default
        #line hidden
        
        #line 3136 "SchemaEntity.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 3139 "SchemaEntity.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3140 "SchemaEntity.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3143 "SchemaEntity.tt"
        this.Write("                        break;\r\n                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3146 "SchemaEntity.tt"

            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 3151 "SchemaEntity.tt"
        this.Write("                    ");
        
        #line default
        #line hidden
        
        #line 3151 "SchemaEntity.tt"

                if (!AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3155 "SchemaEntity.tt"
        this.Write(@"                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""9.3.1.2. additionalItems - Additional items are not permitted at index {arrayLength}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""9.3.1.2. additionalItems - Additional items are not permitted."");
                        }
                        else if (level == ValidationLevel.Flag)
                        {
                            return result.WithResult(isValid: false);
                        }

            ");
        
        #line default
        #line hidden
        
        #line 3168 "SchemaEntity.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3171 "SchemaEntity.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3172 "SchemaEntity.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3176 "SchemaEntity.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3176 "SchemaEntity.tt"

                    if (HasAdditionalItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3180 "SchemaEntity.tt"
        this.Write("                        ");
        
        #line default
        #line hidden
        
        #line 3180 "SchemaEntity.tt"

                        if (HasAdditionalItemsSchema)
                        {
                        
        
        #line default
        #line hidden
        
        #line 3184 "SchemaEntity.tt"
        this.Write("                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3184 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                                AdditionalItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3184 "SchemaEntity.tt"
        this.Write(">().Validate(result, level);\r\n                        if (level == ValidationLeve" +
                "l.Flag && !result.IsValid)\r\n                        {\r\n                         " +
                "   return result;\r\n                        }\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3189 "SchemaEntity.tt"

                        }
                    
        
        #line default
        #line hidden
        
        #line 3192 "SchemaEntity.tt"
        this.Write("                        result = result.WithLocalItemIndex(arrayLength);\r\n\r\n     " +
                "           ");
        
        #line default
        #line hidden
        
        #line 3194 "SchemaEntity.tt"

                    }
                    else if (HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3199 "SchemaEntity.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n                            result = arrayEnume" +
                "rator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3201 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                            UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3201 "SchemaEntity.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);

                        }
                ");
        
        #line default
        #line hidden
        
        #line 3211 "SchemaEntity.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 3214 "SchemaEntity.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3214 "SchemaEntity.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3217 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3218 "SchemaEntity.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3221 "SchemaEntity.tt"
        this.Write("\r\n                arrayLength++;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3224 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3227 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3228 "SchemaEntity.tt"

        if (HasMaxItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3232 "SchemaEntity.tt"
        this.Write("            if (arrayLength > ");
        
        #line default
        #line hidden
        
        #line 3232 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MaxItems ));
        
        #line default
        #line hidden
        
        #line 3232 "SchemaEntity.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".1. maxItems - {arrayLength} exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 3236 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MaxItems ));
        
        #line default
        #line hidden
        
        #line 3236 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.1. maxItems - item count exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 3240 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MaxItems ));
        
        #line default
        #line hidden
        
        #line 3240 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3248 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3251 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3252 "SchemaEntity.tt"

        if (HasMinItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3256 "SchemaEntity.tt"
        this.Write("            if (arrayLength < ");
        
        #line default
        #line hidden
        
        #line 3256 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MinItems ));
        
        #line default
        #line hidden
        
        #line 3256 "SchemaEntity.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".2. minItems - {arrayLength} is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 3260 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MinItems ));
        
        #line default
        #line hidden
        
        #line 3260 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.2. minItems - item count is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 3264 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MinItems ));
        
        #line default
        #line hidden
        
        #line 3264 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3272 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3275 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3276 "SchemaEntity.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 3280 "SchemaEntity.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3280 "SchemaEntity.tt"

            if (HasMaxContains)
            {
            
        
        #line default
        #line hidden
        
        #line 3284 "SchemaEntity.tt"
        this.Write("\r\n            if (containsCount > ");
        
        #line default
        #line hidden
        
        #line 3285 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    MaxContains ));
        
        #line default
        #line hidden
        
        #line 3285 "SchemaEntity.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".4. maxContains - {containsCount} exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 3289 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    MaxContains ));
        
        #line default
        #line hidden
        
        #line 3289 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.4. maxContains - item count exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 3293 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    MaxContains ));
        
        #line default
        #line hidden
        
        #line 3293 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3301 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3304 "SchemaEntity.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3305 "SchemaEntity.tt"

            if (HasMinContains)
            {
            
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity.tt"
        this.Write("            if (containsCount < ");
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    MinContains ));
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".5. minContains - {containsCount} is less than minimum number of matching items " +
                "");
        
        #line default
        #line hidden
        
        #line 3313 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    MinContains ));
        
        #line default
        #line hidden
        
        #line 3313 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.5. minContains - item count is less than minimum number of matching ite" +
                "ms ");
        
        #line default
        #line hidden
        
        #line 3317 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    MinContains ));
        
        #line default
        #line hidden
        
        #line 3317 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3325 "SchemaEntity.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 3330 "SchemaEntity.tt"
        this.Write(@"            if (containsCount == 0)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $""10.3.1.3. contains - no items found matching the required schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""10.3.1.3. contains - no items found matching the required schema."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            ");
        
        #line default
        #line hidden
        
        #line 3346 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3349 "SchemaEntity.tt"
        this.Write("\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3351 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3354 "SchemaEntity.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3358 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3361 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3362 "SchemaEntity.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties|| HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 3366 "SchemaEntity.tt"
        this.Write(@"        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        ");
        
        #line default
        #line hidden
        
        #line 3375 "SchemaEntity.tt"

        if (AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties))
        {
        
        
        #line default
        #line hidden
        
        #line 3379 "SchemaEntity.tt"
        this.Write("            result = result.UsingEvaluatedProperties();\r\n        ");
        
        #line default
        #line hidden
        
        #line 3380 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3383 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3384 "SchemaEntity.tt"

        if (HasMaxProperties || HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3388 "SchemaEntity.tt"
        this.Write("            int propertyCount = 0;\r\n        ");
        
        #line default
        #line hidden
        
        #line 3389 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3392 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3393 "SchemaEntity.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 3397 "SchemaEntity.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3397 "SchemaEntity.tt"
 
            foreach(var property in RequiredProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 3401 "SchemaEntity.tt"
        this.Write("            bool found");
        
        #line default
        #line hidden
        
        #line 3401 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3401 "SchemaEntity.tt"
        this.Write(" = false;\r\n            ");
        
        #line default
        #line hidden
        
        #line 3402 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3405 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3405 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3408 "SchemaEntity.tt"
        this.Write("\r\n            foreach (Property property in this.EnumerateObject())\r\n            " +
                "{\r\n                JsonEncodedText propertyName = property.NameAsJsonEncodedText" +
                ";\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3413 "SchemaEntity.tt"

        if (HasDependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 3417 "SchemaEntity.tt"
        this.Write(@"                if (__MenesDependentRequired.TryGetValue(propertyName, out ImmutableArray<ReadOnlyMemory<byte>> dependencies))
                {
                    foreach (ReadOnlyMemory<byte> dependency in dependencies)
                    {
                        if (!this.HasProperty(dependency.Span) 
            ");
        
        #line default
        #line hidden
        
        #line 3422 "SchemaEntity.tt"

            if (HasDefaults)
            {
            
        
        #line default
        #line hidden
        
        #line 3426 "SchemaEntity.tt"
        this.Write("                        && !this.HasDefault(dependency.Span)\r\n            ");
        
        #line default
        #line hidden
        
        #line 3427 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3430 "SchemaEntity.tt"
        this.Write(@"                        )
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $""6.5.4. dependentRequired - dependent property \""{dependency}\"" not found."");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, ""6.5.4. dependentRequired - dependent property not found."");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 3448 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3451 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3452 "SchemaEntity.tt"

        if (HasLocalProperties || HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 3456 "SchemaEntity.tt"
        this.Write("                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<");
        
        #line default
        #line hidden
        
        #line 3456 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3456 "SchemaEntity.tt"
        this.Write(@", ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    result = propertyValidator(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

            ");
        
        #line default
        #line hidden
        
        #line 3465 "SchemaEntity.tt"

            if (HasRequired)
            {
                bool firstRequiredCheck = true;
                foreach (var property in RequiredProperties)
                {
                    if (!firstRequiredCheck)
                    {
                    
        
        #line default
        #line hidden
        
        #line 3474 "SchemaEntity.tt"
        this.Write("                else \r\n                    ");
        
        #line default
        #line hidden
        
        #line 3475 "SchemaEntity.tt"

                    }
                    else
                    {
                        firstRequiredCheck = false;
                    }
            
        
        #line default
        #line hidden
        
        #line 3482 "SchemaEntity.tt"
        this.Write("\r\n                if (");
        
        #line default
        #line hidden
        
        #line 3483 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3483 "SchemaEntity.tt"
        this.Write("JsonPropertyName.Equals(propertyName))\r\n                {\r\n                    fo" +
                "und");
        
        #line default
        #line hidden
        
        #line 3485 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 3485 "SchemaEntity.tt"
        this.Write(" = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3487 "SchemaEntity.tt"

                }
            }
            
        
        #line default
        #line hidden
        
        #line 3491 "SchemaEntity.tt"
        this.Write("\r\n                }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3493 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3496 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3497 "SchemaEntity.tt"

        if (HasDependentSchemas)
        {
        
        
        #line default
        #line hidden
        
        #line 3501 "SchemaEntity.tt"
        this.Write("                if (__MenesDependentSchema.TryGetValue(propertyName, out Func<");
        
        #line default
        #line hidden
        
        #line 3501 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3501 "SchemaEntity.tt"
        this.Write(@", ValidationContext, ValidationLevel, ValidationContext>? dependentSchemaValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    result = dependentSchemaValidator(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }
        ");
        
        #line default
        #line hidden
        
        #line 3510 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3513 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3514 "SchemaEntity.tt"

        if (HasPropertyNames || HasPatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3518 "SchemaEntity.tt"
        this.Write("                string propertyNameAsString = property.Name;\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3520 "SchemaEntity.tt"

            if (HasPropertyNames)
            {
            
        
        #line default
        #line hidden
        
        #line 3524 "SchemaEntity.tt"
        this.Write("                result = new JsonString(propertyNameAsString).As<");
        
        #line default
        #line hidden
        
        #line 3524 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    PropertyNamesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3524 "SchemaEntity.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3529 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3532 "SchemaEntity.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3533 "SchemaEntity.tt"

            if (HasPatternProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 3537 "SchemaEntity.tt"
        this.Write(@"                foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                {
                    if (patternProperty.Key.IsMatch(propertyNameAsString))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = patternProperty.Value(property, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }
                }

            ");
        
        #line default
        #line hidden
        
        #line 3550 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3553 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3553 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3556 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3557 "SchemaEntity.tt"

        if (AllowsAdditionalProperties && HasAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3561 "SchemaEntity.tt"
        this.Write("                if (!result.HasEvaluatedLocalProperty(propertyName))\r\n           " +
                "     {\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 3563 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3563 "SchemaEntity.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyName);
                }
        ");
        
        #line default
        #line hidden
        
        #line 3570 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3573 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3574 "SchemaEntity.tt"

        if (AllowsAdditionalProperties && HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3578 "SchemaEntity.tt"
        this.Write("        \r\n                if (!result.HasEvaluatedLocalOrAppliedProperty(property" +
                "Name))\r\n                {\r\n\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 3582 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3582 "SchemaEntity.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalProperty(propertyName);
                }
        ");
        
        #line default
        #line hidden
        
        #line 3590 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3593 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3594 "SchemaEntity.tt"

        if (!AllowsAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3598 "SchemaEntity.tt"
        this.Write(@"        
                if (!result.HasEvaluatedLocalProperty(propertyName))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $""9.3.2.3. additionalProperties - additional property \""{propertyName}\"" is not permitted."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, ""9.3.2.3. additionalProperties - additional properties are not permitted."");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 3615 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3618 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3619 "SchemaEntity.tt"

        if (HasMaxProperties || HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3623 "SchemaEntity.tt"
        this.Write("        \r\n                propertyCount++;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3626 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3629 "SchemaEntity.tt"
        this.Write("            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3631 "SchemaEntity.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 3635 "SchemaEntity.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3636 "SchemaEntity.tt"

            foreach (var property in RequiredProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 3640 "SchemaEntity.tt"
        this.Write("            if (!found");
        
        #line default
        #line hidden
        
        #line 3640 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3640 "SchemaEntity.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3641 "SchemaEntity.tt"

                if (HasDefaults)
                {
            
        
        #line default
        #line hidden
        
        #line 3645 "SchemaEntity.tt"
        this.Write("            && !HasDefault(");
        
        #line default
        #line hidden
        
        #line 3645 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3645 "SchemaEntity.tt"
        this.Write("JsonPropertyName)\r\n            ");
        
        #line default
        #line hidden
        
        #line 3646 "SchemaEntity.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3649 "SchemaEntity.tt"
        this.Write("            )\r\n            {\r\n                if (level >= ValidationLevel.Detail" +
                "ed)\r\n                {\r\n                    result = result.WithResult(isValid: " +
                "false, $\"6.5.3. required - required property \\\"");
        
        #line default
        #line hidden
        
        #line 3653 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 3653 "SchemaEntity.tt"
        this.Write(@"\"" not present."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""6.5.3. required - required property not present."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }
            ");
        
        #line default
        #line hidden
        
        #line 3664 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3667 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3667 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3670 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3671 "SchemaEntity.tt"

        if (HasMaxProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3675 "SchemaEntity.tt"
        this.Write("        \r\n            if (propertyCount > ");
        
        #line default
        #line hidden
        
        #line 3676 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MaxProperties ));
        
        #line default
        #line hidden
        
        #line 3676 "SchemaEntity.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".1. maxProperties - property count of {propertyCount} is greater than ");
        
        #line default
        #line hidden
        
        #line 3680 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MaxProperties ));
        
        #line default
        #line hidden
        
        #line 3680 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.1. maxProperties - property count greater than ");
        
        #line default
        #line hidden
        
        #line 3684 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MaxProperties ));
        
        #line default
        #line hidden
        
        #line 3684 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n        ");
        
        #line default
        #line hidden
        
        #line 3691 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3694 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3695 "SchemaEntity.tt"

        if (HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3699 "SchemaEntity.tt"
        this.Write("        \r\n            if (propertyCount < ");
        
        #line default
        #line hidden
        
        #line 3700 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MinProperties ));
        
        #line default
        #line hidden
        
        #line 3700 "SchemaEntity.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".2. minProperties - property count of {propertyCount} is lezs than ");
        
        #line default
        #line hidden
        
        #line 3704 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MinProperties ));
        
        #line default
        #line hidden
        
        #line 3704 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.2. minProperties - property count less than ");
        
        #line default
        #line hidden
        
        #line 3708 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                MinProperties ));
        
        #line default
        #line hidden
        
        #line 3708 "SchemaEntity.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3716 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3719 "SchemaEntity.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3723 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3726 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3727 "SchemaEntity.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3731 "SchemaEntity.tt"
        this.Write("        \r\n        private ValidationContext ValidateOneOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            int oneOfCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3738 "SchemaEntity.tt"

        int oneOfIndex = 0;
        foreach (var oneOf in OneOf)
        {
        
        
        #line default
        #line hidden
        
        #line 3743 "SchemaEntity.tt"
        this.Write("        \r\n\r\n            ValidationContext oneOfResult");
        
        #line default
        #line hidden
        
        #line 3745 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                oneOfIndex));
        
        #line default
        #line hidden
        
        #line 3745 "SchemaEntity.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 3745 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                oneOf ));
        
        #line default
        #line hidden
        
        #line 3745 "SchemaEntity.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (o" +
                "neOfResult");
        
        #line default
        #line hidden
        
        #line 3747 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 3747 "SchemaEntity.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(oneOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 3749 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 3749 "SchemaEntity.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n                oneOfCount += 1;\r\n        " +
                "    ");
        
        #line default
        #line hidden
        
        #line 3751 "SchemaEntity.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 3755 "SchemaEntity.tt"
        this.Write("                if (oneOfCount > 1 && level == ValidationLevel.Flag)\r\n           " +
                "     {\r\n                    result = result.WithResult(isValid: false);\r\n       " +
                "             return result;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3760 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3763 "SchemaEntity.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeChildContext(oneOfResult");
        
        #line default
        #line hidden
        
        #line 3768 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 3768 "SchemaEntity.tt"
        this.Write(", true);\r\n                }\r\n                else if (level >= ValidationLevel.Ba" +
                "sic)\r\n                {\r\n                    result = result.MergeChildContext(o" +
                "neOfResult");
        
        #line default
        #line hidden
        
        #line 3772 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 3772 "SchemaEntity.tt"
        this.Write(", true);\r\n                }\r\n                else\r\n                {\r\n           " +
                "         result = result.MergeChildContext(oneOfResult");
        
        #line default
        #line hidden
        
        #line 3776 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 3776 "SchemaEntity.tt"
        this.Write(", false);\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3780 "SchemaEntity.tt"

            oneOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 3784 "SchemaEntity.tt"
        this.Write("\r\n            if (oneOfCount == 1)\r\n            {\r\n                if (level >= V" +
                "alidationLevel.Detailed)\r\n                {\r\n                    result = result" +
                ".WithResult(isValid: true, \"Validation 10.2.1.3. onef - validated against the on" +
                "eOf schema.\");\r\n                }\r\n            }\r\n            else if (oneOfCoun" +
                "t == 0)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n" +
                "                {\r\n                    result = result.WithResult(isValid: false" +
                ", \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf sche" +
                "ma.\");\r\n                }\r\n                else if (level >= ValidationLevel.Bas" +
                "ic)\r\n                {\r\n                    result = result.WithResult(isValid: " +
                "false, \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf" +
                " schema.\");\r\n                }\r\n                else\r\n                {\r\n       " +
                "             result = result.WithResult(isValid: false);\r\n                }\r\n   " +
                "         }\r\n            else\r\n            {\r\n                if (level >= Valida" +
                "tionLevel.Detailed)\r\n                {\r\n                    result = result.With" +
                "Result(isValid: false, \"Validation 10.2.1.3. oneOf - validated against more than" +
                " one of the oneOf schema.\");\r\n                }\r\n                else if (level " +
                ">= ValidationLevel.Basic)\r\n                {\r\n                    result = resul" +
                "t.WithResult(isValid: false, \"Validation 10.2.1.3. oneOf - failed to validate ag" +
                "ainst more than one of the oneOf schema.\");\r\n                }\r\n                " +
                "else\r\n                {\r\n                    result = result.WithResult(isValid:" +
                " false);\r\n                }\r\n            }\r\n\r\n            return result;\r\n      " +
                "  }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3826 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3829 "SchemaEntity.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3831 "SchemaEntity.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3835 "SchemaEntity.tt"
        this.Write("        \r\n        private ValidationContext ValidateAnyOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            bool foundValid = false;\r\n\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 3842 "SchemaEntity.tt"

        int anyOfIndex = 0;
        foreach (var anyOf in AnyOf)
        {
        
        
        #line default
        #line hidden
        
        #line 3847 "SchemaEntity.tt"
        this.Write("        \r\n\r\n            ValidationContext anyOfResult");
        
        #line default
        #line hidden
        
        #line 3849 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 3849 "SchemaEntity.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 3849 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                anyOf ));
        
        #line default
        #line hidden
        
        #line 3849 "SchemaEntity.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (a" +
                "nyOfResult");
        
        #line default
        #line hidden
        
        #line 3851 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 3851 "SchemaEntity.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(anyOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 3853 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 3853 "SchemaEntity.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            ");
        
        #line default
        #line hidden
        
        #line 3854 "SchemaEntity.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
                
        
        #line default
        #line hidden
        
        #line 3858 "SchemaEntity.tt"
        this.Write("                if (level == ValidationLevel.Flag)\r\n                {\r\n          " +
                "          return result;\r\n                }\r\n                else\r\n             " +
                "   {\r\n                    foundValid = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3866 "SchemaEntity.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 3871 "SchemaEntity.tt"
        this.Write("                    foundValid = true;\r\n            ");
        
        #line default
        #line hidden
        
        #line 3872 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3875 "SchemaEntity.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeResults(result.IsValid, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 3880 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 3880 "SchemaEntity.tt"
        this.Write(");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)\r\n" +
                "                {\r\n                    result = result.MergeResults(result.IsVal" +
                "id, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 3884 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 3884 "SchemaEntity.tt"
        this.Write(");\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3888 "SchemaEntity.tt"

            anyOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 3892 "SchemaEntity.tt"
        this.Write(@"
            if (foundValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, ""Validation 10.2.1.2. anyOf - validated against the anyOf schema."");
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 3919 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3922 "SchemaEntity.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3924 "SchemaEntity.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3928 "SchemaEntity.tt"
        this.Write("        \r\n        private ValidationContext ValidateAllOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3933 "SchemaEntity.tt"

        int allOfIndex = 0;
        foreach (var allOf in AllOf)
        {
        
        
        #line default
        #line hidden
        
        #line 3938 "SchemaEntity.tt"
        this.Write("        \r\n\r\n            ValidationContext allOfResult");
        
        #line default
        #line hidden
        
        #line 3940 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                allOfIndex ));
        
        #line default
        #line hidden
        
        #line 3940 "SchemaEntity.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 3940 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                allOf ));
        
        #line default
        #line hidden
        
        #line 3940 "SchemaEntity.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (!" +
                "allOfResult");
        
        #line default
        #line hidden
        
        #line 3942 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                allOfIndex ));
        
        #line default
        #line hidden
        
        #line 3942 "SchemaEntity.tt"
        this.Write(".IsValid)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r" +
                "\n                {\r\n                    result = result.MergeChildContext(allOfR" +
                "esult");
        
        #line default
        #line hidden
        
        #line 3946 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                allOfIndex ));
        
        #line default
        #line hidden
        
        #line 3946 "SchemaEntity.tt"
        this.Write(@", true).WithResult(isValid: false, ""Validation 10.2.1.1. allOf - failed to validate against the allOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 3950 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                allOfIndex ));
        
        #line default
        #line hidden
        
        #line 3950 "SchemaEntity.tt"
        this.Write(", true).WithResult(isValid: false, \"Validation 10.2.1.1. allOf - failed to valida" +
                "te against the allOf schema.\");\r\n                }\r\n                else\r\n      " +
                "          {\r\n                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 3954 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                allOfIndex ));
        
        #line default
        #line hidden
        
        #line 3954 "SchemaEntity.tt"
        this.Write(", false).WithResult(isValid: false);\r\n                    return result;\r\n       " +
                "         }\r\n            }\r\n            else\r\n            {\r\n                resu" +
                "lt = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 3960 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                allOfIndex ));
        
        #line default
        #line hidden
        
        #line 3960 "SchemaEntity.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3963 "SchemaEntity.tt"

            allOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 3967 "SchemaEntity.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3971 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3974 "SchemaEntity.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3976 "SchemaEntity.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 3980 "SchemaEntity.tt"
        this.Write("        \r\n        private ValidationContext ValidateNot(ValidationContext validat" +
                "ionContext, ValidationLevel level)\r\n        {\r\n            ValidationContext res" +
                "ult = validationContext;\r\n\r\n            ValidationContext notResult = this.As<");
        
        #line default
        #line hidden
        
        #line 3985 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            NotDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3985 "SchemaEntity.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);
            if (notResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated successfully against the not schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated succesfully against the not schema."");
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.MergeResults(result.IsValid, level, notResult);
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 4009 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4012 "SchemaEntity.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4014 "SchemaEntity.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 4018 "SchemaEntity.tt"
        this.Write("        \r\n        private ValidationContext ValidateIfThenElse(in ValidationConte" +
                "xt validationContext, ValidationLevel level)\r\n        {\r\n            ValidationC" +
                "ontext result = validationContext;\r\n\r\n            ValidationContext ifResult = t" +
                "his.As<");
        
        #line default
        #line hidden
        
        #line 4023 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            IfDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4023 "SchemaEntity.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!ifResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(ifResult, true);
                }

                result = result.MergeChildContext(ifResult, false);
            }


        ");
        
        #line default
        #line hidden
        
        #line 4047 "SchemaEntity.tt"

        if (HasThen)
        {
        
        
        #line default
        #line hidden
        
        #line 4051 "SchemaEntity.tt"
        this.Write("        \r\n            if (ifResult.IsValid)\r\n            {\r\n                Valid" +
                "ationContext thenResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4054 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                ThenDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4054 "SchemaEntity.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!thenResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(thenResult, true);
                    }

                    result = result.MergeChildContext(thenResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4082 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4085 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4086 "SchemaEntity.tt"

        if (HasElse)
        {
        
        
        #line default
        #line hidden
        
        #line 4090 "SchemaEntity.tt"
        this.Write("        \r\n            if (!ifResult.IsValid)\r\n            {\r\n                Vali" +
                "dationContext elseResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4093 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                ElseDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4093 "SchemaEntity.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!elseResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.3. else - failed to validate against the else schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.2. else - failed to validate against the else schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(elseResult, true);
                    }

                    result = result.MergeChildContext(elseResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4121 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4124 "SchemaEntity.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4128 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4131 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4132 "SchemaEntity.tt"

    if (HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 4136 "SchemaEntity.tt"
        this.Write("        private ValidationContext ValidateMediaTypeAndEncoding(JsonValueKind valu" +
                "eKind, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 4138 "SchemaEntity.tt"

        if (IsJsonBase64Content)
        {
        
        
        #line default
        #line hidden
        
        #line 4142 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64Content>().Validate(result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4147 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4150 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4151 "SchemaEntity.tt"

        if (IsJsonBase64String)
        {
        
        
        #line default
        #line hidden
        
        #line 4155 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64String>().Validate(result, level);\r\n       " +
                "     }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4161 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4164 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4165 "SchemaEntity.tt"

        if (IsJsonContent)
        {
        
        
        #line default
        #line hidden
        
        #line 4169 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonContent>().Validate(result, level);\r\n            " +
                "}\r\n        ");
        
        #line default
        #line hidden
        
        #line 4174 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4177 "SchemaEntity.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4181 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4184 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4185 "SchemaEntity.tt"

    if (HasFormat)
    {
    
        
        #line default
        #line hidden
        
        #line 4189 "SchemaEntity.tt"
        this.Write("        \r\n        private ValidationContext ValidateFormat(JsonValueKind valueKin" +
                "d, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 4192 "SchemaEntity.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 4196 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4201 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4204 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4205 "SchemaEntity.tt"

        if (IsJsonDate)
        {
        
        
        #line default
        #line hidden
        
        #line 4209 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDate(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4215 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4218 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4219 "SchemaEntity.tt"

        if (IsJsonDateTime)
        {
        
        
        #line default
        #line hidden
        
        #line 4223 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDateTime(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4228 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4231 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4232 "SchemaEntity.tt"

        if (IsJsonDuration)
        {
        
        
        #line default
        #line hidden
        
        #line 4236 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDuration(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4241 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4244 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4245 "SchemaEntity.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 4249 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4254 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4257 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4258 "SchemaEntity.tt"

        if (IsJsonEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 4262 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeEmail(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4267 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4270 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4271 "SchemaEntity.tt"

        if (IsJsonHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 4275 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeHostname(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4280 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4283 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4284 "SchemaEntity.tt"

        if (IsJsonIdnEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 4288 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnEmail(this, result, level);\r\n     " +
                "       }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4294 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4297 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4298 "SchemaEntity.tt"

        if (IsJsonIdnHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 4302 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnHostname(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4307 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4310 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4311 "SchemaEntity.tt"

        if (IsJsonInteger)
        {
        
        
        #line default
        #line hidden
        
        #line 4315 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.Number)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeInteger(this, result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4320 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4323 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4324 "SchemaEntity.tt"

        if (IsJsonIpV4)
        {
        
        
        #line default
        #line hidden
        
        #line 4328 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV4(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4334 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4337 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4338 "SchemaEntity.tt"

        if (IsJsonIpV6)
        {
        
        
        #line default
        #line hidden
        
        #line 4342 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV6(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4348 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4351 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4352 "SchemaEntity.tt"

        if (IsJsonIri)
        {
        
        
        #line default
        #line hidden
        
        #line 4356 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIri(this, result, level);\r\n          " +
                "  }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4361 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4364 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4365 "SchemaEntity.tt"

        if (IsJsonIriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 4369 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4374 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4377 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4378 "SchemaEntity.tt"

        if (IsJsonPointer)
        {
        
        
        #line default
        #line hidden
        
        #line 4382 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeJsonPointer(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4387 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4390 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4391 "SchemaEntity.tt"

        if (IsJsonRegex)
        {
        
        
        #line default
        #line hidden
        
        #line 4395 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRegex(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4400 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4403 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4404 "SchemaEntity.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 4408 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4413 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4416 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4417 "SchemaEntity.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 4421 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4427 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4430 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4431 "SchemaEntity.tt"

        if (IsJsonUri)
        {
        
        
        #line default
        #line hidden
        
        #line 4435 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUri(this, result, level);\r\n          " +
                "  }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4441 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4444 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4445 "SchemaEntity.tt"

        if (IsJsonUriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 4449 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4454 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4457 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4458 "SchemaEntity.tt"

        if (IsJsonUriTemplate)
        {
        
        
        #line default
        #line hidden
        
        #line 4462 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriTemplate(this, result, level);\r\n  " +
                "          }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4468 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4471 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4472 "SchemaEntity.tt"

        if (IsJsonUuid)
        {
        
        
        #line default
        #line hidden
        
        #line 4476 "SchemaEntity.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUuid(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4482 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4485 "SchemaEntity.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4489 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4492 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4493 "SchemaEntity.tt"

    if (HasType)
    {
    
        
        #line default
        #line hidden
        
        #line 4497 "SchemaEntity.tt"
        this.Write(@"        
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        ");
        
        #line default
        #line hidden
        
        #line 4503 "SchemaEntity.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 4507 "SchemaEntity.tt"
        this.Write(@"        
            ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultString.IsValid)
            {
                return validationContext;
            }

            if (localResultString.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4519 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4522 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4523 "SchemaEntity.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 4527 "SchemaEntity.tt"
        this.Write(@"        
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4539 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4542 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4543 "SchemaEntity.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 4547 "SchemaEntity.tt"
        this.Write(@"        
            ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultArray.IsValid)
            {
                return validationContext;
            }

            if (localResultArray.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4559 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4562 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4563 "SchemaEntity.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 4567 "SchemaEntity.tt"
        this.Write(@"        
            ValidationContext localResultNumber = Menes.Json.Validate.TypeNumber(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNumber.IsValid)
            {
                return validationContext;
            }

            if (localResultNumber.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4579 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4582 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4583 "SchemaEntity.tt"

        if (HasIntegerType)
        {
        
        
        #line default
        #line hidden
        
        #line 4587 "SchemaEntity.tt"
        this.Write(@"        
            ValidationContext localResultInteger = Menes.Json.Validate.TypeInteger(this, result, level);
            if (level == ValidationLevel.Flag && localResultInteger.IsValid)
            {
                return validationContext;
            }

            if (localResultInteger.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4599 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4602 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4603 "SchemaEntity.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 4607 "SchemaEntity.tt"
        this.Write(@"        
            ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
            {
                return validationContext;
            }

            if (localResultBoolean.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4619 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4622 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4623 "SchemaEntity.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 4627 "SchemaEntity.tt"
        this.Write(@"        
            ValidationContext localResultNull = Menes.Json.Validate.TypeNull(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNull.IsValid)
            {
                return validationContext;
            }

            if (localResultNull.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4639 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4642 "SchemaEntity.tt"
        this.Write("\r\n            result = result.MergeResults(\r\n                isValid,\r\n          " +
                "      level\r\n        ");
        
        #line default
        #line hidden
        
        #line 4646 "SchemaEntity.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 4650 "SchemaEntity.tt"
        this.Write("        \r\n                , localResultString\r\n        ");
        
        #line default
        #line hidden
        
        #line 4652 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4655 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4656 "SchemaEntity.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 4660 "SchemaEntity.tt"
        this.Write("        \r\n                , localResultObject\r\n        ");
        
        #line default
        #line hidden
        
        #line 4662 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4665 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4666 "SchemaEntity.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 4670 "SchemaEntity.tt"
        this.Write("        \r\n                , localResultArray\r\n        ");
        
        #line default
        #line hidden
        
        #line 4672 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4675 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4676 "SchemaEntity.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 4680 "SchemaEntity.tt"
        this.Write("        \r\n                , localResultNumber\r\n        ");
        
        #line default
        #line hidden
        
        #line 4682 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4685 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4686 "SchemaEntity.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 4690 "SchemaEntity.tt"
        this.Write("        \r\n                , localResultBoolean\r\n        ");
        
        #line default
        #line hidden
        
        #line 4692 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4695 "SchemaEntity.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4696 "SchemaEntity.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 4700 "SchemaEntity.tt"
        this.Write("        \r\n                , localResultNull\r\n        ");
        
        #line default
        #line hidden
        
        #line 4702 "SchemaEntity.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4705 "SchemaEntity.tt"
        this.Write("                );\r\n\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4710 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4713 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4714 "SchemaEntity.tt"

    if (HasEnum)
    {
        int enumItemIndex = 0;
    
        
        #line default
        #line hidden
        
        #line 4719 "SchemaEntity.tt"
        this.Write("        \r\n        /// <summary>\r\n        /// Permitted values.\r\n        /// </sum" +
                "mary>\r\n        public static class __MenesEnumValues\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 4725 "SchemaEntity.tt"

        foreach (var enumValue in EnumValues)
        {
        
        
        #line default
        #line hidden
        
        #line 4729 "SchemaEntity.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4729 "SchemaEntity.tt"

            if (enumValue.IsString)
            {
            
        
        #line default
        #line hidden
        
        #line 4733 "SchemaEntity.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 4734 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumItemIndex));
        
        #line default
        #line hidden
        
        #line 4734 "SchemaEntity.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            inte" +
                "rnal static readonly ");
        
        #line default
        #line hidden
        
        #line 4739 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4739 "SchemaEntity.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 4739 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumItemIndex));
        
        #line default
        #line hidden
        
        #line 4739 "SchemaEntity.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 4739 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 4739 "SchemaEntity.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 4740 "SchemaEntity.tt"

            }
            else if (enumValue.IsBoolean)
            {
            
        
        #line default
        #line hidden
        
        #line 4745 "SchemaEntity.tt"
        this.Write("            public static readonly ");
        
        #line default
        #line hidden
        
        #line 4745 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4745 "SchemaEntity.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 4745 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumItemIndex));
        
        #line default
        #line hidden
        
        #line 4745 "SchemaEntity.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 4745 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 4745 "SchemaEntity.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 4746 "SchemaEntity.tt"

            }
            else if (enumValue.IsNumber)
            {
            
        
        #line default
        #line hidden
        
        #line 4751 "SchemaEntity.tt"
        this.Write("            public static readonly ");
        
        #line default
        #line hidden
        
        #line 4751 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4751 "SchemaEntity.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 4751 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumItemIndex));
        
        #line default
        #line hidden
        
        #line 4751 "SchemaEntity.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 4751 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 4751 "SchemaEntity.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 4752 "SchemaEntity.tt"

            }
            else if (enumValue.IsObject)
            {
            
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity.tt"
        this.Write("            public static readonly ");
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumItemIndex));
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 4758 "SchemaEntity.tt"

            }
            else if (enumValue.IsArray)
            {
            
        
        #line default
        #line hidden
        
        #line 4763 "SchemaEntity.tt"
        this.Write("            public static readonly ");
        
        #line default
        #line hidden
        
        #line 4763 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4763 "SchemaEntity.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 4763 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumItemIndex));
        
        #line default
        #line hidden
        
        #line 4763 "SchemaEntity.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 4763 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 4763 "SchemaEntity.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 4764 "SchemaEntity.tt"

            }
            else if (enumValue.IsNull)
            {
            
        
        #line default
        #line hidden
        
        #line 4769 "SchemaEntity.tt"
        this.Write("            public static readonly ");
        
        #line default
        #line hidden
        
        #line 4769 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4769 "SchemaEntity.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 4769 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumItemIndex));
        
        #line default
        #line hidden
        
        #line 4769 "SchemaEntity.tt"
        this.Write(" = JsonAny.Parse(\"null\");\r\n            ");
        
        #line default
        #line hidden
        
        #line 4770 "SchemaEntity.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4773 "SchemaEntity.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4773 "SchemaEntity.tt"

            enumItemIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4777 "SchemaEntity.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 4778 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4781 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4782 "SchemaEntity.tt"

    foreach(var nestedType in NestedTypes)
    {
    
        
        #line default
        #line hidden
        
        #line 4786 "SchemaEntity.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4787 "SchemaEntity.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(            WriteNestedType(nestedType) ));
        
        #line default
        #line hidden
        
        #line 4787 "SchemaEntity.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4789 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4792 "SchemaEntity.tt"
        this.Write("\r\n    }\r\n    ");
        
        #line default
        #line hidden
        
        #line 4794 "SchemaEntity.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 4798 "SchemaEntity.tt"
        this.Write("}\r\n    ");
        
        #line default
        #line hidden
        
        #line 4799 "SchemaEntity.tt"

    }
    
        
        #line default
        #line hidden
        return this.GenerationEnvironment.ToString();
    }
    
    public virtual void Initialize() {
    }
}

public class SchemaEntityBase {
    
    private global::System.Text.StringBuilder builder;
    
    private global::System.Collections.Generic.IDictionary<string, object> session;
    
    private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
    
    private string currentIndent = string.Empty;
    
    private global::System.Collections.Generic.Stack<int> indents;
    
    private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
    
    public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
        get {
            return this.session;
        }
        set {
            this.session = value;
        }
    }
    
    public global::System.Text.StringBuilder GenerationEnvironment {
        get {
            if ((this.builder == null)) {
                this.builder = new global::System.Text.StringBuilder();
            }
            return this.builder;
        }
        set {
            this.builder = value;
        }
    }
    
    protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
        get {
            if ((this.errors == null)) {
                this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
            }
            return this.errors;
        }
    }
    
    public string CurrentIndent {
        get {
            return this.currentIndent;
        }
    }
    
    private global::System.Collections.Generic.Stack<int> Indents {
        get {
            if ((this.indents == null)) {
                this.indents = new global::System.Collections.Generic.Stack<int>();
            }
            return this.indents;
        }
    }
    
    public ToStringInstanceHelper ToStringHelper {
        get {
            return this._toStringHelper;
        }
    }
    
    public void Error(string message) {
        this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
    }
    
    public void Warning(string message) {
        global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
        val.IsWarning = true;
        this.Errors.Add(val);
    }
    
    public string PopIndent() {
        if ((this.Indents.Count == 0)) {
            return string.Empty;
        }
        int lastPos = (this.currentIndent.Length - this.Indents.Pop());
        string last = this.currentIndent.Substring(lastPos);
        this.currentIndent = this.currentIndent.Substring(0, lastPos);
        return last;
    }
    
    public void PushIndent(string indent) {
        this.Indents.Push(indent.Length);
        this.currentIndent = (this.currentIndent + indent);
    }
    
    public void ClearIndent() {
        this.currentIndent = string.Empty;
        this.Indents.Clear();
    }
    
    public void Write(string textToAppend) {
        this.GenerationEnvironment.Append(textToAppend);
    }
    
    public void Write(string format, params object[] args) {
        this.GenerationEnvironment.AppendFormat(format, args);
    }
    
    public void WriteLine(string textToAppend) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendLine(textToAppend);
    }
    
    public void WriteLine(string format, params object[] args) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendFormat(format, args);
        this.GenerationEnvironment.AppendLine();
    }
    
    public class ToStringInstanceHelper {
        
        private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
        
        public global::System.IFormatProvider FormatProvider {
            get {
                return this.formatProvider;
            }
            set {
                if ((value != null)) {
                    this.formatProvider = value;
                }
            }
        }
        
        public string ToStringWithCulture(object objectToConvert) {
            if ((objectToConvert == null)) {
                throw new global::System.ArgumentNullException("objectToConvert");
            }
            global::System.Type type = objectToConvert.GetType();
            global::System.Type iConvertibleType = typeof(global::System.IConvertible);
            if (iConvertibleType.IsAssignableFrom(type)) {
                return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
            }
            global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                        iConvertibleType});
            if ((methInfo != null)) {
                return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                            this.formatProvider})));
            }
            return objectToConvert.ToString();
        }
    }
}
