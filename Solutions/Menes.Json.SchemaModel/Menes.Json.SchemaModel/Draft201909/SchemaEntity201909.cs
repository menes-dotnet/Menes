//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Menes.Json;
using System;
using System.Collections.Generic;

#pragma warning disable

public partial class SchemaEntity201909 : SchemaEntity201909Base {
    
    public virtual string TransformText() {
        this.GenerationEnvironment = null;
        
        #line 4 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5 "SchemaEntity201909.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 9 "SchemaEntity201909.tt"
        this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace ");
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity201909.tt"
        this.Write("\r\n{\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.C" +
                "ollections.Immutable;\r\n    using System.Text.Json;\r\n    using System.Text.Regula" +
                "rExpressions;\r\n    using Menes.Json;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 29 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 32 "SchemaEntity201909.tt"
        this.Write("    /// <summary>\r\n    /// A type generated from a JsonSchema specification.\r\n   " +
                " /// </summary>\r\n    public readonly struct ");
        
        #line default
        #line hidden
        
        #line 35 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 35 "SchemaEntity201909.tt"
        this.Write(" :\r\n    ");
        
        #line default
        #line hidden
        
        #line 36 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 40 "SchemaEntity201909.tt"
        this.Write("        IJsonObject<");
        
        #line default
        #line hidden
        
        #line 40 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 40 "SchemaEntity201909.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 41 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 44 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 44 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 48 "SchemaEntity201909.tt"
        this.Write("        IJsonArray<");
        
        #line default
        #line hidden
        
        #line 48 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 48 "SchemaEntity201909.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 49 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 52 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 52 "SchemaEntity201909.tt"

    if(!IsImplicitObject && !IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 56 "SchemaEntity201909.tt"
        this.Write("        IJsonValue,\r\n    ");
        
        #line default
        #line hidden
        
        #line 57 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 60 "SchemaEntity201909.tt"
        this.Write("        IEquatable<");
        
        #line default
        #line hidden
        
        #line 60 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 60 "SchemaEntity201909.tt"
        this.Write(">\r\n    {\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 63 "SchemaEntity201909.tt"

    if(HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 67 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 68 "SchemaEntity201909.tt"

        foreach(var patternProperty in PatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 72 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// A pattern property matching ");
        
        #line default
        #line hidden
        
        #line 73 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(patternProperty.Pattern, true).Trim('"')));
        
        #line default
        #line hidden
        
        #line 73 "SchemaEntity201909.tt"
        this.Write(" producing a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 73 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( patternProperty.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 73 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public static Regex PatternProperty");
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( PatternPropertySuffix(patternProperty) ));
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write(" = new Regex(");
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(patternProperty.Pattern, true) ));
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write(", RegexOptions.Compiled);\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 77 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 80 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 80 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 83 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 84 "SchemaEntity201909.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 88 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 89 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 93 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// JSON property name for <see cref=\"");
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static readonly ReadOnlyMemory<byte>" +
                " ");
        
        #line default
        #line hidden
        
        #line 97 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 97 "SchemaEntity201909.tt"
        this.Write("Utf8JsonPropertyName = new byte[] { ");
        
        #line default
        #line hidden
        
        #line 97 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( GetEncodedBytes(property.JsonPropertyName) ));
        
        #line default
        #line hidden
        
        #line 97 "SchemaEntity201909.tt"
        this.Write(" };\r\n\r\n        /// <summary>\r\n        /// JSON property name for <see cref=\"");
        
        #line default
        #line hidden
        
        #line 100 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 100 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static readonly string ");
        
        #line default
        #line hidden
        
        #line 102 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 102 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName = ");
        
        #line default
        #line hidden
        
        #line 102 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.JsonPropertyName, true)));
        
        #line default
        #line hidden
        
        #line 102 "SchemaEntity201909.tt"
        this.Write(";\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 104 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 107 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 108 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 111 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 112 "SchemaEntity201909.tt"

    if(HasConstString)
    {
    
        
        #line default
        #line hidden
        
        #line 116 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 116 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 116 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 116 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstString ));
        
        #line default
        #line hidden
        
        #line 116 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 117 "SchemaEntity201909.tt"

    }
    else if(HasConstBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 122 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 122 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 122 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 122 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstBoolean ));
        
        #line default
        #line hidden
        
        #line 122 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 123 "SchemaEntity201909.tt"

    }
    else if(HasConstNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 128 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 128 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 128 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 128 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstNumber ));
        
        #line default
        #line hidden
        
        #line 128 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity201909.tt"

    }
    else if(HasConstObject)
    {
    
        
        #line default
        #line hidden
        
        #line 134 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 134 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 134 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 134 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstObject ));
        
        #line default
        #line hidden
        
        #line 134 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 135 "SchemaEntity201909.tt"

    }
    else if(HasConstArray)
    {
    
        
        #line default
        #line hidden
        
        #line 140 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 140 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 140 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 140 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstArray ));
        
        #line default
        #line hidden
        
        #line 140 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 141 "SchemaEntity201909.tt"

    }
    else if(HasConstNull)
    {
    
        
        #line default
        #line hidden
        
        #line 146 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 146 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 146 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(\"null\");\r\n    ");
        
        #line default
        #line hidden
        
        #line 147 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 150 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 151 "SchemaEntity201909.tt"


    if(HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 156 "SchemaEntity201909.tt"
        this.Write("        private static readonly Regex __MenesPatternExpression = new Regex(");
        
        #line default
        #line hidden
        
        #line 156 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(Pattern, true) ));
        
        #line default
        #line hidden
        
        #line 156 "SchemaEntity201909.tt"
        this.Write(", RegexOptions.Compiled);\r\n    ");
        
        #line default
        #line hidden
        
        #line 157 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 160 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 161 "SchemaEntity201909.tt"

    if(HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 165 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, ImmutableArray<ReadOn" +
                "lyMemory<byte>>> __MenesDependentRequired = BuildDependentRequired();\r\n    ");
        
        #line default
        #line hidden
        
        #line 166 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 169 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 170 "SchemaEntity201909.tt"

    if(HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 174 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, PropertyValidator<");
        
        #line default
        #line hidden
        
        #line 174 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 174 "SchemaEntity201909.tt"
        this.Write(">> __MenesDependentSchema = CreateDependentSchemaValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 175 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 178 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 179 "SchemaEntity201909.tt"

    if(HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 183 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, PropertyValidator<");
        
        #line default
        #line hidden
        
        #line 183 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 183 "SchemaEntity201909.tt"
        this.Write(">> __MenesLocalProperties = CreateLocalPropertyValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 184 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 187 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 188 "SchemaEntity201909.tt"

    if(HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 192 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, JsonAny> __MenesDefau" +
                "lts = BuildDefaults();\r\n    ");
        
        #line default
        #line hidden
        
        #line 193 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 196 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 198 "SchemaEntity201909.tt"

    if(HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 202 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<Regex, Func<Property, Validat" +
                "ionContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = Crea" +
                "tePatternPropertiesValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 203 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 206 "SchemaEntity201909.tt"
        this.Write("\r\n        private readonly JsonElement jsonElementBacking;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 209 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 213 "SchemaEntity201909.tt"
        this.Write("        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;\r\n  " +
                "  ");
        
        #line default
        #line hidden
        
        #line 214 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 217 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 218 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 222 "SchemaEntity201909.tt"
        this.Write("        private readonly ImmutableList<JsonAny>? arrayBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 223 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 226 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 227 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 231 "SchemaEntity201909.tt"
        this.Write("        private readonly double? numberBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 232 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 235 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 236 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 240 "SchemaEntity201909.tt"
        this.Write("        private readonly string? stringBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 241 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 244 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 245 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 249 "SchemaEntity201909.tt"
        this.Write("        private readonly bool? booleanBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 250 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 253 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Initializes a new instance of the <see cref=" +
                "\"");
        
        #line default
        #line hidden
        
        #line 255 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 255 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">The backing " +
                "<see cref=\"JsonElement\"/>.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 258 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 258 "SchemaEntity201909.tt"
        this.Write("(JsonElement value)\r\n        {\r\n            this.jsonElementBacking = value;\r\n   " +
                " ");
        
        #line default
        #line hidden
        
        #line 261 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 265 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 266 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 269 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 269 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 273 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 274 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 277 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 277 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 281 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 282 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 285 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 285 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 289 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 290 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 293 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 293 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 297 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 298 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 301 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 303 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 307 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 308 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 308 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A property d" +
                "ictionary.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 311 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 311 "SchemaEntity201909.tt"
        this.Write("(ImmutableDictionary<string, JsonAny> value)\r\n        {\r\n            this.jsonEle" +
                "mentBacking = default;\r\n            this.objectBacking = value;\r\n        ");
        
        #line default
        #line hidden
        
        #line 315 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 319 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 320 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 323 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 323 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 327 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 328 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 331 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 331 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 335 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 336 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 339 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 339 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 343 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 344 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 347 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 350 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 350 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonObject\">The <se" +
                "e cref=\"JsonObject\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 353 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 353 "SchemaEntity201909.tt"
        this.Write(@"(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

        ");
        
        #line default
        #line hidden
        
        #line 366 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 370 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 371 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 374 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 374 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 378 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 379 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 382 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 382 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 386 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 387 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 390 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 390 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 394 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 395 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 398 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 399 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 402 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 403 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 407 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 408 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 408 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">An array lis" +
                "t.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 411 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 411 "SchemaEntity201909.tt"
        this.Write("(ImmutableList<JsonAny> value)\r\n        {\r\n            this.jsonElementBacking = " +
                "default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 414 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 418 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 419 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 422 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 422 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 426 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 427 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 430 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 430 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 434 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 435 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 438 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 438 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 442 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 443 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 446 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n     " +
                "   /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 450 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 450 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonArray\">The <see" +
                " cref=\"JsonArray\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 453 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 453 "SchemaEntity201909.tt"
        this.Write(@"(JsonArray jsonArray)
        {
            if (jsonArray.HasJsonElement)
            {
                this.jsonElementBacking = jsonArray.AsJsonElement;
                this.arrayBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.arrayBacking = jsonArray.AsItemsList;
            }

        ");
        
        #line default
        #line hidden
        
        #line 466 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 470 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 471 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 474 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 474 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 478 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 479 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 482 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 482 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 486 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 487 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 490 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 490 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 494 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 495 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 498 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 499 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 502 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 503 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 507 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 508 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 508 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonNumber\">The <se" +
                "e cref=\"JsonNumber\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 511 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 511 "SchemaEntity201909.tt"
        this.Write(@"(JsonNumber jsonNumber)
        {
            if (jsonNumber.HasJsonElement)
            {
                this.jsonElementBacking = jsonNumber.AsJsonElement;
                this.numberBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.numberBacking = jsonNumber.GetDouble();
            }
        ");
        
        #line default
        #line hidden
        
        #line 523 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 527 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 528 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 531 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 531 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 535 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 536 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 539 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 539 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 543 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 544 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 547 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 547 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 551 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 552 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 555 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 558 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 558 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 561 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 561 "SchemaEntity201909.tt"
        this.Write("(double value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 564 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 568 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 569 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 572 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 572 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 576 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 577 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 580 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 580 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 584 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 585 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 588 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 588 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 592 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 593 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 596 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 600 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 600 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 603 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 603 "SchemaEntity201909.tt"
        this.Write("(int value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 606 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 610 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 611 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 614 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 614 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 618 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 619 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 622 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 622 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 626 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 627 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 630 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 630 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 634 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 635 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 638 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 642 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 642 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 645 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 645 "SchemaEntity201909.tt"
        this.Write("(float value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 648 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 652 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 653 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 656 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 656 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 660 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 661 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 664 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 664 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 668 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 669 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 672 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 672 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 676 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 677 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 680 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 684 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 684 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 687 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 687 "SchemaEntity201909.tt"
        this.Write("(long value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        " +
                "");
        
        #line default
        #line hidden
        
        #line 690 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 694 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 695 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 698 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 698 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 702 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 703 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 706 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 706 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 710 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 711 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 714 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 714 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 718 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 719 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 722 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 724 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 727 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 728 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 732 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 733 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 733 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 736 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 736 "SchemaEntity201909.tt"
        this.Write("(string value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 739 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 743 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 744 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 747 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 747 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 751 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 752 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 755 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 755 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 759 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 760 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 763 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 763 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 767 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 768 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 771 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 775 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 775 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 778 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 778 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 781 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 785 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 786 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 789 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 789 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 793 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 794 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 797 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 797 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 801 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 802 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 805 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 805 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 809 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 810 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 813 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = value.ToString();\r\n        }\r\n\r\n        /// <sum" +
                "mary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 817 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 817 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 820 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 820 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 823 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 827 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 828 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 831 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 831 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 835 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 836 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 839 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 839 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 843 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 844 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 847 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 847 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 851 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 852 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 855 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = System.Text.Encoding.UTF8.GetString(value);\r\n   " +
                "     }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the <" +
                "see cref=\"");
        
        #line default
        #line hidden
        
        #line 859 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 859 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonString\">The <se" +
                "e cref=\"JsonString\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 862 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 862 "SchemaEntity201909.tt"
        this.Write(@"(JsonString jsonString)
        {
            if (jsonString.HasJsonElement)
            {
                this.jsonElementBacking = jsonString.AsJsonElement;
                this.stringBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.stringBacking = jsonString;
            }

        ");
        
        #line default
        #line hidden
        
        #line 875 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 879 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 880 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 883 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 883 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 887 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 888 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 891 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 891 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 895 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 896 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 899 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 899 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 903 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 904 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 907 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 908 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 911 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 912 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 916 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 917 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 917 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonBoolean\">The <s" +
                "ee cref=\"JsonBoolean\"/> from which to construct the value.</param>\r\n        publ" +
                "ic ");
        
        #line default
        #line hidden
        
        #line 920 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 920 "SchemaEntity201909.tt"
        this.Write(@"(JsonBoolean jsonBoolean)
        {
            if (jsonBoolean.HasJsonElement)
            {
                this.jsonElementBacking = jsonBoolean.AsJsonElement;
                this.booleanBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.booleanBacking = jsonBoolean.GetBoolean();
            }

        ");
        
        #line default
        #line hidden
        
        #line 933 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 937 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 938 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 941 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 941 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 945 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 946 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 949 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 949 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 953 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 954 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 957 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 957 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 961 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 962 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 965 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n                /// <summary>\r\n        /// Initializes a new instanc" +
                "e of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 968 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 968 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"boolean\">The <see c" +
                "ref=\"bool\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 971 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 971 "SchemaEntity201909.tt"
        this.Write("(bool boolean)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "      this.booleanBacking = boolean;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 976 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 980 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 981 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 984 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 984 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 988 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 989 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 992 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 992 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 996 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 997 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1000 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1000 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1004 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1005 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1008 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1010 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1013 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1014 "SchemaEntity201909.tt"
 /* Implicit Constructors */ 
        
        #line default
        #line hidden
        
        #line 1015 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1016 "SchemaEntity201909.tt"

    foreach (Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1024 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1025 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1025 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"conversion\">The <se" +
                "e cref=\"");
        
        #line default
        #line hidden
        
        #line 1027 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1027 "SchemaEntity201909.tt"
        this.Write("\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1028 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1028 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1028 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1028 "SchemaEntity201909.tt"
        this.Write(" conversion)\r\n        {\r\n            if (conversion.HasJsonElement)\r\n            " +
                "{\r\n                this.jsonElementBacking = conversion.AsJsonElement;\r\n        " +
                "");
        
        #line default
        #line hidden
        
        #line 1033 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1037 "SchemaEntity201909.tt"
        this.Write("                this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1038 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1041 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1041 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1045 "SchemaEntity201909.tt"
        this.Write("                this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1046 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1049 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1050 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1054 "SchemaEntity201909.tt"
        this.Write("                this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1055 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1058 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1058 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1062 "SchemaEntity201909.tt"
        this.Write("                this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1063 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1066 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1066 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1070 "SchemaEntity201909.tt"
        this.Write("                this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1071 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1074 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                this.jsonElementB" +
                "acking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1078 "SchemaEntity201909.tt"

        if(conversion.IsObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1082 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1090 "SchemaEntity201909.tt"

        }
        else if (IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1095 "SchemaEntity201909.tt"
        this.Write("                this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1096 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1099 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1099 "SchemaEntity201909.tt"

        if(conversion.IsBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1103 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1111 "SchemaEntity201909.tt"

        }
        else if (IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1116 "SchemaEntity201909.tt"
        this.Write("                this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1117 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1120 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1121 "SchemaEntity201909.tt"

        if(conversion.IsArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1125 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Array)
                {
                    this.arrayBacking = conversion;
                }
                else
                {
                    this.arrayBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1133 "SchemaEntity201909.tt"

        }
        else if (IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1138 "SchemaEntity201909.tt"
        this.Write("                this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1139 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1142 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1142 "SchemaEntity201909.tt"

        if(conversion.IsNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1146 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Number)
                {
                    this.numberBacking = conversion;
                }
                else
                {
                    this.numberBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1154 "SchemaEntity201909.tt"

        }
        else if (IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1159 "SchemaEntity201909.tt"
        this.Write("                this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1160 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1163 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1163 "SchemaEntity201909.tt"

        if(conversion.IsString)
        {
        
        
        #line default
        #line hidden
        
        #line 1167 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.String)
                {
                    this.stringBacking = conversion;
                }
                else
                {
                    this.stringBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1175 "SchemaEntity201909.tt"

        }
        else if (IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1180 "SchemaEntity201909.tt"
        this.Write("                this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1181 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1184 "SchemaEntity201909.tt"
        this.Write("            }\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1186 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1189 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1191 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1195 "SchemaEntity201909.tt"
        this.Write(@"        /// <inheritdoc/>
        public int Length
        {
            get
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return items.Count;
                }

                return this.jsonElementBacking.GetArrayLength();
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 1208 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1211 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1212 "SchemaEntity201909.tt"

    foreach (Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1220 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets the value as a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1221 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1221 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity201909.tt"
        this.Write(" As");
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this;\r\n      " +
                "      }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets a value indicating" +
                " whether this is a valid <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1232 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1232 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public bool Is");
        
        #line default
        #line hidden
        
        #line 1234 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1234 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return ((");
        
        #line default
        #line hidden
        
        #line 1238 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1238 "SchemaEntity201909.tt"
        this.Write(")this).Validate().IsValid;\r\n            }\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1242 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1245 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1246 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 1250 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1250 "SchemaEntity201909.tt"

        if (HasThen)
        {
        
        
        #line default
        #line hidden
        
        #line 1254 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this matches t" +
                "he If/Then type.\r\n        /// </summary>\r\n        public bool IsIfMatch");
        
        #line default
        #line hidden
        
        #line 1257 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                ThenDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1257 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1261 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                IfFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1261 "SchemaEntity201909.tt"
        this.Write(">().IsValid(); \r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// G" +
                "ets this as the matching type for the If/Then clause.\r\n        /// </summary>\r\n " +
                "       public ");
        
        #line default
        #line hidden
        
        #line 1268 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1268 "SchemaEntity201909.tt"
        this.Write(" AsIfMatch");
        
        #line default
        #line hidden
        
        #line 1268 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1268 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1272 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1272 "SchemaEntity201909.tt"
        this.Write(">(); \r\n            }\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1276 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1279 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1280 "SchemaEntity201909.tt"

        if (HasElse)
        {
        
        
        #line default
        #line hidden
        
        #line 1284 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this matches t" +
                "he If/Else type.\r\n        /// </summary>\r\n        public bool IsElseMatch");
        
        #line default
        #line hidden
        
        #line 1287 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1287 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return !this.As<");
        
        #line default
        #line hidden
        
        #line 1291 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(IfFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1291 "SchemaEntity201909.tt"
        this.Write(">().IsValid(); \r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// G" +
                "ets this as the matching type for the If/Else clause.\r\n        /// </summary>\r\n " +
                "       public ");
        
        #line default
        #line hidden
        
        #line 1298 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1298 "SchemaEntity201909.tt"
        this.Write(" AsElseMatch");
        
        #line default
        #line hidden
        
        #line 1298 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1298 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1302 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1302 "SchemaEntity201909.tt"
        this.Write(">(); \r\n            }\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1305 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1308 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1308 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1311 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1312 "SchemaEntity201909.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 1316 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1316 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 1320 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Gets ");
        
        #line default
        #line hidden
        
        #line 1322 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1322 "SchemaEntity201909.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// {Property title}.\r\n" +
                "        /// {Property description}.\r\n        /// </remarks>\r\n        /// <exampl" +
                "e>\r\n        /// {Property examples}.\r\n        /// </example>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1331 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1331 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 1331 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1331 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                if (this.objectBacki" +
                "ng is ImmutableDictionary<string, JsonAny> properties)\r\n                {\r\n     " +
                "               if(properties.TryGetValue(");
        
        #line default
        #line hidden
        
        #line 1337 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1337 "SchemaEntity201909.tt"
        this.Write(@"JsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(");
        
        #line default
        #line hidden
        
        #line 1345 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1345 "SchemaEntity201909.tt"
        this.Write("Utf8JsonPropertyName.Span, out JsonElement result))\r\n                    {\r\n     " +
                "                   return new  ");
        
        #line default
        #line hidden
        
        #line 1347 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1347 "SchemaEntity201909.tt"
        this.Write("(result);\r\n                    }\r\n                }\r\n\r\n                return def" +
                "ault;\r\n            }\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1355 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1358 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1358 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1361 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this is backed" +
                " by a JSON element.\r\n        /// </summary>\r\n        public bool HasJsonElement " +
                "=>\r\n    ");
        
        #line default
        #line hidden
        
        #line 1365 "SchemaEntity201909.tt"

    bool isFirstProperty = true;
    
        
        #line default
        #line hidden
        
        #line 1368 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1369 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1373 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking is null\r\n            \r\n    ");
        
        #line default
        #line hidden
        
        #line 1375 "SchemaEntity201909.tt"

        isFirstProperty = false;
    }
    
        
        #line default
        #line hidden
        
        #line 1379 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1380 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1384 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1384 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1392 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1393 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1396 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1397 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1400 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1400 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1404 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1404 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1412 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1413 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1416 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1417 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1420 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1420 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1424 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1424 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1432 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1433 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1436 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1437 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1440 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1440 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1444 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1444 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1452 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1453 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1456 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1457 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1460 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1461 "SchemaEntity201909.tt"

    if (!IsImplicitObject && !IsImplicitArray && !IsImplicitNumber && !IsImplicitBoolean && !IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1465 "SchemaEntity201909.tt"
        this.Write("    true\r\n    ");
        
        #line default
        #line hidden
        
        #line 1466 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1469 "SchemaEntity201909.tt"
        this.Write("            ;\r\n\r\n        /// <summary>\r\n        /// Gets the value as a JsonEleme" +
                "nt.\r\n        /// </summary>\r\n        public JsonElement AsJsonElement\r\n        {" +
                "\r\n            get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1478 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1482 "SchemaEntity201909.tt"
        this.Write("          \r\n                if (this.objectBacking is ImmutableDictionary<string," +
                " JsonAny> objectBacking)\r\n                {\r\n                    return JsonObje" +
                "ct.PropertiesToJsonElement(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1488 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1491 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1492 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1496 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return JsonArray.ItemsToJsonElement(arrayBa" +
                "cking);\r\n                }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1500 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1503 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1504 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1508 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return JsonNumber.NumberToJsonElement(numberBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1513 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1516 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1517 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1521 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is string stringBacking)\r\n                " +
                "{\r\n                    return JsonString.StringToJsonElement(stringBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1526 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1529 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1530 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1534 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return JsonBoolean.BoolToJsonElement(booleanBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1539 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1542 "SchemaEntity201909.tt"
        this.Write("\r\n                return this.jsonElementBacking;\r\n            }\r\n        }\r\n\r\n  " +
                "      /// <inheritdoc/>\r\n        public JsonValueKind ValueKind\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1552 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1556 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)\r\n" +
                "                {\r\n                    return JsonValueKind.Object;\r\n           " +
                "     }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1561 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1564 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1565 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1569 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny>)\r\n               " +
                " {\r\n                    return JsonValueKind.Array;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1574 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1577 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1578 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1582 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double)\r\n                {\r\n           " +
                "         return JsonValueKind.Number;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1587 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1590 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1591 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1595 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is string)\r\n                {\r\n           " +
                "         return JsonValueKind.String;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1600 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1603 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1604 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1608 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return booleanBacking ? JsonValueKind.True : JsonValueKin" +
                "d.False;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1613 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1616 "SchemaEntity201909.tt"
        this.Write("\r\n                return this.jsonElementBacking.ValueKind;\r\n            }\r\n     " +
                "   }\r\n\r\n        /// <inheritdoc/>\r\n        public JsonAny AsAny\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1626 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1630 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<string, JsonAny> ob" +
                "jectBacking)\r\n                {\r\n                    return new JsonAny(objectBa" +
                "cking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1635 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1638 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1639 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1643 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return new JsonAny(arrayBacking);\r\n        " +
                "        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1648 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1651 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1652 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1656 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return new JsonAny(numberBacking);\r\n                }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 1661 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1664 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1665 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1669 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is string stringBacking)\r\n                " +
                "{\r\n                    return new JsonAny(stringBacking);\r\n                }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 1674 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1677 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1678 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1682 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return new JsonAny(booleanBacking);\r\n                }\r\n\r" +
                "\n    ");
        
        #line default
        #line hidden
        
        #line 1687 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1690 "SchemaEntity201909.tt"
        this.Write("\r\n                return new JsonAny(this.jsonElementBacking);\r\n            }\r\n  " +
                "      }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1695 "SchemaEntity201909.tt"

    foreach(Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1703 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Conversion from <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1704 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1704 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1707 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1707 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1707 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1707 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1709 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1709 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to <see cref" +
                "=\"");
        
        #line default
        #line hidden
        
        #line 1713 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1713 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1716 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1716 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1716 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1716 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 1718 "SchemaEntity201909.tt"

        if(conversion.IsObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1722 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Object)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1724 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1724 "SchemaEntity201909.tt"
        this.Write("(value.AsObject);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1726 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1729 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1729 "SchemaEntity201909.tt"

        if(conversion.IsArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1733 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Array)\r\n            {\r\n         " +
                "       return new ");
        
        #line default
        #line hidden
        
        #line 1735 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1735 "SchemaEntity201909.tt"
        this.Write("(value.AsArray);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1737 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1740 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1740 "SchemaEntity201909.tt"

        if(conversion.IsString)
        {
        
        
        #line default
        #line hidden
        
        #line 1744 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.String)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1746 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1746 "SchemaEntity201909.tt"
        this.Write("(value.AsString);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1748 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1751 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1751 "SchemaEntity201909.tt"

        if(conversion.IsBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1755 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonV" +
                "alueKind.False)\r\n            {\r\n                return new ");
        
        #line default
        #line hidden
        
        #line 1757 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1757 "SchemaEntity201909.tt"
        this.Write("(value.AsBoolean);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1759 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1762 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1762 "SchemaEntity201909.tt"

        if(conversion.IsNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1766 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Number)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1768 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1768 "SchemaEntity201909.tt"
        this.Write("(value.AsNumber);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1770 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1773 "SchemaEntity201909.tt"
        this.Write("            return default;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1775 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1778 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1779 "SchemaEntity201909.tt"

    foreach(Conversion conversion in ConversionsViaCast)
    {
    
        
        #line default
        #line hidden
        
        #line 1783 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Conversion from <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1784 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1784 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1787 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1787 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1787 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1787 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return (");
        
        #line default
        #line hidden
        
        #line 1789 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.ConvertViaDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1789 "SchemaEntity201909.tt"
        this.Write(")value;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to <see cref=" +
                "\"");
        
        #line default
        #line hidden
        
        #line 1793 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1793 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1796 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1796 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1796 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1796 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return (");
        
        #line default
        #line hidden
        
        #line 1798 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.ConvertViaDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1798 "SchemaEntity201909.tt"
        this.Write(")value;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1800 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1803 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from any.\r\n        /// </summary>" +
                "\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n    " +
                "    public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1808 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1808 "SchemaEntity201909.tt"
        this.Write("(JsonAny value)\r\n        {\r\n            if (value.HasJsonElement)\r\n            {\r" +
                "\n                return new ");
        
        #line default
        #line hidden
        
        #line 1812 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1812 "SchemaEntity201909.tt"
        this.Write("(value.AsJsonElement);\r\n            }\r\n\r\n            return value.As<");
        
        #line default
        #line hidden
        
        #line 1815 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1815 "SchemaEntity201909.tt"
        this.Write(">();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to any.\r\n       " +
                " /// </summary>\r\n        /// <param name=\"value\">The value from which to convert" +
                ".</param>\r\n        public static implicit operator JsonAny(");
        
        #line default
        #line hidden
        
        #line 1822 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1822 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsAny;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1827 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1831 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from array.\r\n        /// </summar" +
                "y>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n  " +
                "      public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1836 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1836 "SchemaEntity201909.tt"
        this.Write("(JsonArray value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1838 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1838 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to array.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"value\">The value from which to c" +
                "onvert.</param>\r\n        public static implicit operator JsonArray(");
        
        #line default
        #line hidden
        
        #line 1845 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1845 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsArray;
        }
       
        /// <summary>
        /// Implicit conversion to an <see cref=""ImmutableList{T}""/> of <see cref=""JsonAny""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ImmutableList<JsonAny>(");
        
        #line default
        #line hidden
        
        #line 1854 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1854 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsArray.AsItemsList;
        }

        /// <summary>
        /// Implicit conversion from an <see cref=""ImmutableList{T}""/> of <see cref=""JsonAny""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1863 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1863 "SchemaEntity201909.tt"
        this.Write("(ImmutableList<JsonAny> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1865 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1865 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1867 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1870 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1871 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1875 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from object.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1880 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1880 "SchemaEntity201909.tt"
        this.Write("(JsonObject value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1882 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1882 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to object.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonObject(");
        
        #line default
        #line hidden
        
        #line 1889 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1889 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsObject;
        }

                /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(");
        
        #line default
        #line hidden
        
        #line 1898 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1898 "SchemaEntity201909.tt"
        this.Write(@"  value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1907 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1907 "SchemaEntity201909.tt"
        this.Write(" (ImmutableDictionary<string, JsonAny> value)\r\n        {\r\n            return new " +
                "");
        
        #line default
        #line hidden
        
        #line 1909 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1909 "SchemaEntity201909.tt"
        this.Write(" (value);\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1912 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1915 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1920 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from string.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity201909.tt"
        this.Write("(string value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1927 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1927 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator string(");
        
        #line default
        #line hidden
        
        #line 1934 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1934 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString;
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1943 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1943 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1945 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1945 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator ReadOnlySpan<char>(");
        
        #line default
        #line hidden
        
        #line 1952 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1952 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString;
        }

        /// <summary>
        /// Conversion from utf8 bytes.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1961 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1961 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1963 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1963 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to utf8 byte" +
                "s.\r\n        /// </summary>\r\n        /// <param name=\"value\">The number from whic" +
                "h to convert.</param>\r\n        public static implicit operator ReadOnlySpan<byte" +
                ">(");
        
        #line default
        #line hidden
        
        #line 1970 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1970 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString;
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1979 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1979 "SchemaEntity201909.tt"
        this.Write("(JsonString value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1981 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1981 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonString(");
        
        #line default
        #line hidden
        
        #line 1988 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1988 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsString;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1993 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1996 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1997 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2001 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from double.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2006 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2006 "SchemaEntity201909.tt"
        this.Write("(double value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2008 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2008 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to double.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The number from which t" +
                "o convert.</param>\r\n        public static implicit operator double(");
        
        #line default
        #line hidden
        
        #line 2015 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2015 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetDouble();
        }

        /// <summary>
        /// Conversion from float.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2024 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2024 "SchemaEntity201909.tt"
        this.Write("(float value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2026 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2026 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to float.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"number\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator float(");
        
        #line default
        #line hidden
        
        #line 2033 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2033 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetSingle();
        }

        /// <summary>
        /// Conversion from long.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2042 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2042 "SchemaEntity201909.tt"
        this.Write("(long value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2044 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2044 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to long.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"number\">The number from which to " +
                "convert.</param>\r\n        public static implicit operator long(");
        
        #line default
        #line hidden
        
        #line 2051 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2051 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt64();
        }

        /// <summary>
        /// Conversion from int.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2060 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2060 "SchemaEntity201909.tt"
        this.Write("(int value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2062 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2062 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to int.\r\n   " +
                "     /// </summary>\r\n        /// <param name=\"number\">The number from which to c" +
                "onvert.</param>\r\n        public static implicit operator int(");
        
        #line default
        #line hidden
        
        #line 2069 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2069 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt32();
        }

        /// <summary>
        /// Conversion from number.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2078 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2078 "SchemaEntity201909.tt"
        this.Write("(JsonNumber value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2080 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2080 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to number.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The value from which to" +
                " convert.</param>\r\n        public static implicit operator JsonNumber(");
        
        #line default
        #line hidden
        
        #line 2087 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2087 "SchemaEntity201909.tt"
        this.Write(" number)\r\n        {\r\n            return number.AsNumber;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2092 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2095 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2096 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2100 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from bool.\r\n        /// </summary" +
                ">\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n   " +
                "     public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2105 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2105 "SchemaEntity201909.tt"
        this.Write("(bool value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2107 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2107 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator bool(");
        
        #line default
        #line hidden
        
        #line 2114 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2114 "SchemaEntity201909.tt"
        this.Write(@" boolean)
        {
            return boolean.AsBoolean.GetBoolean();
        }

        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2123 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2123 "SchemaEntity201909.tt"
        this.Write("(JsonBoolean value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2125 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2125 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonBoolean(");
        
        #line default
        #line hidden
        
        #line 2132 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2132 "SchemaEntity201909.tt"
        this.Write(" boolean)\r\n        {\r\n            return boolean.AsBoolean;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2137 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2140 "SchemaEntity201909.tt"
        this.Write(@"
        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name=""lhs"">The left hand side of the comparison.</param>
        /// <param name=""rhs"">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(");
        
        #line default
        #line hidden
        
        #line 2147 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2147 "SchemaEntity201909.tt"
        this.Write(" lhs, ");
        
        #line default
        #line hidden
        
        #line 2147 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2147 "SchemaEntity201909.tt"
        this.Write(@" rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name=""lhs"">The left hand side of the comparison.</param>
        /// <param name=""rhs"">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(");
        
        #line default
        #line hidden
        
        #line 2158 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2158 "SchemaEntity201909.tt"
        this.Write(" lhs, ");
        
        #line default
        #line hidden
        
        #line 2158 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2158 "SchemaEntity201909.tt"
        this.Write(" rhs)\r\n        {\r\n            return !lhs.Equals(rhs);\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2163 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2167 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2167 "SchemaEntity201909.tt"

        if (CanEnumerateAsSpecificType)
        {
        
        
        #line default
        #line hidden
        
        #line 2171 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""items"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2176 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2176 "SchemaEntity201909.tt"
        this.Write(" From(params ");
        
        #line default
        #line hidden
        
        #line 2176 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2176 "SchemaEntity201909.tt"
        this.Write("[] items)\r\n        {\r\n            var builder = ImmutableList.CreateBuilder<JsonA" +
                "ny>();\r\n            foreach (var item in items)\r\n            {\r\n                " +
                "builder.Add(item);\r\n            }\r\n\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2184 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2184 "SchemaEntity201909.tt"
        this.Write(@"(builder.ToImmutable());
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2192 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2192 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2192 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2192 "SchemaEntity201909.tt"
        this.Write(" item1)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2194 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2194 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(" item2)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2205 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2205 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(" item2, ");
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2215 "SchemaEntity201909.tt"
        this.Write(" item3)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2217 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2217 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <param name=""item4"">The fourth item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(" item2, ");
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(" item3, ");
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2228 "SchemaEntity201909.tt"
        this.Write(" item4)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2230 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2230 "SchemaEntity201909.tt"
        this.Write("(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)it" +
                "em4));\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2232 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2237 "SchemaEntity201909.tt"
        this.Write(@"                /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""items"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2242 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2242 "SchemaEntity201909.tt"
        this.Write(" From(params JsonAny[] items)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2244 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2244 "SchemaEntity201909.tt"
        this.Write(@"(items.ToImmutableList());
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2252 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2252 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2254 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2254 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2263 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2263 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2265 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2265 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1, item2));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2275 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2275 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2, JsonAny item3)\r\n        {\r\n            return" +
                " new ");
        
        #line default
        #line hidden
        
        #line 2277 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2277 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1, item2, item3));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <param name=""item4"">The fourth item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2288 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2288 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2, JsonAny item3, JsonAny item4)\r\n        {\r\n   " +
                "         return new ");
        
        #line default
        #line hidden
        
        #line 2290 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2290 "SchemaEntity201909.tt"
        this.Write("(ImmutableList.Create(item1, item2, item3, item4));\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2292 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2295 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2296 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2299 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2300 "SchemaEntity201909.tt"

    if (HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 2304 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Creates an instance of a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 2305 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2305 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static ");
        
        #line default
        #line hidden
        
        #line 2307 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2307 "SchemaEntity201909.tt"
        this.Write(" Create(\r\n        ");
        
        #line default
        #line hidden
        
        #line 2308 "SchemaEntity201909.tt"

        bool isFirstCreateParameter = true;
        foreach(var property in RequiredAllOfAndRefProperties)
        {
            if (isFirstCreateParameter)
            {
                isFirstCreateParameter = false;
            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 2319 "SchemaEntity201909.tt"
        this.Write(", ");
        
        #line default
        #line hidden
        
        #line 2319 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 2322 "SchemaEntity201909.tt"
        this.Write("           ");
        
        #line default
        #line hidden
        
        #line 2322 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2322 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 2322 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2322 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2323 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"

        foreach(var property in OptionalAllOfAndRefProperties)
        {
            if (isFirstCreateParameter)
            {
                isFirstCreateParameter = false;
            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 2336 "SchemaEntity201909.tt"
        this.Write(", ");
        
        #line default
        #line hidden
        
        #line 2336 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 2339 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 2339 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2339 "SchemaEntity201909.tt"
        this.Write("? ");
        
        #line default
        #line hidden
        
        #line 2339 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2339 "SchemaEntity201909.tt"
        this.Write(" = null\r\n        ");
        
        #line default
        #line hidden
        
        #line 2340 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2343 "SchemaEntity201909.tt"
        this.Write("\r\n        )\r\n        {\r\n            var builder = ImmutableDictionary.CreateBuild" +
                "er<string, JsonAny>();\r\n        ");
        
        #line default
        #line hidden
        
        #line 2347 "SchemaEntity201909.tt"

        foreach(var property in RequiredAllOfAndRefProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write("            builder.Add(");
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, ");
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(");\r\n        ");
        
        #line default
        #line hidden
        
        #line 2352 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2355 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2355 "SchemaEntity201909.tt"

        foreach(var property in OptionalAllOfAndRefProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2359 "SchemaEntity201909.tt"
        this.Write("            if (");
        
        #line default
        #line hidden
        
        #line 2359 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2359 "SchemaEntity201909.tt"
        this.Write(" is ");
        
        #line default
        #line hidden
        
        #line 2359 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2359 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 2359 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2359 "SchemaEntity201909.tt"
        this.Write("__)\r\n            {\r\n                builder.Add(");
        
        #line default
        #line hidden
        
        #line 2361 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 2361 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, ");
        
        #line default
        #line hidden
        
        #line 2361 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2361 "SchemaEntity201909.tt"
        this.Write("__);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2363 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2366 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2369 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 2373 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Sets ");
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to set.</par" +
                "am>\r\n        /// <returns>The entity with the updated property.</returns>\r\n     " +
                "   public ");
        
        #line default
        #line hidden
        
        #line 2379 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2379 "SchemaEntity201909.tt"
        this.Write(" With");
        
        #line default
        #line hidden
        
        #line 2379 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2379 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 2379 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2379 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return this.SetProperty(");
        
        #line default
        #line hidden
        
        #line 2381 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2381 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, value);\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2384 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2387 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2391 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public override bool Equals(object? obj)\r\n  " +
                "      {\r\n            if (obj is ");
        
        #line default
        #line hidden
        
        #line 2395 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2395 "SchemaEntity201909.tt"
        this.Write(@" entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;

            return valueKind switch
            {
    ");
        
        #line default
        #line hidden
        
        #line 2410 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2414 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Object => this.AsObject.GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2415 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2420 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Object => this.AsObject().GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2421 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2424 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2424 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2428 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Array => this.AsArray.GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2429 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2434 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Array => this.AsArray().GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2435 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2438 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2438 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2442 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Number => this.AsNumber.GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2443 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2448 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Number => this.AsNumber().GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2449 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2452 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2452 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2456 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.String => this.AsString.GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2457 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2462 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.String => this.AsString().GetHashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2463 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2466 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2466 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2470 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.GetHa" +
                "shCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2471 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2476 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Get" +
                "HashCode(),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2477 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2480 "SchemaEntity201909.tt"
        this.Write(@"                JsonValueKind.Null => JsonNull.NullHashCode,
                _ => 0,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref=""Utf8JsonWriter""/>.
        /// </summary>
        /// <param name=""writer"">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
    ");
        
        #line default
        #line hidden
        
        #line 2491 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2495 "SchemaEntity201909.tt"
        this.Write("            if (this.objectBacking is ImmutableDictionary<string, JsonAny> object" +
                "Backing)\r\n            {\r\n                JsonObject.WriteProperties(objectBackin" +
                "g, writer);\r\n                return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2501 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2504 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2505 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2509 "SchemaEntity201909.tt"
        this.Write("            if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n      " +
                "      {\r\n                JsonArray.WriteItems(arrayBacking, writer);\r\n          " +
                "      return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2515 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2518 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2523 "SchemaEntity201909.tt"
        this.Write("            if (this.numberBacking is double numberBacking)\r\n            {\r\n     " +
                "           writer.WriteNumberValue(numberBacking);\r\n                return;\r\n   " +
                "         }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2529 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2532 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2533 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2537 "SchemaEntity201909.tt"
        this.Write("            if (this.stringBacking is string stringBacking)\r\n            {\r\n     " +
                "           writer.WriteStringValue(stringBacking);\r\n                return;\r\n   " +
                "         }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2543 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2546 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2547 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2551 "SchemaEntity201909.tt"
        this.Write("            if (this.booleanBacking is bool booleanBacking)\r\n            {\r\n     " +
                "           writer.WriteBooleanValue(booleanBacking);\r\n                return;\r\n " +
                "           }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2556 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2559 "SchemaEntity201909.tt"
        this.Write("\r\n            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)\r\n" +
                "            {\r\n                this.jsonElementBacking.WriteTo(writer);\r\n       " +
                "         return;\r\n            }\r\n\r\n            writer.WriteNullValue();\r\n       " +
                " }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2569 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2573 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2574 "SchemaEntity201909.tt"

        if (HasAdditionalPropertiesObject && !HasUnevaluatedPropertiesObject)
        {
        
        
        #line default
        #line hidden
        
        #line 2578 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the object as the given item type\r\n " +
                "       /// </summary>\r\n        public JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2581 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2581 "SchemaEntity201909.tt"
        this.Write("> EnumerateProperties()\r\n        {\r\n            if (this.objectBacking is Immutab" +
                "leDictionary<string, JsonAny> properties)\r\n            {\r\n                return" +
                " new JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2585 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2585 "SchemaEntity201909.tt"
        this.Write(">(properties);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKin" +
                "d == JsonValueKind.Object)\r\n            {\r\n                return new JsonObject" +
                "Enumerator<");
        
        #line default
        #line hidden
        
        #line 2590 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2590 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n\r\n    " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2596 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2599 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2600 "SchemaEntity201909.tt"

        if (!HasAdditionalPropertiesObject && HasUnevaluatedPropertiesObject)
        {
        
        
        #line default
        #line hidden
        
        #line 2604 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the object as the given item type\r\n " +
                "       /// </summary>\r\n        public JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2607 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2607 "SchemaEntity201909.tt"
        this.Write("> EnumerateProperties()\r\n        {\r\n            if (this.objectBacking is Immutab" +
                "leDictionary<string, JsonAny> properties)\r\n            {\r\n                return" +
                " new JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2611 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2611 "SchemaEntity201909.tt"
        this.Write(">(properties);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKin" +
                "d == JsonValueKind.Object)\r\n            {\r\n                return new JsonObject" +
                "Enumerator<");
        
        #line default
        #line hidden
        
        #line 2616 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2616 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n\r\n    " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2622 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2625 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public JsonObjectEnumerator EnumerateObject(" +
                ")\r\n        {\r\n            return this.AsObject.EnumerateObject();\r\n        }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 2632 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2635 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2636 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2640 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2641 "SchemaEntity201909.tt"

        if (CanEnumerateAsSpecificType)
        {
        
        
        #line default
        #line hidden
        
        #line 2645 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the items in the array as a <see cre" +
                "f=\"");
        
        #line default
        #line hidden
        
        #line 2646 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2646 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public JsonArrayEnumerator<");
        
        #line default
        #line hidden
        
        #line 2648 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2648 "SchemaEntity201909.tt"
        this.Write("> EnumerateItems()\r\n        {\r\n            if (this.arrayBacking is ImmutableList" +
                "<JsonAny> items)\r\n            {\r\n                return new JsonArrayEnumerator<" +
                "");
        
        #line default
        #line hidden
        
        #line 2652 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2652 "SchemaEntity201909.tt"
        this.Write(">(items);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKind == " +
                "JsonValueKind.Array)\r\n            {\r\n                return new JsonArrayEnumera" +
                "tor<");
        
        #line default
        #line hidden
        
        #line 2657 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2657 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n      " +
                "  }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2662 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2665 "SchemaEntity201909.tt"
        this.Write("        /// <inheritdoc/>\r\n        public JsonArrayEnumerator EnumerateArray()\r\n " +
                "       {\r\n            return this.AsArray.EnumerateArray();\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2670 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2673 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2674 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2678 "SchemaEntity201909.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        ");
        
        #line default
        #line hidden
        
        #line 2697 "SchemaEntity201909.tt"

        if (HasDefaults)
        {
        
        
        #line default
        #line hidden
        
        #line 2701 "SchemaEntity201909.tt"
        this.Write(@"        /// <inheritdoc/>
        public bool TryGetDefault(string name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name.ToString(), out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out value);
        }

        /// <inheritdoc/>
        public bool HasDefault(string name)
        {
            return __MenesDefaults.TryGetValue(name, out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<char> name)
        {
            return __MenesDefaults.TryGetValue(name.ToString(), out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<byte> utf8name)
        {
            return __MenesDefaults.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
        }

        ");
        
        #line default
        #line hidden
        
        #line 2737 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2740 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2741 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2744 "SchemaEntity201909.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
    ");
        
        #line default
        #line hidden
        
        #line 2758 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2762 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 2763 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2768 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Object => this.AsObject().Equals(other.AsObject())," +
                "\r\n    ");
        
        #line default
        #line hidden
        
        #line 2769 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2772 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2772 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2776 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),\r\n   " +
                " ");
        
        #line default
        #line hidden
        
        #line 2777 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2782 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),\r\n " +
                "   ");
        
        #line default
        #line hidden
        
        #line 2783 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2786 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2786 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2790 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 2791 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2796 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber())," +
                "\r\n    ");
        
        #line default
        #line hidden
        
        #line 2797 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2800 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2800 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2804 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.String => this.AsString.Equals(other.AsString()),\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 2805 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2810 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.String => this.AsString().Equals(other.AsString())," +
                "\r\n    ");
        
        #line default
        #line hidden
        
        #line 2811 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2814 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2814 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2818 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equal" +
                "s(other.AsBoolean()),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2819 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2824 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equ" +
                "als(other.AsBoolean()),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2825 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2828 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Null => true,\r\n                _ => false,\r\n       " +
                "     };\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool Equals(");
        
        #line default
        #line hidden
        
        #line 2834 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2834 "SchemaEntity201909.tt"
        this.Write(" other)\r\n        {\r\n            JsonValueKind valueKind = this.ValueKind;\r\n\r\n    " +
                "        if (other.ValueKind != valueKind)\r\n            {\r\n                return" +
                " false;\r\n            }\r\n\r\n            return valueKind switch\r\n            {\r\n  " +
                "              ");
        
        #line default
        #line hidden
        
        #line 2845 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2849 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),\r\n  " +
                "  ");
        
        #line default
        #line hidden
        
        #line 2850 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2855 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Object => this.AsObject().Equals(other.AsObject())," +
                "\r\n    ");
        
        #line default
        #line hidden
        
        #line 2856 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2859 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2859 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2863 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2864 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2869 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),\r\n " +
                "   ");
        
        #line default
        #line hidden
        
        #line 2870 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2873 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2873 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2877 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),\r\n  " +
                "  ");
        
        #line default
        #line hidden
        
        #line 2878 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2883 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber())," +
                "\r\n    ");
        
        #line default
        #line hidden
        
        #line 2884 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2887 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2887 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2891 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.String => this.AsString.Equals(other.AsString),\r\n  " +
                "  ");
        
        #line default
        #line hidden
        
        #line 2892 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2897 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.String => this.AsString().Equals(other.AsString())," +
                "\r\n    ");
        
        #line default
        #line hidden
        
        #line 2898 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2901 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 2901 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2905 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equal" +
                "s(other.AsBoolean),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2906 "SchemaEntity201909.tt"

    }
    else
    {
    
        
        #line default
        #line hidden
        
        #line 2911 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equ" +
                "als(other.AsBoolean()),\r\n    ");
        
        #line default
        #line hidden
        
        #line 2912 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2915 "SchemaEntity201909.tt"
        this.Write("                JsonValueKind.Null => true,\r\n                _ => false,\r\n       " +
                "     };\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2920 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2924 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public bool HasProperty(string name)\r\n      " +
                "  {\r\n            if (this.objectBacking is ImmutableDictionary<string, JsonAny> " +
                "properties)\r\n            {\r\n                return properties.TryGetValue(name, " +
                "out _);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKind == J" +
                "sonValueKind.Object)\r\n            {\r\n                return this.jsonElementBack" +
                "ing.TryGetProperty(name.ToString(), out JsonElement _);\r\n            }\r\n\r\n      " +
                "      return false;\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool" +
                " HasProperty(ReadOnlySpan<char> name)\r\n        {\r\n            if (this.objectBac" +
                "king is ImmutableDictionary<string, JsonAny> properties)\r\n            {\r\n       " +
                "         return properties.TryGetValue(name.ToString(), out _);\r\n            }\r\n" +
                "\r\n            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)\r\n  " +
                "          {\r\n                return this.jsonElementBacking.TryGetProperty(name," +
                " out JsonElement _);\r\n            }\r\n\r\n            return false;        }\r\n\r\n   " +
                "     /// <inheritdoc/>\r\n        public bool HasProperty(ReadOnlySpan<byte> utf8n" +
                "ame)\r\n        {\r\n            if (this.objectBacking is ImmutableDictionary<strin" +
                "g, JsonAny> properties)\r\n            {\r\n                return properties.TryGet" +
                "Value(System.Text.Encoding.UTF8.GetString(utf8name), out _);\r\n            }\r\n\r\n " +
                "           if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)\r\n     " +
                "       {\r\n                return this.jsonElementBacking.TryGetProperty(utf8name" +
                ", out JsonElement _);\r\n            }\r\n\r\n            return false;        }\r\n\r\n  " +
                "      /// <inheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 2972 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2972 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2984 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2984 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2996 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2996 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3008 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3008 "SchemaEntity201909.tt"
        this.Write(@" RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3019 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3019 "SchemaEntity201909.tt"
        this.Write(@" RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3030 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3030 "SchemaEntity201909.tt"
        this.Write(" RemoveProperty(ReadOnlySpan<byte> utf8Name)\r\n        {\r\n            if (this.Val" +
                "ueKind == JsonValueKind.Object)\r\n            {\r\n                return this.AsOb" +
                "ject.RemoveProperty(utf8Name);\r\n            }\r\n\r\n            return this;\r\n     " +
                "   }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3040 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3043 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3044 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 3048 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 3050 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3050 "SchemaEntity201909.tt"
        this.Write(@" Add<TItem>(TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Add(item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3062 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3062 "SchemaEntity201909.tt"
        this.Write(@" Insert<TItem>(int index, TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Insert(index, item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3074 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3074 "SchemaEntity201909.tt"
        this.Write(@" Replace<TItem>(TItem oldValue, TItem newValue)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.Replace(oldValue, newValue);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3086 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3086 "SchemaEntity201909.tt"
        this.Write(@" RemoveAt(int index)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveAt(index);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3097 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3097 "SchemaEntity201909.tt"
        this.Write(@" RemoveRange(int index, int count)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveRange(index, count);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3108 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3108 "SchemaEntity201909.tt"
        this.Write(@" SetItem<TItem>(int index, TItem value)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.SetItem(index, value);
            }

            return this;
        }

    ");
        
        #line default
        #line hidden
        
        #line 3119 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3122 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public T As<T>()\r\n            where T : stru" +
                "ct, IJsonValue\r\n        {\r\n            return this.As<");
        
        #line default
        #line hidden
        
        #line 3127 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3127 "SchemaEntity201909.tt"
        this.Write(@", T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

                        
        ");
        
        #line default
        #line hidden
        
        #line 3140 "SchemaEntity201909.tt"

        if (HasAdditionalProperties || HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3144 "SchemaEntity201909.tt"
        this.Write("            result = result.UsingEvaluatedProperties();\r\n        ");
        
        #line default
        #line hidden
        
        #line 3145 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3148 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3149 "SchemaEntity201909.tt"

        if (HasAdditionalItems || HasUnevaluatedItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3153 "SchemaEntity201909.tt"
        this.Write("            result = result.UsingEvaluatedItems();\r\n        ");
        
        #line default
        #line hidden
        
        #line 3154 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3157 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3158 "SchemaEntity201909.tt"

    if (HasRef)
    {    
    
        
        #line default
        #line hidden
        
        #line 3162 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateRef(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3167 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3170 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3171 "SchemaEntity201909.tt"

    if ((HasExplicitType || HasFormat || HasMediaTypeOrEncoding) || (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems) || (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)))))
    {
    
        
        #line default
        #line hidden
        
        #line 3175 "SchemaEntity201909.tt"
        this.Write("            JsonValueKind valueKind = this.ValueKind;\r\n    ");
        
        #line default
        #line hidden
        
        #line 3176 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3179 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3180 "SchemaEntity201909.tt"

    if (HasExplicitType || HasFormat || HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 3184 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3185 "SchemaEntity201909.tt"

        if (HasExplicitType)
        {
        
        
        #line default
        #line hidden
        
        #line 3189 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateType(valueKind, result, level);\r\n            if" +
                " (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n            " +
                "    return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3194 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3197 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3198 "SchemaEntity201909.tt"

        if (HasFormat)
        {
        
        
        #line default
        #line hidden
        
        #line 3202 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateFormat(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3207 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3210 "SchemaEntity201909.tt"
        this.Write("\r\n        \r\n        ");
        
        #line default
        #line hidden
        
        #line 3212 "SchemaEntity201909.tt"

        if (HasMediaTypeOrEncoding)
        {
        
        
        #line default
        #line hidden
        
        #line 3216 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateMediaTypeAndEncoding(valueKind, result, level);" +
                "\r\n            if (level == ValidationLevel.Flag && !result.IsValid)\r\n           " +
                " {\r\n                return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3221 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3224 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3225 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3228 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3229 "SchemaEntity201909.tt"

    if (HasConst)
    {
    
        
        #line default
        #line hidden
        
        #line 3233 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateConst(this, result, level, __Men" +
                "esConstValue);\r\n            if (level == ValidationLevel.Flag && !result.IsValid" +
                ")\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3239 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3242 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3243 "SchemaEntity201909.tt"

    if (HasEnum)
    {
    
        
        #line default
        #line hidden
        
        #line 3247 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateEnum(\r\n                this,\r\n  " +
                "              result,\r\n                level\r\n        ");
        
        #line default
        #line hidden
        
        #line 3251 "SchemaEntity201909.tt"

        for(int enumIndex = 0; enumIndex < EnumValues.Length; ++enumIndex)
        {
        
        
        #line default
        #line hidden
        
        #line 3255 "SchemaEntity201909.tt"
        this.Write("                , EnumValues.Item");
        
        #line default
        #line hidden
        
        #line 3255 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( enumIndex ));
        
        #line default
        #line hidden
        
        #line 3255 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3256 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3259 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3265 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3268 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3269 "SchemaEntity201909.tt"

    if (HasMultipleOf || HasMaximum || HasExclusiveMaximum|| HasMinimum || HasExclusiveMinimum)
    {
    
        
        #line default
        #line hidden
        
        #line 3273 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateNumber(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3277 "SchemaEntity201909.tt"

        if (HasMultipleOf)
        {
        
        
        #line default
        #line hidden
        
        #line 3281 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3281 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MultipleOf ));
        
        #line default
        #line hidden
        
        #line 3281 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3282 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3287 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3288 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3291 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3291 "SchemaEntity201909.tt"

        if (HasMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 3295 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3295 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Maximum ));
        
        #line default
        #line hidden
        
        #line 3295 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3296 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3301 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3302 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3305 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3305 "SchemaEntity201909.tt"

        if (HasExclusiveMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ExclusiveMaximum ));
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3310 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3315 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3316 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3319 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3319 "SchemaEntity201909.tt"

        if (HasMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 3323 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3323 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Minimum ));
        
        #line default
        #line hidden
        
        #line 3323 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3324 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3329 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3330 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3333 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3333 "SchemaEntity201909.tt"

        if (HasExclusiveMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 3337 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3337 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ExclusiveMinimum ));
        
        #line default
        #line hidden
        
        #line 3337 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3338 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3343 "SchemaEntity201909.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 3344 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3347 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3354 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3357 "SchemaEntity201909.tt"
        this.Write("    \r\n    ");
        
        #line default
        #line hidden
        
        #line 3358 "SchemaEntity201909.tt"

    if (HasMaxLength || HasMinLength || HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 3362 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateString(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3366 "SchemaEntity201909.tt"

        if (HasMaxLength)
        {
        
        
        #line default
        #line hidden
        
        #line 3370 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3370 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxLength ));
        
        #line default
        #line hidden
        
        #line 3370 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3371 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3376 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3377 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3380 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3380 "SchemaEntity201909.tt"

        if (HasMinLength)
        {
        
        
        #line default
        #line hidden
        
        #line 3384 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3384 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinLength ));
        
        #line default
        #line hidden
        
        #line 3384 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3385 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3390 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3391 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3394 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3394 "SchemaEntity201909.tt"

        if (HasPattern)
        {
        
        
        #line default
        #line hidden
        
        #line 3398 "SchemaEntity201909.tt"
        this.Write("                __MenesPatternExpression\r\n        ");
        
        #line default
        #line hidden
        
        #line 3399 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3404 "SchemaEntity201909.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 3405 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3408 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3414 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3417 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3418 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 3422 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateIfThenElse(result, level);\r\n            if (lev" +
                "el == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                r" +
                "eturn result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3428 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3431 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3432 "SchemaEntity201909.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 3436 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateNot(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3442 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3445 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3446 "SchemaEntity201909.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3450 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateAllOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3455 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3458 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3459 "SchemaEntity201909.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3463 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateAnyOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3468 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3471 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3472 "SchemaEntity201909.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3476 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateOneOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3482 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3485 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3486 "SchemaEntity201909.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 3490 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateObject(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3496 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3499 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3501 "SchemaEntity201909.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 3505 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateArray(valueKind, result, level);\r\n            i" +
                "f (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n           " +
                "     return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3510 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3513 "SchemaEntity201909.tt"
        this.Write("            return result;\r\n        }\r\n\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3517 "SchemaEntity201909.tt"

    if (HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 3521 "SchemaEntity201909.tt"
        this.Write(@"        private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
        {
            ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();

        ");
        
        #line default
        #line hidden
        
        #line 3526 "SchemaEntity201909.tt"

        foreach (var patternProperty in PatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3530 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                PatternProperty");
        
        #line default
        #line hidden
        
        #line 3531 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( PatternPropertySuffix(patternProperty) ));
        
        #line default
        #line hidden
        
        #line 3531 "SchemaEntity201909.tt"
        this.Write(",\r\n                (property, validationContext, level) =>\r\n                {\r\n  " +
                "                  return property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 3534 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( patternProperty.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3534 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext, level);\r\n                });\r\n        ");
        
        #line default
        #line hidden
        
        #line 3536 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3539 "SchemaEntity201909.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3543 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3546 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3547 "SchemaEntity201909.tt"

    if (HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 3551 "SchemaEntity201909.tt"
        this.Write("\r\n        private static ImmutableDictionary<string, PropertyValidator<");
        
        #line default
        #line hidden
        
        #line 3552 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3552 "SchemaEntity201909.tt"
        this.Write(">> CreateDependentSchemaValidators()\r\n        {\r\n            ImmutableDictionary<" +
                "string, PropertyValidator<");
        
        #line default
        #line hidden
        
        #line 3554 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3554 "SchemaEntity201909.tt"
        this.Write(">>.Builder builder =\r\n                ImmutableDictionary.CreateBuilder<string, P" +
                "ropertyValidator<");
        
        #line default
        #line hidden
        
        #line 3555 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3555 "SchemaEntity201909.tt"
        this.Write(">>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3557 "SchemaEntity201909.tt"

        int dsIndex = 0;
        foreach (var dependentSchema in DependentSchemas)
        {
            dsIndex++;
        
        
        #line default
        #line hidden
        
        #line 3563 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                \"");
        
        #line default
        #line hidden
        
        #line 3564 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dependentSchema.Name ));
        
        #line default
        #line hidden
        
        #line 3564 "SchemaEntity201909.tt"
        this.Write("\", __MenesValidateDependentSchema");
        
        #line default
        #line hidden
        
        #line 3564 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dsIndex ));
        
        #line default
        #line hidden
        
        #line 3564 "SchemaEntity201909.tt"
        this.Write(");\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3566 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3569 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3572 "SchemaEntity201909.tt"

        int dsIndexV = 0;
        foreach (var dependentSchema in DependentSchemas)
        {
            dsIndexV++;
        
        
        #line default
        #line hidden
        
        #line 3578 "SchemaEntity201909.tt"
        this.Write("        private static ValidationContext __MenesValidateDependentSchema");
        
        #line default
        #line hidden
        
        #line 3578 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dsIndexV ));
        
        #line default
        #line hidden
        
        #line 3578 "SchemaEntity201909.tt"
        this.Write("(in ");
        
        #line default
        #line hidden
        
        #line 3578 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3578 "SchemaEntity201909.tt"
        this.Write(" that, in ValidationContext validationContext, ValidationLevel level)\r\n        {\r" +
                "\n            return that.As<");
        
        #line default
        #line hidden
        
        #line 3580 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dependentSchema.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3580 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext, level);\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3582 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3585 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3586 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3589 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3590 "SchemaEntity201909.tt"

    if (HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 3594 "SchemaEntity201909.tt"
        this.Write("        private static ImmutableDictionary<string, JsonAny> BuildDefaults()\r\n    " +
                "    {\r\n            ImmutableDictionary<string, JsonAny>.Builder builder =\r\n     " +
                "           ImmutableDictionary.CreateBuilder<string, JsonAny>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3599 "SchemaEntity201909.tt"

        foreach (var property in Defaults)
        {
        
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write("            builder.Add(");
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.DefaultValue, true) ));
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write("));\r\n        ");
        
        #line default
        #line hidden
        
        #line 3604 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3607 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3609 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3612 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3613 "SchemaEntity201909.tt"

    if (HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 3617 "SchemaEntity201909.tt"
        this.Write(@"
        private static ImmutableDictionary<string, ImmutableArray<ReadOnlyMemory<byte>>> BuildDependentRequired()
        {
            ImmutableDictionary<string, ImmutableArray<ReadOnlyMemory<byte>>>.Builder builder =
                ImmutableDictionary.CreateBuilder<string, ImmutableArray<ReadOnlyMemory<byte>>>();

        ");
        
        #line default
        #line hidden
        
        #line 3623 "SchemaEntity201909.tt"

        foreach (var dependentRequired in DependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 3627 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3628 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(dependentRequired.Name, true) ));
        
        #line default
        #line hidden
        
        #line 3628 "SchemaEntity201909.tt"
        this.Write(",\r\n                    ImmutableArray.Create<ReadOnlyMemory<byte>>(\r\n            " +
                "");
        
        #line default
        #line hidden
        
        #line 3630 "SchemaEntity201909.tt"

            bool isFirst1 = true;
            foreach (var dependentRequiredValue in dependentRequired.RequiredNames)
            {
            
        
        #line default
        #line hidden
        
        #line 3635 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3635 "SchemaEntity201909.tt"

                if (isFirst1)
                {
                    isFirst1 = false;
                
        
        #line default
        #line hidden
        
        #line 3640 "SchemaEntity201909.tt"
        this.Write("                        System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 3640 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 3640 "SchemaEntity201909.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 3641 "SchemaEntity201909.tt"

                }
                else
                {
                
        
        #line default
        #line hidden
        
        #line 3646 "SchemaEntity201909.tt"
        this.Write("                        , System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 3646 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 3646 "SchemaEntity201909.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 3647 "SchemaEntity201909.tt"

                }
                
        
        #line default
        #line hidden
        
        #line 3650 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3650 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3653 "SchemaEntity201909.tt"
        this.Write("                        ));\r\n        ");
        
        #line default
        #line hidden
        
        #line 3654 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3657 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3660 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3663 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3664 "SchemaEntity201909.tt"

    if (HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 3668 "SchemaEntity201909.tt"
        this.Write("\r\n        private static ImmutableDictionary<string, PropertyValidator<");
        
        #line default
        #line hidden
        
        #line 3669 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3669 "SchemaEntity201909.tt"
        this.Write(">> CreateLocalPropertyValidators()\r\n        {\r\n            ImmutableDictionary<st" +
                "ring, PropertyValidator<");
        
        #line default
        #line hidden
        
        #line 3671 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3671 "SchemaEntity201909.tt"
        this.Write(">>.Builder builder =\r\n                ImmutableDictionary.CreateBuilder<string, P" +
                "ropertyValidator<");
        
        #line default
        #line hidden
        
        #line 3672 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3672 "SchemaEntity201909.tt"
        this.Write(">>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3674 "SchemaEntity201909.tt"

        foreach (var property in LocalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3678 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                ");
        
        #line default
        #line hidden
        
        #line 3679 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3679 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, __MenesValidate");
        
        #line default
        #line hidden
        
        #line 3679 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3679 "SchemaEntity201909.tt"
        this.Write(");\r\n        ");
        
        #line default
        #line hidden
        
        #line 3680 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3683 "SchemaEntity201909.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3687 "SchemaEntity201909.tt"

        foreach (var property in LocalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3691 "SchemaEntity201909.tt"
        this.Write("        private static ValidationContext __MenesValidate");
        
        #line default
        #line hidden
        
        #line 3691 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3691 "SchemaEntity201909.tt"
        this.Write("(in ");
        
        #line default
        #line hidden
        
        #line 3691 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3691 "SchemaEntity201909.tt"
        this.Write(" that, in ValidationContext validationContext, ValidationLevel level)\r\n        {\r" +
                "\n            ");
        
        #line default
        #line hidden
        
        #line 3693 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3693 "SchemaEntity201909.tt"
        this.Write(" property = that.");
        
        #line default
        #line hidden
        
        #line 3693 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3693 "SchemaEntity201909.tt"
        this.Write(";\r\n            return property.Validate(validationContext, level);\r\n        }\r\n  " +
                "      ");
        
        #line default
        #line hidden
        
        #line 3696 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3699 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 3699 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3702 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3703 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 3707 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Gets the value as a <see cref=""JsonObject""/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 3722 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3725 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3726 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 3730 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Gets the value as a <see cref=""JsonArray""/>.
        /// </summary>
        private JsonArray AsArray
        {
            get
            {
                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)
                {
                    return new JsonArray(arrayBacking);
                }

                return new JsonArray(this.jsonElementBacking);
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 3745 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3748 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3749 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 3753 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Gets the value as a <see cref=""JsonNumber""/>.
        /// </summary>
        private JsonNumber AsNumber
        {
            get
            {
                if (this.numberBacking is double numberBacking)
                {
                    return new JsonNumber(numberBacking);
                }

                return new JsonNumber(this.jsonElementBacking);
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 3768 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3771 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3772 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 3776 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Gets the value as a <see cref=""JsonString""/>.
        /// </summary>
        private JsonString AsString
        {
            get
            {
                if (this.stringBacking is string stringBacking)
                {
                    return new JsonString(stringBacking);
                }

                return new JsonString(this.jsonElementBacking);
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 3791 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3794 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3795 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 3799 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Gets the value as a <see cref=""JsonBoolean""/>.
        /// </summary>
        private JsonBoolean AsBoolean
        {
            get
            {
                if (this.booleanBacking is bool booleanBacking)
                {
                    return new JsonBoolean(booleanBacking);
                }
                return new JsonBoolean(this.jsonElementBacking);
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 3813 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3816 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3817 "SchemaEntity201909.tt"

    if (HasRef)
    {
    
        
        #line default
        #line hidden
        
        #line 3821 "SchemaEntity201909.tt"
        this.Write("        private ValidationContext ValidateRef(in ValidationContext validationCont" +
                "ext, ValidationLevel level)\r\n        {\r\n            ValidationContext result = v" +
                "alidationContext;\r\n\r\n\r\n            ValidationContext refResult = this.As<");
        
        #line default
        #line hidden
        
        #line 3826 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( RefDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3826 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!refResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, refResult);
                }

                result = result.MergeChildContext(refResult, false);
            }

            return result;
        }
    ");
        
        #line default
        #line hidden
        
        #line 3855 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3858 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3859 "SchemaEntity201909.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 3863 "SchemaEntity201909.tt"
        this.Write(@"        private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Array)
            {
                return result;
            }

         ");
        
        #line default
        #line hidden
        
        #line 3872 "SchemaEntity201909.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 3876 "SchemaEntity201909.tt"
        this.Write("\r\n            int arrayLength = 0;\r\n         ");
        
        #line default
        #line hidden
        
        #line 3878 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3883 "SchemaEntity201909.tt"
        this.Write("            int arrayLength = this.Length;\r\n        ");
        
        #line default
        #line hidden
        
        #line 3884 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3887 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3888 "SchemaEntity201909.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 3892 "SchemaEntity201909.tt"
        this.Write("            int containsCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3894 "SchemaEntity201909.tt"

        }

        
        
        #line default
        #line hidden
        
        #line 3898 "SchemaEntity201909.tt"
        this.Write("\r\n         ");
        
        #line default
        #line hidden
        
        #line 3899 "SchemaEntity201909.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 3903 "SchemaEntity201909.tt"
        this.Write("            JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();\r\n\r\n     " +
                "       while (arrayEnumerator.MoveNext())\r\n            {\r\n        ");
        
        #line default
        #line hidden
        
        #line 3907 "SchemaEntity201909.tt"

            if (HasUniqueItems)
            {
        
        
        #line default
        #line hidden
        
        #line 3911 "SchemaEntity201909.tt"
        this.Write(@"                JsonArrayEnumerator innerEnumerator = this.EnumerateArray();
                int innerIndex = -1;
                while (innerIndex < arrayLength && innerEnumerator.MoveNext())
                {
                    innerIndex++;
                }

                while (innerEnumerator.MoveNext())
                {
                    if (innerEnumerator.Current.Equals(arrayEnumerator.Current))
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""6.4.3. uniqueItems - duplicate items were found at indices {arrayLength} and {innerIndex}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""6.4.3. uniqueItems - duplicate items were found."");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 3937 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3940 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3941 "SchemaEntity201909.tt"

            if (HasContains)
            {
        
        
        #line default
        #line hidden
        
        #line 3945 "SchemaEntity201909.tt"
        this.Write("                ValidationContext containsResult = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3945 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     ContainsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3945 "SchemaEntity201909.tt"
        this.Write(">().Validate(result.CreateChildContext(), level);\r\n\r\n                if (contains" +
                "Result.IsValid)\r\n                {\r\n                    result = result.WithLoca" +
                "lItemIndex(arrayLength);\r\n                    containsCount++;\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3952 "SchemaEntity201909.tt"

                if (HasMaxContains)
                {
            
        
        #line default
        #line hidden
        
        #line 3956 "SchemaEntity201909.tt"
        this.Write("                    if (level == ValidationLevel.Flag && containsCount > ");
        
        #line default
        #line hidden
        
        #line 3956 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  MaxContains ));
        
        #line default
        #line hidden
        
        #line 3956 "SchemaEntity201909.tt"
        this.Write(")\r\n                    {\r\n                        return result.WithResult(isVali" +
                "d: false);\r\n                    }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3960 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3963 "SchemaEntity201909.tt"
        this.Write("                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3965 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3968 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3969 "SchemaEntity201909.tt"

            if (HasSingleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3973 "SchemaEntity201909.tt"
        this.Write("                result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3973 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3973 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n\r\n                result = result.WithLocalItemIndex(arrayLength);" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3981 "SchemaEntity201909.tt"

            }
            else if (HasMultipleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3986 "SchemaEntity201909.tt"
        this.Write("                switch (arrayLength)\r\n                {\r\n            ");
        
        #line default
        #line hidden
        
        #line 3988 "SchemaEntity201909.tt"

                int itemsIndex = 0;
                foreach (var item in Items)
                {
            
        
        #line default
        #line hidden
        
        #line 3993 "SchemaEntity201909.tt"
        this.Write("                    case ");
        
        #line default
        #line hidden
        
        #line 3993 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  itemsIndex ));
        
        #line default
        #line hidden
        
        #line 3993 "SchemaEntity201909.tt"
        this.Write(":\r\n                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3994 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  item ));
        
        #line default
        #line hidden
        
        #line 3994 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        break;
            ");
        
        #line default
        #line hidden
        
        #line 4002 "SchemaEntity201909.tt"

                    itemsIndex++;
                }
            
        
        #line default
        #line hidden
        
        #line 4006 "SchemaEntity201909.tt"
        this.Write("\r\n                    default:\r\n            ");
        
        #line default
        #line hidden
        
        #line 4008 "SchemaEntity201909.tt"

                if (!AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 4012 "SchemaEntity201909.tt"
        this.Write(@"                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""9.3.1.2. additionalItems - Additional items are not permitted at index {arrayLength}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""9.3.1.2. additionalItems - Additional items are not permitted."");
                        }
                        else if (level == ValidationLevel.Flag)
                        {
                            return result.WithResult(isValid: false);
                        }

            ");
        
        #line default
        #line hidden
        
        #line 4025 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 4028 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4029 "SchemaEntity201909.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 4033 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 4033 "SchemaEntity201909.tt"

                    if (HasAdditionalItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 4037 "SchemaEntity201909.tt"
        this.Write("                    ");
        
        #line default
        #line hidden
        
        #line 4037 "SchemaEntity201909.tt"

                        if (HasAdditionalItemsSchema)
                        {
                    
        
        #line default
        #line hidden
        
        #line 4041 "SchemaEntity201909.tt"
        this.Write("                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 4041 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(      AdditionalItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4041 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                        if (level == ValidationLeve" +
                "l.Flag && !result.IsValid)\r\n                        {\r\n                         " +
                "   return result;\r\n                        }\r\n                    ");
        
        #line default
        #line hidden
        
        #line 4046 "SchemaEntity201909.tt"

                        }
                    
        
        #line default
        #line hidden
        
        #line 4049 "SchemaEntity201909.tt"
        this.Write("                        \r\n                        result = result.WithLocalItemIn" +
                "dex(arrayLength);\r\n\r\n                ");
        
        #line default
        #line hidden
        
        #line 4052 "SchemaEntity201909.tt"

                    }
                    else if (HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 4057 "SchemaEntity201909.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n\r\n                            result = arrayEnu" +
                "merator.Current.As<");
        
        #line default
        #line hidden
        
        #line 4060 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4060 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);
                        }
                ");
        
        #line default
        #line hidden
        
        #line 4069 "SchemaEntity201909.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 4072 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4073 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 4076 "SchemaEntity201909.tt"
        this.Write("                        break;\r\n                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4079 "SchemaEntity201909.tt"

            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 4084 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4084 "SchemaEntity201909.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 4088 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 4088 "SchemaEntity201909.tt"

                    if (!HasAdditionalItems && HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 4092 "SchemaEntity201909.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n                            result = arrayEnume" +
                "rator.Current.As<");
        
        #line default
        #line hidden
        
        #line 4094 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4094 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);

                        }
                ");
        
        #line default
        #line hidden
        
        #line 4104 "SchemaEntity201909.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 4107 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4107 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 4110 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4111 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 4114 "SchemaEntity201909.tt"
        this.Write("\r\n                arrayLength++;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4117 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4120 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4121 "SchemaEntity201909.tt"

        if (HasMaxItems)
        {
        
        
        #line default
        #line hidden
        
        #line 4125 "SchemaEntity201909.tt"
        this.Write("            if (arrayLength > ");
        
        #line default
        #line hidden
        
        #line 4125 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 4125 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".1. maxItems - {arrayLength} exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 4129 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 4129 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.1. maxItems - item count exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 4133 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 4133 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4141 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4144 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4145 "SchemaEntity201909.tt"

        if (HasMinItems)
        {
        
        
        #line default
        #line hidden
        
        #line 4149 "SchemaEntity201909.tt"
        this.Write("            if (arrayLength < ");
        
        #line default
        #line hidden
        
        #line 4149 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 4149 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".2. minItems - {arrayLength} is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 4153 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 4153 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.2. minItems - item count is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 4157 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 4157 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4165 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4168 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4169 "SchemaEntity201909.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 4173 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4173 "SchemaEntity201909.tt"

            if (HasMaxContains)
            {
            
        
        #line default
        #line hidden
        
        #line 4177 "SchemaEntity201909.tt"
        this.Write("\r\n            if (containsCount > ");
        
        #line default
        #line hidden
        
        #line 4178 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 4178 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".4. maxContains - {containsCount} exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 4182 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 4182 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.4. maxContains - item count exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 4186 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 4186 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 4194 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4197 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4198 "SchemaEntity201909.tt"

            if (HasMinContains)
            {
            
        
        #line default
        #line hidden
        
        #line 4202 "SchemaEntity201909.tt"
        this.Write("            if (containsCount < ");
        
        #line default
        #line hidden
        
        #line 4202 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4202 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".5. minContains - {containsCount} is less than minimum number of matching items " +
                "");
        
        #line default
        #line hidden
        
        #line 4206 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4206 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.5. minContains - item count is less than minimum number of matching ite" +
                "ms ");
        
        #line default
        #line hidden
        
        #line 4210 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4210 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 4218 "SchemaEntity201909.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 4223 "SchemaEntity201909.tt"
        this.Write(@"            if (containsCount == 0)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $""10.3.1.3. contains - no items found matching the required schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""10.3.1.3. contains - no items found matching the required schema."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            ");
        
        #line default
        #line hidden
        
        #line 4239 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4242 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4244 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4247 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4251 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4254 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4255 "SchemaEntity201909.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties|| HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 4259 "SchemaEntity201909.tt"
        this.Write(@"        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4268 "SchemaEntity201909.tt"

        if (HasMaxProperties || HasMinProperties || HasLocalProperties || HasRequired || HasDependentSchemas || HasPatternProperties || HasAdditionalProperties || HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4272 "SchemaEntity201909.tt"
        this.Write("            int propertyCount = 0;\r\n        ");
        
        #line default
        #line hidden
        
        #line 4273 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4276 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4277 "SchemaEntity201909.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4281 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4281 "SchemaEntity201909.tt"
 
            foreach(var property in RequiredProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4285 "SchemaEntity201909.tt"
        this.Write("            bool found");
        
        #line default
        #line hidden
        
        #line 4285 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4285 "SchemaEntity201909.tt"
        this.Write(" = false;\r\n            ");
        
        #line default
        #line hidden
        
        #line 4286 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4289 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4289 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4292 "SchemaEntity201909.tt"
        this.Write("\r\n            foreach (Property property in this.EnumerateObject())\r\n            " +
                "{\r\n                string propertyName = property.Name;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4297 "SchemaEntity201909.tt"

        if (HasDependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4301 "SchemaEntity201909.tt"
        this.Write(@"                if (__MenesDependentRequired.TryGetValue(propertyName, out ImmutableArray<ReadOnlyMemory<byte>> dependencies))
                {
                    foreach (ReadOnlyMemory<byte> dependency in dependencies)
                    {
                        if (!this.HasProperty(dependency.Span) 
            ");
        
        #line default
        #line hidden
        
        #line 4306 "SchemaEntity201909.tt"

            if (HasDefaults)
            {
            
        
        #line default
        #line hidden
        
        #line 4310 "SchemaEntity201909.tt"
        this.Write("                        && !this.HasDefault(dependency.Span)\r\n            ");
        
        #line default
        #line hidden
        
        #line 4311 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4314 "SchemaEntity201909.tt"
        this.Write(@"                        )
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $""6.5.4. dependentRequired - dependent property \""{dependency}\"" not found."");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, ""6.5.4. dependentRequired - dependent property not found."");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 4332 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4335 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4336 "SchemaEntity201909.tt"

        if (HasLocalProperties || HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4340 "SchemaEntity201909.tt"
        this.Write("                if (__MenesLocalProperties.TryGetValue(propertyName, out Property" +
                "Validator<");
        
        #line default
        #line hidden
        
        #line 4340 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4340 "SchemaEntity201909.tt"
        this.Write(@">? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyCount);
                    var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

            ");
        
        #line default
        #line hidden
        
        #line 4350 "SchemaEntity201909.tt"

            if (HasRequired)
            {
                bool firstRequiredCheck = true;
                foreach (var property in RequiredProperties)
                {
                    if (!firstRequiredCheck)
                    {
                    
        
        #line default
        #line hidden
        
        #line 4359 "SchemaEntity201909.tt"
        this.Write("                else \r\n                    ");
        
        #line default
        #line hidden
        
        #line 4360 "SchemaEntity201909.tt"

                    }
                    else
                    {
                        firstRequiredCheck = false;
                    }
            
        
        #line default
        #line hidden
        
        #line 4367 "SchemaEntity201909.tt"
        this.Write("\r\n                if (");
        
        #line default
        #line hidden
        
        #line 4368 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4368 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName.Equals(propertyName))\r\n                {\r\n                    fo" +
                "und");
        
        #line default
        #line hidden
        
        #line 4370 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 4370 "SchemaEntity201909.tt"
        this.Write(" = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4372 "SchemaEntity201909.tt"

                }
            }
            
        
        #line default
        #line hidden
        
        #line 4376 "SchemaEntity201909.tt"
        this.Write("\r\n                }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4378 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4381 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4382 "SchemaEntity201909.tt"

        if (HasDependentSchemas)
        {
        
        
        #line default
        #line hidden
        
        #line 4386 "SchemaEntity201909.tt"
        this.Write("                if (__MenesDependentSchema.TryGetValue(propertyName, out Property" +
                "Validator<");
        
        #line default
        #line hidden
        
        #line 4386 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4386 "SchemaEntity201909.tt"
        this.Write(@">? dependentSchemaValidator))
                {
                    result = result.WithLocalProperty(propertyCount);
                    result = dependentSchemaValidator(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }
        ");
        
        #line default
        #line hidden
        
        #line 4395 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4398 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4399 "SchemaEntity201909.tt"

        if (HasPropertyNames || HasPatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4403 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4403 "SchemaEntity201909.tt"

            if (HasPropertyNames)
            {
            
        
        #line default
        #line hidden
        
        #line 4407 "SchemaEntity201909.tt"
        this.Write("                result = new JsonString(propertyName).As<");
        
        #line default
        #line hidden
        
        #line 4407 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     PropertyNamesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4407 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4412 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4415 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4416 "SchemaEntity201909.tt"

            if (HasPatternProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4420 "SchemaEntity201909.tt"
        this.Write(@"                foreach (System.Collections.Generic.KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                {
                    if (patternProperty.Key.IsMatch(propertyName))
                    {
                        result = result.WithLocalProperty(propertyCount);
                        result = patternProperty.Value(property, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }
                }

            ");
        
        #line default
        #line hidden
        
        #line 4433 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4436 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4436 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4439 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4440 "SchemaEntity201909.tt"

        if (AllowsAdditionalProperties && HasAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4444 "SchemaEntity201909.tt"
        this.Write("                if (!result.HasEvaluatedLocalProperty(propertyCount))\r\n          " +
                "      {\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 4446 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4446 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyCount);
                }
        ");
        
        #line default
        #line hidden
        
        #line 4453 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4456 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4457 "SchemaEntity201909.tt"

        if (AllowsAdditionalProperties && HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4461 "SchemaEntity201909.tt"
        this.Write("        \r\n                if (!result.HasEvaluatedLocalOrAppliedProperty(property" +
                "Count))\r\n                {\r\n\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 4465 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4465 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalProperty(propertyCount);
                }
        ");
        
        #line default
        #line hidden
        
        #line 4473 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4476 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4477 "SchemaEntity201909.tt"

        if (!AllowsAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4481 "SchemaEntity201909.tt"
        this.Write(@"        
                if (!result.HasEvaluatedLocalProperty(propertyCount))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $""9.3.2.3. additionalProperties - additional property \""{propertyName}\"" is not permitted."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, ""9.3.2.3. additionalProperties - additional properties are not permitted."");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 4498 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4501 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4502 "SchemaEntity201909.tt"

        if (HasMaxProperties || HasMinProperties || HasLocalProperties || HasRequired || HasDependentSchemas || HasPatternProperties || HasAdditionalProperties || HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4506 "SchemaEntity201909.tt"
        this.Write("        \r\n                propertyCount++;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4509 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4512 "SchemaEntity201909.tt"
        this.Write("            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4514 "SchemaEntity201909.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4518 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4519 "SchemaEntity201909.tt"

            foreach (var property in RequiredProperties)
            {
                if (!property.HasDefaultValue)
                {
            
        
        #line default
        #line hidden
        
        #line 4525 "SchemaEntity201909.tt"
        this.Write("            if (!found");
        
        #line default
        #line hidden
        
        #line 4525 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4525 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".3. required - required property \\\"");
        
        #line default
        #line hidden
        
        #line 4529 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                        Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 4529 "SchemaEntity201909.tt"
        this.Write(@"\"" not present."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""6.5.3. required - required property not present."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }
            ");
        
        #line default
        #line hidden
        
        #line 4540 "SchemaEntity201909.tt"

                }
            }
            
        
        #line default
        #line hidden
        
        #line 4544 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4544 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4547 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4548 "SchemaEntity201909.tt"

        if (HasMaxProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4552 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (propertyCount > ");
        
        #line default
        #line hidden
        
        #line 4553 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4553 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".1. maxProperties - property count of {propertyCount} is greater than ");
        
        #line default
        #line hidden
        
        #line 4557 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4557 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.1. maxProperties - property count greater than ");
        
        #line default
        #line hidden
        
        #line 4561 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4561 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n        ");
        
        #line default
        #line hidden
        
        #line 4568 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4571 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4572 "SchemaEntity201909.tt"

        if (HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4576 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (propertyCount < ");
        
        #line default
        #line hidden
        
        #line 4577 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4577 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".2. minProperties - property count of {propertyCount} is lezs than ");
        
        #line default
        #line hidden
        
        #line 4581 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4581 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.2. minProperties - property count less than ");
        
        #line default
        #line hidden
        
        #line 4585 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4585 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4593 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4596 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4600 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4603 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4604 "SchemaEntity201909.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4608 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateOneOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            int oneOfCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4615 "SchemaEntity201909.tt"

        int oneOfIndex = 0;
        foreach (var oneOf in OneOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4620 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext oneOfResult");
        
        #line default
        #line hidden
        
        #line 4622 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex));
        
        #line default
        #line hidden
        
        #line 4622 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4622 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOf ));
        
        #line default
        #line hidden
        
        #line 4622 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (o" +
                "neOfResult");
        
        #line default
        #line hidden
        
        #line 4624 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4624 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(oneOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 4626 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4626 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n                oneOfCount += 1;\r\n        " +
                "    ");
        
        #line default
        #line hidden
        
        #line 4628 "SchemaEntity201909.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4632 "SchemaEntity201909.tt"
        this.Write("                if (oneOfCount > 1 && level == ValidationLevel.Flag)\r\n           " +
                "     {\r\n                    result = result.WithResult(isValid: false);\r\n       " +
                "             return result;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4637 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4640 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeResults(result.IsValid, level, oneOfResult");
        
        #line default
        #line hidden
        
        #line 4645 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4645 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)\r\n" +
                "                {\r\n                    result = result.MergeResults(result.IsVal" +
                "id, level, oneOfResult");
        
        #line default
        #line hidden
        
        #line 4649 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4649 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n                else\r\n                {\r\n                 " +
                "   result = result.MergeResults(result.IsValid, level, oneOfResult");
        
        #line default
        #line hidden
        
        #line 4653 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4653 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4657 "SchemaEntity201909.tt"

            oneOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4661 "SchemaEntity201909.tt"
        this.Write("\r\n            if (oneOfCount == 1)\r\n            {\r\n                if (level >= V" +
                "alidationLevel.Detailed)\r\n                {\r\n                    result = result" +
                ".WithResult(isValid: true, \"Validation 10.2.1.3. onef - validated against the on" +
                "eOf schema.\");\r\n                }\r\n            }\r\n            else if (oneOfCoun" +
                "t == 0)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n" +
                "                {\r\n                    result = result.WithResult(isValid: false" +
                ", \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf sche" +
                "ma.\");\r\n                }\r\n                else if (level >= ValidationLevel.Bas" +
                "ic)\r\n                {\r\n                    result = result.WithResult(isValid: " +
                "false, \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf" +
                " schema.\");\r\n                }\r\n                else\r\n                {\r\n       " +
                "             result = result.WithResult(isValid: false);\r\n                }\r\n   " +
                "         }\r\n            else\r\n            {\r\n                if (level >= Valida" +
                "tionLevel.Detailed)\r\n                {\r\n                    result = result.With" +
                "Result(isValid: false, \"Validation 10.2.1.3. oneOf - validated against more than" +
                " one of the oneOf schema.\");\r\n                }\r\n                else if (level " +
                ">= ValidationLevel.Basic)\r\n                {\r\n                    result = resul" +
                "t.WithResult(isValid: false, \"Validation 10.2.1.3. oneOf - failed to validate ag" +
                "ainst more than one of the oneOf schema.\");\r\n                }\r\n                " +
                "else\r\n                {\r\n                    result = result.WithResult(isValid:" +
                " false);\r\n                }\r\n            }\r\n\r\n            return result;\r\n      " +
                "  }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4703 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4706 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4708 "SchemaEntity201909.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4712 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateAnyOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            bool foundValid = false;\r\n\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 4719 "SchemaEntity201909.tt"

        int anyOfIndex = 0;
        foreach (var anyOf in AnyOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4724 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext anyOfResult");
        
        #line default
        #line hidden
        
        #line 4726 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4726 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4726 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOf ));
        
        #line default
        #line hidden
        
        #line 4726 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (a" +
                "nyOfResult");
        
        #line default
        #line hidden
        
        #line 4728 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4728 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(anyOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 4730 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4730 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            ");
        
        #line default
        #line hidden
        
        #line 4731 "SchemaEntity201909.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
                
        
        #line default
        #line hidden
        
        #line 4735 "SchemaEntity201909.tt"
        this.Write("                if (level == ValidationLevel.Flag)\r\n                {\r\n          " +
                "          return result;\r\n                }\r\n                else\r\n             " +
                "   {\r\n                    foundValid = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4743 "SchemaEntity201909.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 4748 "SchemaEntity201909.tt"
        this.Write("                    foundValid = true;\r\n            ");
        
        #line default
        #line hidden
        
        #line 4749 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4752 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeResults(result.IsValid, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4757 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)\r\n" +
                "                {\r\n                    result = result.MergeResults(result.IsVal" +
                "id, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 4761 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4761 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4765 "SchemaEntity201909.tt"

            anyOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4769 "SchemaEntity201909.tt"
        this.Write(@"
            if (foundValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, ""Validation 10.2.1.2. anyOf - validated against the anyOf schema."");
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 4796 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4799 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4801 "SchemaEntity201909.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4805 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateAllOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4810 "SchemaEntity201909.tt"

        int allOfIndex = 0;
        foreach (var allOf in AllOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4815 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext allOfResult");
        
        #line default
        #line hidden
        
        #line 4817 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4817 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4817 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOf ));
        
        #line default
        #line hidden
        
        #line 4817 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (!" +
                "allOfResult");
        
        #line default
        #line hidden
        
        #line 4819 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4819 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r" +
                "\n                {\r\n                    result = result.MergeChildContext(allOfR" +
                "esult");
        
        #line default
        #line hidden
        
        #line 4823 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4823 "SchemaEntity201909.tt"
        this.Write(@", true).WithResult(isValid: false, ""Validation 10.2.1.1. allOf - failed to validate against the allOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4827 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4827 "SchemaEntity201909.tt"
        this.Write(", true).WithResult(isValid: false, \"Validation 10.2.1.1. allOf - failed to valida" +
                "te against the allOf schema.\");\r\n                }\r\n                else\r\n      " +
                "          {\r\n                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4831 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4831 "SchemaEntity201909.tt"
        this.Write(", false).WithResult(isValid: false);\r\n                    return result;\r\n       " +
                "         }\r\n            }\r\n            else\r\n            {\r\n                resu" +
                "lt = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4837 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4837 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4840 "SchemaEntity201909.tt"

            allOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4844 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4848 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4851 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4853 "SchemaEntity201909.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 4857 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateNot(ValidationContext validat" +
                "ionContext, ValidationLevel level)\r\n        {\r\n            ValidationContext res" +
                "ult = validationContext;\r\n\r\n            ValidationContext notResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4862 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( NotDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4862 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);
            if (notResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated successfully against the not schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated succesfully against the not schema."");
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.MergeResults(result.IsValid, level, notResult);
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 4886 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4889 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4891 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 4895 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateIfThenElse(in ValidationConte" +
                "xt validationContext, ValidationLevel level)\r\n        {\r\n            ValidationC" +
                "ontext result = validationContext;\r\n\r\n            ValidationContext ifResult = t" +
                "his.As<");
        
        #line default
        #line hidden
        
        #line 4900 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( IfFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4900 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!ifResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(ifResult, true);
                }

                result = result.MergeChildContext(ifResult, false);
            }


        ");
        
        #line default
        #line hidden
        
        #line 4924 "SchemaEntity201909.tt"

        if (HasThen)
        {
        
        
        #line default
        #line hidden
        
        #line 4928 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (ifResult.IsValid)\r\n            {\r\n                Valid" +
                "ationContext thenResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4931 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ThenFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4931 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!thenResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(thenResult, true);
                    }

                    result = result.MergeChildContext(thenResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4959 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4962 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4963 "SchemaEntity201909.tt"

        if (HasElse)
        {
        
        
        #line default
        #line hidden
        
        #line 4967 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (!ifResult.IsValid)\r\n            {\r\n                Vali" +
                "dationContext elseResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4970 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ElseFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4970 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!elseResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.3. else - failed to validate against the else schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.2. else - failed to validate against the else schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(elseResult, true);
                    }

                    result = result.MergeChildContext(elseResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4998 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5001 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5005 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5008 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5009 "SchemaEntity201909.tt"

    if (HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 5013 "SchemaEntity201909.tt"
        this.Write("        private ValidationContext ValidateMediaTypeAndEncoding(JsonValueKind valu" +
                "eKind, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 5015 "SchemaEntity201909.tt"

        if (IsJsonBase64Content)
        {
        
        
        #line default
        #line hidden
        
        #line 5019 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64Content>().Validate(result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5024 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5027 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5028 "SchemaEntity201909.tt"

        if (IsJsonBase64String)
        {
        
        
        #line default
        #line hidden
        
        #line 5032 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64String>().Validate(result, level);\r\n       " +
                "     }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5038 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5041 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5042 "SchemaEntity201909.tt"

        if (IsJsonContent)
        {
        
        
        #line default
        #line hidden
        
        #line 5046 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonContent>().Validate(result, level);\r\n            " +
                "}\r\n        ");
        
        #line default
        #line hidden
        
        #line 5051 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5054 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5058 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5061 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5062 "SchemaEntity201909.tt"

    if (HasFormat)
    {
    
        
        #line default
        #line hidden
        
        #line 5066 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateFormat(JsonValueKind valueKin" +
                "d, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 5069 "SchemaEntity201909.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 5073 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5078 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5081 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5082 "SchemaEntity201909.tt"

        if (IsJsonDate)
        {
        
        
        #line default
        #line hidden
        
        #line 5086 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDate(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5092 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5095 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5096 "SchemaEntity201909.tt"

        if (IsJsonDateTime)
        {
        
        
        #line default
        #line hidden
        
        #line 5100 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDateTime(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5105 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5108 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5109 "SchemaEntity201909.tt"

        if (IsJsonDuration)
        {
        
        
        #line default
        #line hidden
        
        #line 5113 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDuration(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5118 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5121 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5122 "SchemaEntity201909.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 5126 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5131 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5134 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5135 "SchemaEntity201909.tt"

        if (IsJsonEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 5139 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeEmail(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5144 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5147 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5148 "SchemaEntity201909.tt"

        if (IsJsonHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 5152 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeHostname(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5157 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5160 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5161 "SchemaEntity201909.tt"

        if (IsJsonIdnEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 5165 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnEmail(this, result, level);\r\n     " +
                "       }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5171 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5174 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5175 "SchemaEntity201909.tt"

        if (IsJsonIdnHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 5179 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnHostname(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5184 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5187 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5188 "SchemaEntity201909.tt"

        if (IsJsonInteger)
        {
        
        
        #line default
        #line hidden
        
        #line 5192 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.Number)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeInteger(this, result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5197 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5200 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5201 "SchemaEntity201909.tt"

        if (IsJsonIpV4)
        {
        
        
        #line default
        #line hidden
        
        #line 5205 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV4(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5211 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5214 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5215 "SchemaEntity201909.tt"

        if (IsJsonIpV6)
        {
        
        
        #line default
        #line hidden
        
        #line 5219 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV6(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5225 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5228 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5229 "SchemaEntity201909.tt"

        if (IsJsonIri)
        {
        
        
        #line default
        #line hidden
        
        #line 5233 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIri(this, result, level);\r\n          " +
                "  }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5238 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5241 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5242 "SchemaEntity201909.tt"

        if (IsJsonIriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 5246 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5251 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5254 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5255 "SchemaEntity201909.tt"

        if (IsJsonPointer)
        {
        
        
        #line default
        #line hidden
        
        #line 5259 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeJsonPointer(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5264 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5267 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5268 "SchemaEntity201909.tt"

        if (IsJsonRegex)
        {
        
        
        #line default
        #line hidden
        
        #line 5272 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRegex(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5277 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5280 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5281 "SchemaEntity201909.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 5285 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5290 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5293 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5294 "SchemaEntity201909.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 5298 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5304 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5307 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5308 "SchemaEntity201909.tt"

        if (IsJsonUri)
        {
        
        
        #line default
        #line hidden
        
        #line 5312 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUri(this, result, level);\r\n          " +
                "  }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5318 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5321 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5322 "SchemaEntity201909.tt"

        if (IsJsonUriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 5326 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5331 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5334 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5335 "SchemaEntity201909.tt"

        if (IsJsonUriTemplate)
        {
        
        
        #line default
        #line hidden
        
        #line 5339 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriTemplate(this, result, level);\r\n  " +
                "          }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5345 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5348 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5349 "SchemaEntity201909.tt"

        if (IsJsonUuid)
        {
        
        
        #line default
        #line hidden
        
        #line 5353 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUuid(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5359 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5362 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5366 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5369 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5370 "SchemaEntity201909.tt"

    if (HasType)
    {
    
        
        #line default
        #line hidden
        
        #line 5374 "SchemaEntity201909.tt"
        this.Write(@"        
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        ");
        
        #line default
        #line hidden
        
        #line 5380 "SchemaEntity201909.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 5384 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultString.IsValid)
            {
                return validationContext;
            }

            if (localResultString.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5396 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5399 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5400 "SchemaEntity201909.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 5404 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5416 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5419 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5420 "SchemaEntity201909.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 5424 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultArray.IsValid)
            {
                return validationContext;
            }

            if (localResultArray.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5436 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5439 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5440 "SchemaEntity201909.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 5444 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultNumber = Menes.Json.Validate.TypeNumber(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNumber.IsValid)
            {
                return validationContext;
            }

            if (localResultNumber.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5456 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5459 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5460 "SchemaEntity201909.tt"

        if (HasIntegerType)
        {
        
        
        #line default
        #line hidden
        
        #line 5464 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultInteger = Menes.Json.Validate.TypeInteger(this, result, level);
            if (level == ValidationLevel.Flag && localResultInteger.IsValid)
            {
                return validationContext;
            }

            if (localResultInteger.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5476 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5479 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5480 "SchemaEntity201909.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 5484 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
            {
                return validationContext;
            }

            if (localResultBoolean.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5496 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5499 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5500 "SchemaEntity201909.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultNull = Menes.Json.Validate.TypeNull(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNull.IsValid)
            {
                return validationContext;
            }

            if (localResultNull.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5516 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5519 "SchemaEntity201909.tt"
        this.Write("\r\n            result = result.MergeResults(\r\n                isValid,\r\n          " +
                "      level\r\n        ");
        
        #line default
        #line hidden
        
        #line 5523 "SchemaEntity201909.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 5527 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultString\r\n        ");
        
        #line default
        #line hidden
        
        #line 5529 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5532 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5533 "SchemaEntity201909.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 5537 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultObject\r\n        ");
        
        #line default
        #line hidden
        
        #line 5539 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5542 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5543 "SchemaEntity201909.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 5547 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultArray\r\n        ");
        
        #line default
        #line hidden
        
        #line 5549 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5552 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5553 "SchemaEntity201909.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 5557 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultNumber\r\n        ");
        
        #line default
        #line hidden
        
        #line 5559 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5562 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5563 "SchemaEntity201909.tt"

        if (HasIntegerType)
        {
        
        
        #line default
        #line hidden
        
        #line 5567 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultInteger\r\n        ");
        
        #line default
        #line hidden
        
        #line 5569 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5572 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5573 "SchemaEntity201909.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 5577 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultBoolean\r\n        ");
        
        #line default
        #line hidden
        
        #line 5579 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5582 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5583 "SchemaEntity201909.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 5587 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultNull\r\n        ");
        
        #line default
        #line hidden
        
        #line 5589 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5592 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5597 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5600 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5601 "SchemaEntity201909.tt"

    if (HasEnum)
    {
    
        
        #line default
        #line hidden
        
        #line 5605 "SchemaEntity201909.tt"
        this.Write("        \r\n        /// <summary>\r\n        /// Permitted values.\r\n        /// </sum" +
                "mary>\r\n        public static class EnumValues\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 5611 "SchemaEntity201909.tt"

        int enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
        
        
        #line default
        #line hidden
        
        #line 5616 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 5616 "SchemaEntity201909.tt"

            if (enumValue.IsString)
            {
            
        
        #line default
        #line hidden
        
        #line 5620 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// enumValue.AsPropertyName.\r\n           " +
                " /// </summary>\r\n            /// <remarks>\r\n            /// {Description}.\r\n    " +
                "        /// </remarks>\r\n            public static readonly ");
        
        #line default
        #line hidden
        
        #line 5626 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5626 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 5626 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.AsPropertyName));
        
        #line default
        #line hidden
        
        #line 5626 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5626 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5626 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5627 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsBoolean)
            {
            
        
        #line default
        #line hidden
        
        #line 5632 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5633 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5633 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5638 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5638 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5638 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5638 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5638 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5638 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5639 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsNumber)
            {
            
        
        #line default
        #line hidden
        
        #line 5644 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5645 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5645 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5650 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5650 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5650 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5650 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5650 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5650 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5651 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsObject)
            {
            
        
        #line default
        #line hidden
        
        #line 5656 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5657 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5657 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5662 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5662 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5662 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5662 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5662 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5662 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5663 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsArray)
            {
            
        
        #line default
        #line hidden
        
        #line 5668 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5669 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5669 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5674 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5674 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5674 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5674 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5674 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5674 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5675 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsNull)
            {
            
        
        #line default
        #line hidden
        
        #line 5680 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5681 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5681 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5686 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5686 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5686 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5686 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(\"null\");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5687 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 5690 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5691 "SchemaEntity201909.tt"

            ++enumItemIndex;
        }
        
        
        #line default
        #line hidden
        
        #line 5695 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5697 "SchemaEntity201909.tt"

        enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
        
        
        #line default
        #line hidden
        
        #line 5702 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 5702 "SchemaEntity201909.tt"

            if (enumValue.IsString)
            {
            
        
        #line default
        #line hidden
        
        #line 5706 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5707 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5707 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            inte" +
                "rnal static readonly ");
        
        #line default
        #line hidden
        
        #line 5712 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5712 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5712 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5712 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5712 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5712 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5713 "SchemaEntity201909.tt"

            }
            enumItemIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 5718 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 5719 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5722 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5723 "SchemaEntity201909.tt"

    foreach(var nestedType in NestedTypes)
    {
    
        
        #line default
        #line hidden
        
        #line 5727 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5728 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( WriteNestedType(nestedType) ));
        
        #line default
        #line hidden
        
        #line 5728 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5730 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5733 "SchemaEntity201909.tt"
        this.Write("\r\n    }\r\n    ");
        
        #line default
        #line hidden
        
        #line 5735 "SchemaEntity201909.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 5739 "SchemaEntity201909.tt"
        this.Write("}\r\n    ");
        
        #line default
        #line hidden
        
        #line 5740 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        return this.GenerationEnvironment.ToString();
    }
    
    public virtual void Initialize() {
    }
}

public class SchemaEntity201909Base {
    
    private global::System.Text.StringBuilder builder;
    
    private global::System.Collections.Generic.IDictionary<string, object> session;
    
    private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
    
    private string currentIndent = string.Empty;
    
    private global::System.Collections.Generic.Stack<int> indents;
    
    private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
    
    public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
        get {
            return this.session;
        }
        set {
            this.session = value;
        }
    }
    
    public global::System.Text.StringBuilder GenerationEnvironment {
        get {
            if ((this.builder == null)) {
                this.builder = new global::System.Text.StringBuilder();
            }
            return this.builder;
        }
        set {
            this.builder = value;
        }
    }
    
    protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
        get {
            if ((this.errors == null)) {
                this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
            }
            return this.errors;
        }
    }
    
    public string CurrentIndent {
        get {
            return this.currentIndent;
        }
    }
    
    private global::System.Collections.Generic.Stack<int> Indents {
        get {
            if ((this.indents == null)) {
                this.indents = new global::System.Collections.Generic.Stack<int>();
            }
            return this.indents;
        }
    }
    
    public ToStringInstanceHelper ToStringHelper {
        get {
            return this._toStringHelper;
        }
    }
    
    public void Error(string message) {
        this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
    }
    
    public void Warning(string message) {
        global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
        val.IsWarning = true;
        this.Errors.Add(val);
    }
    
    public string PopIndent() {
        if ((this.Indents.Count == 0)) {
            return string.Empty;
        }
        int lastPos = (this.currentIndent.Length - this.Indents.Pop());
        string last = this.currentIndent.Substring(lastPos);
        this.currentIndent = this.currentIndent.Substring(0, lastPos);
        return last;
    }
    
    public void PushIndent(string indent) {
        this.Indents.Push(indent.Length);
        this.currentIndent = (this.currentIndent + indent);
    }
    
    public void ClearIndent() {
        this.currentIndent = string.Empty;
        this.Indents.Clear();
    }
    
    public void Write(string textToAppend) {
        this.GenerationEnvironment.Append(textToAppend);
    }
    
    public void Write(string format, params object[] args) {
        this.GenerationEnvironment.AppendFormat(format, args);
    }
    
    public void WriteLine(string textToAppend) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendLine(textToAppend);
    }
    
    public void WriteLine(string format, params object[] args) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendFormat(format, args);
        this.GenerationEnvironment.AppendLine();
    }
    
    public class ToStringInstanceHelper {
        
        private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
        
        public global::System.IFormatProvider FormatProvider {
            get {
                return this.formatProvider;
            }
            set {
                if ((value != null)) {
                    this.formatProvider = value;
                }
            }
        }
        
        public string ToStringWithCulture(object objectToConvert) {
            if ((objectToConvert == null)) {
                throw new global::System.ArgumentNullException("objectToConvert");
            }
            global::System.Type type = objectToConvert.GetType();
            global::System.Type iConvertibleType = typeof(global::System.IConvertible);
            if (iConvertibleType.IsAssignableFrom(type)) {
                return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
            }
            global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                        iConvertibleType});
            if ((methInfo != null)) {
                return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                            this.formatProvider})));
            }
            return objectToConvert.ToString();
        }
    }
}
