//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Menes.Json;
using System;
using System.Collections.Generic;

#pragma warning disable

public partial class SchemaEntity201909 : SchemaEntity201909Base {
    
    public virtual string TransformText() {
        this.GenerationEnvironment = null;
        
        #line 4 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5 "SchemaEntity201909.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 9 "SchemaEntity201909.tt"
        this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace ");
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity201909.tt"
        this.Write("\r\n{\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.C" +
                "ollections.Immutable;\r\n    using System.Linq;\r\n    using System.Text.Json;\r\n    " +
                "using System.Text.RegularExpressions;\r\n    using Menes.Json;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 30 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 33 "SchemaEntity201909.tt"
        this.Write("    /// <summary>\r\n    /// A type generated from a JsonSchema specification.\r\n   " +
                " /// </summary>\r\n    public readonly struct ");
        
        #line default
        #line hidden
        
        #line 36 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 36 "SchemaEntity201909.tt"
        this.Write(" :\r\n    ");
        
        #line default
        #line hidden
        
        #line 37 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 41 "SchemaEntity201909.tt"
        this.Write("        IJsonObject<");
        
        #line default
        #line hidden
        
        #line 41 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 41 "SchemaEntity201909.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 42 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 45 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 45 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 49 "SchemaEntity201909.tt"
        this.Write("        IJsonArray<");
        
        #line default
        #line hidden
        
        #line 49 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 49 "SchemaEntity201909.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 50 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 53 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 53 "SchemaEntity201909.tt"

    if(!IsImplicitObject && !IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 57 "SchemaEntity201909.tt"
        this.Write("        IJsonValue,\r\n    ");
        
        #line default
        #line hidden
        
        #line 58 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 61 "SchemaEntity201909.tt"
        this.Write("        IEquatable<");
        
        #line default
        #line hidden
        
        #line 61 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 61 "SchemaEntity201909.tt"
        this.Write(">\r\n    {\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 64 "SchemaEntity201909.tt"

    if(HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 68 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 69 "SchemaEntity201909.tt"

        foreach(var patternProperty in PatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 73 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// A pattern property matching ");
        
        #line default
        #line hidden
        
        #line 74 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(patternProperty.Pattern, true).Trim('"')));
        
        #line default
        #line hidden
        
        #line 74 "SchemaEntity201909.tt"
        this.Write(" producing a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 74 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( patternProperty.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 74 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public static Regex PatternProperty");
        
        #line default
        #line hidden
        
        #line 76 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( PatternPropertySuffix(patternProperty) ));
        
        #line default
        #line hidden
        
        #line 76 "SchemaEntity201909.tt"
        this.Write(" = new Regex(");
        
        #line default
        #line hidden
        
        #line 76 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(patternProperty.Pattern, true) ));
        
        #line default
        #line hidden
        
        #line 76 "SchemaEntity201909.tt"
        this.Write(", RegexOptions.Compiled);\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 78 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 81 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 81 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 84 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 85 "SchemaEntity201909.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 89 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 90 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 94 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// JSON property name for <see cref=\"");
        
        #line default
        #line hidden
        
        #line 96 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 96 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static readonly ReadOnlyMemory<byte>" +
                " ");
        
        #line default
        #line hidden
        
        #line 98 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 98 "SchemaEntity201909.tt"
        this.Write("Utf8JsonPropertyName = new byte[] { ");
        
        #line default
        #line hidden
        
        #line 98 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( GetEncodedBytes(property.JsonPropertyName) ));
        
        #line default
        #line hidden
        
        #line 98 "SchemaEntity201909.tt"
        this.Write(" };\r\n\r\n        /// <summary>\r\n        /// JSON property name for <see cref=\"");
        
        #line default
        #line hidden
        
        #line 101 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 101 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static readonly JsonEncodedText ");
        
        #line default
        #line hidden
        
        #line 103 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 103 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName = JsonEncodedText.Encode( ");
        
        #line default
        #line hidden
        
        #line 103 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 103 "SchemaEntity201909.tt"
        this.Write("Utf8JsonPropertyName.Span);\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 105 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 108 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 109 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 112 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 113 "SchemaEntity201909.tt"

    if(HasConstString)
    {
    
        
        #line default
        #line hidden
        
        #line 117 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 117 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 117 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 117 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstString ));
        
        #line default
        #line hidden
        
        #line 117 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 118 "SchemaEntity201909.tt"

    }
    else if(HasConstBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 123 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 123 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 123 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 123 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstBoolean ));
        
        #line default
        #line hidden
        
        #line 123 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 124 "SchemaEntity201909.tt"

    }
    else if(HasConstNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstNumber ));
        
        #line default
        #line hidden
        
        #line 129 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 130 "SchemaEntity201909.tt"

    }
    else if(HasConstObject)
    {
    
        
        #line default
        #line hidden
        
        #line 135 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 135 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 135 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 135 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstObject ));
        
        #line default
        #line hidden
        
        #line 135 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 136 "SchemaEntity201909.tt"

    }
    else if(HasConstArray)
    {
    
        
        #line default
        #line hidden
        
        #line 141 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 141 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 141 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 141 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstArray ));
        
        #line default
        #line hidden
        
        #line 141 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 142 "SchemaEntity201909.tt"

    }
    else if(HasConstNull)
    {
    
        
        #line default
        #line hidden
        
        #line 147 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 147 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 147 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(\"null\");\r\n    ");
        
        #line default
        #line hidden
        
        #line 148 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 151 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 152 "SchemaEntity201909.tt"


    if(HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 157 "SchemaEntity201909.tt"
        this.Write("        private static readonly Regex __MenesPatternExpression = new Regex(");
        
        #line default
        #line hidden
        
        #line 157 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(Pattern, true) ));
        
        #line default
        #line hidden
        
        #line 157 "SchemaEntity201909.tt"
        this.Write(", RegexOptions.Compiled);\r\n    ");
        
        #line default
        #line hidden
        
        #line 158 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 161 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 162 "SchemaEntity201909.tt"

    if(HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 166 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, ImmutableArr" +
                "ay<ReadOnlyMemory<byte>>> __MenesDependentRequired = BuildDependentRequired();\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 167 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 170 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 171 "SchemaEntity201909.tt"

    if(HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 175 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 175 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 175 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> __MenesDependentSchema " +
                "= CreateDependentSchemaValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 176 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 179 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 180 "SchemaEntity201909.tt"

    if(HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 184 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 184 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 184 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties " +
                "= CreateLocalPropertyValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 185 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 188 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 189 "SchemaEntity201909.tt"

    if(HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 193 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<JsonEncodedText, JsonAny> __M" +
                "enesDefaults = BuildDefaults();\r\n    ");
        
        #line default
        #line hidden
        
        #line 194 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 197 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 199 "SchemaEntity201909.tt"

    if(HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 203 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<Regex, Func<Property, Validat" +
                "ionContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = Crea" +
                "tePatternPropertiesValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 204 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 207 "SchemaEntity201909.tt"
        this.Write("\r\n        private readonly JsonElement jsonElementBacking;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 210 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 214 "SchemaEntity201909.tt"
        this.Write("        private readonly ImmutableDictionary<JsonEncodedText, JsonAny>? objectBac" +
                "king;\r\n    ");
        
        #line default
        #line hidden
        
        #line 215 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 218 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 219 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 223 "SchemaEntity201909.tt"
        this.Write("        private readonly ImmutableList<JsonAny>? arrayBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 224 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 227 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 228 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 232 "SchemaEntity201909.tt"
        this.Write("        private readonly double? numberBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 233 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 236 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 237 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 241 "SchemaEntity201909.tt"
        this.Write("        private readonly JsonEncodedText? stringBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 242 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 245 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 246 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 250 "SchemaEntity201909.tt"
        this.Write("        private readonly bool? booleanBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 251 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 254 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Initializes a new instance of the <see cref=" +
                "\"");
        
        #line default
        #line hidden
        
        #line 256 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 256 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">The backing " +
                "<see cref=\"JsonElement\"/>.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 259 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 259 "SchemaEntity201909.tt"
        this.Write("(JsonElement value)\r\n        {\r\n            this.jsonElementBacking = value;\r\n   " +
                " ");
        
        #line default
        #line hidden
        
        #line 262 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 266 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 267 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 270 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 270 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 274 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 275 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 278 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 278 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 282 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 283 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 286 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 286 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 290 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 291 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 294 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 294 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 298 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 299 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 302 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 304 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 308 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 309 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 309 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A property d" +
                "ictionary.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 312 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 312 "SchemaEntity201909.tt"
        this.Write("(ImmutableDictionary<JsonEncodedText, JsonAny> value)\r\n        {\r\n            thi" +
                "s.jsonElementBacking = default;\r\n            this.objectBacking = value;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 316 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 320 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 321 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 324 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 324 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 328 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 329 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 332 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 332 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 336 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 337 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 340 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 340 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 344 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 345 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 348 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 351 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonObject\">The <se" +
                "e cref=\"JsonObject\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 354 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 354 "SchemaEntity201909.tt"
        this.Write(@"(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

        ");
        
        #line default
        #line hidden
        
        #line 367 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 371 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 372 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 375 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 375 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 379 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 380 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 383 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 383 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 387 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 388 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 391 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 391 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 395 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 396 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 399 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 400 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 403 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 404 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 408 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 409 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 409 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">An array lis" +
                "t.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 412 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 412 "SchemaEntity201909.tt"
        this.Write("(ImmutableList<JsonAny> value)\r\n        {\r\n            this.jsonElementBacking = " +
                "default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 415 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 419 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 420 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 423 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 423 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 427 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 428 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 431 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 431 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 435 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 436 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 439 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 439 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 443 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 444 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 447 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n     " +
                "   /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 451 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 451 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonArray\">The <see" +
                " cref=\"JsonArray\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 454 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 454 "SchemaEntity201909.tt"
        this.Write(@"(JsonArray jsonArray)
        {
            if (jsonArray.HasJsonElement)
            {
                this.jsonElementBacking = jsonArray.AsJsonElement;
                this.arrayBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.arrayBacking = jsonArray.AsItemsList;
            }

        ");
        
        #line default
        #line hidden
        
        #line 467 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 471 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 472 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 475 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 475 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 479 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 480 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 483 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 483 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 487 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 488 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 491 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 491 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 495 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 496 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 499 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 500 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 503 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 504 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 508 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 509 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 509 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonNumber\">The <se" +
                "e cref=\"JsonNumber\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 512 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 512 "SchemaEntity201909.tt"
        this.Write(@"(JsonNumber jsonNumber)
        {
            if (jsonNumber.HasJsonElement)
            {
                this.jsonElementBacking = jsonNumber.AsJsonElement;
                this.numberBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.numberBacking = jsonNumber.GetDouble();
            }
        ");
        
        #line default
        #line hidden
        
        #line 524 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 528 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 529 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 532 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 532 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 536 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 537 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 540 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 540 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 544 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 545 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 548 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 548 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 552 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 553 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 556 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 559 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 559 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 562 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 562 "SchemaEntity201909.tt"
        this.Write("(double value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 565 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 569 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 570 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 573 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 573 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 577 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 578 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 581 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 581 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 585 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 586 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 589 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 589 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 593 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 594 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 597 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 601 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 601 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 604 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 604 "SchemaEntity201909.tt"
        this.Write("(int value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 607 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 611 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 612 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 615 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 615 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 619 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 620 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 623 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 623 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 627 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 628 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 631 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 631 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 635 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 636 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 639 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 643 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 643 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 646 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 646 "SchemaEntity201909.tt"
        this.Write("(float value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 649 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 653 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 654 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 657 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 657 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 661 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 662 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 665 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 665 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 669 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 670 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 673 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 673 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 677 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 678 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 681 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 685 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 685 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 688 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 688 "SchemaEntity201909.tt"
        this.Write("(long value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        " +
                "");
        
        #line default
        #line hidden
        
        #line 691 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 695 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 696 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 699 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 699 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 703 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 704 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 707 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 707 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 711 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 712 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 715 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 715 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 719 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 720 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 723 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 725 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 728 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 729 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 733 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 734 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 734 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 737 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 737 "SchemaEntity201909.tt"
        this.Write("(string value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 740 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 744 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 745 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 748 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 748 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 752 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 753 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 756 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 756 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 760 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 761 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 764 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 764 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 768 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 769 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 772 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = JsonEncodedText.Encode(value);\r\n        }\r\n\r\n   " +
                "     /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 776 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 776 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 779 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 779 "SchemaEntity201909.tt"
        this.Write("(JsonEncodedText value)\r\n        {\r\n            this.jsonElementBacking = default" +
                ";\r\n        ");
        
        #line default
        #line hidden
        
        #line 782 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 786 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 787 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 790 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 790 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 794 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 795 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 798 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 798 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 802 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 803 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 806 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 806 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 810 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 811 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 814 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 818 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 818 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 821 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 821 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 824 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 828 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 829 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 832 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 832 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 836 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 837 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 840 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 840 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 844 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 845 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 848 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 848 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 852 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 853 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 856 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = JsonEncodedText.Encode(value);\r\n        }\r\n\r\n   " +
                "     /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 860 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 860 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 863 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 863 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 866 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 870 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 871 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 874 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 874 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 878 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 879 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 882 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 882 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 886 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 887 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 890 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 890 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 894 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 895 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 898 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = JsonEncodedText.Encode(value);\r\n        }\r\n\r\n   " +
                "     /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 902 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 902 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonString\">The <se" +
                "e cref=\"JsonString\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 905 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 905 "SchemaEntity201909.tt"
        this.Write(@"(JsonString jsonString)
        {
            if (jsonString.HasJsonElement)
            {
                this.jsonElementBacking = jsonString.AsJsonElement;
                this.stringBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.stringBacking = jsonString.GetJsonEncodedText();
            }

        ");
        
        #line default
        #line hidden
        
        #line 918 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 922 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 923 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 926 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 926 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 930 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 931 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 934 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 934 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 938 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 939 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 942 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 942 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 946 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 947 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 950 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 951 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 954 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 955 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 959 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 960 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 960 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonBoolean\">The <s" +
                "ee cref=\"JsonBoolean\"/> from which to construct the value.</param>\r\n        publ" +
                "ic ");
        
        #line default
        #line hidden
        
        #line 963 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 963 "SchemaEntity201909.tt"
        this.Write(@"(JsonBoolean jsonBoolean)
        {
            if (jsonBoolean.HasJsonElement)
            {
                this.jsonElementBacking = jsonBoolean.AsJsonElement;
                this.booleanBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.booleanBacking = jsonBoolean.GetBoolean();
            }

        ");
        
        #line default
        #line hidden
        
        #line 976 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 980 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 981 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 984 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 984 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 988 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 989 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 992 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 992 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 996 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 997 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1000 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1000 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1004 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1005 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1008 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n                /// <summary>\r\n        /// Initializes a new instanc" +
                "e of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1011 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1011 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"boolean\">The <see c" +
                "ref=\"bool\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1014 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1014 "SchemaEntity201909.tt"
        this.Write("(bool boolean)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "      this.booleanBacking = boolean;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1019 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1023 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1024 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1027 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1027 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1031 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1032 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1035 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1035 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1039 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1040 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1043 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1043 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1047 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1048 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1051 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1053 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1056 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1057 "SchemaEntity201909.tt"
 /* Implicit Constructors */ 
        
        #line default
        #line hidden
        
        #line 1058 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1059 "SchemaEntity201909.tt"

    foreach (Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1067 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1068 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1068 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"conversion\">The <se" +
                "e cref=\"");
        
        #line default
        #line hidden
        
        #line 1070 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1070 "SchemaEntity201909.tt"
        this.Write("\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1071 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1071 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1071 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1071 "SchemaEntity201909.tt"
        this.Write(" conversion)\r\n        {\r\n            if (conversion.HasJsonElement)\r\n            " +
                "{\r\n                this.jsonElementBacking = conversion.AsJsonElement;\r\n        " +
                "");
        
        #line default
        #line hidden
        
        #line 1076 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1080 "SchemaEntity201909.tt"
        this.Write("                this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1081 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1084 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1084 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1088 "SchemaEntity201909.tt"
        this.Write("                this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1089 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1092 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1093 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1097 "SchemaEntity201909.tt"
        this.Write("                this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1098 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1101 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1101 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1105 "SchemaEntity201909.tt"
        this.Write("                this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1106 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1109 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1109 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1113 "SchemaEntity201909.tt"
        this.Write("                this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1114 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1117 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                this.jsonElementB" +
                "acking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1121 "SchemaEntity201909.tt"

        if(conversion.IsObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1125 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1133 "SchemaEntity201909.tt"

        }
        else if (IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1138 "SchemaEntity201909.tt"
        this.Write("                this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1139 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1142 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1142 "SchemaEntity201909.tt"

        if(conversion.IsBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1146 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1154 "SchemaEntity201909.tt"

        }
        else if (IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1159 "SchemaEntity201909.tt"
        this.Write("                this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1160 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1163 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1164 "SchemaEntity201909.tt"

        if(conversion.IsArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1168 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Array)
                {
                    this.arrayBacking = conversion;
                }
                else
                {
                    this.arrayBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1176 "SchemaEntity201909.tt"

        }
        else if (IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1181 "SchemaEntity201909.tt"
        this.Write("                this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1182 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1185 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1185 "SchemaEntity201909.tt"

        if(conversion.IsNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1189 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Number)
                {
                    this.numberBacking = conversion;
                }
                else
                {
                    this.numberBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1197 "SchemaEntity201909.tt"

        }
        else if (IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1202 "SchemaEntity201909.tt"
        this.Write("                this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1203 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1206 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1206 "SchemaEntity201909.tt"

        if(conversion.IsString)
        {
        
        
        #line default
        #line hidden
        
        #line 1210 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.String)
                {
                    this.stringBacking = conversion;
                }
                else
                {
                    this.stringBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1218 "SchemaEntity201909.tt"

        }
        else if (IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity201909.tt"
        this.Write("                this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1224 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1227 "SchemaEntity201909.tt"
        this.Write("            }\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1229 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1232 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1234 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1238 "SchemaEntity201909.tt"
        this.Write(@"        /// <inheritdoc/>
        public int Length
        {
            get
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return items.Count;
                }

                return this.jsonElementBacking.GetArrayLength();
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 1251 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1254 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1255 "SchemaEntity201909.tt"

    foreach (Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1263 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets the value as a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1264 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1264 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1266 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1266 "SchemaEntity201909.tt"
        this.Write(" As");
        
        #line default
        #line hidden
        
        #line 1266 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1266 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this;\r\n      " +
                "      }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets a value indicating" +
                " whether this is a valid <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1275 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1275 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public bool Is");
        
        #line default
        #line hidden
        
        #line 1277 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1277 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return ((");
        
        #line default
        #line hidden
        
        #line 1281 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1281 "SchemaEntity201909.tt"
        this.Write(")this).Validate().IsValid;\r\n            }\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1285 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1288 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1289 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 1293 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1293 "SchemaEntity201909.tt"

        if (HasThen)
        {
        
        
        #line default
        #line hidden
        
        #line 1297 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this matches t" +
                "he If/Then type.\r\n        /// </summary>\r\n        public bool IsIfMatch");
        
        #line default
        #line hidden
        
        #line 1300 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                ThenDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1300 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1304 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                IfFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1304 "SchemaEntity201909.tt"
        this.Write(">().IsValid(); \r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// G" +
                "ets this as the matching type for the If/Then clause.\r\n        /// </summary>\r\n " +
                "       public ");
        
        #line default
        #line hidden
        
        #line 1311 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1311 "SchemaEntity201909.tt"
        this.Write(" AsIfMatch");
        
        #line default
        #line hidden
        
        #line 1311 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1311 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1315 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1315 "SchemaEntity201909.tt"
        this.Write(">(); \r\n            }\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1319 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1322 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1323 "SchemaEntity201909.tt"

        if (HasElse)
        {
        
        
        #line default
        #line hidden
        
        #line 1327 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this matches t" +
                "he If/Else type.\r\n        /// </summary>\r\n        public bool IsElseMatch");
        
        #line default
        #line hidden
        
        #line 1330 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1330 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return !this.As<");
        
        #line default
        #line hidden
        
        #line 1334 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(IfFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1334 "SchemaEntity201909.tt"
        this.Write(">().IsValid(); \r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// G" +
                "ets this as the matching type for the If/Else clause.\r\n        /// </summary>\r\n " +
                "       public ");
        
        #line default
        #line hidden
        
        #line 1341 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1341 "SchemaEntity201909.tt"
        this.Write(" AsElseMatch");
        
        #line default
        #line hidden
        
        #line 1341 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1341 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1345 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1345 "SchemaEntity201909.tt"
        this.Write(">(); \r\n            }\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1348 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1351 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1351 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1354 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1355 "SchemaEntity201909.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 1359 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1359 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 1363 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Gets ");
        
        #line default
        #line hidden
        
        #line 1365 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1365 "SchemaEntity201909.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// {Property title}.\r\n" +
                "        /// {Property description}.\r\n        /// </remarks>\r\n        /// <exampl" +
                "e>\r\n        /// {Property examples}.\r\n        /// </example>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1374 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1374 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 1374 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1374 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                if (this.objectBacki" +
                "ng is ImmutableDictionary<JsonEncodedText, JsonAny> properties)\r\n               " +
                " {\r\n                    if(properties.TryGetValue(");
        
        #line default
        #line hidden
        
        #line 1380 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1380 "SchemaEntity201909.tt"
        this.Write(@"JsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(");
        
        #line default
        #line hidden
        
        #line 1388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1388 "SchemaEntity201909.tt"
        this.Write("Utf8JsonPropertyName.Span, out JsonElement result))\r\n                    {\r\n     " +
                "                   return new  ");
        
        #line default
        #line hidden
        
        #line 1390 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1390 "SchemaEntity201909.tt"
        this.Write("(result);\r\n                    }\r\n                }\r\n\r\n                return def" +
                "ault;\r\n            }\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1398 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1401 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1401 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1404 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this is backed" +
                " by a JSON element.\r\n        /// </summary>\r\n        public bool HasJsonElement " +
                "=>\r\n    ");
        
        #line default
        #line hidden
        
        #line 1408 "SchemaEntity201909.tt"

    bool isFirstProperty = true;
    
        
        #line default
        #line hidden
        
        #line 1411 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1412 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1416 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking is null\r\n            \r\n    ");
        
        #line default
        #line hidden
        
        #line 1418 "SchemaEntity201909.tt"

        isFirstProperty = false;
    }
    
        
        #line default
        #line hidden
        
        #line 1422 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1423 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1427 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1427 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1435 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1436 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1439 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1440 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1443 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1443 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1447 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1447 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1455 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1456 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1459 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1460 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1463 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1463 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1467 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1467 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1475 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1476 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1479 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1480 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1483 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1483 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1487 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1487 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1495 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1496 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1499 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1500 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1503 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1504 "SchemaEntity201909.tt"

    if (!IsImplicitObject && !IsImplicitArray && !IsImplicitNumber && !IsImplicitBoolean && !IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1508 "SchemaEntity201909.tt"
        this.Write("    true\r\n    ");
        
        #line default
        #line hidden
        
        #line 1509 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1512 "SchemaEntity201909.tt"
        this.Write("            ;\r\n\r\n        /// <summary>\r\n        /// Gets the value as a JsonEleme" +
                "nt.\r\n        /// </summary>\r\n        public JsonElement AsJsonElement\r\n        {" +
                "\r\n            get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1521 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1525 "SchemaEntity201909.tt"
        this.Write("          \r\n                if (this.objectBacking is ImmutableDictionary<JsonEnc" +
                "odedText, JsonAny> objectBacking)\r\n                {\r\n                    return" +
                " JsonObject.PropertiesToJsonElement(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1531 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1534 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1535 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1539 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return JsonArray.ItemsToJsonElement(arrayBa" +
                "cking);\r\n                }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1543 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1546 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1547 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1551 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return JsonNumber.NumberToJsonElement(numberBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1556 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1559 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1560 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1564 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText stringBacking)\r\n       " +
                "         {\r\n                    return JsonString.StringToJsonElement(stringBack" +
                "ing);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1569 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1572 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1573 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1577 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return JsonBoolean.BoolToJsonElement(booleanBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1582 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1585 "SchemaEntity201909.tt"
        this.Write("\r\n                return this.jsonElementBacking;\r\n            }\r\n        }\r\n\r\n  " +
                "      /// <inheritdoc/>\r\n        public JsonValueKind ValueKind\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1595 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1599 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, Js" +
                "onAny>)\r\n                {\r\n                    return JsonValueKind.Object;\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1604 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1607 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1608 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1612 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny>)\r\n               " +
                " {\r\n                    return JsonValueKind.Array;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1617 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1620 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1621 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1625 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double)\r\n                {\r\n           " +
                "         return JsonValueKind.Number;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1630 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1633 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1634 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1638 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText)\r\n                {\r\n  " +
                "                  return JsonValueKind.String;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1643 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1646 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1647 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1651 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return booleanBacking ? JsonValueKind.True : JsonValueKin" +
                "d.False;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1656 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1659 "SchemaEntity201909.tt"
        this.Write("\r\n                return this.jsonElementBacking.ValueKind;\r\n            }\r\n     " +
                "   }\r\n\r\n        /// <inheritdoc/>\r\n        public JsonAny AsAny\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1669 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1673 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, Js" +
                "onAny> objectBacking)\r\n                {\r\n                    return new JsonAny" +
                "(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1678 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1681 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1682 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1686 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return new JsonAny(arrayBacking);\r\n        " +
                "        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1691 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1694 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1695 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1699 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return new JsonAny(numberBacking);\r\n                }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 1704 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1707 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1708 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1712 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText stringBacking)\r\n       " +
                "         {\r\n                    return new JsonAny(stringBacking);\r\n            " +
                "    }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1717 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1720 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1721 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1725 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return new JsonAny(booleanBacking);\r\n                }\r\n\r" +
                "\n    ");
        
        #line default
        #line hidden
        
        #line 1730 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1733 "SchemaEntity201909.tt"
        this.Write(@"
                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonObject""/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1745 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1749 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<JsonEncodedText, Js" +
                "onAny> objectBacking)\r\n                {\r\n                    return new JsonObj" +
                "ect(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1754 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1757 "SchemaEntity201909.tt"
        this.Write(@"
                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonArray""/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1769 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1773 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return new JsonArray(arrayBacking);\r\n      " +
                "          }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1778 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1781 "SchemaEntity201909.tt"
        this.Write(@"
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonNumber""/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1793 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1797 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return new JsonNumber(numberBacking);\r\n                }\r" +
                "\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1802 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1805 "SchemaEntity201909.tt"
        this.Write(@"                return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonString""/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1816 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1820 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is JsonEncodedText stringBacking)\r\n       " +
                "         {\r\n                    return new JsonString(stringBacking);\r\n         " +
                "       }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1825 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1828 "SchemaEntity201909.tt"
        this.Write(@"                return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonBoolean""/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1839 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1843 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return new JsonBoolean(booleanBacking);\r\n                " +
                "}\r\n    ");
        
        #line default
        #line hidden
        
        #line 1847 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1850 "SchemaEntity201909.tt"
        this.Write(@"                return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonNull""/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

    ");
        
        #line default
        #line hidden
        
        #line 1865 "SchemaEntity201909.tt"

    foreach(Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1873 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Conversion from <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1874 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1874 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1877 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1877 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1877 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1877 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1879 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1879 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to <see cref" +
                "=\"");
        
        #line default
        #line hidden
        
        #line 1883 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1883 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1886 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1886 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1886 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1886 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 1888 "SchemaEntity201909.tt"

        if(conversion.IsObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1892 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Object)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1894 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1894 "SchemaEntity201909.tt"
        this.Write("(value.AsObject);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1896 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1899 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1899 "SchemaEntity201909.tt"

        if(conversion.IsArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1903 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Array)\r\n            {\r\n         " +
                "       return new ");
        
        #line default
        #line hidden
        
        #line 1905 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1905 "SchemaEntity201909.tt"
        this.Write("(value.AsArray);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1907 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1910 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1910 "SchemaEntity201909.tt"

        if(conversion.IsString)
        {
        
        
        #line default
        #line hidden
        
        #line 1914 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.String)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity201909.tt"
        this.Write("(value.AsString);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1918 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1921 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1921 "SchemaEntity201909.tt"

        if(conversion.IsBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonV" +
                "alueKind.False)\r\n            {\r\n                return new ");
        
        #line default
        #line hidden
        
        #line 1927 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1927 "SchemaEntity201909.tt"
        this.Write("(value.AsBoolean);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1929 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1932 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1932 "SchemaEntity201909.tt"

        if(conversion.IsNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1936 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Number)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1938 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1938 "SchemaEntity201909.tt"
        this.Write("(value.AsNumber);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1940 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1943 "SchemaEntity201909.tt"
        this.Write("            return default;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1945 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1948 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1949 "SchemaEntity201909.tt"

    foreach(Conversion conversion in ConversionsViaCast)
    {
    
        
        #line default
        #line hidden
        
        #line 1953 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Conversion from <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1954 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1954 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1957 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1957 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1957 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1957 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return (");
        
        #line default
        #line hidden
        
        #line 1959 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.ConvertViaDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1959 "SchemaEntity201909.tt"
        this.Write(")value;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to <see cref=" +
                "\"");
        
        #line default
        #line hidden
        
        #line 1963 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1963 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1966 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1966 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1966 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1966 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return (");
        
        #line default
        #line hidden
        
        #line 1968 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.ConvertViaDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1968 "SchemaEntity201909.tt"
        this.Write(")value;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1970 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1973 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from any.\r\n        /// </summary>" +
                "\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n    " +
                "    public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1978 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1978 "SchemaEntity201909.tt"
        this.Write("(JsonAny value)\r\n        {\r\n            if (value.HasJsonElement)\r\n            {\r" +
                "\n                return new ");
        
        #line default
        #line hidden
        
        #line 1982 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1982 "SchemaEntity201909.tt"
        this.Write("(value.AsJsonElement);\r\n            }\r\n\r\n            return value.As<");
        
        #line default
        #line hidden
        
        #line 1985 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1985 "SchemaEntity201909.tt"
        this.Write(">();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to any.\r\n       " +
                " /// </summary>\r\n        /// <param name=\"value\">The value from which to convert" +
                ".</param>\r\n        public static implicit operator JsonAny(");
        
        #line default
        #line hidden
        
        #line 1992 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1992 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsAny;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1997 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2001 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from array.\r\n        /// </summar" +
                "y>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n  " +
                "      public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2006 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2006 "SchemaEntity201909.tt"
        this.Write("(JsonArray value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2008 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2008 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to array.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"value\">The value from which to c" +
                "onvert.</param>\r\n        public static implicit operator JsonArray(");
        
        #line default
        #line hidden
        
        #line 2015 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2015 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsArray;
        }
       
        /// <summary>
        /// Implicit conversion to an <see cref=""ImmutableList{T}""/> of <see cref=""JsonAny""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ImmutableList<JsonAny>(");
        
        #line default
        #line hidden
        
        #line 2024 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2024 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsArray.AsItemsList;
        }

        /// <summary>
        /// Implicit conversion from an <see cref=""ImmutableList{T}""/> of <see cref=""JsonAny""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2033 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2033 "SchemaEntity201909.tt"
        this.Write("(ImmutableList<JsonAny> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2035 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2035 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2037 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2040 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2041 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2045 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from object.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2050 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2050 "SchemaEntity201909.tt"
        this.Write("(JsonObject value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2052 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2052 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to object.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonObject(");
        
        #line default
        #line hidden
        
        #line 2059 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2059 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsObject;
        }

                /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<JsonEncodedText, JsonAny>(");
        
        #line default
        #line hidden
        
        #line 2068 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2068 "SchemaEntity201909.tt"
        this.Write(@"  value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2077 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2077 "SchemaEntity201909.tt"
        this.Write(" (ImmutableDictionary<JsonEncodedText, JsonAny> value)\r\n        {\r\n            re" +
                "turn new ");
        
        #line default
        #line hidden
        
        #line 2079 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2079 "SchemaEntity201909.tt"
        this.Write(" (value);\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2082 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2085 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2086 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2090 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from string.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2095 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2095 "SchemaEntity201909.tt"
        this.Write("(string value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2097 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2097 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator string(");
        
        #line default
        #line hidden
        
        #line 2104 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2104 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString.GetString();
        }

        /// <summary>
        /// Conversion from <see cref=""JsonEncodedText""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2113 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2113 "SchemaEntity201909.tt"
        this.Write("(JsonEncodedText value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2115 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2115 "SchemaEntity201909.tt"
        this.Write(@"(value);
        }

        /// <summary>
        /// Conversion to <see cref=""JsonEncodedText""/>.
        /// </summary>
        /// <param name=""value"">The number from which to convert.</param>
        public static implicit operator JsonEncodedText(");
        
        #line default
        #line hidden
        
        #line 2122 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2122 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString.GetJsonEncodedText();
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2131 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2131 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2133 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2133 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator ReadOnlySpan<char>(");
        
        #line default
        #line hidden
        
        #line 2140 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2140 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString.AsSpan();
        }

        /// <summary>
        /// Conversion from utf8 bytes.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2149 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2149 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2151 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2151 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to utf8 byte" +
                "s.\r\n        /// </summary>\r\n        /// <param name=\"value\">The number from whic" +
                "h to convert.</param>\r\n        public static implicit operator ReadOnlySpan<byte" +
                ">(");
        
        #line default
        #line hidden
        
        #line 2158 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2158 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString.GetJsonEncodedText().EncodedUtf8Bytes;
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2167 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2167 "SchemaEntity201909.tt"
        this.Write("(JsonString value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2169 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2169 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonString(");
        
        #line default
        #line hidden
        
        #line 2176 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2176 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsString;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2181 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2184 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2185 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2189 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from double.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2194 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2194 "SchemaEntity201909.tt"
        this.Write("(double value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2196 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2196 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to double.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The number from which t" +
                "o convert.</param>\r\n        public static implicit operator double(");
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2203 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetDouble();
        }

        /// <summary>
        /// Conversion from float.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2212 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2212 "SchemaEntity201909.tt"
        this.Write("(float value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2214 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2214 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to float.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"number\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator float(");
        
        #line default
        #line hidden
        
        #line 2221 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2221 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetSingle();
        }

        /// <summary>
        /// Conversion from long.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2230 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2230 "SchemaEntity201909.tt"
        this.Write("(long value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2232 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2232 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to long.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"number\">The number from which to " +
                "convert.</param>\r\n        public static implicit operator long(");
        
        #line default
        #line hidden
        
        #line 2239 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2239 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt64();
        }

        /// <summary>
        /// Conversion from int.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2248 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2248 "SchemaEntity201909.tt"
        this.Write("(int value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2250 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2250 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to int.\r\n   " +
                "     /// </summary>\r\n        /// <param name=\"number\">The number from which to c" +
                "onvert.</param>\r\n        public static implicit operator int(");
        
        #line default
        #line hidden
        
        #line 2257 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2257 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt32();
        }

        /// <summary>
        /// Conversion from number.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2266 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2266 "SchemaEntity201909.tt"
        this.Write("(JsonNumber value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2268 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2268 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to number.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The value from which to" +
                " convert.</param>\r\n        public static implicit operator JsonNumber(");
        
        #line default
        #line hidden
        
        #line 2275 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2275 "SchemaEntity201909.tt"
        this.Write(" number)\r\n        {\r\n            return number.AsNumber;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2280 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2283 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2284 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2288 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from bool.\r\n        /// </summary" +
                ">\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n   " +
                "     public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2293 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2293 "SchemaEntity201909.tt"
        this.Write("(bool value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2295 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2295 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator bool(");
        
        #line default
        #line hidden
        
        #line 2302 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2302 "SchemaEntity201909.tt"
        this.Write(@" boolean)
        {
            return boolean.AsBoolean.GetBoolean();
        }

        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2311 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2311 "SchemaEntity201909.tt"
        this.Write("(JsonBoolean value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2313 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2313 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonBoolean(");
        
        #line default
        #line hidden
        
        #line 2320 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2320 "SchemaEntity201909.tt"
        this.Write(" boolean)\r\n        {\r\n            return boolean.AsBoolean;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2325 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2328 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2329 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2333 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2333 "SchemaEntity201909.tt"

        if (CanEnumerateAsSpecificType)
        {
        
        
        #line default
        #line hidden
        
        #line 2337 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""items"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2342 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2342 "SchemaEntity201909.tt"
        this.Write(" From(params ");
        
        #line default
        #line hidden
        
        #line 2342 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2342 "SchemaEntity201909.tt"
        this.Write("[] items)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2344 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2344 "SchemaEntity201909.tt"
        this.Write(@"(items.Select(i => (JsonAny)i).ToImmutableList());
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2352 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2352 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2352 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2352 "SchemaEntity201909.tt"
        this.Write(" item1)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2354 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2354 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2363 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2363 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2363 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2363 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2363 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2363 "SchemaEntity201909.tt"
        this.Write(" item2)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2365 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2365 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(" item2, ");
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(" item3)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2377 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2377 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <param name=""item4"">The fourth item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(" item2, ");
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(" item3, ");
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(" item4)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2390 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2390 "SchemaEntity201909.tt"
        this.Write("(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)it" +
                "em4));\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2392 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2397 "SchemaEntity201909.tt"
        this.Write(@"                /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""items"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2402 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2402 "SchemaEntity201909.tt"
        this.Write(" From(params JsonAny[] items)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2404 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2404 "SchemaEntity201909.tt"
        this.Write(@"(items.ToImmutableList());
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2412 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2412 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2414 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2414 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2423 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2423 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2425 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2425 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1, item2));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2435 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2435 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2, JsonAny item3)\r\n        {\r\n            return" +
                " new ");
        
        #line default
        #line hidden
        
        #line 2437 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2437 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1, item2, item3));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <param name=""item4"">The fourth item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2448 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2448 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2, JsonAny item3, JsonAny item4)\r\n        {\r\n   " +
                "         return new ");
        
        #line default
        #line hidden
        
        #line 2450 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2450 "SchemaEntity201909.tt"
        this.Write("(ImmutableList.Create(item1, item2, item3, item4));\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2452 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2455 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2456 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2459 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2460 "SchemaEntity201909.tt"

    if (HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 2464 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Creates an instance of a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 2465 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2465 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static ");
        
        #line default
        #line hidden
        
        #line 2467 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2467 "SchemaEntity201909.tt"
        this.Write(" Create(\r\n        ");
        
        #line default
        #line hidden
        
        #line 2468 "SchemaEntity201909.tt"

        bool isFirstCreateParameter = true;
        foreach(var property in RequiredAllOfAndRefProperties)
        {
            if (isFirstCreateParameter)
            {
                isFirstCreateParameter = false;
            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 2479 "SchemaEntity201909.tt"
        this.Write(", ");
        
        #line default
        #line hidden
        
        #line 2479 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write("           ");
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2483 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2486 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2486 "SchemaEntity201909.tt"

        foreach(var property in OptionalAllOfAndRefProperties)
        {
            if (isFirstCreateParameter)
            {
                isFirstCreateParameter = false;
            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 2496 "SchemaEntity201909.tt"
        this.Write(", ");
        
        #line default
        #line hidden
        
        #line 2496 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 2499 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 2499 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2499 "SchemaEntity201909.tt"
        this.Write("? ");
        
        #line default
        #line hidden
        
        #line 2499 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2499 "SchemaEntity201909.tt"
        this.Write(" = null\r\n        ");
        
        #line default
        #line hidden
        
        #line 2500 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2503 "SchemaEntity201909.tt"
        this.Write("\r\n        )\r\n        {\r\n            var builder = ImmutableDictionary.CreateBuild" +
                "er<JsonEncodedText, JsonAny>();\r\n        ");
        
        #line default
        #line hidden
        
        #line 2507 "SchemaEntity201909.tt"

        foreach(var property in RequiredAllOfAndRefProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity201909.tt"
        this.Write("            builder.Add(");
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, ");
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity201909.tt"
        this.Write(");\r\n        ");
        
        #line default
        #line hidden
        
        #line 2512 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2515 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2515 "SchemaEntity201909.tt"

        foreach(var property in OptionalAllOfAndRefProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"
        this.Write("            if (");
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"
        this.Write(" is ");
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2519 "SchemaEntity201909.tt"
        this.Write("__)\r\n            {\r\n                builder.Add(");
        
        #line default
        #line hidden
        
        #line 2521 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 2521 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, ");
        
        #line default
        #line hidden
        
        #line 2521 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2521 "SchemaEntity201909.tt"
        this.Write("__);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2523 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2526 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2529 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 2533 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Sets ");
        
        #line default
        #line hidden
        
        #line 2535 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 2535 "SchemaEntity201909.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to set.</par" +
                "am>\r\n        /// <returns>The entity with the updated property.</returns>\r\n     " +
                "   public ");
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity201909.tt"
        this.Write(" With");
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2539 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return this.SetProperty(");
        
        #line default
        #line hidden
        
        #line 2541 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2541 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, value);\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2544 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2547 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2548 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2551 "SchemaEntity201909.tt"
        this.Write(@"

        /// <summary>
        /// Writes the object to the <see cref=""Utf8JsonWriter""/>.
        /// </summary>
        /// <param name=""writer"">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
    ");
        
        #line default
        #line hidden
        
        #line 2559 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2563 "SchemaEntity201909.tt"
        this.Write("            if (this.objectBacking is ImmutableDictionary<JsonEncodedText, JsonAn" +
                "y> objectBacking)\r\n            {\r\n                JsonObject.WriteProperties(obj" +
                "ectBacking, writer);\r\n                return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2569 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2572 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2573 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2577 "SchemaEntity201909.tt"
        this.Write("            if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n      " +
                "      {\r\n                JsonArray.WriteItems(arrayBacking, writer);\r\n          " +
                "      return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2583 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2586 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2587 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2591 "SchemaEntity201909.tt"
        this.Write("            if (this.numberBacking is double numberBacking)\r\n            {\r\n     " +
                "           writer.WriteNumberValue(numberBacking);\r\n                return;\r\n   " +
                "         }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2597 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2600 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2601 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2605 "SchemaEntity201909.tt"
        this.Write("            if (this.stringBacking is JsonEncodedText stringBacking)\r\n           " +
                " {\r\n                writer.WriteStringValue(stringBacking);\r\n                ret" +
                "urn;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2611 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2614 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2615 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2619 "SchemaEntity201909.tt"
        this.Write("            if (this.booleanBacking is bool booleanBacking)\r\n            {\r\n     " +
                "           writer.WriteBooleanValue(booleanBacking);\r\n                return;\r\n " +
                "           }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2624 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2627 "SchemaEntity201909.tt"
        this.Write("\r\n            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)\r\n" +
                "            {\r\n                this.jsonElementBacking.WriteTo(writer);\r\n       " +
                "         return;\r\n            }\r\n\r\n            writer.WriteNullValue();\r\n       " +
                " }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2637 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2641 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2642 "SchemaEntity201909.tt"

        if (HasAdditionalPropertiesObject && !HasUnevaluatedPropertiesObject)
        {
        
        
        #line default
        #line hidden
        
        #line 2646 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the object as the given item type\r\n " +
                "       /// </summary>\r\n        public JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2649 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2649 "SchemaEntity201909.tt"
        this.Write("> EnumerateProperties()\r\n        {\r\n            if (this.objectBacking is Immutab" +
                "leDictionary<JsonEncodedText, JsonAny> properties)\r\n            {\r\n             " +
                "   return new JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2653 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2653 "SchemaEntity201909.tt"
        this.Write(">(properties);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKin" +
                "d == JsonValueKind.Object)\r\n            {\r\n                return new JsonObject" +
                "Enumerator<");
        
        #line default
        #line hidden
        
        #line 2658 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2658 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n\r\n    " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2664 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2667 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2668 "SchemaEntity201909.tt"

        if (!HasAdditionalPropertiesObject && HasUnevaluatedPropertiesObject)
        {
        
        
        #line default
        #line hidden
        
        #line 2672 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the object as the given item type\r\n " +
                "       /// </summary>\r\n        public JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2675 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2675 "SchemaEntity201909.tt"
        this.Write("> EnumerateProperties()\r\n        {\r\n            if (this.objectBacking is Immutab" +
                "leDictionary<JsonEncodedText, JsonAny> properties)\r\n            {\r\n             " +
                "   return new JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2679 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2679 "SchemaEntity201909.tt"
        this.Write(">(properties);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKin" +
                "d == JsonValueKind.Object)\r\n            {\r\n                return new JsonObject" +
                "Enumerator<");
        
        #line default
        #line hidden
        
        #line 2684 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2684 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n\r\n    " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2690 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2693 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public JsonObjectEnumerator EnumerateObject(" +
                ")\r\n        {\r\n            return this.AsObject.EnumerateObject();\r\n        }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 2700 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2703 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2704 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2708 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2709 "SchemaEntity201909.tt"

        if (CanEnumerateAsSpecificType)
        {
        
        
        #line default
        #line hidden
        
        #line 2713 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the items in the array as a <see cre" +
                "f=\"");
        
        #line default
        #line hidden
        
        #line 2714 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2714 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public JsonArrayEnumerator<");
        
        #line default
        #line hidden
        
        #line 2716 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2716 "SchemaEntity201909.tt"
        this.Write("> EnumerateItems()\r\n        {\r\n            if (this.arrayBacking is ImmutableList" +
                "<JsonAny> items)\r\n            {\r\n                return new JsonArrayEnumerator<" +
                "");
        
        #line default
        #line hidden
        
        #line 2720 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2720 "SchemaEntity201909.tt"
        this.Write(">(items);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKind == " +
                "JsonValueKind.Array)\r\n            {\r\n                return new JsonArrayEnumera" +
                "tor<");
        
        #line default
        #line hidden
        
        #line 2725 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2725 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n      " +
                "  }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2730 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2733 "SchemaEntity201909.tt"
        this.Write("        /// <inheritdoc/>\r\n        public JsonArrayEnumerator EnumerateArray()\r\n " +
                "       {\r\n            return this.AsArray.EnumerateArray();\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2738 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2741 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2742 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2746 "SchemaEntity201909.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool TryGetProperty(JsonEncodedText name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        ");
        
        #line default
        #line hidden
        
        #line 2771 "SchemaEntity201909.tt"

        if (HasDefaults)
        {
        
        
        #line default
        #line hidden
        
        #line 2775 "SchemaEntity201909.tt"
        this.Write("        /// <inheritdoc/>\r\n        public bool TryGetDefault(JsonEncodedText name" +
                ", out JsonAny value)\r\n        {\r\n            return __MenesDefaults.TryGetValue(" +
                "name, out value);\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool T" +
                "ryGetDefault(string name, out JsonAny value)\r\n        {\r\n            return __Me" +
                "nesDefaults.TryGetValue(JsonEncodedText.Encode(name), out value);\r\n        }\r\n\r\n" +
                "        /// <inheritdoc/>\r\n        public bool TryGetDefault(ReadOnlySpan<char> " +
                "name, out JsonAny value)\r\n        {\r\n            return __MenesDefaults.TryGetVa" +
                "lue(JsonEncodedText.Encode(name), out value);\r\n        }\r\n\r\n        /// <inherit" +
                "doc/>\r\n        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAn" +
                "y value)\r\n        {\r\n            return __MenesDefaults.TryGetValue(JsonEncodedT" +
                "ext.Encode(utf8name), out value);\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n     " +
                "   public bool HasDefault(JsonEncodedText name)\r\n        {\r\n            return _" +
                "_MenesDefaults.TryGetValue(name, out _);\r\n        }\r\n\r\n        /// <inheritdoc/>" +
                "\r\n        public bool HasDefault(string name)\r\n        {\r\n            return __M" +
                "enesDefaults.TryGetValue(JsonEncodedText.Encode(name), out _);\r\n        }\r\n\r\n   " +
                "     /// <inheritdoc/>\r\n        public bool HasDefault(ReadOnlySpan<char> name)\r" +
                "\n        {\r\n            return __MenesDefaults.TryGetValue(JsonEncodedText.Encod" +
                "e(name), out _);\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool Ha" +
                "sDefault(ReadOnlySpan<byte> utf8name)\r\n        {\r\n            return __MenesDefa" +
                "ults.TryGetValue(JsonEncodedText.Encode(utf8name), out _);\r\n        }\r\n\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 2823 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2826 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2827 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2830 "SchemaEntity201909.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(");
        
        #line default
        #line hidden
        
        #line 2855 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2855 "SchemaEntity201909.tt"
        this.Write(@" other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }

    ");
        
        #line default
        #line hidden
        
        #line 2876 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2880 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public bool HasProperty(JsonEncodedText name" +
                ")\r\n        {\r\n            if (this.objectBacking is ImmutableDictionary<JsonEnco" +
                "dedText, JsonAny> properties)\r\n            {\r\n                return properties." +
                "TryGetValue(name, out _);\r\n            }\r\n\r\n            if (this.jsonElementBack" +
                "ing.ValueKind == JsonValueKind.Object)\r\n            {\r\n                return th" +
                "is.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);\r\n     " +
                "       }\r\n\r\n            return false;\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n " +
                "       public bool HasProperty(string name)\r\n        {\r\n            if (this.obj" +
                "ectBacking is ImmutableDictionary<JsonEncodedText, JsonAny> properties)\r\n       " +
                "     {\r\n                return properties.TryGetValue(JsonEncodedText.Encode(nam" +
                "e), out _);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKind " +
                "== JsonValueKind.Object)\r\n            {\r\n                return this.jsonElement" +
                "Backing.TryGetProperty(name, out JsonElement _);\r\n            }\r\n\r\n            r" +
                "eturn false;\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool HasPro" +
                "perty(ReadOnlySpan<char> name)\r\n        {\r\n            if (this.objectBacking is" +
                " ImmutableDictionary<JsonEncodedText, JsonAny> properties)\r\n            {\r\n     " +
                "           return properties.TryGetValue(JsonEncodedText.Encode(name), out _);\r\n" +
                "            }\r\n\r\n            if (this.jsonElementBacking.ValueKind == JsonValueK" +
                "ind.Object)\r\n            {\r\n                return this.jsonElementBacking.TryGe" +
                "tProperty(name, out JsonElement _);\r\n            }\r\n\r\n            return false; " +
                "       }\r\n\r\n        /// <inheritdoc/>\r\n        public bool HasProperty(ReadOnlyS" +
                "pan<byte> utf8name)\r\n        {\r\n            if (this.objectBacking is ImmutableD" +
                "ictionary<JsonEncodedText, JsonAny> properties)\r\n            {\r\n                " +
                "return properties.TryGetValue(JsonEncodedText.Encode(utf8name), out _);\r\n       " +
                "     }\r\n\r\n            if (this.jsonElementBacking.ValueKind == JsonValueKind.Obj" +
                "ect)\r\n            {\r\n                return this.jsonElementBacking.TryGetProper" +
                "ty(utf8name, out JsonElement _);\r\n            }\r\n\r\n            return false;    " +
                "    }\r\n\r\n        /// <inheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 2944 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2944 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(JsonEncodedText name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2956 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2956 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2968 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2968 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2980 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2980 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2992 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2992 "SchemaEntity201909.tt"
        this.Write(@" RemoveProperty(JsonEncodedText name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3003 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3003 "SchemaEntity201909.tt"
        this.Write(@" RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3014 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3014 "SchemaEntity201909.tt"
        this.Write(@" RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3025 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3025 "SchemaEntity201909.tt"
        this.Write(" RemoveProperty(ReadOnlySpan<byte> utf8Name)\r\n        {\r\n            if (this.Val" +
                "ueKind == JsonValueKind.Object)\r\n            {\r\n                return this.AsOb" +
                "ject.RemoveProperty(utf8Name);\r\n            }\r\n\r\n            return this;\r\n     " +
                "   }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3035 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3038 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3039 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 3043 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 3045 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3045 "SchemaEntity201909.tt"
        this.Write(@" Add<TItem>(TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Add(item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3057 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3057 "SchemaEntity201909.tt"
        this.Write(@" Insert<TItem>(int index, TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Insert(index, item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3069 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3069 "SchemaEntity201909.tt"
        this.Write(@" Replace<TItem>(TItem oldValue, TItem newValue)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.Replace(oldValue, newValue);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3081 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3081 "SchemaEntity201909.tt"
        this.Write(@" RemoveAt(int index)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveAt(index);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3092 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3092 "SchemaEntity201909.tt"
        this.Write(@" RemoveRange(int index, int count)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveRange(index, count);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3103 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3103 "SchemaEntity201909.tt"
        this.Write(@" SetItem<TItem>(int index, TItem value)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.SetItem(index, value);
            }

            return this;
        }

    ");
        
        #line default
        #line hidden
        
        #line 3114 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3117 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public T As<T>()\r\n            where T : stru" +
                "ct, IJsonValue\r\n        {\r\n            return this.As<");
        
        #line default
        #line hidden
        
        #line 3122 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3122 "SchemaEntity201909.tt"
        this.Write(@", T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

    ");
        
        #line default
        #line hidden
        
        #line 3134 "SchemaEntity201909.tt"

    if (HasRef)
    {    
    
        
        #line default
        #line hidden
        
        #line 3138 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateRef(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3143 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3146 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3147 "SchemaEntity201909.tt"

    if ((HasExplicitType || HasFormat || HasMediaTypeOrEncoding) || (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems) || (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)))))
    {
    
        
        #line default
        #line hidden
        
        #line 3151 "SchemaEntity201909.tt"
        this.Write("            JsonValueKind valueKind = this.ValueKind;\r\n    ");
        
        #line default
        #line hidden
        
        #line 3152 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3155 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3156 "SchemaEntity201909.tt"

    if (HasExplicitType || HasFormat || HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 3160 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3161 "SchemaEntity201909.tt"

        if (HasExplicitType)
        {
        
        
        #line default
        #line hidden
        
        #line 3165 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateType(valueKind, result, level);\r\n            if" +
                " (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n            " +
                "    return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3170 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3173 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3174 "SchemaEntity201909.tt"

        if (HasFormat)
        {
        
        
        #line default
        #line hidden
        
        #line 3178 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateFormat(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3183 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3186 "SchemaEntity201909.tt"
        this.Write("\r\n        \r\n        ");
        
        #line default
        #line hidden
        
        #line 3188 "SchemaEntity201909.tt"

        if (HasMediaTypeOrEncoding)
        {
        
        
        #line default
        #line hidden
        
        #line 3192 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateMediaTypeAndEncoding(valueKind, result, level);" +
                "\r\n            if (level == ValidationLevel.Flag && !result.IsValid)\r\n           " +
                " {\r\n                return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3197 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3200 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3201 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3204 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3205 "SchemaEntity201909.tt"

    if (HasConst)
    {
    
        
        #line default
        #line hidden
        
        #line 3209 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateConst(this, result, level, __Men" +
                "esConstValue);\r\n            if (level == ValidationLevel.Flag && !result.IsValid" +
                ")\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3215 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3218 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3219 "SchemaEntity201909.tt"

    if (HasEnum)
    {
    
        
        #line default
        #line hidden
        
        #line 3223 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateEnum(\r\n                this,\r\n  " +
                "              result,\r\n                level\r\n        ");
        
        #line default
        #line hidden
        
        #line 3227 "SchemaEntity201909.tt"

        for(int enumIndex = 0; enumIndex < EnumValues.Length; ++enumIndex)
        {
        
        
        #line default
        #line hidden
        
        #line 3231 "SchemaEntity201909.tt"
        this.Write("                , EnumValues.Item");
        
        #line default
        #line hidden
        
        #line 3231 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( enumIndex ));
        
        #line default
        #line hidden
        
        #line 3231 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3232 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3235 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3241 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3244 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3245 "SchemaEntity201909.tt"

    if (HasMultipleOf || HasMaximum || HasExclusiveMaximum|| HasMinimum || HasExclusiveMinimum)
    {
    
        
        #line default
        #line hidden
        
        #line 3249 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateNumber(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3253 "SchemaEntity201909.tt"

        if (HasMultipleOf)
        {
        
        
        #line default
        #line hidden
        
        #line 3257 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3257 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MultipleOf ));
        
        #line default
        #line hidden
        
        #line 3257 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3258 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3263 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3264 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3267 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3267 "SchemaEntity201909.tt"

        if (HasMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 3271 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3271 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Maximum ));
        
        #line default
        #line hidden
        
        #line 3271 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3272 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3277 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3278 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3281 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3281 "SchemaEntity201909.tt"

        if (HasExclusiveMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 3285 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3285 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ExclusiveMaximum ));
        
        #line default
        #line hidden
        
        #line 3285 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3286 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3291 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3292 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3295 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3295 "SchemaEntity201909.tt"

        if (HasMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 3299 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3299 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Minimum ));
        
        #line default
        #line hidden
        
        #line 3299 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3300 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3305 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3306 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3309 "SchemaEntity201909.tt"

        if (HasExclusiveMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 3313 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3313 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ExclusiveMinimum ));
        
        #line default
        #line hidden
        
        #line 3313 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3314 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3319 "SchemaEntity201909.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 3320 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3323 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3330 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3333 "SchemaEntity201909.tt"
        this.Write("    \r\n    ");
        
        #line default
        #line hidden
        
        #line 3334 "SchemaEntity201909.tt"

    if (HasMaxLength || HasMinLength || HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 3338 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateString(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3342 "SchemaEntity201909.tt"

        if (HasMaxLength)
        {
        
        
        #line default
        #line hidden
        
        #line 3346 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3346 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxLength ));
        
        #line default
        #line hidden
        
        #line 3346 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3347 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3352 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3353 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3356 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3356 "SchemaEntity201909.tt"

        if (HasMinLength)
        {
        
        
        #line default
        #line hidden
        
        #line 3360 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3360 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinLength ));
        
        #line default
        #line hidden
        
        #line 3360 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3361 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3366 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3367 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3370 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3370 "SchemaEntity201909.tt"

        if (HasPattern)
        {
        
        
        #line default
        #line hidden
        
        #line 3374 "SchemaEntity201909.tt"
        this.Write("                __MenesPatternExpression\r\n        ");
        
        #line default
        #line hidden
        
        #line 3375 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3380 "SchemaEntity201909.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 3381 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3384 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3390 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3393 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3394 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 3398 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateIfThenElse(result, level);\r\n            if (lev" +
                "el == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                r" +
                "eturn result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3404 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3407 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3408 "SchemaEntity201909.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 3412 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateNot(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3418 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3421 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3422 "SchemaEntity201909.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3426 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateAllOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3431 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3434 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3435 "SchemaEntity201909.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3439 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateAnyOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3444 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3447 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3448 "SchemaEntity201909.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3452 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateOneOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3458 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3461 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3462 "SchemaEntity201909.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 3466 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateObject(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3472 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3475 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3477 "SchemaEntity201909.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 3481 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateArray(valueKind, result, level);\r\n            i" +
                "f (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n           " +
                "     return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3486 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3489 "SchemaEntity201909.tt"
        this.Write("            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3492 "SchemaEntity201909.tt"

    if (HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 3496 "SchemaEntity201909.tt"
        this.Write(@"        private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
        {
            ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();

        ");
        
        #line default
        #line hidden
        
        #line 3501 "SchemaEntity201909.tt"

        foreach (var patternProperty in PatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3505 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                PatternProperty");
        
        #line default
        #line hidden
        
        #line 3506 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( PatternPropertySuffix(patternProperty) ));
        
        #line default
        #line hidden
        
        #line 3506 "SchemaEntity201909.tt"
        this.Write(",\r\n                (property, validationContext, level) =>\r\n                {\r\n  " +
                "                  return property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 3509 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( patternProperty.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3509 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext, level);\r\n                });\r\n        ");
        
        #line default
        #line hidden
        
        #line 3511 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3514 "SchemaEntity201909.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3518 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3521 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3522 "SchemaEntity201909.tt"

    if (HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 3526 "SchemaEntity201909.tt"
        this.Write("\r\n        private static ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 3527 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3527 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> CreateDependentSchemaVa" +
                "lidators()\r\n        {\r\n            ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 3529 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3529 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =\r\n    " +
                "            ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 3530 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3530 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3532 "SchemaEntity201909.tt"

        foreach (var dependentSchema in DependentSchemas)
        {
        
        
        #line default
        #line hidden
        
        #line 3536 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                JsonEncodedText.Encode(\"");
        
        #line default
        #line hidden
        
        #line 3537 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dependentSchema.Name ));
        
        #line default
        #line hidden
        
        #line 3537 "SchemaEntity201909.tt"
        this.Write("\"),\r\n                (entity, validationContext, level) =>\r\n                {\r\n  " +
                "                  return entity.As<");
        
        #line default
        #line hidden
        
        #line 3540 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dependentSchema.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3540 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext, level);\r\n                });\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3543 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3546 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3549 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3552 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3553 "SchemaEntity201909.tt"

    if (HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 3557 "SchemaEntity201909.tt"
        this.Write(@"        private static ImmutableDictionary<JsonEncodedText, JsonAny> BuildDefaults()
        {
            ImmutableDictionary<JsonEncodedText, JsonAny>.Builder builder =
                ImmutableDictionary.CreateBuilder<JsonEncodedText, JsonAny>();

        ");
        
        #line default
        #line hidden
        
        #line 3562 "SchemaEntity201909.tt"

        foreach (var property in Defaults)
        {
        
        
        #line default
        #line hidden
        
        #line 3566 "SchemaEntity201909.tt"
        this.Write("            builder.Add(");
        
        #line default
        #line hidden
        
        #line 3566 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3566 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 3566 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.DefaultValue, true) ));
        
        #line default
        #line hidden
        
        #line 3566 "SchemaEntity201909.tt"
        this.Write("));\r\n        ");
        
        #line default
        #line hidden
        
        #line 3567 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3570 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3572 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3575 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3576 "SchemaEntity201909.tt"

    if (HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 3580 "SchemaEntity201909.tt"
        this.Write(@"
        private static ImmutableDictionary<JsonEncodedText, ImmutableArray<ReadOnlyMemory<byte>>> BuildDependentRequired()
        {
            ImmutableDictionary<JsonEncodedText, ImmutableArray<ReadOnlyMemory<byte>>>.Builder builder =
                ImmutableDictionary.CreateBuilder<JsonEncodedText, ImmutableArray<ReadOnlyMemory<byte>>>();

        ");
        
        #line default
        #line hidden
        
        #line 3586 "SchemaEntity201909.tt"

        foreach (var dependentRequired in DependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 3590 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                    JsonEncodedText.Encode(");
        
        #line default
        #line hidden
        
        #line 3591 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(dependentRequired.Name, true) ));
        
        #line default
        #line hidden
        
        #line 3591 "SchemaEntity201909.tt"
        this.Write("),\r\n                    ImmutableArray.Create<ReadOnlyMemory<byte>>(\r\n           " +
                " ");
        
        #line default
        #line hidden
        
        #line 3593 "SchemaEntity201909.tt"

            bool isFirst1 = true;
            foreach (var dependentRequiredValue in dependentRequired.RequiredNames)
            {
            
        
        #line default
        #line hidden
        
        #line 3598 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3598 "SchemaEntity201909.tt"

                if (isFirst1)
                {
                    isFirst1 = false;
                
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write("                        System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 3604 "SchemaEntity201909.tt"

                }
                else
                {
                
        
        #line default
        #line hidden
        
        #line 3609 "SchemaEntity201909.tt"
        this.Write("                        , System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 3609 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 3609 "SchemaEntity201909.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 3610 "SchemaEntity201909.tt"

                }
                
        
        #line default
        #line hidden
        
        #line 3613 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3613 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3616 "SchemaEntity201909.tt"
        this.Write("                        ));\r\n        ");
        
        #line default
        #line hidden
        
        #line 3617 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3620 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3623 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3626 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3627 "SchemaEntity201909.tt"

    if (HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 3631 "SchemaEntity201909.tt"
        this.Write("\r\n        private static ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 3632 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3632 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyVali" +
                "dators()\r\n        {\r\n            ImmutableDictionary<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 3634 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3634 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =\r\n    " +
                "            ImmutableDictionary.CreateBuilder<JsonEncodedText, Func<");
        
        #line default
        #line hidden
        
        #line 3635 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3635 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3637 "SchemaEntity201909.tt"

        foreach (var property in LocalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3641 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                ");
        
        #line default
        #line hidden
        
        #line 3642 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3642 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName,\r\n                (that, validationContext, level) =>\r\n         " +
                "       {\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3645 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3645 "SchemaEntity201909.tt"
        this.Write(" property = that.");
        
        #line default
        #line hidden
        
        #line 3645 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3645 "SchemaEntity201909.tt"
        this.Write(";\r\n                    return property.Validate(validationContext, level);\r\n     " +
                "           });\r\n        ");
        
        #line default
        #line hidden
        
        #line 3648 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3651 "SchemaEntity201909.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3655 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3658 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3659 "SchemaEntity201909.tt"

    if (HasRef)
    {
    
        
        #line default
        #line hidden
        
        #line 3663 "SchemaEntity201909.tt"
        this.Write("        private ValidationContext ValidateRef(in ValidationContext validationCont" +
                "ext, ValidationLevel level)\r\n        {\r\n            ValidationContext result = v" +
                "alidationContext;\r\n\r\n            ValidationContext refResult = this.As<");
        
        #line default
        #line hidden
        
        #line 3667 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( RefDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3667 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!refResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, refResult);
                }

                result = result.MergeChildContext(refResult, false);
            }

            return result;
        }
    ");
        
        #line default
        #line hidden
        
        #line 3696 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3699 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3700 "SchemaEntity201909.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 3704 "SchemaEntity201909.tt"
        this.Write(@"        private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Array)
            {
                return result;
            }

         ");
        
        #line default
        #line hidden
        
        #line 3713 "SchemaEntity201909.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 3717 "SchemaEntity201909.tt"
        this.Write("\r\n            int arrayLength = 0;\r\n         ");
        
        #line default
        #line hidden
        
        #line 3719 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3724 "SchemaEntity201909.tt"
        this.Write("            int arrayLength = this.Length;\r\n        ");
        
        #line default
        #line hidden
        
        #line 3725 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3728 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3729 "SchemaEntity201909.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 3733 "SchemaEntity201909.tt"
        this.Write("            int containsCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3735 "SchemaEntity201909.tt"

        }

        
        
        #line default
        #line hidden
        
        #line 3739 "SchemaEntity201909.tt"
        this.Write("\r\n         ");
        
        #line default
        #line hidden
        
        #line 3740 "SchemaEntity201909.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 3744 "SchemaEntity201909.tt"
        this.Write("            JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();\r\n\r\n     " +
                "       while (arrayEnumerator.MoveNext())\r\n            {\r\n        ");
        
        #line default
        #line hidden
        
        #line 3748 "SchemaEntity201909.tt"

            if (HasUniqueItems)
            {
        
        
        #line default
        #line hidden
        
        #line 3752 "SchemaEntity201909.tt"
        this.Write(@"                JsonArrayEnumerator innerEnumerator = this.EnumerateArray();
                int innerIndex = -1;
                while (innerIndex < arrayLength && innerEnumerator.MoveNext())
                {
                    innerIndex++;
                }

                while (innerEnumerator.MoveNext())
                {
                    if (innerEnumerator.Current.Equals(arrayEnumerator.Current))
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""6.4.3. uniqueItems - duplicate items were found at indices {arrayLength} and {innerIndex}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""6.4.3. uniqueItems - duplicate items were found."");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 3778 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3781 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3782 "SchemaEntity201909.tt"

            if (HasContains)
            {
        
        
        #line default
        #line hidden
        
        #line 3786 "SchemaEntity201909.tt"
        this.Write("                ValidationContext containsResult = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3786 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     ContainsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3786 "SchemaEntity201909.tt"
        this.Write(">().Validate(result.CreateChildContext(), level);\r\n\r\n                if (contains" +
                "Result.IsValid)\r\n                {\r\n                    result = result.WithLoca" +
                "lItemIndex(arrayLength);\r\n                    containsCount++;\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3793 "SchemaEntity201909.tt"

                if (HasMaxContains)
                {
            
        
        #line default
        #line hidden
        
        #line 3797 "SchemaEntity201909.tt"
        this.Write("                    if (level == ValidationLevel.Flag && containsCount > ");
        
        #line default
        #line hidden
        
        #line 3797 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  MaxContains ));
        
        #line default
        #line hidden
        
        #line 3797 "SchemaEntity201909.tt"
        this.Write(")\r\n                    {\r\n                        return result.WithResult(isVali" +
                "d: false);\r\n                    }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3801 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3804 "SchemaEntity201909.tt"
        this.Write("                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3806 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3809 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3810 "SchemaEntity201909.tt"

            if (HasSingleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3814 "SchemaEntity201909.tt"
        this.Write("                result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3814 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3814 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n\r\n                result = result.WithLocalItemIndex(arrayLength);" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3822 "SchemaEntity201909.tt"

            }
            else if (HasMultipleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3827 "SchemaEntity201909.tt"
        this.Write("                switch (arrayLength)\r\n                {\r\n            ");
        
        #line default
        #line hidden
        
        #line 3829 "SchemaEntity201909.tt"

                int itemsIndex = 0;
                foreach (var item in Items)
                {
            
        
        #line default
        #line hidden
        
        #line 3834 "SchemaEntity201909.tt"
        this.Write("                    case ");
        
        #line default
        #line hidden
        
        #line 3834 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  itemsIndex ));
        
        #line default
        #line hidden
        
        #line 3834 "SchemaEntity201909.tt"
        this.Write(":\r\n                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3835 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  item ));
        
        #line default
        #line hidden
        
        #line 3835 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        break;
            ");
        
        #line default
        #line hidden
        
        #line 3843 "SchemaEntity201909.tt"

                    itemsIndex++;
                }
            
        
        #line default
        #line hidden
        
        #line 3847 "SchemaEntity201909.tt"
        this.Write("\r\n                    default:\r\n            ");
        
        #line default
        #line hidden
        
        #line 3849 "SchemaEntity201909.tt"

                if (!AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3853 "SchemaEntity201909.tt"
        this.Write(@"                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""9.3.1.2. additionalItems - Additional items are not permitted at index {arrayLength}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""9.3.1.2. additionalItems - Additional items are not permitted."");
                        }
                        else if (level == ValidationLevel.Flag)
                        {
                            return result.WithResult(isValid: false);
                        }

            ");
        
        #line default
        #line hidden
        
        #line 3866 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3869 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3870 "SchemaEntity201909.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3874 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3874 "SchemaEntity201909.tt"

                    if (HasAdditionalItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3878 "SchemaEntity201909.tt"
        this.Write("                    ");
        
        #line default
        #line hidden
        
        #line 3878 "SchemaEntity201909.tt"

                        if (HasAdditionalItemsSchema)
                        {
                    
        
        #line default
        #line hidden
        
        #line 3882 "SchemaEntity201909.tt"
        this.Write("                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3882 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(      AdditionalItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3882 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                        if (level == ValidationLeve" +
                "l.Flag && !result.IsValid)\r\n                        {\r\n                         " +
                "   return result;\r\n                        }\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3887 "SchemaEntity201909.tt"

                        }
                    
        
        #line default
        #line hidden
        
        #line 3890 "SchemaEntity201909.tt"
        this.Write("                        \r\n                        result = result.WithLocalItemIn" +
                "dex(arrayLength);\r\n\r\n                ");
        
        #line default
        #line hidden
        
        #line 3893 "SchemaEntity201909.tt"

                    }
                    else if (HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3898 "SchemaEntity201909.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n\r\n                            result = arrayEnu" +
                "merator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3901 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3901 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);
                        }
                ");
        
        #line default
        #line hidden
        
        #line 3910 "SchemaEntity201909.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 3913 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3914 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3917 "SchemaEntity201909.tt"
        this.Write("                        break;\r\n                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3920 "SchemaEntity201909.tt"

            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 3925 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3925 "SchemaEntity201909.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3929 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3929 "SchemaEntity201909.tt"

                    if (!HasAdditionalItems && HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3933 "SchemaEntity201909.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n                            result = arrayEnume" +
                "rator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3935 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3935 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);

                        }
                ");
        
        #line default
        #line hidden
        
        #line 3945 "SchemaEntity201909.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 3948 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3948 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3951 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3952 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3955 "SchemaEntity201909.tt"
        this.Write("\r\n                arrayLength++;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3958 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3961 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3962 "SchemaEntity201909.tt"

        if (HasMaxItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3966 "SchemaEntity201909.tt"
        this.Write("            if (arrayLength > ");
        
        #line default
        #line hidden
        
        #line 3966 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 3966 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".1. maxItems - {arrayLength} exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 3970 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 3970 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.1. maxItems - item count exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 3974 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 3974 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3982 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3985 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3986 "SchemaEntity201909.tt"

        if (HasMinItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3990 "SchemaEntity201909.tt"
        this.Write("            if (arrayLength < ");
        
        #line default
        #line hidden
        
        #line 3990 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 3990 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".2. minItems - {arrayLength} is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 3994 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 3994 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.2. minItems - item count is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 3998 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 3998 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4006 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4009 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4010 "SchemaEntity201909.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 4014 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4014 "SchemaEntity201909.tt"

            if (HasMaxContains)
            {
            
        
        #line default
        #line hidden
        
        #line 4018 "SchemaEntity201909.tt"
        this.Write("\r\n            if (containsCount > ");
        
        #line default
        #line hidden
        
        #line 4019 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 4019 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".4. maxContains - {containsCount} exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 4023 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 4023 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.4. maxContains - item count exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 4027 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 4027 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 4035 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4038 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4039 "SchemaEntity201909.tt"

            if (HasMinContains)
            {
            
        
        #line default
        #line hidden
        
        #line 4043 "SchemaEntity201909.tt"
        this.Write("            if (containsCount < ");
        
        #line default
        #line hidden
        
        #line 4043 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4043 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".5. minContains - {containsCount} is less than minimum number of matching items " +
                "");
        
        #line default
        #line hidden
        
        #line 4047 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4047 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.5. minContains - item count is less than minimum number of matching ite" +
                "ms ");
        
        #line default
        #line hidden
        
        #line 4051 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4051 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 4059 "SchemaEntity201909.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 4064 "SchemaEntity201909.tt"
        this.Write(@"            if (containsCount == 0)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $""10.3.1.3. contains - no items found matching the required schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""10.3.1.3. contains - no items found matching the required schema."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            ");
        
        #line default
        #line hidden
        
        #line 4080 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4083 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4085 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4088 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4092 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4095 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4096 "SchemaEntity201909.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties|| HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 4100 "SchemaEntity201909.tt"
        this.Write(@"        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4109 "SchemaEntity201909.tt"

        if (AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties))
        {
        
        
        #line default
        #line hidden
        
        #line 4113 "SchemaEntity201909.tt"
        this.Write("            result = result.UsingEvaluatedProperties();\r\n        ");
        
        #line default
        #line hidden
        
        #line 4114 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4117 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4118 "SchemaEntity201909.tt"

        if (HasMaxProperties || HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4122 "SchemaEntity201909.tt"
        this.Write("            int propertyCount = 0;\r\n        ");
        
        #line default
        #line hidden
        
        #line 4123 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4126 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4127 "SchemaEntity201909.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4131 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4131 "SchemaEntity201909.tt"
 
            foreach(var property in RequiredProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4135 "SchemaEntity201909.tt"
        this.Write("            bool found");
        
        #line default
        #line hidden
        
        #line 4135 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4135 "SchemaEntity201909.tt"
        this.Write(" = false;\r\n            ");
        
        #line default
        #line hidden
        
        #line 4136 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4139 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4139 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4142 "SchemaEntity201909.tt"
        this.Write("\r\n            foreach (Property property in this.EnumerateObject())\r\n            " +
                "{\r\n                JsonEncodedText propertyName = property.NameAsJsonEncodedText" +
                ";\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4147 "SchemaEntity201909.tt"

        if (HasDependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4151 "SchemaEntity201909.tt"
        this.Write(@"                if (__MenesDependentRequired.TryGetValue(propertyName, out ImmutableArray<ReadOnlyMemory<byte>> dependencies))
                {
                    foreach (ReadOnlyMemory<byte> dependency in dependencies)
                    {
                        if (!this.HasProperty(dependency.Span) 
            ");
        
        #line default
        #line hidden
        
        #line 4156 "SchemaEntity201909.tt"

            if (HasDefaults)
            {
            
        
        #line default
        #line hidden
        
        #line 4160 "SchemaEntity201909.tt"
        this.Write("                        && !this.HasDefault(dependency.Span)\r\n            ");
        
        #line default
        #line hidden
        
        #line 4161 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4164 "SchemaEntity201909.tt"
        this.Write(@"                        )
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $""6.5.4. dependentRequired - dependent property \""{dependency}\"" not found."");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, ""6.5.4. dependentRequired - dependent property not found."");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 4182 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4185 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4186 "SchemaEntity201909.tt"

        if (HasLocalProperties || HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4190 "SchemaEntity201909.tt"
        this.Write("                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<");
        
        #line default
        #line hidden
        
        #line 4190 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4190 "SchemaEntity201909.tt"
        this.Write(@", ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    var propertyResult = propertyValidator(this, result, level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

            ");
        
        #line default
        #line hidden
        
        #line 4200 "SchemaEntity201909.tt"

            if (HasRequired)
            {
                bool firstRequiredCheck = true;
                foreach (var property in RequiredProperties)
                {
                    if (!firstRequiredCheck)
                    {
                    
        
        #line default
        #line hidden
        
        #line 4209 "SchemaEntity201909.tt"
        this.Write("                else \r\n                    ");
        
        #line default
        #line hidden
        
        #line 4210 "SchemaEntity201909.tt"

                    }
                    else
                    {
                        firstRequiredCheck = false;
                    }
            
        
        #line default
        #line hidden
        
        #line 4217 "SchemaEntity201909.tt"
        this.Write("\r\n                if (");
        
        #line default
        #line hidden
        
        #line 4218 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4218 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName.Equals(propertyName))\r\n                {\r\n                    fo" +
                "und");
        
        #line default
        #line hidden
        
        #line 4220 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 4220 "SchemaEntity201909.tt"
        this.Write(" = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4222 "SchemaEntity201909.tt"

                }
            }
            
        
        #line default
        #line hidden
        
        #line 4226 "SchemaEntity201909.tt"
        this.Write("\r\n                }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4228 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4231 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4232 "SchemaEntity201909.tt"

        if (HasDependentSchemas)
        {
        
        
        #line default
        #line hidden
        
        #line 4236 "SchemaEntity201909.tt"
        this.Write("                if (__MenesDependentSchema.TryGetValue(propertyName, out Func<");
        
        #line default
        #line hidden
        
        #line 4236 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4236 "SchemaEntity201909.tt"
        this.Write(@", ValidationContext, ValidationLevel, ValidationContext>? dependentSchemaValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    result = dependentSchemaValidator(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }
        ");
        
        #line default
        #line hidden
        
        #line 4245 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4248 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4249 "SchemaEntity201909.tt"

        if (HasPropertyNames || HasPatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4253 "SchemaEntity201909.tt"
        this.Write("                string propertyNameAsString = property.Name;\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 4255 "SchemaEntity201909.tt"

            if (HasPropertyNames)
            {
            
        
        #line default
        #line hidden
        
        #line 4259 "SchemaEntity201909.tt"
        this.Write("                result = new JsonString(propertyNameAsString).As<");
        
        #line default
        #line hidden
        
        #line 4259 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     PropertyNamesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4259 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4264 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4267 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4268 "SchemaEntity201909.tt"

            if (HasPatternProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4272 "SchemaEntity201909.tt"
        this.Write(@"                foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                {
                    if (patternProperty.Key.IsMatch(propertyNameAsString))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = patternProperty.Value(property, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }
                }

            ");
        
        #line default
        #line hidden
        
        #line 4285 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4288 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4288 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4291 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4292 "SchemaEntity201909.tt"

        if (AllowsAdditionalProperties && HasAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4296 "SchemaEntity201909.tt"
        this.Write("                if (!result.HasEvaluatedLocalProperty(propertyName))\r\n           " +
                "     {\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 4298 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4298 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyName);
                }
        ");
        
        #line default
        #line hidden
        
        #line 4305 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4308 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4309 "SchemaEntity201909.tt"

        if (AllowsAdditionalProperties && HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4313 "SchemaEntity201909.tt"
        this.Write("        \r\n                if (!result.HasEvaluatedLocalOrAppliedProperty(property" +
                "Name))\r\n                {\r\n\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 4317 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4317 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalProperty(propertyName);
                }
        ");
        
        #line default
        #line hidden
        
        #line 4325 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4328 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4329 "SchemaEntity201909.tt"

        if (!AllowsAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4333 "SchemaEntity201909.tt"
        this.Write(@"        
                if (!result.HasEvaluatedLocalProperty(propertyName))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $""9.3.2.3. additionalProperties - additional property \""{propertyName}\"" is not permitted."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, ""9.3.2.3. additionalProperties - additional properties are not permitted."");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 4350 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4353 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4354 "SchemaEntity201909.tt"

        if (HasMaxProperties || HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4358 "SchemaEntity201909.tt"
        this.Write("        \r\n                propertyCount++;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4361 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4364 "SchemaEntity201909.tt"
        this.Write("            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4366 "SchemaEntity201909.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4370 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4371 "SchemaEntity201909.tt"

            foreach (var property in RequiredProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4375 "SchemaEntity201909.tt"
        this.Write("            if (!found");
        
        #line default
        #line hidden
        
        #line 4375 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4375 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4376 "SchemaEntity201909.tt"

                if (HasDefaults)
                {
            
        
        #line default
        #line hidden
        
        #line 4380 "SchemaEntity201909.tt"
        this.Write("            && !HasDefault(");
        
        #line default
        #line hidden
        
        #line 4380 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4380 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName)\r\n            ");
        
        #line default
        #line hidden
        
        #line 4381 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 4384 "SchemaEntity201909.tt"
        this.Write("            )\r\n            {\r\n                if (level >= ValidationLevel.Detail" +
                "ed)\r\n                {\r\n                    result = result.WithResult(isValid: " +
                "false, $\"6.5.3. required - required property \\\"");
        
        #line default
        #line hidden
        
        #line 4388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 4388 "SchemaEntity201909.tt"
        this.Write(@"\"" not present."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""6.5.3. required - required property not present."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }
            ");
        
        #line default
        #line hidden
        
        #line 4399 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4402 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4402 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4405 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4406 "SchemaEntity201909.tt"

        if (HasMaxProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4410 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (propertyCount > ");
        
        #line default
        #line hidden
        
        #line 4411 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4411 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".1. maxProperties - property count of {propertyCount} is greater than ");
        
        #line default
        #line hidden
        
        #line 4415 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4415 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.1. maxProperties - property count greater than ");
        
        #line default
        #line hidden
        
        #line 4419 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4419 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n        ");
        
        #line default
        #line hidden
        
        #line 4426 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4429 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4430 "SchemaEntity201909.tt"

        if (HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4434 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (propertyCount < ");
        
        #line default
        #line hidden
        
        #line 4435 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4435 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".2. minProperties - property count of {propertyCount} is lezs than ");
        
        #line default
        #line hidden
        
        #line 4439 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4439 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.2. minProperties - property count less than ");
        
        #line default
        #line hidden
        
        #line 4443 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4443 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4451 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4454 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4458 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4461 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4462 "SchemaEntity201909.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4466 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateOneOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            int oneOfCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4473 "SchemaEntity201909.tt"

        int oneOfIndex = 0;
        foreach (var oneOf in OneOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4478 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext oneOfResult");
        
        #line default
        #line hidden
        
        #line 4480 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex));
        
        #line default
        #line hidden
        
        #line 4480 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4480 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOf ));
        
        #line default
        #line hidden
        
        #line 4480 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (o" +
                "neOfResult");
        
        #line default
        #line hidden
        
        #line 4482 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4482 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(oneOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 4484 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4484 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n                oneOfCount += 1;\r\n        " +
                "    ");
        
        #line default
        #line hidden
        
        #line 4486 "SchemaEntity201909.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4490 "SchemaEntity201909.tt"
        this.Write("                if (oneOfCount > 1 && level == ValidationLevel.Flag)\r\n           " +
                "     {\r\n                    result = result.WithResult(isValid: false);\r\n       " +
                "             return result;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4495 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4498 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeChildContext(oneOfResult");
        
        #line default
        #line hidden
        
        #line 4503 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4503 "SchemaEntity201909.tt"
        this.Write(", true);\r\n                }\r\n                else if (level >= ValidationLevel.Ba" +
                "sic)\r\n                {\r\n                    result = result.MergeChildContext(o" +
                "neOfResult");
        
        #line default
        #line hidden
        
        #line 4507 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4507 "SchemaEntity201909.tt"
        this.Write(", true);\r\n                }\r\n                else\r\n                {\r\n           " +
                "         result = result.MergeChildContext(oneOfResult");
        
        #line default
        #line hidden
        
        #line 4511 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4511 "SchemaEntity201909.tt"
        this.Write(", false);\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4515 "SchemaEntity201909.tt"

            oneOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4519 "SchemaEntity201909.tt"
        this.Write("\r\n            if (oneOfCount == 1)\r\n            {\r\n                if (level >= V" +
                "alidationLevel.Detailed)\r\n                {\r\n                    result = result" +
                ".WithResult(isValid: true, \"Validation 10.2.1.3. onef - validated against the on" +
                "eOf schema.\");\r\n                }\r\n            }\r\n            else if (oneOfCoun" +
                "t == 0)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n" +
                "                {\r\n                    result = result.WithResult(isValid: false" +
                ", \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf sche" +
                "ma.\");\r\n                }\r\n                else if (level >= ValidationLevel.Bas" +
                "ic)\r\n                {\r\n                    result = result.WithResult(isValid: " +
                "false, \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf" +
                " schema.\");\r\n                }\r\n                else\r\n                {\r\n       " +
                "             result = result.WithResult(isValid: false);\r\n                }\r\n   " +
                "         }\r\n            else\r\n            {\r\n                if (level >= Valida" +
                "tionLevel.Detailed)\r\n                {\r\n                    result = result.With" +
                "Result(isValid: false, \"Validation 10.2.1.3. oneOf - validated against more than" +
                " one of the oneOf schema.\");\r\n                }\r\n                else if (level " +
                ">= ValidationLevel.Basic)\r\n                {\r\n                    result = resul" +
                "t.WithResult(isValid: false, \"Validation 10.2.1.3. oneOf - failed to validate ag" +
                "ainst more than one of the oneOf schema.\");\r\n                }\r\n                " +
                "else\r\n                {\r\n                    result = result.WithResult(isValid:" +
                " false);\r\n                }\r\n            }\r\n\r\n            return result;\r\n      " +
                "  }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4561 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4564 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4566 "SchemaEntity201909.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4570 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateAnyOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            bool foundValid = false;\r\n\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 4577 "SchemaEntity201909.tt"

        int anyOfIndex = 0;
        foreach (var anyOf in AnyOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4582 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext anyOfResult");
        
        #line default
        #line hidden
        
        #line 4584 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4584 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4584 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOf ));
        
        #line default
        #line hidden
        
        #line 4584 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (a" +
                "nyOfResult");
        
        #line default
        #line hidden
        
        #line 4586 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4586 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(anyOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 4588 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4588 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            ");
        
        #line default
        #line hidden
        
        #line 4589 "SchemaEntity201909.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
                
        
        #line default
        #line hidden
        
        #line 4593 "SchemaEntity201909.tt"
        this.Write("                if (level == ValidationLevel.Flag)\r\n                {\r\n          " +
                "          return result;\r\n                }\r\n                else\r\n             " +
                "   {\r\n                    foundValid = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4601 "SchemaEntity201909.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 4606 "SchemaEntity201909.tt"
        this.Write("                    foundValid = true;\r\n            ");
        
        #line default
        #line hidden
        
        #line 4607 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4610 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeResults(result.IsValid, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 4615 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4615 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)\r\n" +
                "                {\r\n                    result = result.MergeResults(result.IsVal" +
                "id, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 4619 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4619 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4623 "SchemaEntity201909.tt"

            anyOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4627 "SchemaEntity201909.tt"
        this.Write(@"
            if (foundValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, ""Validation 10.2.1.2. anyOf - validated against the anyOf schema."");
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 4654 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4657 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4659 "SchemaEntity201909.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4663 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateAllOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4668 "SchemaEntity201909.tt"

        int allOfIndex = 0;
        foreach (var allOf in AllOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4673 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext allOfResult");
        
        #line default
        #line hidden
        
        #line 4675 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4675 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4675 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOf ));
        
        #line default
        #line hidden
        
        #line 4675 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (!" +
                "allOfResult");
        
        #line default
        #line hidden
        
        #line 4677 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4677 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r" +
                "\n                {\r\n                    result = result.MergeChildContext(allOfR" +
                "esult");
        
        #line default
        #line hidden
        
        #line 4681 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4681 "SchemaEntity201909.tt"
        this.Write(@", true).WithResult(isValid: false, ""Validation 10.2.1.1. allOf - failed to validate against the allOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4685 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4685 "SchemaEntity201909.tt"
        this.Write(", true).WithResult(isValid: false, \"Validation 10.2.1.1. allOf - failed to valida" +
                "te against the allOf schema.\");\r\n                }\r\n                else\r\n      " +
                "          {\r\n                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4689 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4689 "SchemaEntity201909.tt"
        this.Write(", false).WithResult(isValid: false);\r\n                    return result;\r\n       " +
                "         }\r\n            }\r\n            else\r\n            {\r\n                resu" +
                "lt = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4695 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4695 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4698 "SchemaEntity201909.tt"

            allOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4702 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4706 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4709 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4711 "SchemaEntity201909.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 4715 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateNot(ValidationContext validat" +
                "ionContext, ValidationLevel level)\r\n        {\r\n            ValidationContext res" +
                "ult = validationContext;\r\n\r\n            ValidationContext notResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4720 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( NotDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4720 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);
            if (notResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated successfully against the not schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated succesfully against the not schema."");
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.MergeResults(result.IsValid, level, notResult);
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 4744 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4747 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4749 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 4753 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateIfThenElse(in ValidationConte" +
                "xt validationContext, ValidationLevel level)\r\n        {\r\n            ValidationC" +
                "ontext result = validationContext;\r\n\r\n            ValidationContext ifResult = t" +
                "his.As<");
        
        #line default
        #line hidden
        
        #line 4758 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( IfFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4758 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!ifResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(ifResult, true);
                }

                result = result.MergeChildContext(ifResult, false);
            }


        ");
        
        #line default
        #line hidden
        
        #line 4782 "SchemaEntity201909.tt"

        if (HasThen)
        {
        
        
        #line default
        #line hidden
        
        #line 4786 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (ifResult.IsValid)\r\n            {\r\n                Valid" +
                "ationContext thenResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4789 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ThenFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4789 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!thenResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(thenResult, true);
                    }

                    result = result.MergeChildContext(thenResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4817 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4820 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4821 "SchemaEntity201909.tt"

        if (HasElse)
        {
        
        
        #line default
        #line hidden
        
        #line 4825 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (!ifResult.IsValid)\r\n            {\r\n                Vali" +
                "dationContext elseResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4828 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ElseFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4828 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!elseResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.3. else - failed to validate against the else schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.2. else - failed to validate against the else schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(elseResult, true);
                    }

                    result = result.MergeChildContext(elseResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4856 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4859 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4863 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4866 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4867 "SchemaEntity201909.tt"

    if (HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 4871 "SchemaEntity201909.tt"
        this.Write("        private ValidationContext ValidateMediaTypeAndEncoding(JsonValueKind valu" +
                "eKind, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 4873 "SchemaEntity201909.tt"

        if (IsJsonBase64Content)
        {
        
        
        #line default
        #line hidden
        
        #line 4877 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64Content>().Validate(result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4882 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4885 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4886 "SchemaEntity201909.tt"

        if (IsJsonBase64String)
        {
        
        
        #line default
        #line hidden
        
        #line 4890 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64String>().Validate(result, level);\r\n       " +
                "     }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4896 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4899 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4900 "SchemaEntity201909.tt"

        if (IsJsonContent)
        {
        
        
        #line default
        #line hidden
        
        #line 4904 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonContent>().Validate(result, level);\r\n            " +
                "}\r\n        ");
        
        #line default
        #line hidden
        
        #line 4909 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4912 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4916 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4919 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4920 "SchemaEntity201909.tt"

    if (HasFormat)
    {
    
        
        #line default
        #line hidden
        
        #line 4924 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateFormat(JsonValueKind valueKin" +
                "d, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 4927 "SchemaEntity201909.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 4931 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4936 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4939 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4940 "SchemaEntity201909.tt"

        if (IsJsonDate)
        {
        
        
        #line default
        #line hidden
        
        #line 4944 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDate(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4950 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4953 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4954 "SchemaEntity201909.tt"

        if (IsJsonDateTime)
        {
        
        
        #line default
        #line hidden
        
        #line 4958 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDateTime(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4963 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4966 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4967 "SchemaEntity201909.tt"

        if (IsJsonDuration)
        {
        
        
        #line default
        #line hidden
        
        #line 4971 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDuration(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4976 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4979 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4980 "SchemaEntity201909.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 4984 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4989 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4992 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4993 "SchemaEntity201909.tt"

        if (IsJsonEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 4997 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeEmail(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5002 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5005 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5006 "SchemaEntity201909.tt"

        if (IsJsonHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 5010 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeHostname(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5015 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5018 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5019 "SchemaEntity201909.tt"

        if (IsJsonIdnEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 5023 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnEmail(this, result, level);\r\n     " +
                "       }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5029 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5032 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5033 "SchemaEntity201909.tt"

        if (IsJsonIdnHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 5037 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnHostname(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5042 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5045 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5046 "SchemaEntity201909.tt"

        if (IsJsonInteger)
        {
        
        
        #line default
        #line hidden
        
        #line 5050 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.Number)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeInteger(this, result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5055 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5058 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5059 "SchemaEntity201909.tt"

        if (IsJsonIpV4)
        {
        
        
        #line default
        #line hidden
        
        #line 5063 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV4(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5069 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5072 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5073 "SchemaEntity201909.tt"

        if (IsJsonIpV6)
        {
        
        
        #line default
        #line hidden
        
        #line 5077 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV6(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5083 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5086 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5087 "SchemaEntity201909.tt"

        if (IsJsonIri)
        {
        
        
        #line default
        #line hidden
        
        #line 5091 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIri(this, result, level);\r\n          " +
                "  }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5096 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5099 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5100 "SchemaEntity201909.tt"

        if (IsJsonIriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 5104 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5109 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5112 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5113 "SchemaEntity201909.tt"

        if (IsJsonPointer)
        {
        
        
        #line default
        #line hidden
        
        #line 5117 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeJsonPointer(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5122 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5125 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5126 "SchemaEntity201909.tt"

        if (IsJsonRegex)
        {
        
        
        #line default
        #line hidden
        
        #line 5130 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRegex(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5135 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5138 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5139 "SchemaEntity201909.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 5143 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5148 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5151 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5152 "SchemaEntity201909.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 5156 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5162 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5165 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5166 "SchemaEntity201909.tt"

        if (IsJsonUri)
        {
        
        
        #line default
        #line hidden
        
        #line 5170 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUri(this, result, level);\r\n          " +
                "  }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5176 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5179 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5180 "SchemaEntity201909.tt"

        if (IsJsonUriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 5184 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5189 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5192 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5193 "SchemaEntity201909.tt"

        if (IsJsonUriTemplate)
        {
        
        
        #line default
        #line hidden
        
        #line 5197 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriTemplate(this, result, level);\r\n  " +
                "          }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5203 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5206 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5207 "SchemaEntity201909.tt"

        if (IsJsonUuid)
        {
        
        
        #line default
        #line hidden
        
        #line 5211 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUuid(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5217 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5220 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5224 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5227 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5228 "SchemaEntity201909.tt"

    if (HasType)
    {
    
        
        #line default
        #line hidden
        
        #line 5232 "SchemaEntity201909.tt"
        this.Write(@"        
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        ");
        
        #line default
        #line hidden
        
        #line 5238 "SchemaEntity201909.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 5242 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultString.IsValid)
            {
                return validationContext;
            }

            if (localResultString.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5254 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5257 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5258 "SchemaEntity201909.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 5262 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5274 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5277 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5278 "SchemaEntity201909.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 5282 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultArray.IsValid)
            {
                return validationContext;
            }

            if (localResultArray.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5294 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5297 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5298 "SchemaEntity201909.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 5302 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultNumber = Menes.Json.Validate.TypeNumber(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNumber.IsValid)
            {
                return validationContext;
            }

            if (localResultNumber.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5314 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5317 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5318 "SchemaEntity201909.tt"

        if (HasIntegerType)
        {
        
        
        #line default
        #line hidden
        
        #line 5322 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultInteger = Menes.Json.Validate.TypeInteger(this, result, level);
            if (level == ValidationLevel.Flag && localResultInteger.IsValid)
            {
                return validationContext;
            }

            if (localResultInteger.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5334 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5337 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5338 "SchemaEntity201909.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 5342 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
            {
                return validationContext;
            }

            if (localResultBoolean.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5354 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5357 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5358 "SchemaEntity201909.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 5362 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultNull = Menes.Json.Validate.TypeNull(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNull.IsValid)
            {
                return validationContext;
            }

            if (localResultNull.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5374 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5377 "SchemaEntity201909.tt"
        this.Write("\r\n            result = result.MergeResults(\r\n                isValid,\r\n          " +
                "      level\r\n        ");
        
        #line default
        #line hidden
        
        #line 5381 "SchemaEntity201909.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 5385 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultString\r\n        ");
        
        #line default
        #line hidden
        
        #line 5387 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5390 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5391 "SchemaEntity201909.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 5395 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultObject\r\n        ");
        
        #line default
        #line hidden
        
        #line 5397 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5400 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5401 "SchemaEntity201909.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 5405 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultArray\r\n        ");
        
        #line default
        #line hidden
        
        #line 5407 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5410 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5411 "SchemaEntity201909.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 5415 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultNumber\r\n        ");
        
        #line default
        #line hidden
        
        #line 5417 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5420 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5421 "SchemaEntity201909.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 5425 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultBoolean\r\n        ");
        
        #line default
        #line hidden
        
        #line 5427 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5430 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5431 "SchemaEntity201909.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 5435 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultNull\r\n        ");
        
        #line default
        #line hidden
        
        #line 5437 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5440 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5445 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5448 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5449 "SchemaEntity201909.tt"

    if (HasEnum)
    {
    
        
        #line default
        #line hidden
        
        #line 5453 "SchemaEntity201909.tt"
        this.Write("        \r\n        /// <summary>\r\n        /// Permitted values.\r\n        /// </sum" +
                "mary>\r\n        public static class EnumValues\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 5459 "SchemaEntity201909.tt"

        int enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
        
        
        #line default
        #line hidden
        
        #line 5464 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 5464 "SchemaEntity201909.tt"

            if (enumValue.IsString)
            {
            
        
        #line default
        #line hidden
        
        #line 5468 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// enumValue.AsPropertyName.\r\n           " +
                " /// </summary>\r\n            /// <remarks>\r\n            /// {Description}.\r\n    " +
                "        /// </remarks>\r\n            public static readonly ");
        
        #line default
        #line hidden
        
        #line 5474 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5474 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 5474 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.AsPropertyName));
        
        #line default
        #line hidden
        
        #line 5474 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5474 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5474 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5475 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsBoolean)
            {
            
        
        #line default
        #line hidden
        
        #line 5480 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5481 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5481 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5486 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5486 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5486 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5486 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5486 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5486 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5487 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsNumber)
            {
            
        
        #line default
        #line hidden
        
        #line 5492 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5493 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5493 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5498 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5498 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5498 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5498 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5498 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5498 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5499 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsObject)
            {
            
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5505 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5505 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5510 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5510 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5510 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5510 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5510 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5510 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5511 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsArray)
            {
            
        
        #line default
        #line hidden
        
        #line 5516 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5517 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5517 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5522 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5522 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5522 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5522 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5522 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5522 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5523 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsNull)
            {
            
        
        #line default
        #line hidden
        
        #line 5528 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5529 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5529 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5534 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5534 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5534 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5534 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(\"null\");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5535 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 5538 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5539 "SchemaEntity201909.tt"

            ++enumItemIndex;
        }
        
        
        #line default
        #line hidden
        
        #line 5543 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5545 "SchemaEntity201909.tt"

        enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
        
        
        #line default
        #line hidden
        
        #line 5550 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 5550 "SchemaEntity201909.tt"

            if (enumValue.IsString)
            {
            
        
        #line default
        #line hidden
        
        #line 5554 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5555 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5555 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            inte" +
                "rnal static readonly ");
        
        #line default
        #line hidden
        
        #line 5560 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5560 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5560 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5560 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5560 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5560 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5561 "SchemaEntity201909.tt"

            }
            enumItemIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 5566 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 5567 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5570 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5571 "SchemaEntity201909.tt"

    foreach(var nestedType in NestedTypes)
    {
    
        
        #line default
        #line hidden
        
        #line 5575 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5576 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( WriteNestedType(nestedType) ));
        
        #line default
        #line hidden
        
        #line 5576 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5578 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5581 "SchemaEntity201909.tt"
        this.Write("\r\n    }\r\n    ");
        
        #line default
        #line hidden
        
        #line 5583 "SchemaEntity201909.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 5587 "SchemaEntity201909.tt"
        this.Write("}\r\n    ");
        
        #line default
        #line hidden
        
        #line 5588 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        return this.GenerationEnvironment.ToString();
    }
    
    public virtual void Initialize() {
    }
}

public class SchemaEntity201909Base {
    
    private global::System.Text.StringBuilder builder;
    
    private global::System.Collections.Generic.IDictionary<string, object> session;
    
    private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
    
    private string currentIndent = string.Empty;
    
    private global::System.Collections.Generic.Stack<int> indents;
    
    private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
    
    public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
        get {
            return this.session;
        }
        set {
            this.session = value;
        }
    }
    
    public global::System.Text.StringBuilder GenerationEnvironment {
        get {
            if ((this.builder == null)) {
                this.builder = new global::System.Text.StringBuilder();
            }
            return this.builder;
        }
        set {
            this.builder = value;
        }
    }
    
    protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
        get {
            if ((this.errors == null)) {
                this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
            }
            return this.errors;
        }
    }
    
    public string CurrentIndent {
        get {
            return this.currentIndent;
        }
    }
    
    private global::System.Collections.Generic.Stack<int> Indents {
        get {
            if ((this.indents == null)) {
                this.indents = new global::System.Collections.Generic.Stack<int>();
            }
            return this.indents;
        }
    }
    
    public ToStringInstanceHelper ToStringHelper {
        get {
            return this._toStringHelper;
        }
    }
    
    public void Error(string message) {
        this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
    }
    
    public void Warning(string message) {
        global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
        val.IsWarning = true;
        this.Errors.Add(val);
    }
    
    public string PopIndent() {
        if ((this.Indents.Count == 0)) {
            return string.Empty;
        }
        int lastPos = (this.currentIndent.Length - this.Indents.Pop());
        string last = this.currentIndent.Substring(lastPos);
        this.currentIndent = this.currentIndent.Substring(0, lastPos);
        return last;
    }
    
    public void PushIndent(string indent) {
        this.Indents.Push(indent.Length);
        this.currentIndent = (this.currentIndent + indent);
    }
    
    public void ClearIndent() {
        this.currentIndent = string.Empty;
        this.Indents.Clear();
    }
    
    public void Write(string textToAppend) {
        this.GenerationEnvironment.Append(textToAppend);
    }
    
    public void Write(string format, params object[] args) {
        this.GenerationEnvironment.AppendFormat(format, args);
    }
    
    public void WriteLine(string textToAppend) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendLine(textToAppend);
    }
    
    public void WriteLine(string format, params object[] args) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendFormat(format, args);
        this.GenerationEnvironment.AppendLine();
    }
    
    public class ToStringInstanceHelper {
        
        private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
        
        public global::System.IFormatProvider FormatProvider {
            get {
                return this.formatProvider;
            }
            set {
                if ((value != null)) {
                    this.formatProvider = value;
                }
            }
        }
        
        public string ToStringWithCulture(object objectToConvert) {
            if ((objectToConvert == null)) {
                throw new global::System.ArgumentNullException("objectToConvert");
            }
            global::System.Type type = objectToConvert.GetType();
            global::System.Type iConvertibleType = typeof(global::System.IConvertible);
            if (iConvertibleType.IsAssignableFrom(type)) {
                return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
            }
            global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                        iConvertibleType});
            if ((methInfo != null)) {
                return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                            this.formatProvider})));
            }
            return objectToConvert.ToString();
        }
    }
}
