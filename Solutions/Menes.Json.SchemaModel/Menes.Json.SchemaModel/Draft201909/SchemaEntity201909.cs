//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Menes.Json;
using System;
using System.Collections.Generic;

#pragma warning disable

public partial class SchemaEntity201909 : SchemaEntity201909Base {
    
    public virtual string TransformText() {
        this.GenerationEnvironment = null;
        
        #line 4 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5 "SchemaEntity201909.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 9 "SchemaEntity201909.tt"
        this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace ");
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
        
        #line default
        #line hidden
        
        #line 20 "SchemaEntity201909.tt"
        this.Write("\r\n{\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.C" +
                "ollections.Immutable;\r\n    using System.Linq;\r\n    using System.Text;\r\n    using" +
                " System.Text.Json;\r\n    using System.Text.RegularExpressions;\r\n    using Menes.J" +
                "son;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 31 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 34 "SchemaEntity201909.tt"
        this.Write("    /// <summary>\r\n    /// A type generated from a JsonSchema specification.\r\n   " +
                " /// </summary>\r\n    public readonly struct ");
        
        #line default
        #line hidden
        
        #line 37 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 37 "SchemaEntity201909.tt"
        this.Write(" :\r\n    ");
        
        #line default
        #line hidden
        
        #line 38 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 42 "SchemaEntity201909.tt"
        this.Write("        IJsonObject<");
        
        #line default
        #line hidden
        
        #line 42 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 42 "SchemaEntity201909.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 43 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 46 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 46 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 50 "SchemaEntity201909.tt"
        this.Write("        IJsonArray<");
        
        #line default
        #line hidden
        
        #line 50 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 50 "SchemaEntity201909.tt"
        this.Write(">,\r\n    ");
        
        #line default
        #line hidden
        
        #line 51 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 54 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 54 "SchemaEntity201909.tt"

    if(!IsImplicitObject && !IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 58 "SchemaEntity201909.tt"
        this.Write("        IJsonValue,\r\n    ");
        
        #line default
        #line hidden
        
        #line 59 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 62 "SchemaEntity201909.tt"
        this.Write("        IEquatable<");
        
        #line default
        #line hidden
        
        #line 62 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 62 "SchemaEntity201909.tt"
        this.Write(">\r\n    {\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 65 "SchemaEntity201909.tt"

    if(HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 69 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 70 "SchemaEntity201909.tt"

        foreach(var patternProperty in PatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 74 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// A pattern property matching ");
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(patternProperty.Pattern, true).Trim('"')));
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write(" producing a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( patternProperty.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 75 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public static Regex PatternProperty");
        
        #line default
        #line hidden
        
        #line 77 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( PatternPropertySuffix(patternProperty) ));
        
        #line default
        #line hidden
        
        #line 77 "SchemaEntity201909.tt"
        this.Write(" = new Regex(");
        
        #line default
        #line hidden
        
        #line 77 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                Formatting.FormatLiteralOrNull(patternProperty.Pattern, true) ));
        
        #line default
        #line hidden
        
        #line 77 "SchemaEntity201909.tt"
        this.Write(", RegexOptions.Compiled);\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 79 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 82 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 82 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 85 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 86 "SchemaEntity201909.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 90 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 91 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 95 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// JSON property name for <see cref=\"");
        
        #line default
        #line hidden
        
        #line 97 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 97 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static readonly ReadOnlyMemory<byte>" +
                " ");
        
        #line default
        #line hidden
        
        #line 99 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 99 "SchemaEntity201909.tt"
        this.Write("Utf8JsonPropertyName = new byte[] { ");
        
        #line default
        #line hidden
        
        #line 99 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( GetEncodedBytes(property.JsonPropertyName) ));
        
        #line default
        #line hidden
        
        #line 99 "SchemaEntity201909.tt"
        this.Write(" };\r\n\r\n        /// <summary>\r\n        /// JSON property name for <see cref=\"");
        
        #line default
        #line hidden
        
        #line 102 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 102 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static readonly string ");
        
        #line default
        #line hidden
        
        #line 104 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 104 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName = ");
        
        #line default
        #line hidden
        
        #line 104 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.JsonPropertyName, true)));
        
        #line default
        #line hidden
        
        #line 104 "SchemaEntity201909.tt"
        this.Write(";\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 106 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 109 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 110 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 113 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 114 "SchemaEntity201909.tt"

    if(HasConstString)
    {
    
        
        #line default
        #line hidden
        
        #line 118 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 118 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 118 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 118 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstString ));
        
        #line default
        #line hidden
        
        #line 118 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 119 "SchemaEntity201909.tt"

    }
    else if(HasConstBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 124 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 124 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 124 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 124 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstBoolean ));
        
        #line default
        #line hidden
        
        #line 124 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 125 "SchemaEntity201909.tt"

    }
    else if(HasConstNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 130 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 130 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 130 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 130 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstNumber ));
        
        #line default
        #line hidden
        
        #line 130 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 131 "SchemaEntity201909.tt"

    }
    else if(HasConstObject)
    {
    
        
        #line default
        #line hidden
        
        #line 136 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 136 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 136 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 136 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstObject ));
        
        #line default
        #line hidden
        
        #line 136 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 137 "SchemaEntity201909.tt"

    }
    else if(HasConstArray)
    {
    
        
        #line default
        #line hidden
        
        #line 142 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 142 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 142 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 142 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ConstArray ));
        
        #line default
        #line hidden
        
        #line 142 "SchemaEntity201909.tt"
        this.Write(");\r\n    ");
        
        #line default
        #line hidden
        
        #line 143 "SchemaEntity201909.tt"

    }
    else if(HasConstNull)
    {
    
        
        #line default
        #line hidden
        
        #line 148 "SchemaEntity201909.tt"
        this.Write("        private static readonly ");
        
        #line default
        #line hidden
        
        #line 148 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 148 "SchemaEntity201909.tt"
        this.Write(" __MenesConstValue = JsonAny.Parse(\"null\");\r\n    ");
        
        #line default
        #line hidden
        
        #line 149 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 152 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 153 "SchemaEntity201909.tt"


    if(HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 158 "SchemaEntity201909.tt"
        this.Write("        private static readonly Regex __MenesPatternExpression = new Regex(");
        
        #line default
        #line hidden
        
        #line 158 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(Pattern, true) ));
        
        #line default
        #line hidden
        
        #line 158 "SchemaEntity201909.tt"
        this.Write(", RegexOptions.Compiled);\r\n    ");
        
        #line default
        #line hidden
        
        #line 159 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 162 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 163 "SchemaEntity201909.tt"

    if(HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 167 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, ImmutableArray<ReadOn" +
                "lyMemory<byte>>> __MenesDependentRequired = BuildDependentRequired();\r\n    ");
        
        #line default
        #line hidden
        
        #line 168 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 171 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 172 "SchemaEntity201909.tt"

    if(HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 176 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, Func<");
        
        #line default
        #line hidden
        
        #line 176 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 176 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> __MenesDependentSchema " +
                "= CreateDependentSchemaValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 177 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 180 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 181 "SchemaEntity201909.tt"

    if(HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 185 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, Func<");
        
        #line default
        #line hidden
        
        #line 185 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 185 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> __MenesLocalProperties " +
                "= CreateLocalPropertyValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 186 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 189 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 190 "SchemaEntity201909.tt"

    if(HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 194 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<string, JsonAny> __MenesDefau" +
                "lts = BuildDefaults();\r\n    ");
        
        #line default
        #line hidden
        
        #line 195 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 198 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 200 "SchemaEntity201909.tt"

    if(HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 204 "SchemaEntity201909.tt"
        this.Write("        private static readonly ImmutableDictionary<Regex, Func<Property, Validat" +
                "ionContext, ValidationLevel, ValidationContext>> __MenesPatternProperties = Crea" +
                "tePatternPropertiesValidators();\r\n    ");
        
        #line default
        #line hidden
        
        #line 205 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 208 "SchemaEntity201909.tt"
        this.Write("\r\n        private readonly JsonElement jsonElementBacking;\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 211 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 215 "SchemaEntity201909.tt"
        this.Write("        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;\r\n  " +
                "  ");
        
        #line default
        #line hidden
        
        #line 216 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 219 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 220 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 224 "SchemaEntity201909.tt"
        this.Write("        private readonly ImmutableList<JsonAny>? arrayBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 225 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 228 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 229 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 233 "SchemaEntity201909.tt"
        this.Write("        private readonly double? numberBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 234 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 237 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 238 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 242 "SchemaEntity201909.tt"
        this.Write("        private readonly string? stringBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 243 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 246 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 247 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 251 "SchemaEntity201909.tt"
        this.Write("        private readonly bool? booleanBacking;\r\n    ");
        
        #line default
        #line hidden
        
        #line 252 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 255 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Initializes a new instance of the <see cref=" +
                "\"");
        
        #line default
        #line hidden
        
        #line 257 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 257 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">The backing " +
                "<see cref=\"JsonElement\"/>.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 260 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 260 "SchemaEntity201909.tt"
        this.Write("(JsonElement value)\r\n        {\r\n            this.jsonElementBacking = value;\r\n   " +
                " ");
        
        #line default
        #line hidden
        
        #line 263 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 267 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 268 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 271 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 271 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 275 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 276 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 279 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 279 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 283 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 284 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 287 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 287 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 291 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 292 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 295 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 295 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 299 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n    ");
        
        #line default
        #line hidden
        
        #line 300 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 303 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 305 "SchemaEntity201909.tt"

    if(IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 309 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 310 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 310 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A property d" +
                "ictionary.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 313 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 313 "SchemaEntity201909.tt"
        this.Write("(ImmutableDictionary<string, JsonAny> value)\r\n        {\r\n            this.jsonEle" +
                "mentBacking = default;\r\n            this.objectBacking = value;\r\n        ");
        
        #line default
        #line hidden
        
        #line 317 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 321 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 322 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 325 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 325 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 329 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 330 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 333 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 333 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 337 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 338 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 341 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 341 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 345 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 346 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 349 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 352 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 352 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonObject\">The <se" +
                "e cref=\"JsonObject\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 355 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 355 "SchemaEntity201909.tt"
        this.Write(@"(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }

        ");
        
        #line default
        #line hidden
        
        #line 368 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 372 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 373 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 376 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 376 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 380 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 381 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 384 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 384 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 388 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 389 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 392 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 392 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 396 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 397 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 400 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 401 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 404 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 405 "SchemaEntity201909.tt"

    if(IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 409 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 410 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 410 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">An array lis" +
                "t.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 413 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 413 "SchemaEntity201909.tt"
        this.Write("(ImmutableList<JsonAny> value)\r\n        {\r\n            this.jsonElementBacking = " +
                "default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 416 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 420 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 421 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 424 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 424 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 428 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 429 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 432 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 432 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 436 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 437 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 440 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 440 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 444 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 445 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 448 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n     " +
                "   /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 452 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 452 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonArray\">The <see" +
                " cref=\"JsonArray\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 455 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 455 "SchemaEntity201909.tt"
        this.Write(@"(JsonArray jsonArray)
        {
            if (jsonArray.HasJsonElement)
            {
                this.jsonElementBacking = jsonArray.AsJsonElement;
                this.arrayBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.arrayBacking = jsonArray.AsItemsList;
            }

        ");
        
        #line default
        #line hidden
        
        #line 468 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 472 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 473 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 476 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 476 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 480 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 481 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 484 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 484 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 488 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 489 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 492 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 492 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 496 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 497 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 500 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 501 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 504 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 505 "SchemaEntity201909.tt"

    if(IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 509 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 510 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 510 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonNumber\">The <se" +
                "e cref=\"JsonNumber\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 513 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 513 "SchemaEntity201909.tt"
        this.Write(@"(JsonNumber jsonNumber)
        {
            if (jsonNumber.HasJsonElement)
            {
                this.jsonElementBacking = jsonNumber.AsJsonElement;
                this.numberBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.numberBacking = jsonNumber.GetDouble();
            }
        ");
        
        #line default
        #line hidden
        
        #line 525 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 529 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 530 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 533 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 533 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 537 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 538 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 541 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 541 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 545 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 546 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 549 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 549 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 553 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 554 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 557 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the" +
                " <see cref=\"");
        
        #line default
        #line hidden
        
        #line 560 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 560 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 563 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 563 "SchemaEntity201909.tt"
        this.Write("(double value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 566 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 570 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 571 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 574 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 574 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 578 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 579 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 582 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 582 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 586 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 587 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 590 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 590 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 594 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 595 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 598 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 602 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 602 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 605 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 605 "SchemaEntity201909.tt"
        this.Write("(int value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 608 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 612 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 613 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 616 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 616 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 620 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 621 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 624 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 624 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 628 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 629 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 632 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 632 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 636 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 637 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 640 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 644 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 644 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 647 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 647 "SchemaEntity201909.tt"
        this.Write("(float value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 650 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 654 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 655 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 658 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 658 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 662 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 663 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 666 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 666 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 670 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 671 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 674 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 674 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 678 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 679 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 682 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 686 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 686 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A number val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 689 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 689 "SchemaEntity201909.tt"
        this.Write("(long value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n        " +
                "");
        
        #line default
        #line hidden
        
        #line 692 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 696 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 697 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 700 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 700 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 704 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 705 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 708 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 708 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 712 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 713 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 716 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 716 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 720 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 721 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 724 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = value;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 726 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 729 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 730 "SchemaEntity201909.tt"

    if(IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 734 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 735 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 735 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 738 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 738 "SchemaEntity201909.tt"
        this.Write("(string value)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "  ");
        
        #line default
        #line hidden
        
        #line 741 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 745 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 746 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 749 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 749 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 753 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 754 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 757 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 757 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 761 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 762 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 765 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 765 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 769 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 770 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 773 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = value;\r\n        }\r\n\r\n        /// <summary>\r\n    " +
                "    /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 777 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 777 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 780 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 780 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 783 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 787 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 788 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 791 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 791 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 795 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 796 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 799 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 799 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 803 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 804 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 807 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 807 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 811 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 812 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 815 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = value.ToString();\r\n        }\r\n\r\n        /// <sum" +
                "mary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 819 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 819 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"value\">A string val" +
                "ue.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 822 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 822 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            this.jsonElementBacking = defa" +
                "ult;\r\n        ");
        
        #line default
        #line hidden
        
        #line 825 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 829 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 830 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 833 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 833 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 837 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 838 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 841 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 841 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 845 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 846 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 849 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 849 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 853 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 854 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 857 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = Encoding.UTF8.GetString(value);\r\n        }\r\n\r\n  " +
                "      /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 861 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 861 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonString\">The <se" +
                "e cref=\"JsonString\"/> from which to construct the value.</param>\r\n        public" +
                " ");
        
        #line default
        #line hidden
        
        #line 864 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 864 "SchemaEntity201909.tt"
        this.Write(@"(JsonString jsonString)
        {
            if (jsonString.HasJsonElement)
            {
                this.jsonElementBacking = jsonString.AsJsonElement;
                this.stringBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.stringBacking = jsonString;
            }

        ");
        
        #line default
        #line hidden
        
        #line 877 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 881 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 882 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 885 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 885 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 889 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 890 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 893 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 893 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 897 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 898 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 901 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 901 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 905 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 906 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 909 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 910 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 913 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 914 "SchemaEntity201909.tt"

    if(IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 918 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 919 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 919 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"jsonBoolean\">The <s" +
                "ee cref=\"JsonBoolean\"/> from which to construct the value.</param>\r\n        publ" +
                "ic ");
        
        #line default
        #line hidden
        
        #line 922 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 922 "SchemaEntity201909.tt"
        this.Write(@"(JsonBoolean jsonBoolean)
        {
            if (jsonBoolean.HasJsonElement)
            {
                this.jsonElementBacking = jsonBoolean.AsJsonElement;
                this.booleanBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.booleanBacking = jsonBoolean.GetBoolean();
            }

        ");
        
        #line default
        #line hidden
        
        #line 935 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 939 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 940 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 943 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 943 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 947 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 948 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 951 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 951 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 955 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 956 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 959 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 959 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 963 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 964 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 967 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n                /// <summary>\r\n        /// Initializes a new instanc" +
                "e of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 970 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 970 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"boolean\">The <see c" +
                "ref=\"bool\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 973 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 973 "SchemaEntity201909.tt"
        this.Write("(bool boolean)\r\n        {\r\n            this.jsonElementBacking = default;\r\n      " +
                "      this.booleanBacking = boolean;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 978 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 982 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 983 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 986 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 986 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 990 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 991 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 994 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 994 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 998 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 999 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1002 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1002 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1006 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1007 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1010 "SchemaEntity201909.tt"
        this.Write("        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1012 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1015 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1016 "SchemaEntity201909.tt"
 /* Implicit Constructors */ 
        
        #line default
        #line hidden
        
        #line 1017 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1018 "SchemaEntity201909.tt"

    foreach (Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1026 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1027 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1027 "SchemaEntity201909.tt"
        this.Write("\"/> struct.\r\n        /// </summary>\r\n        /// <param name=\"conversion\">The <se" +
                "e cref=\"");
        
        #line default
        #line hidden
        
        #line 1029 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1029 "SchemaEntity201909.tt"
        this.Write("\"/> from which to construct the value.</param>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1030 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1030 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1030 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1030 "SchemaEntity201909.tt"
        this.Write(" conversion)\r\n        {\r\n            if (conversion.HasJsonElement)\r\n            " +
                "{\r\n                this.jsonElementBacking = conversion.AsJsonElement;\r\n        " +
                "");
        
        #line default
        #line hidden
        
        #line 1035 "SchemaEntity201909.tt"

        if(IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1039 "SchemaEntity201909.tt"
        this.Write("                this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1040 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1043 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1043 "SchemaEntity201909.tt"

        if(IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1047 "SchemaEntity201909.tt"
        this.Write("                this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1048 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1051 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1052 "SchemaEntity201909.tt"

        if(IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1056 "SchemaEntity201909.tt"
        this.Write("                this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1057 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1060 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1060 "SchemaEntity201909.tt"

        if(IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1064 "SchemaEntity201909.tt"
        this.Write("                this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1065 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1068 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1068 "SchemaEntity201909.tt"

        if(IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1072 "SchemaEntity201909.tt"
        this.Write("                this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1073 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1076 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                this.jsonElementB" +
                "acking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1080 "SchemaEntity201909.tt"

        if(conversion.IsObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1084 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1092 "SchemaEntity201909.tt"

        }
        else if (IsImplicitObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1097 "SchemaEntity201909.tt"
        this.Write("                this.objectBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1098 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1101 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1101 "SchemaEntity201909.tt"

        if(conversion.IsBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1105 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.True || conversion.ValueKind == JsonValueKind.False)
                {
                    this.booleanBacking = conversion;
                }
                else
                {
                    this.booleanBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1113 "SchemaEntity201909.tt"

        }
        else if (IsImplicitBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1118 "SchemaEntity201909.tt"
        this.Write("                this.booleanBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1119 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1122 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1123 "SchemaEntity201909.tt"

        if(conversion.IsArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1127 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Array)
                {
                    this.arrayBacking = conversion;
                }
                else
                {
                    this.arrayBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1135 "SchemaEntity201909.tt"

        }
        else if (IsImplicitArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1140 "SchemaEntity201909.tt"
        this.Write("                this.arrayBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1141 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1144 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1144 "SchemaEntity201909.tt"

        if(conversion.IsNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1148 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.Number)
                {
                    this.numberBacking = conversion;
                }
                else
                {
                    this.numberBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1156 "SchemaEntity201909.tt"

        }
        else if (IsImplicitNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1161 "SchemaEntity201909.tt"
        this.Write("                this.numberBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1162 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1165 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1165 "SchemaEntity201909.tt"

        if(conversion.IsString)
        {
        
        
        #line default
        #line hidden
        
        #line 1169 "SchemaEntity201909.tt"
        this.Write(@"                if (conversion.ValueKind == JsonValueKind.String)
                {
                    this.stringBacking = conversion;
                }
                else
                {
                    this.stringBacking = default;
                }
        ");
        
        #line default
        #line hidden
        
        #line 1177 "SchemaEntity201909.tt"

        }
        else if (IsImplicitString)
        {
        
        
        #line default
        #line hidden
        
        #line 1182 "SchemaEntity201909.tt"
        this.Write("                this.stringBacking = default;\r\n        ");
        
        #line default
        #line hidden
        
        #line 1183 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1186 "SchemaEntity201909.tt"
        this.Write("            }\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1188 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1191 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1193 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1197 "SchemaEntity201909.tt"
        this.Write(@"        /// <inheritdoc/>
        public int Length
        {
            get
            {
                if (this.arrayBacking is ImmutableList<JsonAny> items)
                {
                    return items.Count;
                }

                return this.jsonElementBacking.GetArrayLength();
            }
        }
    ");
        
        #line default
        #line hidden
        
        #line 1210 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1213 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1214 "SchemaEntity201909.tt"

    foreach (Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1222 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets the value as a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1223 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1225 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1225 "SchemaEntity201909.tt"
        this.Write(" As");
        
        #line default
        #line hidden
        
        #line 1225 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1225 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this;\r\n      " +
                "      }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets a value indicating" +
                " whether this is a valid <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1234 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1234 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public bool Is");
        
        #line default
        #line hidden
        
        #line 1236 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1236 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return ((");
        
        #line default
        #line hidden
        
        #line 1240 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1240 "SchemaEntity201909.tt"
        this.Write(")this).Validate().IsValid;\r\n            }\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1244 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1247 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1248 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 1252 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1252 "SchemaEntity201909.tt"

        if (HasThen)
        {
        
        
        #line default
        #line hidden
        
        #line 1256 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this matches t" +
                "he If/Then type.\r\n        /// </summary>\r\n        public bool IsIfMatch");
        
        #line default
        #line hidden
        
        #line 1259 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                ThenDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1259 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1263 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                IfFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1263 "SchemaEntity201909.tt"
        this.Write(">().IsValid(); \r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// G" +
                "ets this as the matching type for the If/Then clause.\r\n        /// </summary>\r\n " +
                "       public ");
        
        #line default
        #line hidden
        
        #line 1270 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1270 "SchemaEntity201909.tt"
        this.Write(" AsIfMatch");
        
        #line default
        #line hidden
        
        #line 1270 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1270 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1274 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ThenFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1274 "SchemaEntity201909.tt"
        this.Write(">(); \r\n            }\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1278 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1281 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1282 "SchemaEntity201909.tt"

        if (HasElse)
        {
        
        
        #line default
        #line hidden
        
        #line 1286 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this matches t" +
                "he If/Else type.\r\n        /// </summary>\r\n        public bool IsElseMatch");
        
        #line default
        #line hidden
        
        #line 1289 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1289 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return !this.As<");
        
        #line default
        #line hidden
        
        #line 1293 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(IfFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1293 "SchemaEntity201909.tt"
        this.Write(">().IsValid(); \r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// G" +
                "ets this as the matching type for the If/Else clause.\r\n        /// </summary>\r\n " +
                "       public ");
        
        #line default
        #line hidden
        
        #line 1300 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1300 "SchemaEntity201909.tt"
        this.Write(" AsElseMatch");
        
        #line default
        #line hidden
        
        #line 1300 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1300 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                return this.As<");
        
        #line default
        #line hidden
        
        #line 1304 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(ElseFullyQualifiedDotnetTypeName));
        
        #line default
        #line hidden
        
        #line 1304 "SchemaEntity201909.tt"
        this.Write(">(); \r\n            }\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1307 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1310 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1310 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1313 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1314 "SchemaEntity201909.tt"

    if(HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 1318 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1318 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 1322 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Gets ");
        
        #line default
        #line hidden
        
        #line 1324 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1324 "SchemaEntity201909.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// {Property title}.\r\n" +
                "        /// {Property description}.\r\n        /// </remarks>\r\n        /// <exampl" +
                "e>\r\n        /// {Property examples}.\r\n        /// </example>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 1333 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1333 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 1333 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1333 "SchemaEntity201909.tt"
        this.Write("\r\n        {\r\n            get\r\n            {\r\n                if (this.objectBacki" +
                "ng is ImmutableDictionary<string, JsonAny> properties)\r\n                {\r\n     " +
                "               if(properties.TryGetValue(");
        
        #line default
        #line hidden
        
        #line 1339 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1339 "SchemaEntity201909.tt"
        this.Write(@"JsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(");
        
        #line default
        #line hidden
        
        #line 1347 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 1347 "SchemaEntity201909.tt"
        this.Write("Utf8JsonPropertyName.Span, out JsonElement result))\r\n                    {\r\n     " +
                "                   return new  ");
        
        #line default
        #line hidden
        
        #line 1349 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1349 "SchemaEntity201909.tt"
        this.Write("(result);\r\n                    }\r\n                }\r\n\r\n                return def" +
                "ault;\r\n            }\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 1357 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1360 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1360 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1363 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Gets a value indicating whether this is backed" +
                " by a JSON element.\r\n        /// </summary>\r\n        public bool HasJsonElement " +
                "=>\r\n    ");
        
        #line default
        #line hidden
        
        #line 1367 "SchemaEntity201909.tt"

    bool isFirstProperty = true;
    
        
        #line default
        #line hidden
        
        #line 1370 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1371 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1375 "SchemaEntity201909.tt"
        this.Write("            this.objectBacking is null\r\n            \r\n    ");
        
        #line default
        #line hidden
        
        #line 1377 "SchemaEntity201909.tt"

        isFirstProperty = false;
    }
    
        
        #line default
        #line hidden
        
        #line 1381 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1382 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1386 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1386 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1394 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1395 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1398 "SchemaEntity201909.tt"
        this.Write("            this.arrayBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1399 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1402 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1402 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1406 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1406 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1414 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1415 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1418 "SchemaEntity201909.tt"
        this.Write("            this.numberBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1419 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1422 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1422 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1426 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1426 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1434 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1435 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1438 "SchemaEntity201909.tt"
        this.Write("            this.stringBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1439 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1442 "SchemaEntity201909.tt"
        this.Write("    ");
        
        #line default
        #line hidden
        
        #line 1442 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1446 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1446 "SchemaEntity201909.tt"

        if (isFirstProperty)
        {
            isFirstProperty = false;
        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 1454 "SchemaEntity201909.tt"
        this.Write("            &&\r\n        ");
        
        #line default
        #line hidden
        
        #line 1455 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1458 "SchemaEntity201909.tt"
        this.Write("            this.booleanBacking is null\r\n    ");
        
        #line default
        #line hidden
        
        #line 1459 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1462 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1463 "SchemaEntity201909.tt"

    if (!IsImplicitObject && !IsImplicitArray && !IsImplicitNumber && !IsImplicitBoolean && !IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1467 "SchemaEntity201909.tt"
        this.Write("    true\r\n    ");
        
        #line default
        #line hidden
        
        #line 1468 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1471 "SchemaEntity201909.tt"
        this.Write("            ;\r\n\r\n        /// <summary>\r\n        /// Gets the value as a JsonEleme" +
                "nt.\r\n        /// </summary>\r\n        public JsonElement AsJsonElement\r\n        {" +
                "\r\n            get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1480 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1484 "SchemaEntity201909.tt"
        this.Write("          \r\n                if (this.objectBacking is ImmutableDictionary<string," +
                " JsonAny> objectBacking)\r\n                {\r\n                    return JsonObje" +
                "ct.PropertiesToJsonElement(objectBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1490 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1493 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1494 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1498 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return JsonArray.ItemsToJsonElement(arrayBa" +
                "cking);\r\n                }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1502 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1505 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1506 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1510 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return JsonNumber.NumberToJsonElement(numberBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1515 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1518 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1519 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1523 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is string stringBacking)\r\n                " +
                "{\r\n                    return JsonString.StringToJsonElement(stringBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1528 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1531 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1532 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1536 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return JsonBoolean.BoolToJsonElement(booleanBacking);\r\n  " +
                "              }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1541 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1544 "SchemaEntity201909.tt"
        this.Write("\r\n                return this.jsonElementBacking;\r\n            }\r\n        }\r\n\r\n  " +
                "      /// <inheritdoc/>\r\n        public JsonValueKind ValueKind\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1554 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1558 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)\r\n" +
                "                {\r\n                    return JsonValueKind.Object;\r\n           " +
                "     }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1563 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1566 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1567 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1571 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny>)\r\n               " +
                " {\r\n                    return JsonValueKind.Array;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1576 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1579 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1580 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1584 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double)\r\n                {\r\n           " +
                "         return JsonValueKind.Number;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1589 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1592 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1593 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1597 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is string)\r\n                {\r\n           " +
                "         return JsonValueKind.String;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1602 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1605 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1606 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1610 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return booleanBacking ? JsonValueKind.True : JsonValueKin" +
                "d.False;\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1615 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1618 "SchemaEntity201909.tt"
        this.Write("\r\n                return this.jsonElementBacking.ValueKind;\r\n            }\r\n     " +
                "   }\r\n\r\n        /// <inheritdoc/>\r\n        public JsonAny AsAny\r\n        {\r\n    " +
                "        get\r\n            {\r\n    ");
        
        #line default
        #line hidden
        
        #line 1628 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1632 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<string, JsonAny> ob" +
                "jectBacking)\r\n                {\r\n                    return new JsonAny(objectBa" +
                "cking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1637 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1640 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1641 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1645 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return new JsonAny(arrayBacking);\r\n        " +
                "        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1650 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1653 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1654 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1658 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return new JsonAny(numberBacking);\r\n                }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 1663 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1666 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1667 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1671 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is string stringBacking)\r\n                " +
                "{\r\n                    return new JsonAny(stringBacking);\r\n                }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 1676 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1679 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 1680 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1684 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return new JsonAny(booleanBacking);\r\n                }\r\n\r" +
                "\n    ");
        
        #line default
        #line hidden
        
        #line 1689 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1692 "SchemaEntity201909.tt"
        this.Write(@"
                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonObject""/>.
        /// </summary>
        public JsonObject AsObject
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1704 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 1708 "SchemaEntity201909.tt"
        this.Write("                if (this.objectBacking is ImmutableDictionary<string, JsonAny> ob" +
                "jectBacking)\r\n                {\r\n                    return new JsonObject(objec" +
                "tBacking);\r\n                }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1713 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1716 "SchemaEntity201909.tt"
        this.Write(@"
                return new JsonObject(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonArray""/>.
        /// </summary>
        public JsonArray AsArray
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1728 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1732 "SchemaEntity201909.tt"
        this.Write("                if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n  " +
                "              {\r\n                    return new JsonArray(arrayBacking);\r\n      " +
                "          }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1737 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1740 "SchemaEntity201909.tt"
        this.Write(@"
                return new JsonArray(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonNumber""/>.
        /// </summary>
        public JsonNumber AsNumber
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1752 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 1756 "SchemaEntity201909.tt"
        this.Write("                if (this.numberBacking is double numberBacking)\r\n                " +
                "{\r\n                    return new JsonNumber(numberBacking);\r\n                }\r" +
                "\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1761 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1764 "SchemaEntity201909.tt"
        this.Write(@"                return new JsonNumber(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonString""/>.
        /// </summary>
        public JsonString AsString
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1775 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 1779 "SchemaEntity201909.tt"
        this.Write("                if (this.stringBacking is string stringBacking)\r\n                " +
                "{\r\n                    return new JsonString(stringBacking);\r\n                }\r" +
                "\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1784 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1787 "SchemaEntity201909.tt"
        this.Write(@"                return new JsonString(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonBoolean""/>.
        /// </summary>
        public JsonBoolean AsBoolean
        {
            get
            {
    ");
        
        #line default
        #line hidden
        
        #line 1798 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 1802 "SchemaEntity201909.tt"
        this.Write("                if (this.booleanBacking is bool booleanBacking)\r\n                " +
                "{\r\n                    return new JsonBoolean(booleanBacking);\r\n                " +
                "}\r\n    ");
        
        #line default
        #line hidden
        
        #line 1806 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1809 "SchemaEntity201909.tt"
        this.Write(@"                return new JsonBoolean(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Gets the value as a <see cref=""JsonNull""/>.
        /// </summary>
        public JsonNull AsNull
        {
            get
            {
                return default;
            }
        }

    ");
        
        #line default
        #line hidden
        
        #line 1824 "SchemaEntity201909.tt"

    foreach(Conversion conversion in ConversionsViaConstructor)
    {
        if (conversion.IsBuiltInType)
        {
            continue;
        }
    
        
        #line default
        #line hidden
        
        #line 1832 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Conversion from <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1833 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1833 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1836 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1836 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1836 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1836 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1838 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1838 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to <see cref" +
                "=\"");
        
        #line default
        #line hidden
        
        #line 1842 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1842 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1845 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1845 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1845 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1845 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 1847 "SchemaEntity201909.tt"

        if(conversion.IsObject)
        {
        
        
        #line default
        #line hidden
        
        #line 1851 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Object)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1853 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1853 "SchemaEntity201909.tt"
        this.Write("(value.AsObject);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1855 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1858 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1858 "SchemaEntity201909.tt"

        if(conversion.IsArray)
        {
        
        
        #line default
        #line hidden
        
        #line 1862 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Array)\r\n            {\r\n         " +
                "       return new ");
        
        #line default
        #line hidden
        
        #line 1864 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1864 "SchemaEntity201909.tt"
        this.Write("(value.AsArray);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1866 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1869 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1869 "SchemaEntity201909.tt"

        if(conversion.IsString)
        {
        
        
        #line default
        #line hidden
        
        #line 1873 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.String)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1875 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1875 "SchemaEntity201909.tt"
        this.Write("(value.AsString);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1877 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1880 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1880 "SchemaEntity201909.tt"

        if(conversion.IsBoolean)
        {
        
        
        #line default
        #line hidden
        
        #line 1884 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.True || value.ValueKind == JsonV" +
                "alueKind.False)\r\n            {\r\n                return new ");
        
        #line default
        #line hidden
        
        #line 1886 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1886 "SchemaEntity201909.tt"
        this.Write("(value.AsBoolean);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1888 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1891 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 1891 "SchemaEntity201909.tt"

        if(conversion.IsNumber)
        {
        
        
        #line default
        #line hidden
        
        #line 1895 "SchemaEntity201909.tt"
        this.Write("            if (value.ValueKind == JsonValueKind.Number)\r\n            {\r\n        " +
                "        return new ");
        
        #line default
        #line hidden
        
        #line 1897 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1897 "SchemaEntity201909.tt"
        this.Write("(value.AsNumber);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 1899 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 1902 "SchemaEntity201909.tt"
        this.Write("            return default;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1904 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1907 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 1908 "SchemaEntity201909.tt"

    foreach(Conversion conversion in ConversionsViaCast)
    {
    
        
        #line default
        #line hidden
        
        #line 1912 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Conversion from <see cref=\"");
        
        #line default
        #line hidden
        
        #line 1913 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1913 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1916 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return (");
        
        #line default
        #line hidden
        
        #line 1918 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.ConvertViaDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1918 "SchemaEntity201909.tt"
        this.Write(")value;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to <see cref=" +
                "\"");
        
        #line default
        #line hidden
        
        #line 1922 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1922 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value from whi" +
                "ch to convert.</param>\r\n        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1925 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return (");
        
        #line default
        #line hidden
        
        #line 1927 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( conversion.ConvertViaDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1927 "SchemaEntity201909.tt"
        this.Write(")value;\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1929 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1932 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from any.\r\n        /// </summary>" +
                "\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n    " +
                "    public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1937 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1937 "SchemaEntity201909.tt"
        this.Write("(JsonAny value)\r\n        {\r\n            if (value.HasJsonElement)\r\n            {\r" +
                "\n                return new ");
        
        #line default
        #line hidden
        
        #line 1941 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1941 "SchemaEntity201909.tt"
        this.Write("(value.AsJsonElement);\r\n            }\r\n\r\n            return value.As<");
        
        #line default
        #line hidden
        
        #line 1944 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1944 "SchemaEntity201909.tt"
        this.Write(">();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to any.\r\n       " +
                " /// </summary>\r\n        /// <param name=\"value\">The value from which to convert" +
                ".</param>\r\n        public static implicit operator JsonAny(");
        
        #line default
        #line hidden
        
        #line 1951 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1951 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsAny;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 1956 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 1960 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from array.\r\n        /// </summar" +
                "y>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n  " +
                "      public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1965 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1965 "SchemaEntity201909.tt"
        this.Write("(JsonArray value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1967 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1967 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to array.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"value\">The value from which to c" +
                "onvert.</param>\r\n        public static implicit operator JsonArray(");
        
        #line default
        #line hidden
        
        #line 1974 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1974 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsArray;
        }
       
        /// <summary>
        /// Implicit conversion to an <see cref=""ImmutableList{T}""/> of <see cref=""JsonAny""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ImmutableList<JsonAny>(");
        
        #line default
        #line hidden
        
        #line 1983 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1983 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsArray.AsItemsList;
        }

        /// <summary>
        /// Implicit conversion from an <see cref=""ImmutableList{T}""/> of <see cref=""JsonAny""/>.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 1992 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1992 "SchemaEntity201909.tt"
        this.Write("(ImmutableList<JsonAny> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 1994 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 1994 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 1996 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 1999 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2000 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2004 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from object.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2009 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2009 "SchemaEntity201909.tt"
        this.Write("(JsonObject value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2011 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2011 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to object.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonObject(");
        
        #line default
        #line hidden
        
        #line 2018 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2018 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsObject;
        }

                /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(");
        
        #line default
        #line hidden
        
        #line 2027 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2027 "SchemaEntity201909.tt"
        this.Write(@"  value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2036 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2036 "SchemaEntity201909.tt"
        this.Write(" (ImmutableDictionary<string, JsonAny> value)\r\n        {\r\n            return new " +
                "");
        
        #line default
        #line hidden
        
        #line 2038 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2038 "SchemaEntity201909.tt"
        this.Write(" (value);\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2041 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2044 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2045 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2049 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from string.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2054 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2054 "SchemaEntity201909.tt"
        this.Write("(string value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2056 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2056 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator string(");
        
        #line default
        #line hidden
        
        #line 2063 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2063 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString;
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2072 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2072 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<char> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2074 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2074 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator ReadOnlySpan<char>(");
        
        #line default
        #line hidden
        
        #line 2081 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2081 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString;
        }

        /// <summary>
        /// Conversion from utf8 bytes.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2090 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2090 "SchemaEntity201909.tt"
        this.Write("(ReadOnlySpan<byte> value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2092 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2092 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to utf8 byte" +
                "s.\r\n        /// </summary>\r\n        /// <param name=\"value\">The number from whic" +
                "h to convert.</param>\r\n        public static implicit operator ReadOnlySpan<byte" +
                ">(");
        
        #line default
        #line hidden
        
        #line 2099 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2099 "SchemaEntity201909.tt"
        this.Write(@" value)
        {
            return value.AsString;
        }

        /// <summary>
        /// Conversion from string.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2108 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2108 "SchemaEntity201909.tt"
        this.Write("(JsonString value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2110 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2110 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to string.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"value\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonString(");
        
        #line default
        #line hidden
        
        #line 2117 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2117 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return value.AsString;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2122 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2125 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2126 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2130 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from double.\r\n        /// </summa" +
                "ry>\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n " +
                "       public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2135 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2135 "SchemaEntity201909.tt"
        this.Write("(double value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2137 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2137 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to double.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The number from which t" +
                "o convert.</param>\r\n        public static implicit operator double(");
        
        #line default
        #line hidden
        
        #line 2144 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2144 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetDouble();
        }

        /// <summary>
        /// Conversion from float.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2153 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2153 "SchemaEntity201909.tt"
        this.Write("(float value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2155 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2155 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to float.\r\n " +
                "       /// </summary>\r\n        /// <param name=\"number\">The number from which to" +
                " convert.</param>\r\n        public static implicit operator float(");
        
        #line default
        #line hidden
        
        #line 2162 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2162 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetSingle();
        }

        /// <summary>
        /// Conversion from long.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2171 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2171 "SchemaEntity201909.tt"
        this.Write("(long value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2173 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2173 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to long.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"number\">The number from which to " +
                "convert.</param>\r\n        public static implicit operator long(");
        
        #line default
        #line hidden
        
        #line 2180 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2180 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt64();
        }

        /// <summary>
        /// Conversion from int.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2189 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2189 "SchemaEntity201909.tt"
        this.Write("(int value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2191 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2191 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to int.\r\n   " +
                "     /// </summary>\r\n        /// <param name=\"number\">The number from which to c" +
                "onvert.</param>\r\n        public static implicit operator int(");
        
        #line default
        #line hidden
        
        #line 2198 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2198 "SchemaEntity201909.tt"
        this.Write(@" number)
        {
            return number.AsNumber.GetInt32();
        }

        /// <summary>
        /// Conversion from number.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2207 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2207 "SchemaEntity201909.tt"
        this.Write("(JsonNumber value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2209 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2209 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to number.\r\n" +
                "        /// </summary>\r\n        /// <param name=\"number\">The value from which to" +
                " convert.</param>\r\n        public static implicit operator JsonNumber(");
        
        #line default
        #line hidden
        
        #line 2216 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2216 "SchemaEntity201909.tt"
        this.Write(" number)\r\n        {\r\n            return number.AsNumber;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2221 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2224 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2225 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2229 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Conversion from bool.\r\n        /// </summary" +
                ">\r\n        /// <param name=\"value\">The value from which to convert.</param>\r\n   " +
                "     public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2234 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2234 "SchemaEntity201909.tt"
        this.Write("(bool value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2236 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2236 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator bool(");
        
        #line default
        #line hidden
        
        #line 2243 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2243 "SchemaEntity201909.tt"
        this.Write(@" boolean)
        {
            return boolean.AsBoolean.GetBoolean();
        }

        /// <summary>
        /// Conversion from bool.
        /// </summary>
        /// <param name=""value"">The value from which to convert.</param>
        public static implicit operator ");
        
        #line default
        #line hidden
        
        #line 2252 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2252 "SchemaEntity201909.tt"
        this.Write("(JsonBoolean value)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2254 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2254 "SchemaEntity201909.tt"
        this.Write("(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Conversion to bool.\r\n  " +
                "      /// </summary>\r\n        /// <param name=\"boolean\">The value from which to " +
                "convert.</param>\r\n        public static implicit operator JsonBoolean(");
        
        #line default
        #line hidden
        
        #line 2261 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2261 "SchemaEntity201909.tt"
        this.Write(" boolean)\r\n        {\r\n            return boolean.AsBoolean;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2266 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2269 "SchemaEntity201909.tt"
        this.Write(@"
        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name=""lhs"">The left hand side of the comparison.</param>
        /// <param name=""rhs"">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(");
        
        #line default
        #line hidden
        
        #line 2276 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2276 "SchemaEntity201909.tt"
        this.Write(" lhs, ");
        
        #line default
        #line hidden
        
        #line 2276 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2276 "SchemaEntity201909.tt"
        this.Write(@" rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name=""lhs"">The left hand side of the comparison.</param>
        /// <param name=""rhs"">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(");
        
        #line default
        #line hidden
        
        #line 2287 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2287 "SchemaEntity201909.tt"
        this.Write(" lhs, ");
        
        #line default
        #line hidden
        
        #line 2287 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2287 "SchemaEntity201909.tt"
        this.Write(" rhs)\r\n        {\r\n            return !lhs.Equals(rhs);\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2292 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2296 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2296 "SchemaEntity201909.tt"

        if (CanEnumerateAsSpecificType)
        {
        
        
        #line default
        #line hidden
        
        #line 2300 "SchemaEntity201909.tt"
        this.Write(@"        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""items"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2305 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2305 "SchemaEntity201909.tt"
        this.Write(" From(params ");
        
        #line default
        #line hidden
        
        #line 2305 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2305 "SchemaEntity201909.tt"
        this.Write("[] items)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2307 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2307 "SchemaEntity201909.tt"
        this.Write(@"(items.Select(i => (JsonAny)i).ToImmutableList());
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2315 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2315 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2315 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2315 "SchemaEntity201909.tt"
        this.Write(" item1)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2317 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2317 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2326 "SchemaEntity201909.tt"
        this.Write(" item2)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2328 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2328 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1, (JsonAny)item2));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(" item2, ");
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2338 "SchemaEntity201909.tt"
        this.Write(" item3)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2340 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2340 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <param name=""item4"">The fourth item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(" From(");
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(" item1, ");
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(" item2, ");
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(" item3, ");
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2351 "SchemaEntity201909.tt"
        this.Write(" item4)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2353 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2353 "SchemaEntity201909.tt"
        this.Write("(ImmutableList.Create((JsonAny)item1, (JsonAny)item2, (JsonAny)item3, (JsonAny)it" +
                "em4));\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2355 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 2360 "SchemaEntity201909.tt"
        this.Write(@"                /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""items"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2365 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2365 "SchemaEntity201909.tt"
        this.Write(" From(params JsonAny[] items)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2367 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2367 "SchemaEntity201909.tt"
        this.Write(@"(items.ToImmutableList());
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The items from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2375 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2377 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2377 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2386 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2386 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2)\r\n        {\r\n            return new ");
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2388 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1, item2));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2398 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2398 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2, JsonAny item3)\r\n        {\r\n            return" +
                " new ");
        
        #line default
        #line hidden
        
        #line 2400 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2400 "SchemaEntity201909.tt"
        this.Write(@"(ImmutableList.Create(item1, item2, item3));
        }

        /// <summary>
        /// Create an array from the given items.
        /// </summary>
        /// <param name=""item1"">The first item from which to create the array.</param>
        /// <param name=""item2"">The second item from which to create the array.</param>
        /// <param name=""item3"">The third item from which to create the array.</param>
        /// <param name=""item4"">The fourth item from which to create the array.</param>
        /// <returns>The new array created from the items.</returns>
        public static ");
        
        #line default
        #line hidden
        
        #line 2411 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2411 "SchemaEntity201909.tt"
        this.Write(" From(JsonAny item1, JsonAny item2, JsonAny item3, JsonAny item4)\r\n        {\r\n   " +
                "         return new ");
        
        #line default
        #line hidden
        
        #line 2413 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2413 "SchemaEntity201909.tt"
        this.Write("(ImmutableList.Create(item1, item2, item3, item4));\r\n        }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2415 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2418 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2419 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2422 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2423 "SchemaEntity201909.tt"

    if (HasProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 2427 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Creates an instance of a <see cref=\"");
        
        #line default
        #line hidden
        
        #line 2428 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2428 "SchemaEntity201909.tt"
        this.Write("\"/>.\r\n        /// </summary>\r\n        public static ");
        
        #line default
        #line hidden
        
        #line 2430 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2430 "SchemaEntity201909.tt"
        this.Write(" Create(\r\n        ");
        
        #line default
        #line hidden
        
        #line 2431 "SchemaEntity201909.tt"

        bool isFirstCreateParameter = true;
        foreach(var property in RequiredAllOfAndRefProperties)
        {
            if (isFirstCreateParameter)
            {
                isFirstCreateParameter = false;
            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 2442 "SchemaEntity201909.tt"
        this.Write(", ");
        
        #line default
        #line hidden
        
        #line 2442 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 2445 "SchemaEntity201909.tt"
        this.Write("           ");
        
        #line default
        #line hidden
        
        #line 2445 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2445 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 2445 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2445 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2446 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2449 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2449 "SchemaEntity201909.tt"

        foreach(var property in OptionalAllOfAndRefProperties)
        {
            if (isFirstCreateParameter)
            {
                isFirstCreateParameter = false;
            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 2459 "SchemaEntity201909.tt"
        this.Write(", ");
        
        #line default
        #line hidden
        
        #line 2459 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 2462 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 2462 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2462 "SchemaEntity201909.tt"
        this.Write("? ");
        
        #line default
        #line hidden
        
        #line 2462 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2462 "SchemaEntity201909.tt"
        this.Write(" = null\r\n        ");
        
        #line default
        #line hidden
        
        #line 2463 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2466 "SchemaEntity201909.tt"
        this.Write("\r\n        )\r\n        {\r\n            var builder = ImmutableDictionary.CreateBuild" +
                "er<string, JsonAny>();\r\n        ");
        
        #line default
        #line hidden
        
        #line 2470 "SchemaEntity201909.tt"

        foreach(var property in RequiredAllOfAndRefProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2474 "SchemaEntity201909.tt"
        this.Write("            builder.Add(");
        
        #line default
        #line hidden
        
        #line 2474 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 2474 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, ");
        
        #line default
        #line hidden
        
        #line 2474 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2474 "SchemaEntity201909.tt"
        this.Write(");\r\n        ");
        
        #line default
        #line hidden
        
        #line 2475 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2478 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 2478 "SchemaEntity201909.tt"

        foreach(var property in OptionalAllOfAndRefProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write("            if (");
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(" is ");
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2482 "SchemaEntity201909.tt"
        this.Write("__)\r\n            {\r\n                builder.Add(");
        
        #line default
        #line hidden
        
        #line 2484 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 2484 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, ");
        
        #line default
        #line hidden
        
        #line 2484 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetParameterName ));
        
        #line default
        #line hidden
        
        #line 2484 "SchemaEntity201909.tt"
        this.Write("__);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2486 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2489 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2492 "SchemaEntity201909.tt"

        foreach(var property in Properties)
        {
        
        
        #line default
        #line hidden
        
        #line 2496 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <summary>\r\n        /// Sets ");
        
        #line default
        #line hidden
        
        #line 2498 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 2498 "SchemaEntity201909.tt"
        this.Write(".\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to set.</par" +
                "am>\r\n        /// <returns>The entity with the updated property.</returns>\r\n     " +
                "   public ");
        
        #line default
        #line hidden
        
        #line 2502 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2502 "SchemaEntity201909.tt"
        this.Write(" With");
        
        #line default
        #line hidden
        
        #line 2502 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2502 "SchemaEntity201909.tt"
        this.Write("(");
        
        #line default
        #line hidden
        
        #line 2502 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2502 "SchemaEntity201909.tt"
        this.Write(" value)\r\n        {\r\n            return this.SetProperty(");
        
        #line default
        #line hidden
        
        #line 2504 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 2504 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, value);\r\n        }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 2507 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2510 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2511 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2514 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public override bool Equals(object? obj)\r\n  " +
                "      {\r\n            if (obj is ");
        
        #line default
        #line hidden
        
        #line 2518 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2518 "SchemaEntity201909.tt"
        this.Write(@" entity)
            {
                return this.Equals(entity);
            }

            return false;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.GetHashCode(),
                JsonValueKind.Array => this.AsArray.GetHashCode(),
                JsonValueKind.Number => this.AsNumber.GetHashCode(),
                JsonValueKind.String => this.AsString.GetHashCode(),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.GetHashCode(),
                JsonValueKind.Null => JsonNull.NullHashCode,
                _ => 0,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref=""Utf8JsonWriter""/>.
        /// </summary>
        /// <param name=""writer"">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
    ");
        
        #line default
        #line hidden
        
        #line 2549 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2553 "SchemaEntity201909.tt"
        this.Write("            if (this.objectBacking is ImmutableDictionary<string, JsonAny> object" +
                "Backing)\r\n            {\r\n                JsonObject.WriteProperties(objectBackin" +
                "g, writer);\r\n                return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2559 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2562 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2563 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2567 "SchemaEntity201909.tt"
        this.Write("            if (this.arrayBacking is ImmutableList<JsonAny> arrayBacking)\r\n      " +
                "      {\r\n                JsonArray.WriteItems(arrayBacking, writer);\r\n          " +
                "      return;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2573 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2576 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2577 "SchemaEntity201909.tt"

    if (IsImplicitNumber)
    {
    
        
        #line default
        #line hidden
        
        #line 2581 "SchemaEntity201909.tt"
        this.Write("            if (this.numberBacking is double numberBacking)\r\n            {\r\n     " +
                "           writer.WriteNumberValue(numberBacking);\r\n                return;\r\n   " +
                "         }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2587 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2590 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2591 "SchemaEntity201909.tt"

    if (IsImplicitString)
    {
    
        
        #line default
        #line hidden
        
        #line 2595 "SchemaEntity201909.tt"
        this.Write("            if (this.stringBacking is string stringBacking)\r\n            {\r\n     " +
                "           writer.WriteStringValue(stringBacking);\r\n                return;\r\n   " +
                "         }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2601 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2604 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2605 "SchemaEntity201909.tt"

    if (IsImplicitBoolean)
    {
    
        
        #line default
        #line hidden
        
        #line 2609 "SchemaEntity201909.tt"
        this.Write("            if (this.booleanBacking is bool booleanBacking)\r\n            {\r\n     " +
                "           writer.WriteBooleanValue(booleanBacking);\r\n                return;\r\n " +
                "           }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2614 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2617 "SchemaEntity201909.tt"
        this.Write("\r\n            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)\r\n" +
                "            {\r\n                this.jsonElementBacking.WriteTo(writer);\r\n       " +
                "         return;\r\n            }\r\n\r\n            writer.WriteNullValue();\r\n       " +
                " }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2627 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2631 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2632 "SchemaEntity201909.tt"

        if (HasAdditionalPropertiesObject && !HasUnevaluatedPropertiesObject)
        {
        
        
        #line default
        #line hidden
        
        #line 2636 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the object as the given item type\r\n " +
                "       /// </summary>\r\n        public JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2639 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2639 "SchemaEntity201909.tt"
        this.Write("> EnumerateProperties()\r\n        {\r\n            if (this.objectBacking is Immutab" +
                "leDictionary<string, JsonAny> properties)\r\n            {\r\n                return" +
                " new JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2643 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2643 "SchemaEntity201909.tt"
        this.Write(">(properties);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKin" +
                "d == JsonValueKind.Object)\r\n            {\r\n                return new JsonObject" +
                "Enumerator<");
        
        #line default
        #line hidden
        
        #line 2648 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2648 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n\r\n    " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2654 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2657 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2658 "SchemaEntity201909.tt"

        if (!HasAdditionalPropertiesObject && HasUnevaluatedPropertiesObject)
        {
        
        
        #line default
        #line hidden
        
        #line 2662 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the object as the given item type\r\n " +
                "       /// </summary>\r\n        public JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2665 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2665 "SchemaEntity201909.tt"
        this.Write("> EnumerateProperties()\r\n        {\r\n            if (this.objectBacking is Immutab" +
                "leDictionary<string, JsonAny> properties)\r\n            {\r\n                return" +
                " new JsonObjectEnumerator<");
        
        #line default
        #line hidden
        
        #line 2669 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2669 "SchemaEntity201909.tt"
        this.Write(">(properties);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKin" +
                "d == JsonValueKind.Object)\r\n            {\r\n                return new JsonObject" +
                "Enumerator<");
        
        #line default
        #line hidden
        
        #line 2674 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2674 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n\r\n    " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2680 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2683 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public JsonObjectEnumerator EnumerateObject(" +
                ")\r\n        {\r\n            return this.AsObject.EnumerateObject();\r\n        }\r\n\r\n" +
                "    ");
        
        #line default
        #line hidden
        
        #line 2690 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2693 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2694 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2698 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 2699 "SchemaEntity201909.tt"

        if (CanEnumerateAsSpecificType)
        {
        
        
        #line default
        #line hidden
        
        #line 2703 "SchemaEntity201909.tt"
        this.Write("        /// <summary>\r\n        /// Enumerate the items in the array as a <see cre" +
                "f=\"");
        
        #line default
        #line hidden
        
        #line 2704 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2704 "SchemaEntity201909.tt"
        this.Write("\" />.\r\n        /// </summary>\r\n        public JsonArrayEnumerator<");
        
        #line default
        #line hidden
        
        #line 2706 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2706 "SchemaEntity201909.tt"
        this.Write("> EnumerateItems()\r\n        {\r\n            if (this.arrayBacking is ImmutableList" +
                "<JsonAny> items)\r\n            {\r\n                return new JsonArrayEnumerator<" +
                "");
        
        #line default
        #line hidden
        
        #line 2710 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2710 "SchemaEntity201909.tt"
        this.Write(">(items);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKind == " +
                "JsonValueKind.Array)\r\n            {\r\n                return new JsonArrayEnumera" +
                "tor<");
        
        #line default
        #line hidden
        
        #line 2715 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2715 "SchemaEntity201909.tt"
        this.Write(">(this.jsonElementBacking);\r\n            }\r\n\r\n            return default;\r\n      " +
                "  }\r\n        ");
        
        #line default
        #line hidden
        
        #line 2720 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2723 "SchemaEntity201909.tt"
        this.Write("        /// <inheritdoc/>\r\n        public JsonArrayEnumerator EnumerateArray()\r\n " +
                "       {\r\n            return this.AsArray.EnumerateArray();\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 2728 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2731 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2732 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2736 "SchemaEntity201909.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        ");
        
        #line default
        #line hidden
        
        #line 2755 "SchemaEntity201909.tt"

        if (HasDefaults)
        {
        
        
        #line default
        #line hidden
        
        #line 2759 "SchemaEntity201909.tt"
        this.Write(@"        /// <inheritdoc/>
        public bool TryGetDefault(string name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(name.ToString(), out value);
        }

        /// <inheritdoc/>
        public bool TryGetDefault(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return __MenesDefaults.TryGetValue(Encoding.UTF8.GetString(utf8name), out value);
        }

        /// <inheritdoc/>
        public bool HasDefault(string name)
        {
            return __MenesDefaults.TryGetValue(name, out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<char> name)
        {
            return __MenesDefaults.TryGetValue(name.ToString(), out _);
        }

        /// <inheritdoc/>
        public bool HasDefault(ReadOnlySpan<byte> utf8name)
        {
            return __MenesDefaults.TryGetValue(Encoding.UTF8.GetString(utf8name), out _);
        }

        ");
        
        #line default
        #line hidden
        
        #line 2795 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 2798 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2799 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2802 "SchemaEntity201909.tt"
        this.Write(@"
        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString.Equals(other.AsString()),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean()),
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(");
        
        #line default
        #line hidden
        
        #line 2827 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2827 "SchemaEntity201909.tt"
        this.Write(@" other)
        {
            JsonValueKind valueKind = this.ValueKind;

            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray.Equals(other.AsArray),
                JsonValueKind.Number => this.AsNumber.Equals(other.AsNumber),
                JsonValueKind.String => this.AsString.Equals(other.AsString),
                JsonValueKind.Null => true,
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean.Equals(other.AsBoolean),
                _ => false,
            };
        }

    ");
        
        #line default
        #line hidden
        
        #line 2848 "SchemaEntity201909.tt"

    if (IsImplicitObject)
    {
    
        
        #line default
        #line hidden
        
        #line 2852 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public bool HasProperty(string name)\r\n      " +
                "  {\r\n            if (this.objectBacking is ImmutableDictionary<string, JsonAny> " +
                "properties)\r\n            {\r\n                return properties.TryGetValue(name, " +
                "out _);\r\n            }\r\n\r\n            if (this.jsonElementBacking.ValueKind == J" +
                "sonValueKind.Object)\r\n            {\r\n                return this.jsonElementBack" +
                "ing.TryGetProperty(name.ToString(), out JsonElement _);\r\n            }\r\n\r\n      " +
                "      return false;\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public bool" +
                " HasProperty(ReadOnlySpan<char> name)\r\n        {\r\n            if (this.objectBac" +
                "king is ImmutableDictionary<string, JsonAny> properties)\r\n            {\r\n       " +
                "         return properties.TryGetValue(name.ToString(), out _);\r\n            }\r\n" +
                "\r\n            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)\r\n  " +
                "          {\r\n                return this.jsonElementBacking.TryGetProperty(name," +
                " out JsonElement _);\r\n            }\r\n\r\n            return false;        }\r\n\r\n   " +
                "     /// <inheritdoc/>\r\n        public bool HasProperty(ReadOnlySpan<byte> utf8n" +
                "ame)\r\n        {\r\n            if (this.objectBacking is ImmutableDictionary<strin" +
                "g, JsonAny> properties)\r\n            {\r\n                return properties.TryGet" +
                "Value(Encoding.UTF8.GetString(utf8name), out _);\r\n            }\r\n\r\n            i" +
                "f (this.jsonElementBacking.ValueKind == JsonValueKind.Object)\r\n            {\r\n  " +
                "              return this.jsonElementBacking.TryGetProperty(utf8name, out JsonEl" +
                "ement _);\r\n            }\r\n\r\n            return false;        }\r\n\r\n        /// <i" +
                "nheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 2900 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2900 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(string name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2912 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2912 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2924 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2924 "SchemaEntity201909.tt"
        this.Write(@" SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2936 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2936 "SchemaEntity201909.tt"
        this.Write(@" RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2947 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2947 "SchemaEntity201909.tt"
        this.Write(@" RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2958 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2958 "SchemaEntity201909.tt"
        this.Write(" RemoveProperty(ReadOnlySpan<byte> utf8Name)\r\n        {\r\n            if (this.Val" +
                "ueKind == JsonValueKind.Object)\r\n            {\r\n                return this.AsOb" +
                "ject.RemoveProperty(utf8Name);\r\n            }\r\n\r\n            return this;\r\n     " +
                "   }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 2968 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 2971 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 2972 "SchemaEntity201909.tt"

    if (IsImplicitArray)
    {
    
        
        #line default
        #line hidden
        
        #line 2976 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public ");
        
        #line default
        #line hidden
        
        #line 2978 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2978 "SchemaEntity201909.tt"
        this.Write(@" Add<TItem>(TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Add(item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 2990 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 2990 "SchemaEntity201909.tt"
        this.Write(@" Insert<TItem>(int index, TItem item)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsArray.Insert(index, item);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3002 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3002 "SchemaEntity201909.tt"
        this.Write(@" Replace<TItem>(TItem oldValue, TItem newValue)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.Replace(oldValue, newValue);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3014 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3014 "SchemaEntity201909.tt"
        this.Write(@" RemoveAt(int index)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveAt(index);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3025 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3025 "SchemaEntity201909.tt"
        this.Write(@" RemoveRange(int index, int count)
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.RemoveRange(index, count);
            }

            return this;
        }

        /// <inheritdoc/>
        public ");
        
        #line default
        #line hidden
        
        #line 3036 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3036 "SchemaEntity201909.tt"
        this.Write(@" SetItem<TItem>(int index, TItem value)
            where TItem : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Array)
            {
                return this.AsArray.SetItem(index, value);
            }

            return this;
        }

    ");
        
        #line default
        #line hidden
        
        #line 3047 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3050 "SchemaEntity201909.tt"
        this.Write("\r\n        /// <inheritdoc/>\r\n        public T As<T>()\r\n            where T : stru" +
                "ct, IJsonValue\r\n        {\r\n            return this.As<");
        
        #line default
        #line hidden
        
        #line 3055 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3055 "SchemaEntity201909.tt"
        this.Write(@", T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

                        
        ");
        
        #line default
        #line hidden
        
        #line 3068 "SchemaEntity201909.tt"

        if (HasAdditionalProperties || HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3072 "SchemaEntity201909.tt"
        this.Write("            result = result.UsingEvaluatedProperties();\r\n        ");
        
        #line default
        #line hidden
        
        #line 3073 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3076 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3077 "SchemaEntity201909.tt"

        if (HasAdditionalItems || HasUnevaluatedItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3081 "SchemaEntity201909.tt"
        this.Write("            result = result.UsingEvaluatedItems();\r\n        ");
        
        #line default
        #line hidden
        
        #line 3082 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3085 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3086 "SchemaEntity201909.tt"

    if (HasRef)
    {    
    
        
        #line default
        #line hidden
        
        #line 3090 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateRef(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3095 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3098 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3099 "SchemaEntity201909.tt"

    if ((HasExplicitType || HasFormat || HasMediaTypeOrEncoding) || (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems) || (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)))))
    {
    
        
        #line default
        #line hidden
        
        #line 3103 "SchemaEntity201909.tt"
        this.Write("            JsonValueKind valueKind = this.ValueKind;\r\n    ");
        
        #line default
        #line hidden
        
        #line 3104 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3107 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3108 "SchemaEntity201909.tt"

    if (HasExplicitType || HasFormat || HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 3112 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3113 "SchemaEntity201909.tt"

        if (HasExplicitType)
        {
        
        
        #line default
        #line hidden
        
        #line 3117 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateType(valueKind, result, level);\r\n            if" +
                " (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n            " +
                "    return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3122 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3125 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3126 "SchemaEntity201909.tt"

        if (HasFormat)
        {
        
        
        #line default
        #line hidden
        
        #line 3130 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateFormat(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3135 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3138 "SchemaEntity201909.tt"
        this.Write("\r\n        \r\n        ");
        
        #line default
        #line hidden
        
        #line 3140 "SchemaEntity201909.tt"

        if (HasMediaTypeOrEncoding)
        {
        
        
        #line default
        #line hidden
        
        #line 3144 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateMediaTypeAndEncoding(valueKind, result, level);" +
                "\r\n            if (level == ValidationLevel.Flag && !result.IsValid)\r\n           " +
                " {\r\n                return result;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3149 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3152 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3153 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3156 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3157 "SchemaEntity201909.tt"

    if (HasConst)
    {
    
        
        #line default
        #line hidden
        
        #line 3161 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateConst(this, result, level, __Men" +
                "esConstValue);\r\n            if (level == ValidationLevel.Flag && !result.IsValid" +
                ")\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3167 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3170 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3171 "SchemaEntity201909.tt"

    if (HasEnum)
    {
    
        
        #line default
        #line hidden
        
        #line 3175 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateEnum(\r\n                this,\r\n  " +
                "              result,\r\n                level\r\n        ");
        
        #line default
        #line hidden
        
        #line 3179 "SchemaEntity201909.tt"

        for(int enumIndex = 0; enumIndex < EnumValues.Length; ++enumIndex)
        {
        
        
        #line default
        #line hidden
        
        #line 3183 "SchemaEntity201909.tt"
        this.Write("                , EnumValues.Item");
        
        #line default
        #line hidden
        
        #line 3183 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( enumIndex ));
        
        #line default
        #line hidden
        
        #line 3183 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3184 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3187 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3193 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3196 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3197 "SchemaEntity201909.tt"

    if (HasMultipleOf || HasMaximum || HasExclusiveMaximum|| HasMinimum || HasExclusiveMinimum)
    {
    
        
        #line default
        #line hidden
        
        #line 3201 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateNumber(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3205 "SchemaEntity201909.tt"

        if (HasMultipleOf)
        {
        
        
        #line default
        #line hidden
        
        #line 3209 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3209 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MultipleOf ));
        
        #line default
        #line hidden
        
        #line 3209 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3210 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3215 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3216 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3219 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3219 "SchemaEntity201909.tt"

        if (HasMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 3223 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3223 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Maximum ));
        
        #line default
        #line hidden
        
        #line 3223 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3224 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3229 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3230 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3233 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3233 "SchemaEntity201909.tt"

        if (HasExclusiveMaximum)
        {
        
        
        #line default
        #line hidden
        
        #line 3237 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3237 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ExclusiveMaximum ));
        
        #line default
        #line hidden
        
        #line 3237 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3238 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3243 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3244 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3247 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3247 "SchemaEntity201909.tt"

        if (HasMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 3251 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3251 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Minimum ));
        
        #line default
        #line hidden
        
        #line 3251 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3252 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3257 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3258 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3261 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3261 "SchemaEntity201909.tt"

        if (HasExclusiveMinimum)
        {
        
        
        #line default
        #line hidden
        
        #line 3265 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3265 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ExclusiveMinimum ));
        
        #line default
        #line hidden
        
        #line 3265 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3266 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3271 "SchemaEntity201909.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 3272 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3275 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3282 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3285 "SchemaEntity201909.tt"
        this.Write("    \r\n    ");
        
        #line default
        #line hidden
        
        #line 3286 "SchemaEntity201909.tt"

    if (HasMaxLength || HasMinLength || HasPattern)
    {
    
        
        #line default
        #line hidden
        
        #line 3290 "SchemaEntity201909.tt"
        this.Write("            result = Menes.Json.Validate.ValidateString(\r\n                this,\r\n" +
                "                result,\r\n                level,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3294 "SchemaEntity201909.tt"

        if (HasMaxLength)
        {
        
        
        #line default
        #line hidden
        
        #line 3298 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3298 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxLength ));
        
        #line default
        #line hidden
        
        #line 3298 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3299 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3304 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3305 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3308 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3308 "SchemaEntity201909.tt"

        if (HasMinLength)
        {
        
        
        #line default
        #line hidden
        
        #line 3312 "SchemaEntity201909.tt"
        this.Write("                 ");
        
        #line default
        #line hidden
        
        #line 3312 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinLength ));
        
        #line default
        #line hidden
        
        #line 3312 "SchemaEntity201909.tt"
        this.Write(",\r\n        ");
        
        #line default
        #line hidden
        
        #line 3313 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3318 "SchemaEntity201909.tt"
        this.Write("                null,\r\n        ");
        
        #line default
        #line hidden
        
        #line 3319 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3322 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 3322 "SchemaEntity201909.tt"

        if (HasPattern)
        {
        
        
        #line default
        #line hidden
        
        #line 3326 "SchemaEntity201909.tt"
        this.Write("                __MenesPatternExpression\r\n        ");
        
        #line default
        #line hidden
        
        #line 3327 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3332 "SchemaEntity201909.tt"
        this.Write("                null\r\n        ");
        
        #line default
        #line hidden
        
        #line 3333 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3336 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            if (level == ValidationLevel.Flag && !result.Is" +
                "Valid)\r\n            {\r\n                return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3342 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3345 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3346 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 3350 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateIfThenElse(result, level);\r\n            if (lev" +
                "el == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                r" +
                "eturn result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3356 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3359 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3360 "SchemaEntity201909.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 3364 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateNot(result, level);\r\n            if (level == V" +
                "alidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return r" +
                "esult;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3370 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3373 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3374 "SchemaEntity201909.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3378 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateAllOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3383 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3386 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3387 "SchemaEntity201909.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3391 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateAnyOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3396 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3399 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3400 "SchemaEntity201909.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 3404 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateOneOf(result, level);\r\n            if (level ==" +
                " ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n                return" +
                " result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3410 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3413 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3414 "SchemaEntity201909.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 3418 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateObject(valueKind, result, level);\r\n            " +
                "if (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n          " +
                "      return result;\r\n            }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3424 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3427 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3429 "SchemaEntity201909.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 3433 "SchemaEntity201909.tt"
        this.Write("            result = this.ValidateArray(valueKind, result, level);\r\n            i" +
                "f (level == ValidationLevel.Flag && !result.IsValid)\r\n            {\r\n           " +
                "     return result;\r\n            }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3438 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3441 "SchemaEntity201909.tt"
        this.Write("            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3444 "SchemaEntity201909.tt"

    if (HasPatternProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 3448 "SchemaEntity201909.tt"
        this.Write(@"        private static ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> CreatePatternPropertiesValidators()
        {
            ImmutableDictionary<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =
                ImmutableDictionary.CreateBuilder<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>>();

        ");
        
        #line default
        #line hidden
        
        #line 3453 "SchemaEntity201909.tt"

        foreach (var patternProperty in PatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3457 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                PatternProperty");
        
        #line default
        #line hidden
        
        #line 3458 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( PatternPropertySuffix(patternProperty) ));
        
        #line default
        #line hidden
        
        #line 3458 "SchemaEntity201909.tt"
        this.Write(",\r\n                (property, validationContext, level) =>\r\n                {\r\n  " +
                "                  return property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 3461 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( patternProperty.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3461 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext, level);\r\n                });\r\n        ");
        
        #line default
        #line hidden
        
        #line 3463 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3466 "SchemaEntity201909.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3470 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3473 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3474 "SchemaEntity201909.tt"

    if (HasDependentSchemas)
    {
    
        
        #line default
        #line hidden
        
        #line 3478 "SchemaEntity201909.tt"
        this.Write("\r\n        private static ImmutableDictionary<string, Func<");
        
        #line default
        #line hidden
        
        #line 3479 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3479 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> CreateDependentSchemaVa" +
                "lidators()\r\n        {\r\n            ImmutableDictionary<string, Func<");
        
        #line default
        #line hidden
        
        #line 3481 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3481 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =\r\n    " +
                "            ImmutableDictionary.CreateBuilder<string, Func<");
        
        #line default
        #line hidden
        
        #line 3482 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3482 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3484 "SchemaEntity201909.tt"

        foreach (var dependentSchema in DependentSchemas)
        {
        
        
        #line default
        #line hidden
        
        #line 3488 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                \"");
        
        #line default
        #line hidden
        
        #line 3489 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dependentSchema.Name ));
        
        #line default
        #line hidden
        
        #line 3489 "SchemaEntity201909.tt"
        this.Write("\",\r\n                (entity, validationContext, level) =>\r\n                {\r\n   " +
                "                 return entity.As<");
        
        #line default
        #line hidden
        
        #line 3492 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( dependentSchema.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3492 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext, level);\r\n                });\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3495 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3498 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3501 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3504 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3505 "SchemaEntity201909.tt"

    if (HasDefaults)
    {
    
        
        #line default
        #line hidden
        
        #line 3509 "SchemaEntity201909.tt"
        this.Write("        private static ImmutableDictionary<string, JsonAny> BuildDefaults()\r\n    " +
                "    {\r\n            ImmutableDictionary<string, JsonAny>.Builder builder =\r\n     " +
                "           ImmutableDictionary.CreateBuilder<string, JsonAny>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3514 "SchemaEntity201909.tt"

        foreach (var property in Defaults)
        {
        
        
        #line default
        #line hidden
        
        #line 3518 "SchemaEntity201909.tt"
        this.Write("            builder.Add(");
        
        #line default
        #line hidden
        
        #line 3518 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3518 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName, JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 3518 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(property.DefaultValue, true) ));
        
        #line default
        #line hidden
        
        #line 3518 "SchemaEntity201909.tt"
        this.Write("));\r\n        ");
        
        #line default
        #line hidden
        
        #line 3519 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3522 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 3524 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3527 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3528 "SchemaEntity201909.tt"

    if (HasDependentRequired)
    {
    
        
        #line default
        #line hidden
        
        #line 3532 "SchemaEntity201909.tt"
        this.Write(@"
        private static ImmutableDictionary<string, ImmutableArray<ReadOnlyMemory<byte>>> BuildDependentRequired()
        {
            ImmutableDictionary<string, ImmutableArray<ReadOnlyMemory<byte>>>.Builder builder =
                ImmutableDictionary.CreateBuilder<string, ImmutableArray<ReadOnlyMemory<byte>>>();

        ");
        
        #line default
        #line hidden
        
        #line 3538 "SchemaEntity201909.tt"

        foreach (var dependentRequired in DependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 3542 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3543 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Formatting.FormatLiteralOrNull(dependentRequired.Name, true) ));
        
        #line default
        #line hidden
        
        #line 3543 "SchemaEntity201909.tt"
        this.Write(",\r\n                    ImmutableArray.Create<ReadOnlyMemory<byte>>(\r\n            " +
                "");
        
        #line default
        #line hidden
        
        #line 3545 "SchemaEntity201909.tt"

            bool isFirst1 = true;
            foreach (var dependentRequiredValue in dependentRequired.RequiredNames)
            {
            
        
        #line default
        #line hidden
        
        #line 3550 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3550 "SchemaEntity201909.tt"

                if (isFirst1)
                {
                    isFirst1 = false;
                
        
        #line default
        #line hidden
        
        #line 3555 "SchemaEntity201909.tt"
        this.Write("                        System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 3555 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 3555 "SchemaEntity201909.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 3556 "SchemaEntity201909.tt"

                }
                else
                {
                
        
        #line default
        #line hidden
        
        #line 3561 "SchemaEntity201909.tt"
        this.Write("                        , System.Text.Encoding.UTF8.GetBytes(");
        
        #line default
        #line hidden
        
        #line 3561 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  Formatting.FormatLiteralOrNull(dependentRequiredValue, true) ));
        
        #line default
        #line hidden
        
        #line 3561 "SchemaEntity201909.tt"
        this.Write(").AsMemory()\r\n                ");
        
        #line default
        #line hidden
        
        #line 3562 "SchemaEntity201909.tt"

                }
                
        
        #line default
        #line hidden
        
        #line 3565 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3565 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3568 "SchemaEntity201909.tt"
        this.Write("                        ));\r\n        ");
        
        #line default
        #line hidden
        
        #line 3569 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3572 "SchemaEntity201909.tt"
        this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3575 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3578 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3579 "SchemaEntity201909.tt"

    if (HasLocalProperties)
    {
    
        
        #line default
        #line hidden
        
        #line 3583 "SchemaEntity201909.tt"
        this.Write("\r\n        private static ImmutableDictionary<string, Func<");
        
        #line default
        #line hidden
        
        #line 3584 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3584 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>> CreateLocalPropertyVali" +
                "dators()\r\n        {\r\n            ImmutableDictionary<string, Func<");
        
        #line default
        #line hidden
        
        #line 3586 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3586 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>.Builder builder =\r\n    " +
                "            ImmutableDictionary.CreateBuilder<string, Func<");
        
        #line default
        #line hidden
        
        #line 3587 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3587 "SchemaEntity201909.tt"
        this.Write(", ValidationContext, ValidationLevel, ValidationContext>>();\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3589 "SchemaEntity201909.tt"

        foreach (var property in LocalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 3593 "SchemaEntity201909.tt"
        this.Write("            builder.Add(\r\n                ");
        
        #line default
        #line hidden
        
        #line 3594 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3594 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName,\r\n                (that, validationContext, level) =>\r\n         " +
                "       {\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3597 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.Type.FullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3597 "SchemaEntity201909.tt"
        this.Write(" property = that.");
        
        #line default
        #line hidden
        
        #line 3597 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 3597 "SchemaEntity201909.tt"
        this.Write(";\r\n                    return property.Validate(validationContext, level);\r\n     " +
                "           });\r\n        ");
        
        #line default
        #line hidden
        
        #line 3600 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3603 "SchemaEntity201909.tt"
        this.Write("\r\n            return builder.ToImmutable();\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 3607 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3610 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3611 "SchemaEntity201909.tt"

    if (HasRef)
    {
    
        
        #line default
        #line hidden
        
        #line 3615 "SchemaEntity201909.tt"
        this.Write("        private ValidationContext ValidateRef(in ValidationContext validationCont" +
                "ext, ValidationLevel level)\r\n        {\r\n            ValidationContext result = v" +
                "alidationContext;\r\n\r\n\r\n            ValidationContext refResult = this.As<");
        
        #line default
        #line hidden
        
        #line 3620 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( RefDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3620 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!refResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, refResult);
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, refResult);
                }

                result = result.MergeChildContext(refResult, false);
            }

            return result;
        }
    ");
        
        #line default
        #line hidden
        
        #line 3649 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 3652 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 3653 "SchemaEntity201909.tt"

    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    {
    
        
        #line default
        #line hidden
        
        #line 3657 "SchemaEntity201909.tt"
        this.Write(@"        private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Array)
            {
                return result;
            }

         ");
        
        #line default
        #line hidden
        
        #line 3666 "SchemaEntity201909.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 3670 "SchemaEntity201909.tt"
        this.Write("\r\n            int arrayLength = 0;\r\n         ");
        
        #line default
        #line hidden
        
        #line 3672 "SchemaEntity201909.tt"

        }
        else
        {
        
        
        #line default
        #line hidden
        
        #line 3677 "SchemaEntity201909.tt"
        this.Write("            int arrayLength = this.Length;\r\n        ");
        
        #line default
        #line hidden
        
        #line 3678 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3681 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3682 "SchemaEntity201909.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 3686 "SchemaEntity201909.tt"
        this.Write("            int containsCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3688 "SchemaEntity201909.tt"

        }

        
        
        #line default
        #line hidden
        
        #line 3692 "SchemaEntity201909.tt"
        this.Write("\r\n         ");
        
        #line default
        #line hidden
        
        #line 3693 "SchemaEntity201909.tt"

        if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasAdditionalItems)
        {
         
        
        #line default
        #line hidden
        
        #line 3697 "SchemaEntity201909.tt"
        this.Write("            JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();\r\n\r\n     " +
                "       while (arrayEnumerator.MoveNext())\r\n            {\r\n        ");
        
        #line default
        #line hidden
        
        #line 3701 "SchemaEntity201909.tt"

            if (HasUniqueItems)
            {
        
        
        #line default
        #line hidden
        
        #line 3705 "SchemaEntity201909.tt"
        this.Write(@"                JsonArrayEnumerator innerEnumerator = this.EnumerateArray();
                int innerIndex = -1;
                while (innerIndex < arrayLength && innerEnumerator.MoveNext())
                {
                    innerIndex++;
                }

                while (innerEnumerator.MoveNext())
                {
                    if (innerEnumerator.Current.Equals(arrayEnumerator.Current))
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""6.4.3. uniqueItems - duplicate items were found at indices {arrayLength} and {innerIndex}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""6.4.3. uniqueItems - duplicate items were found."");
                        }
                        else
                        {
                            return result.WithResult(isValid: false);
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 3731 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3734 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3735 "SchemaEntity201909.tt"

            if (HasContains)
            {
        
        
        #line default
        #line hidden
        
        #line 3739 "SchemaEntity201909.tt"
        this.Write("                ValidationContext containsResult = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3739 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     ContainsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3739 "SchemaEntity201909.tt"
        this.Write(">().Validate(result.CreateChildContext(), level);\r\n\r\n                if (contains" +
                "Result.IsValid)\r\n                {\r\n                    result = result.WithLoca" +
                "lItemIndex(arrayLength);\r\n                    containsCount++;\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3746 "SchemaEntity201909.tt"

                if (HasMaxContains)
                {
            
        
        #line default
        #line hidden
        
        #line 3750 "SchemaEntity201909.tt"
        this.Write("                    if (level == ValidationLevel.Flag && containsCount > ");
        
        #line default
        #line hidden
        
        #line 3750 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  MaxContains ));
        
        #line default
        #line hidden
        
        #line 3750 "SchemaEntity201909.tt"
        this.Write(")\r\n                    {\r\n                        return result.WithResult(isVali" +
                "d: false);\r\n                    }\r\n            ");
        
        #line default
        #line hidden
        
        #line 3754 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3757 "SchemaEntity201909.tt"
        this.Write("                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3759 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3762 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3763 "SchemaEntity201909.tt"

            if (HasSingleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3767 "SchemaEntity201909.tt"
        this.Write("                result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3767 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     SingleItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3767 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n\r\n                result = result.WithLocalItemIndex(arrayLength);" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3775 "SchemaEntity201909.tt"

            }
            else if (HasMultipleItemsType)
            {
        
        
        #line default
        #line hidden
        
        #line 3780 "SchemaEntity201909.tt"
        this.Write("                switch (arrayLength)\r\n                {\r\n            ");
        
        #line default
        #line hidden
        
        #line 3782 "SchemaEntity201909.tt"

                int itemsIndex = 0;
                foreach (var item in Items)
                {
            
        
        #line default
        #line hidden
        
        #line 3787 "SchemaEntity201909.tt"
        this.Write("                    case ");
        
        #line default
        #line hidden
        
        #line 3787 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  itemsIndex ));
        
        #line default
        #line hidden
        
        #line 3787 "SchemaEntity201909.tt"
        this.Write(":\r\n                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3788 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  item ));
        
        #line default
        #line hidden
        
        #line 3788 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                        break;
            ");
        
        #line default
        #line hidden
        
        #line 3796 "SchemaEntity201909.tt"

                    itemsIndex++;
                }
            
        
        #line default
        #line hidden
        
        #line 3800 "SchemaEntity201909.tt"
        this.Write("\r\n                    default:\r\n            ");
        
        #line default
        #line hidden
        
        #line 3802 "SchemaEntity201909.tt"

                if (!AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3806 "SchemaEntity201909.tt"
        this.Write(@"                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $""9.3.1.2. additionalItems - Additional items are not permitted at index {arrayLength}."");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, ""9.3.1.2. additionalItems - Additional items are not permitted."");
                        }
                        else if (level == ValidationLevel.Flag)
                        {
                            return result.WithResult(isValid: false);
                        }

            ");
        
        #line default
        #line hidden
        
        #line 3819 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3822 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3823 "SchemaEntity201909.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3827 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3827 "SchemaEntity201909.tt"

                    if (HasAdditionalItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3831 "SchemaEntity201909.tt"
        this.Write("                    ");
        
        #line default
        #line hidden
        
        #line 3831 "SchemaEntity201909.tt"

                        if (HasAdditionalItemsSchema)
                        {
                    
        
        #line default
        #line hidden
        
        #line 3835 "SchemaEntity201909.tt"
        this.Write("                        result = arrayEnumerator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3835 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(      AdditionalItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3835 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                        if (level == ValidationLeve" +
                "l.Flag && !result.IsValid)\r\n                        {\r\n                         " +
                "   return result;\r\n                        }\r\n                    ");
        
        #line default
        #line hidden
        
        #line 3840 "SchemaEntity201909.tt"

                        }
                    
        
        #line default
        #line hidden
        
        #line 3843 "SchemaEntity201909.tt"
        this.Write("                        \r\n                        result = result.WithLocalItemIn" +
                "dex(arrayLength);\r\n\r\n                ");
        
        #line default
        #line hidden
        
        #line 3846 "SchemaEntity201909.tt"

                    }
                    else if (HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3851 "SchemaEntity201909.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n\r\n                            result = arrayEnu" +
                "merator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3854 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3854 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);
                        }
                ");
        
        #line default
        #line hidden
        
        #line 3863 "SchemaEntity201909.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 3866 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3867 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3870 "SchemaEntity201909.tt"
        this.Write("                        break;\r\n                }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 3873 "SchemaEntity201909.tt"

            }
            else
            {
        
        
        #line default
        #line hidden
        
        #line 3878 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3878 "SchemaEntity201909.tt"

                if (AllowsAdditionalItems)
                {
            
        
        #line default
        #line hidden
        
        #line 3882 "SchemaEntity201909.tt"
        this.Write("                ");
        
        #line default
        #line hidden
        
        #line 3882 "SchemaEntity201909.tt"

                    if (!HasAdditionalItems && HasUnevaluatedItems)
                    {
                
        
        #line default
        #line hidden
        
        #line 3886 "SchemaEntity201909.tt"
        this.Write("                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLeng" +
                "th))\r\n                        {\r\n                            result = arrayEnume" +
                "rator.Current.As<");
        
        #line default
        #line hidden
        
        #line 3888 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  UnevaluatedItemsDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 3888 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);

                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            result = result.WithLocalItemIndex(arrayLength);

                        }
                ");
        
        #line default
        #line hidden
        
        #line 3898 "SchemaEntity201909.tt"

                    }
                
        
        #line default
        #line hidden
        
        #line 3901 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3901 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 3904 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3905 "SchemaEntity201909.tt"

            }
        
        
        #line default
        #line hidden
        
        #line 3908 "SchemaEntity201909.tt"
        this.Write("\r\n                arrayLength++;\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3911 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3914 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3915 "SchemaEntity201909.tt"

        if (HasMaxItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3919 "SchemaEntity201909.tt"
        this.Write("            if (arrayLength > ");
        
        #line default
        #line hidden
        
        #line 3919 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 3919 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".1. maxItems - {arrayLength} exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 3923 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 3923 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.1. maxItems - item count exceeds maximum number of items ");
        
        #line default
        #line hidden
        
        #line 3927 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxItems ));
        
        #line default
        #line hidden
        
        #line 3927 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3935 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3938 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3939 "SchemaEntity201909.tt"

        if (HasMinItems)
        {
        
        
        #line default
        #line hidden
        
        #line 3943 "SchemaEntity201909.tt"
        this.Write("            if (arrayLength < ");
        
        #line default
        #line hidden
        
        #line 3943 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 3943 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".2. minItems - {arrayLength} is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 3947 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 3947 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.2. minItems - item count is less than the minimum number of items ");
        
        #line default
        #line hidden
        
        #line 3951 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinItems ));
        
        #line default
        #line hidden
        
        #line 3951 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n\r\n           " +
                " }\r\n        ");
        
        #line default
        #line hidden
        
        #line 3959 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 3962 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 3963 "SchemaEntity201909.tt"

        if (HasContains)
        {
        
        
        #line default
        #line hidden
        
        #line 3967 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 3967 "SchemaEntity201909.tt"

            if (HasMaxContains)
            {
            
        
        #line default
        #line hidden
        
        #line 3971 "SchemaEntity201909.tt"
        this.Write("\r\n            if (containsCount > ");
        
        #line default
        #line hidden
        
        #line 3972 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 3972 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".4. maxContains - {containsCount} exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 3976 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 3976 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.4. maxContains - item count exceeds maximum number of matching items ");
        
        #line default
        #line hidden
        
        #line 3980 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MaxContains ));
        
        #line default
        #line hidden
        
        #line 3980 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 3988 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 3991 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 3992 "SchemaEntity201909.tt"

            if (HasMinContains)
            {
            
        
        #line default
        #line hidden
        
        #line 3996 "SchemaEntity201909.tt"
        this.Write("            if (containsCount < ");
        
        #line default
        #line hidden
        
        #line 3996 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 3996 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.4" +
                ".5. minContains - {containsCount} is less than minimum number of matching items " +
                "");
        
        #line default
        #line hidden
        
        #line 4000 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4000 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.4.5. minContains - item count is less than minimum number of matching ite" +
                "ms ");
        
        #line default
        #line hidden
        
        #line 4004 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     MinContains ));
        
        #line default
        #line hidden
        
        #line 4004 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 4012 "SchemaEntity201909.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 4017 "SchemaEntity201909.tt"
        this.Write(@"            if (containsCount == 0)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $""10.3.1.3. contains - no items found matching the required schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""10.3.1.3. contains - no items found matching the required schema."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            ");
        
        #line default
        #line hidden
        
        #line 4033 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4036 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4038 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4041 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4045 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4048 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4049 "SchemaEntity201909.tt"

    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties|| HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    {
    
        
        #line default
        #line hidden
        
        #line 4053 "SchemaEntity201909.tt"
        this.Write(@"        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;

            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

        ");
        
        #line default
        #line hidden
        
        #line 4062 "SchemaEntity201909.tt"

        if (HasMaxProperties || HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4066 "SchemaEntity201909.tt"
        this.Write("            int propertyCount = 0;\r\n        ");
        
        #line default
        #line hidden
        
        #line 4067 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4070 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4071 "SchemaEntity201909.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4075 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 4075 "SchemaEntity201909.tt"
 
            foreach(var property in RequiredProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4079 "SchemaEntity201909.tt"
        this.Write("            bool found");
        
        #line default
        #line hidden
        
        #line 4079 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4079 "SchemaEntity201909.tt"
        this.Write(" = false;\r\n            ");
        
        #line default
        #line hidden
        
        #line 4080 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4083 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4083 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4086 "SchemaEntity201909.tt"
        this.Write("\r\n            foreach (Property property in this.EnumerateObject())\r\n            " +
                "{\r\n                string propertyName = property.Name;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4091 "SchemaEntity201909.tt"

        if (HasDependentRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4095 "SchemaEntity201909.tt"
        this.Write(@"                if (__MenesDependentRequired.TryGetValue(propertyName, out ImmutableArray<ReadOnlyMemory<byte>> dependencies))
                {
                    foreach (ReadOnlyMemory<byte> dependency in dependencies)
                    {
                        if (!this.HasProperty(dependency.Span) 
            ");
        
        #line default
        #line hidden
        
        #line 4100 "SchemaEntity201909.tt"

            if (HasDefaults)
            {
            
        
        #line default
        #line hidden
        
        #line 4104 "SchemaEntity201909.tt"
        this.Write("                        && !this.HasDefault(dependency.Span)\r\n            ");
        
        #line default
        #line hidden
        
        #line 4105 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4108 "SchemaEntity201909.tt"
        this.Write(@"                        )
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $""6.5.4. dependentRequired - dependent property \""{dependency}\"" not found."");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, ""6.5.4. dependentRequired - dependent property not found."");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 4126 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4129 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4130 "SchemaEntity201909.tt"

        if (HasLocalProperties || HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4134 "SchemaEntity201909.tt"
        this.Write("                if (__MenesLocalProperties.TryGetValue(propertyName, out Func<");
        
        #line default
        #line hidden
        
        #line 4134 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4134 "SchemaEntity201909.tt"
        this.Write(@", ValidationContext, ValidationLevel, ValidationContext>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    var propertyResult = propertyValidator(this, result, level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

            ");
        
        #line default
        #line hidden
        
        #line 4144 "SchemaEntity201909.tt"

            if (HasRequired)
            {
                bool firstRequiredCheck = true;
                foreach (var property in RequiredProperties)
                {
                    if (!firstRequiredCheck)
                    {
                    
        
        #line default
        #line hidden
        
        #line 4153 "SchemaEntity201909.tt"
        this.Write("                else \r\n                    ");
        
        #line default
        #line hidden
        
        #line 4154 "SchemaEntity201909.tt"

                    }
                    else
                    {
                        firstRequiredCheck = false;
                    }
            
        
        #line default
        #line hidden
        
        #line 4161 "SchemaEntity201909.tt"
        this.Write("\r\n                if (");
        
        #line default
        #line hidden
        
        #line 4162 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4162 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName.Equals(propertyName))\r\n                {\r\n                    fo" +
                "und");
        
        #line default
        #line hidden
        
        #line 4164 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName));
        
        #line default
        #line hidden
        
        #line 4164 "SchemaEntity201909.tt"
        this.Write(" = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4166 "SchemaEntity201909.tt"

                }
            }
            
        
        #line default
        #line hidden
        
        #line 4170 "SchemaEntity201909.tt"
        this.Write("\r\n                }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4172 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4175 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4176 "SchemaEntity201909.tt"

        if (HasDependentSchemas)
        {
        
        
        #line default
        #line hidden
        
        #line 4180 "SchemaEntity201909.tt"
        this.Write("                if (__MenesDependentSchema.TryGetValue(propertyName, out Func<");
        
        #line default
        #line hidden
        
        #line 4180 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4180 "SchemaEntity201909.tt"
        this.Write(@", ValidationContext, ValidationLevel, ValidationContext>? dependentSchemaValidator))
                {
                    result = result.WithLocalProperty(propertyName);
                    result = dependentSchemaValidator(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }
        ");
        
        #line default
        #line hidden
        
        #line 4189 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4192 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4193 "SchemaEntity201909.tt"

        if (HasPropertyNames || HasPatternProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4197 "SchemaEntity201909.tt"
        this.Write("                string propertyNameAsString = property.Name;\r\n\r\n            ");
        
        #line default
        #line hidden
        
        #line 4199 "SchemaEntity201909.tt"

            if (HasPropertyNames)
            {
            
        
        #line default
        #line hidden
        
        #line 4203 "SchemaEntity201909.tt"
        this.Write("                result = new JsonString(propertyNameAsString).As<");
        
        #line default
        #line hidden
        
        #line 4203 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     PropertyNamesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4203 "SchemaEntity201909.tt"
        this.Write(">().Validate(result, level);\r\n                if (level == ValidationLevel.Flag &" +
                "& !result.IsValid)\r\n                {\r\n                    return result;\r\n     " +
                "           }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4208 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4211 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4212 "SchemaEntity201909.tt"

            if (HasPatternProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4216 "SchemaEntity201909.tt"
        this.Write(@"                foreach (KeyValuePair<Regex, Func<Property, ValidationContext, ValidationLevel, ValidationContext>> patternProperty in __MenesPatternProperties)
                {
                    if (patternProperty.Key.IsMatch(propertyNameAsString))
                    {
                        result = result.WithLocalProperty(propertyName);
                        result = patternProperty.Value(property, result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }
                    }
                }

            ");
        
        #line default
        #line hidden
        
        #line 4229 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4232 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4232 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4235 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4236 "SchemaEntity201909.tt"

        if (AllowsAdditionalProperties && HasAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4240 "SchemaEntity201909.tt"
        this.Write("                if (!result.HasEvaluatedLocalProperty(propertyName))\r\n           " +
                "     {\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 4242 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( AdditionalPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4242 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                    result = result.WithLocalProperty(propertyName);
                }
        ");
        
        #line default
        #line hidden
        
        #line 4249 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4252 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4253 "SchemaEntity201909.tt"

        if (AllowsAdditionalProperties && HasUnevaluatedProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4257 "SchemaEntity201909.tt"
        this.Write("        \r\n                if (!result.HasEvaluatedLocalOrAppliedProperty(property" +
                "Name))\r\n                {\r\n\r\n                    result = property.ValueAs<");
        
        #line default
        #line hidden
        
        #line 4261 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( UnevaluatedPropertiesDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4261 "SchemaEntity201909.tt"
        this.Write(@">().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = result.WithLocalProperty(propertyName);
                }
        ");
        
        #line default
        #line hidden
        
        #line 4269 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4272 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4273 "SchemaEntity201909.tt"

        if (!AllowsAdditionalProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4277 "SchemaEntity201909.tt"
        this.Write(@"        
                if (!result.HasEvaluatedLocalProperty(propertyName))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $""9.3.2.3. additionalProperties - additional property \""{propertyName}\"" is not permitted."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, ""9.3.2.3. additionalProperties - additional properties are not permitted."");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }

        ");
        
        #line default
        #line hidden
        
        #line 4294 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4297 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4298 "SchemaEntity201909.tt"

        if (HasMaxProperties || HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4302 "SchemaEntity201909.tt"
        this.Write("        \r\n                propertyCount++;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4305 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4308 "SchemaEntity201909.tt"
        this.Write("            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4310 "SchemaEntity201909.tt"

        if (HasRequired)
        {
        
        
        #line default
        #line hidden
        
        #line 4314 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4315 "SchemaEntity201909.tt"

            foreach (var property in RequiredProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4319 "SchemaEntity201909.tt"
        this.Write("            if (!found");
        
        #line default
        #line hidden
        
        #line 4319 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4319 "SchemaEntity201909.tt"
        this.Write("\r\n            ");
        
        #line default
        #line hidden
        
        #line 4320 "SchemaEntity201909.tt"

                if (HasDefaults)
                {
            
        
        #line default
        #line hidden
        
        #line 4324 "SchemaEntity201909.tt"
        this.Write("            && !HasDefault(");
        
        #line default
        #line hidden
        
        #line 4324 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(  property.DotnetPropertyName ));
        
        #line default
        #line hidden
        
        #line 4324 "SchemaEntity201909.tt"
        this.Write("JsonPropertyName)\r\n            ");
        
        #line default
        #line hidden
        
        #line 4325 "SchemaEntity201909.tt"

                }
            
        
        #line default
        #line hidden
        
        #line 4328 "SchemaEntity201909.tt"
        this.Write("            )\r\n            {\r\n                if (level >= ValidationLevel.Detail" +
                "ed)\r\n                {\r\n                    result = result.WithResult(isValid: " +
                "false, $\"6.5.3. required - required property \\\"");
        
        #line default
        #line hidden
        
        #line 4332 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') ));
        
        #line default
        #line hidden
        
        #line 4332 "SchemaEntity201909.tt"
        this.Write(@"\"" not present."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""6.5.3. required - required property not present."");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }
            ");
        
        #line default
        #line hidden
        
        #line 4343 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4346 "SchemaEntity201909.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 4346 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4349 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4350 "SchemaEntity201909.tt"

        if (HasMaxProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4354 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (propertyCount > ");
        
        #line default
        #line hidden
        
        #line 4355 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4355 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".1. maxProperties - property count of {propertyCount} is greater than ");
        
        #line default
        #line hidden
        
        #line 4359 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4359 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.1. maxProperties - property count greater than ");
        
        #line default
        #line hidden
        
        #line 4363 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MaxProperties ));
        
        #line default
        #line hidden
        
        #line 4363 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n        ");
        
        #line default
        #line hidden
        
        #line 4370 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4373 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4374 "SchemaEntity201909.tt"

        if (HasMinProperties)
        {
        
        
        #line default
        #line hidden
        
        #line 4378 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (propertyCount < ");
        
        #line default
        #line hidden
        
        #line 4379 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4379 "SchemaEntity201909.tt"
        this.Write(")\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n       " +
                "         {\r\n                    result = result.WithResult(isValid: false, $\"6.5" +
                ".2. minProperties - property count of {propertyCount} is lezs than ");
        
        #line default
        #line hidden
        
        #line 4383 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4383 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)" +
                "\r\n                {\r\n                    result = result.WithResult(isValid: fal" +
                "se, \"6.5.2. minProperties - property count less than ");
        
        #line default
        #line hidden
        
        #line 4387 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( MinProperties ));
        
        #line default
        #line hidden
        
        #line 4387 "SchemaEntity201909.tt"
        this.Write(".\");\r\n                }\r\n                else\r\n                {\r\n               " +
                "     return result.WithResult(isValid: false);\r\n                }\r\n            }" +
                "\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4395 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4398 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4402 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4405 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4406 "SchemaEntity201909.tt"

    if (HasOneOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4410 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateOneOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            int oneOfCount = 0;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4417 "SchemaEntity201909.tt"

        int oneOfIndex = 0;
        foreach (var oneOf in OneOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4422 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext oneOfResult");
        
        #line default
        #line hidden
        
        #line 4424 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex));
        
        #line default
        #line hidden
        
        #line 4424 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4424 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOf ));
        
        #line default
        #line hidden
        
        #line 4424 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (o" +
                "neOfResult");
        
        #line default
        #line hidden
        
        #line 4426 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4426 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(oneOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 4428 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4428 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n                oneOfCount += 1;\r\n        " +
                "    ");
        
        #line default
        #line hidden
        
        #line 4430 "SchemaEntity201909.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
            
        
        #line default
        #line hidden
        
        #line 4434 "SchemaEntity201909.tt"
        this.Write("                if (oneOfCount > 1 && level == ValidationLevel.Flag)\r\n           " +
                "     {\r\n                    result = result.WithResult(isValid: false);\r\n       " +
                "             return result;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4439 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4442 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeResults(result.IsValid, level, oneOfResult");
        
        #line default
        #line hidden
        
        #line 4447 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4447 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)\r\n" +
                "                {\r\n                    result = result.MergeResults(result.IsVal" +
                "id, level, oneOfResult");
        
        #line default
        #line hidden
        
        #line 4451 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4451 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n                else\r\n                {\r\n                 " +
                "   result = result.MergeResults(result.IsValid, level, oneOfResult");
        
        #line default
        #line hidden
        
        #line 4455 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( oneOfIndex ));
        
        #line default
        #line hidden
        
        #line 4455 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4459 "SchemaEntity201909.tt"

            oneOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4463 "SchemaEntity201909.tt"
        this.Write("\r\n            if (oneOfCount == 1)\r\n            {\r\n                if (level >= V" +
                "alidationLevel.Detailed)\r\n                {\r\n                    result = result" +
                ".WithResult(isValid: true, \"Validation 10.2.1.3. onef - validated against the on" +
                "eOf schema.\");\r\n                }\r\n            }\r\n            else if (oneOfCoun" +
                "t == 0)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r\n" +
                "                {\r\n                    result = result.WithResult(isValid: false" +
                ", \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf sche" +
                "ma.\");\r\n                }\r\n                else if (level >= ValidationLevel.Bas" +
                "ic)\r\n                {\r\n                    result = result.WithResult(isValid: " +
                "false, \"Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf" +
                " schema.\");\r\n                }\r\n                else\r\n                {\r\n       " +
                "             result = result.WithResult(isValid: false);\r\n                }\r\n   " +
                "         }\r\n            else\r\n            {\r\n                if (level >= Valida" +
                "tionLevel.Detailed)\r\n                {\r\n                    result = result.With" +
                "Result(isValid: false, \"Validation 10.2.1.3. oneOf - validated against more than" +
                " one of the oneOf schema.\");\r\n                }\r\n                else if (level " +
                ">= ValidationLevel.Basic)\r\n                {\r\n                    result = resul" +
                "t.WithResult(isValid: false, \"Validation 10.2.1.3. oneOf - failed to validate ag" +
                "ainst more than one of the oneOf schema.\");\r\n                }\r\n                " +
                "else\r\n                {\r\n                    result = result.WithResult(isValid:" +
                " false);\r\n                }\r\n            }\r\n\r\n            return result;\r\n      " +
                "  }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4505 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4508 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4510 "SchemaEntity201909.tt"

    if (HasAnyOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4514 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateAnyOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n            bool foundValid = false;\r\n\r\n       " +
                " ");
        
        #line default
        #line hidden
        
        #line 4521 "SchemaEntity201909.tt"

        int anyOfIndex = 0;
        foreach (var anyOf in AnyOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4526 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext anyOfResult");
        
        #line default
        #line hidden
        
        #line 4528 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4528 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4528 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOf ));
        
        #line default
        #line hidden
        
        #line 4528 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (a" +
                "nyOfResult");
        
        #line default
        #line hidden
        
        #line 4530 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4530 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                result = result.MergeChildContext(anyOf" +
                "Result");
        
        #line default
        #line hidden
        
        #line 4532 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4532 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            ");
        
        #line default
        #line hidden
        
        #line 4533 "SchemaEntity201909.tt"

            if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
            {
                
        
        #line default
        #line hidden
        
        #line 4537 "SchemaEntity201909.tt"
        this.Write("                if (level == ValidationLevel.Flag)\r\n                {\r\n          " +
                "          return result;\r\n                }\r\n                else\r\n             " +
                "   {\r\n                    foundValid = true;\r\n                }\r\n            ");
        
        #line default
        #line hidden
        
        #line 4545 "SchemaEntity201909.tt"

            }
            else
            {
            
        
        #line default
        #line hidden
        
        #line 4550 "SchemaEntity201909.tt"
        this.Write("                    foundValid = true;\r\n            ");
        
        #line default
        #line hidden
        
        #line 4551 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 4554 "SchemaEntity201909.tt"
        this.Write("            }\r\n            else\r\n            {\r\n                if (level >= Vali" +
                "dationLevel.Detailed)\r\n                {\r\n                    result = result.Me" +
                "rgeResults(result.IsValid, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 4559 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4559 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n                else if (level >= ValidationLevel.Basic)\r\n" +
                "                {\r\n                    result = result.MergeResults(result.IsVal" +
                "id, level, anyOfResult");
        
        #line default
        #line hidden
        
        #line 4563 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( anyOfIndex ));
        
        #line default
        #line hidden
        
        #line 4563 "SchemaEntity201909.tt"
        this.Write(");\r\n                }\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4567 "SchemaEntity201909.tt"

            anyOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4571 "SchemaEntity201909.tt"
        this.Write(@"
            if (foundValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, ""Validation 10.2.1.2. anyOf - validated against the anyOf schema."");
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, ""Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema."");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 4598 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4601 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4603 "SchemaEntity201909.tt"

    if (HasAllOf)
    {
    
        
        #line default
        #line hidden
        
        #line 4607 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateAllOf(in ValidationContext va" +
                "lidationContext, ValidationLevel level)\r\n        {\r\n            ValidationContex" +
                "t result = validationContext;\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4612 "SchemaEntity201909.tt"

        int allOfIndex = 0;
        foreach (var allOf in AllOf)
        {
        
        
        #line default
        #line hidden
        
        #line 4617 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n            ValidationContext allOfResult");
        
        #line default
        #line hidden
        
        #line 4619 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4619 "SchemaEntity201909.tt"
        this.Write(" = this.As<");
        
        #line default
        #line hidden
        
        #line 4619 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOf ));
        
        #line default
        #line hidden
        
        #line 4619 "SchemaEntity201909.tt"
        this.Write(">().Validate(validationContext.CreateChildContext(), level);\r\n\r\n            if (!" +
                "allOfResult");
        
        #line default
        #line hidden
        
        #line 4621 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4621 "SchemaEntity201909.tt"
        this.Write(".IsValid)\r\n            {\r\n                if (level >= ValidationLevel.Detailed)\r" +
                "\n                {\r\n                    result = result.MergeChildContext(allOfR" +
                "esult");
        
        #line default
        #line hidden
        
        #line 4625 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4625 "SchemaEntity201909.tt"
        this.Write(@", true).WithResult(isValid: false, ""Validation 10.2.1.1. allOf - failed to validate against the allOf schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4629 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4629 "SchemaEntity201909.tt"
        this.Write(", true).WithResult(isValid: false, \"Validation 10.2.1.1. allOf - failed to valida" +
                "te against the allOf schema.\");\r\n                }\r\n                else\r\n      " +
                "          {\r\n                    result = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4633 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4633 "SchemaEntity201909.tt"
        this.Write(", false).WithResult(isValid: false);\r\n                    return result;\r\n       " +
                "         }\r\n            }\r\n            else\r\n            {\r\n                resu" +
                "lt = result.MergeChildContext(allOfResult");
        
        #line default
        #line hidden
        
        #line 4639 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( allOfIndex ));
        
        #line default
        #line hidden
        
        #line 4639 "SchemaEntity201909.tt"
        this.Write(", level >= ValidationLevel.Detailed);\r\n            }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4642 "SchemaEntity201909.tt"

            allOfIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 4646 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4650 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4653 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4655 "SchemaEntity201909.tt"

    if (HasNot)
    {
    
        
        #line default
        #line hidden
        
        #line 4659 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateNot(ValidationContext validat" +
                "ionContext, ValidationLevel level)\r\n        {\r\n            ValidationContext res" +
                "ult = validationContext;\r\n\r\n            ValidationContext notResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4664 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( NotDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4664 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);
            if (notResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated successfully against the not schema."");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, ""Validation 9.2.1.4. not - incorrectly validated succesfully against the not schema."");
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.MergeResults(result.IsValid, level, notResult);
            }

            return result;
        }

    ");
        
        #line default
        #line hidden
        
        #line 4688 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4691 "SchemaEntity201909.tt"
        this.Write("        \r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4693 "SchemaEntity201909.tt"

    if (HasIfThenElse)
    {
    
        
        #line default
        #line hidden
        
        #line 4697 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateIfThenElse(in ValidationConte" +
                "xt validationContext, ValidationLevel level)\r\n        {\r\n            ValidationC" +
                "ontext result = validationContext;\r\n\r\n            ValidationContext ifResult = t" +
                "his.As<");
        
        #line default
        #line hidden
        
        #line 4702 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( IfFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4702 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

            if (!ifResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, ifResult, ifResult);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(ifResult, true);
                }

                result = result.MergeChildContext(ifResult, false);
            }


        ");
        
        #line default
        #line hidden
        
        #line 4726 "SchemaEntity201909.tt"

        if (HasThen)
        {
        
        
        #line default
        #line hidden
        
        #line 4730 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (ifResult.IsValid)\r\n            {\r\n                Valid" +
                "ationContext thenResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4733 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ThenFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4733 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!thenResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, ""Validation 9.2.2.2. then - failed to validate against the then schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(thenResult, true);
                    }

                    result = result.MergeChildContext(thenResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4761 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4764 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4765 "SchemaEntity201909.tt"

        if (HasElse)
        {
        
        
        #line default
        #line hidden
        
        #line 4769 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (!ifResult.IsValid)\r\n            {\r\n                Vali" +
                "dationContext elseResult = this.As<");
        
        #line default
        #line hidden
        
        #line 4772 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ElseFullyQualifiedDotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 4772 "SchemaEntity201909.tt"
        this.Write(@">().Validate(validationContext.CreateChildContext(), level);

                if (!elseResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.3. else - failed to validate against the else schema."");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, ""Validation 9.2.2.2. else - failed to validate against the else schema."");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(elseResult, true);
                    }

                    result = result.MergeChildContext(elseResult, false);
                }
            }

        ");
        
        #line default
        #line hidden
        
        #line 4800 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4803 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4807 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4810 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4811 "SchemaEntity201909.tt"

    if (HasMediaTypeOrEncoding)
    {
    
        
        #line default
        #line hidden
        
        #line 4815 "SchemaEntity201909.tt"
        this.Write("        private ValidationContext ValidateMediaTypeAndEncoding(JsonValueKind valu" +
                "eKind, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 4817 "SchemaEntity201909.tt"

        if (IsJsonBase64Content)
        {
        
        
        #line default
        #line hidden
        
        #line 4821 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64Content>().Validate(result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4826 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4829 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4830 "SchemaEntity201909.tt"

        if (IsJsonBase64String)
        {
        
        
        #line default
        #line hidden
        
        #line 4834 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonBase64String>().Validate(result, level);\r\n       " +
                "     }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4840 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4843 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4844 "SchemaEntity201909.tt"

        if (IsJsonContent)
        {
        
        
        #line default
        #line hidden
        
        #line 4848 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return this.As<JsonContent>().Validate(result, level);\r\n            " +
                "}\r\n        ");
        
        #line default
        #line hidden
        
        #line 4853 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4856 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 4860 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 4863 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 4864 "SchemaEntity201909.tt"

    if (HasFormat)
    {
    
        
        #line default
        #line hidden
        
        #line 4868 "SchemaEntity201909.tt"
        this.Write("        \r\n        private ValidationContext ValidateFormat(JsonValueKind valueKin" +
                "d, ValidationContext result, ValidationLevel level)\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 4871 "SchemaEntity201909.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 4875 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4880 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4883 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4884 "SchemaEntity201909.tt"

        if (IsJsonDate)
        {
        
        
        #line default
        #line hidden
        
        #line 4888 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDate(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4894 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4897 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4898 "SchemaEntity201909.tt"

        if (IsJsonDateTime)
        {
        
        
        #line default
        #line hidden
        
        #line 4902 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDateTime(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4907 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4910 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4911 "SchemaEntity201909.tt"

        if (IsJsonDuration)
        {
        
        
        #line default
        #line hidden
        
        #line 4915 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeDuration(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4920 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4923 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4924 "SchemaEntity201909.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 4928 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4933 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4936 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4937 "SchemaEntity201909.tt"

        if (IsJsonEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 4941 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeEmail(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4946 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4949 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4950 "SchemaEntity201909.tt"

        if (IsJsonHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 4954 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeHostname(this, result, level);\r\n     " +
                "       }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4959 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4962 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4963 "SchemaEntity201909.tt"

        if (IsJsonIdnEmail)
        {
        
        
        #line default
        #line hidden
        
        #line 4967 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnEmail(this, result, level);\r\n     " +
                "       }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 4973 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4976 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4977 "SchemaEntity201909.tt"

        if (IsJsonIdnHostname)
        {
        
        
        #line default
        #line hidden
        
        #line 4981 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIdnHostname(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4986 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 4989 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 4990 "SchemaEntity201909.tt"

        if (IsJsonInteger)
        {
        
        
        #line default
        #line hidden
        
        #line 4994 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.Number)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeInteger(this, result, level);\r\n      " +
                "      }\r\n        ");
        
        #line default
        #line hidden
        
        #line 4999 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5002 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5003 "SchemaEntity201909.tt"

        if (IsJsonIpV4)
        {
        
        
        #line default
        #line hidden
        
        #line 5007 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV4(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5013 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5016 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5017 "SchemaEntity201909.tt"

        if (IsJsonIpV6)
        {
        
        
        #line default
        #line hidden
        
        #line 5021 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIpV6(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5027 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5030 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5031 "SchemaEntity201909.tt"

        if (IsJsonIri)
        {
        
        
        #line default
        #line hidden
        
        #line 5035 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIri(this, result, level);\r\n          " +
                "  }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5040 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5043 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5044 "SchemaEntity201909.tt"

        if (IsJsonIriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 5048 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeIriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5053 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5056 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5057 "SchemaEntity201909.tt"

        if (IsJsonPointer)
        {
        
        
        #line default
        #line hidden
        
        #line 5061 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeJsonPointer(this, result, level);\r\n  " +
                "          }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5066 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5069 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5070 "SchemaEntity201909.tt"

        if (IsJsonRegex)
        {
        
        
        #line default
        #line hidden
        
        #line 5074 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRegex(this, result, level);\r\n        " +
                "    }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5079 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5082 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5083 "SchemaEntity201909.tt"

        if (IsJsonRelativePointer)
        {
        
        
        #line default
        #line hidden
        
        #line 5087 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeRelativeJsonPointer(this, result, lev" +
                "el);\r\n            }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5092 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5095 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5096 "SchemaEntity201909.tt"

        if (IsJsonTime)
        {
        
        
        #line default
        #line hidden
        
        #line 5100 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeTime(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5106 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5109 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5110 "SchemaEntity201909.tt"

        if (IsJsonUri)
        {
        
        
        #line default
        #line hidden
        
        #line 5114 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUri(this, result, level);\r\n          " +
                "  }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5120 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5123 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5124 "SchemaEntity201909.tt"

        if (IsJsonUriReference)
        {
        
        
        #line default
        #line hidden
        
        #line 5128 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriReference(this, result, level);\r\n " +
                "           }\r\n        ");
        
        #line default
        #line hidden
        
        #line 5133 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5136 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5137 "SchemaEntity201909.tt"

        if (IsJsonUriTemplate)
        {
        
        
        #line default
        #line hidden
        
        #line 5141 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUriTemplate(this, result, level);\r\n  " +
                "          }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5147 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5150 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5151 "SchemaEntity201909.tt"

        if (IsJsonUuid)
        {
        
        
        #line default
        #line hidden
        
        #line 5155 "SchemaEntity201909.tt"
        this.Write("        \r\n            if (valueKind == JsonValueKind.String)\r\n            {\r\n    " +
                "            return Menes.Json.Validate.TypeUuid(this, result, level);\r\n         " +
                "   }\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5161 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5164 "SchemaEntity201909.tt"
        this.Write("\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5168 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5171 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5172 "SchemaEntity201909.tt"

    if (HasType)
    {
    
        
        #line default
        #line hidden
        
        #line 5176 "SchemaEntity201909.tt"
        this.Write(@"        
        private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            bool isValid = false;

        ");
        
        #line default
        #line hidden
        
        #line 5182 "SchemaEntity201909.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 5186 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultString = Menes.Json.Validate.TypeString(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultString.IsValid)
            {
                return validationContext;
            }

            if (localResultString.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5198 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5201 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5202 "SchemaEntity201909.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 5206 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultObject = Menes.Json.Validate.TypeObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5218 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5221 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5222 "SchemaEntity201909.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 5226 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultArray = Menes.Json.Validate.TypeArray(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultArray.IsValid)
            {
                return validationContext;
            }

            if (localResultArray.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5238 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5241 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5242 "SchemaEntity201909.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 5246 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultNumber = Menes.Json.Validate.TypeNumber(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNumber.IsValid)
            {
                return validationContext;
            }

            if (localResultNumber.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5258 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5261 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5262 "SchemaEntity201909.tt"

        if (HasIntegerType)
        {
        
        
        #line default
        #line hidden
        
        #line 5266 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultInteger = Menes.Json.Validate.TypeInteger(this, result, level);
            if (level == ValidationLevel.Flag && localResultInteger.IsValid)
            {
                return validationContext;
            }

            if (localResultInteger.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5278 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5281 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5282 "SchemaEntity201909.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 5286 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultBoolean = Menes.Json.Validate.TypeBoolean(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
            {
                return validationContext;
            }

            if (localResultBoolean.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5298 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5301 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5302 "SchemaEntity201909.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 5306 "SchemaEntity201909.tt"
        this.Write(@"        
            ValidationContext localResultNull = Menes.Json.Validate.TypeNull(valueKind, result, level);
            if (level == ValidationLevel.Flag && localResultNull.IsValid)
            {
                return validationContext;
            }

            if (localResultNull.IsValid)
            {
                isValid = true;
            }

        ");
        
        #line default
        #line hidden
        
        #line 5318 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5321 "SchemaEntity201909.tt"
        this.Write("\r\n            result = result.MergeResults(\r\n                isValid,\r\n          " +
                "      level\r\n        ");
        
        #line default
        #line hidden
        
        #line 5325 "SchemaEntity201909.tt"

        if (HasStringType)
        {
        
        
        #line default
        #line hidden
        
        #line 5329 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultString\r\n        ");
        
        #line default
        #line hidden
        
        #line 5331 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5334 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5335 "SchemaEntity201909.tt"

        if (HasObjectType)
        {
        
        
        #line default
        #line hidden
        
        #line 5339 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultObject\r\n        ");
        
        #line default
        #line hidden
        
        #line 5341 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5344 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5345 "SchemaEntity201909.tt"

        if (HasArrayType)
        {
        
        
        #line default
        #line hidden
        
        #line 5349 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultArray\r\n        ");
        
        #line default
        #line hidden
        
        #line 5351 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5354 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5355 "SchemaEntity201909.tt"

        if (HasNumberType)
        {
        
        
        #line default
        #line hidden
        
        #line 5359 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultNumber\r\n        ");
        
        #line default
        #line hidden
        
        #line 5361 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5364 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5365 "SchemaEntity201909.tt"

        if (HasBooleanType)
        {
        
        
        #line default
        #line hidden
        
        #line 5369 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultBoolean\r\n        ");
        
        #line default
        #line hidden
        
        #line 5371 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5374 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5375 "SchemaEntity201909.tt"

        if (HasNullType)
        {
        
        
        #line default
        #line hidden
        
        #line 5379 "SchemaEntity201909.tt"
        this.Write("        \r\n                , localResultNull\r\n        ");
        
        #line default
        #line hidden
        
        #line 5381 "SchemaEntity201909.tt"

        }
        
        
        #line default
        #line hidden
        
        #line 5384 "SchemaEntity201909.tt"
        this.Write("                );\r\n\r\n            return result;\r\n        }\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5389 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5392 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5393 "SchemaEntity201909.tt"

    if (HasEnum)
    {
    
        
        #line default
        #line hidden
        
        #line 5397 "SchemaEntity201909.tt"
        this.Write("        \r\n        /// <summary>\r\n        /// Permitted values.\r\n        /// </sum" +
                "mary>\r\n        public static class EnumValues\r\n        {\r\n        ");
        
        #line default
        #line hidden
        
        #line 5403 "SchemaEntity201909.tt"

        int enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
        
        
        #line default
        #line hidden
        
        #line 5408 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 5408 "SchemaEntity201909.tt"

            if (enumValue.IsString)
            {
            
        
        #line default
        #line hidden
        
        #line 5412 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// enumValue.AsPropertyName.\r\n           " +
                " /// </summary>\r\n            /// <remarks>\r\n            /// {Description}.\r\n    " +
                "        /// </remarks>\r\n            public static readonly ");
        
        #line default
        #line hidden
        
        #line 5418 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5418 "SchemaEntity201909.tt"
        this.Write(" ");
        
        #line default
        #line hidden
        
        #line 5418 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.AsPropertyName));
        
        #line default
        #line hidden
        
        #line 5418 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5418 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(                    enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5418 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5419 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsBoolean)
            {
            
        
        #line default
        #line hidden
        
        #line 5424 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5425 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5425 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5430 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5430 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5430 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5430 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5430 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5430 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5431 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsNumber)
            {
            
        
        #line default
        #line hidden
        
        #line 5436 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5437 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5437 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5442 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5442 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5442 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5442 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5442 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5442 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5443 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsObject)
            {
            
        
        #line default
        #line hidden
        
        #line 5448 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5449 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5449 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5454 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5454 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5454 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5454 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5454 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5454 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5455 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsArray)
            {
            
        
        #line default
        #line hidden
        
        #line 5460 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5461 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5461 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5466 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5466 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5466 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5466 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5466 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5466 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5467 "SchemaEntity201909.tt"

            }
            else if (enumValue.IsNull)
            {
            
        
        #line default
        #line hidden
        
        #line 5472 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5473 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5473 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            publ" +
                "ic static readonly ");
        
        #line default
        #line hidden
        
        #line 5478 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5478 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5478 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5478 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(\"null\");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5479 "SchemaEntity201909.tt"

            }
            
        
        #line default
        #line hidden
        
        #line 5482 "SchemaEntity201909.tt"
        this.Write("\r\n        ");
        
        #line default
        #line hidden
        
        #line 5483 "SchemaEntity201909.tt"

            ++enumItemIndex;
        }
        
        
        #line default
        #line hidden
        
        #line 5487 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n        ");
        
        #line default
        #line hidden
        
        #line 5489 "SchemaEntity201909.tt"

        enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
        
        
        #line default
        #line hidden
        
        #line 5494 "SchemaEntity201909.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 5494 "SchemaEntity201909.tt"

            if (enumValue.IsString)
            {
            
        
        #line default
        #line hidden
        
        #line 5498 "SchemaEntity201909.tt"
        this.Write("            /// <summary>\r\n            /// [{Title} || Item ");
        
        #line default
        #line hidden
        
        #line 5499 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5499 "SchemaEntity201909.tt"
        this.Write("] (with predictable naming).\r\n            /// </summary>\r\n            /// <remark" +
                "s>\r\n            /// {Description}.\r\n            /// </remarks>\r\n            inte" +
                "rnal static readonly ");
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     TypeDeclaration.DotnetTypeName ));
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write(" Item");
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumItemIndex));
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write(" = JsonAny.Parse(");
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture(     enumValue.SerializedValue ));
        
        #line default
        #line hidden
        
        #line 5504 "SchemaEntity201909.tt"
        this.Write(");\r\n            ");
        
        #line default
        #line hidden
        
        #line 5505 "SchemaEntity201909.tt"

            }
            enumItemIndex++;
        }
        
        
        #line default
        #line hidden
        
        #line 5510 "SchemaEntity201909.tt"
        this.Write("        }\r\n    ");
        
        #line default
        #line hidden
        
        #line 5511 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5514 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5515 "SchemaEntity201909.tt"

    foreach(var nestedType in NestedTypes)
    {
    
        
        #line default
        #line hidden
        
        #line 5519 "SchemaEntity201909.tt"
        this.Write("\r\n    ");
        
        #line default
        #line hidden
        
        #line 5520 "SchemaEntity201909.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( WriteNestedType(nestedType) ));
        
        #line default
        #line hidden
        
        #line 5520 "SchemaEntity201909.tt"
        this.Write("\r\n\r\n    ");
        
        #line default
        #line hidden
        
        #line 5522 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        
        #line 5525 "SchemaEntity201909.tt"
        this.Write("\r\n    }\r\n    ");
        
        #line default
        #line hidden
        
        #line 5527 "SchemaEntity201909.tt"

    if (!IsNested)
    {
    
        
        #line default
        #line hidden
        
        #line 5531 "SchemaEntity201909.tt"
        this.Write("}\r\n    ");
        
        #line default
        #line hidden
        
        #line 5532 "SchemaEntity201909.tt"

    }
    
        
        #line default
        #line hidden
        return this.GenerationEnvironment.ToString();
    }
    
    public virtual void Initialize() {
    }
}

public class SchemaEntity201909Base {
    
    private global::System.Text.StringBuilder builder;
    
    private global::System.Collections.Generic.IDictionary<string, object> session;
    
    private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
    
    private string currentIndent = string.Empty;
    
    private global::System.Collections.Generic.Stack<int> indents;
    
    private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
    
    public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
        get {
            return this.session;
        }
        set {
            this.session = value;
        }
    }
    
    public global::System.Text.StringBuilder GenerationEnvironment {
        get {
            if ((this.builder == null)) {
                this.builder = new global::System.Text.StringBuilder();
            }
            return this.builder;
        }
        set {
            this.builder = value;
        }
    }
    
    protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
        get {
            if ((this.errors == null)) {
                this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
            }
            return this.errors;
        }
    }
    
    public string CurrentIndent {
        get {
            return this.currentIndent;
        }
    }
    
    private global::System.Collections.Generic.Stack<int> Indents {
        get {
            if ((this.indents == null)) {
                this.indents = new global::System.Collections.Generic.Stack<int>();
            }
            return this.indents;
        }
    }
    
    public ToStringInstanceHelper ToStringHelper {
        get {
            return this._toStringHelper;
        }
    }
    
    public void Error(string message) {
        this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
    }
    
    public void Warning(string message) {
        global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
        val.IsWarning = true;
        this.Errors.Add(val);
    }
    
    public string PopIndent() {
        if ((this.Indents.Count == 0)) {
            return string.Empty;
        }
        int lastPos = (this.currentIndent.Length - this.Indents.Pop());
        string last = this.currentIndent.Substring(lastPos);
        this.currentIndent = this.currentIndent.Substring(0, lastPos);
        return last;
    }
    
    public void PushIndent(string indent) {
        this.Indents.Push(indent.Length);
        this.currentIndent = (this.currentIndent + indent);
    }
    
    public void ClearIndent() {
        this.currentIndent = string.Empty;
        this.Indents.Clear();
    }
    
    public void Write(string textToAppend) {
        this.GenerationEnvironment.Append(textToAppend);
    }
    
    public void Write(string format, params object[] args) {
        this.GenerationEnvironment.AppendFormat(format, args);
    }
    
    public void WriteLine(string textToAppend) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendLine(textToAppend);
    }
    
    public void WriteLine(string format, params object[] args) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendFormat(format, args);
        this.GenerationEnvironment.AppendLine();
    }
    
    public class ToStringInstanceHelper {
        
        private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
        
        public global::System.IFormatProvider FormatProvider {
            get {
                return this.formatProvider;
            }
            set {
                if ((value != null)) {
                    this.formatProvider = value;
                }
            }
        }
        
        public string ToStringWithCulture(object objectToConvert) {
            if ((objectToConvert == null)) {
                throw new global::System.ArgumentNullException("objectToConvert");
            }
            global::System.Type type = objectToConvert.GetType();
            global::System.Type iConvertibleType = typeof(global::System.IConvertible);
            if (iConvertibleType.IsAssignableFrom(type)) {
                return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
            }
            global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                        iConvertibleType});
            if ((methInfo != null)) {
                return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                            this.formatProvider})));
            }
            return objectToConvert.ToString();
        }
    }
}
