//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.OpenApiSchema.V31;
public readonly partial struct Document
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct OauthFlows
    {
        /// <summary>
        /// JSON property name for <see cref = "Implicit"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ImplicitUtf8JsonPropertyName = new byte[]{105, 109, 112, 108, 105, 99, 105, 116};
        /// <summary>
        /// JSON property name for <see cref = "Implicit"/>.
        /// </summary>
        public const string ImplicitJsonPropertyName = "implicit";
        /// <summary>
        /// JSON property name for <see cref = "Password"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PasswordUtf8JsonPropertyName = new byte[]{112, 97, 115, 115, 119, 111, 114, 100};
        /// <summary>
        /// JSON property name for <see cref = "Password"/>.
        /// </summary>
        public const string PasswordJsonPropertyName = "password";
        /// <summary>
        /// JSON property name for <see cref = "ClientCredentials"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ClientCredentialsUtf8JsonPropertyName = new byte[]{99, 108, 105, 101, 110, 116, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115};
        /// <summary>
        /// JSON property name for <see cref = "ClientCredentials"/>.
        /// </summary>
        public const string ClientCredentialsJsonPropertyName = "clientCredentials";
        /// <summary>
        /// JSON property name for <see cref = "AuthorizationCode"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> AuthorizationCodeUtf8JsonPropertyName = new byte[]{97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 67, 111, 100, 101};
        /// <summary>
        /// JSON property name for <see cref = "AuthorizationCode"/>.
        /// </summary>
        public const string AuthorizationCodeJsonPropertyName = "authorizationCode";
        /// <summary>
        /// Gets Implicit.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.OauthFlows.ImplicitEntity Implicit
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ImplicitUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.OauthFlows.ImplicitEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ImplicitJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.OauthFlows.ImplicitEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Password.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.OauthFlows.PasswordEntity Password
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(PasswordUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.OauthFlows.PasswordEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(PasswordJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.OauthFlows.PasswordEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets ClientCredentials.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.OauthFlows.ClientCredentialsEntity ClientCredentials
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ClientCredentialsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.OauthFlows.ClientCredentialsEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ClientCredentialsJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.OauthFlows.ClientCredentialsEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets AuthorizationCode.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.OauthFlows.AuthorizationCodeEntity AuthorizationCode
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(AuthorizationCodeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.OauthFlows.AuthorizationCodeEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(AuthorizationCodeJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.OauthFlows.AuthorizationCodeEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "OauthFlows"/>.
        /// </summary>
        public static OauthFlows Create(Menes.OpenApiSchema.V31.Document.OauthFlows.ImplicitEntity? @implicit = null, Menes.OpenApiSchema.V31.Document.OauthFlows.PasswordEntity? password = null, Menes.OpenApiSchema.V31.Document.OauthFlows.ClientCredentialsEntity? clientCredentials = null, Menes.OpenApiSchema.V31.Document.OauthFlows.AuthorizationCodeEntity? authorizationCode = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            if (@implicit is Menes.OpenApiSchema.V31.Document.OauthFlows.ImplicitEntity @implicit__)
            {
                builder.Add(ImplicitJsonPropertyName, @implicit__.AsAny);
            }

            if (password is Menes.OpenApiSchema.V31.Document.OauthFlows.PasswordEntity password__)
            {
                builder.Add(PasswordJsonPropertyName, password__.AsAny);
            }

            if (clientCredentials is Menes.OpenApiSchema.V31.Document.OauthFlows.ClientCredentialsEntity clientCredentials__)
            {
                builder.Add(ClientCredentialsJsonPropertyName, clientCredentials__.AsAny);
            }

            if (authorizationCode is Menes.OpenApiSchema.V31.Document.OauthFlows.AuthorizationCodeEntity authorizationCode__)
            {
                builder.Add(AuthorizationCodeJsonPropertyName, authorizationCode__.AsAny);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets implicit.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithImplicit(in Menes.OpenApiSchema.V31.Document.OauthFlows.ImplicitEntity value)
        {
            return this.SetProperty(ImplicitJsonPropertyName, value);
        }

        /// <summary>
        /// Sets password.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithPassword(in Menes.OpenApiSchema.V31.Document.OauthFlows.PasswordEntity value)
        {
            return this.SetProperty(PasswordJsonPropertyName, value);
        }

        /// <summary>
        /// Sets clientCredentials.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithClientCredentials(in Menes.OpenApiSchema.V31.Document.OauthFlows.ClientCredentialsEntity value)
        {
            return this.SetProperty(ClientCredentialsJsonPropertyName, value);
        }

        /// <summary>
        /// Sets authorizationCode.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithAuthorizationCode(in Menes.OpenApiSchema.V31.Document.OauthFlows.AuthorizationCodeEntity value)
        {
            return this.SetProperty(AuthorizationCodeJsonPropertyName, value);
        }

        private static ValidationContext __CorvusValidateImplicit(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.OauthFlows.ImplicitEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidatePassword(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.OauthFlows.PasswordEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateClientCredentials(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.OauthFlows.ClientCredentialsEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateAuthorizationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.OauthFlows.AuthorizationCodeEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(ImplicitUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateImplicit;
                    return true;
                }
                else if (property.NameEquals(PasswordUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidatePassword;
                    return true;
                }
                else if (property.NameEquals(ClientCredentialsUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateClientCredentials;
                    return true;
                }
                else if (property.NameEquals(AuthorizationCodeUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateAuthorizationCode;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(ImplicitJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateImplicit;
                    return true;
                }
                else if (property.NameEquals(PasswordJsonPropertyName))
                {
                    propertyValidator = __CorvusValidatePassword;
                    return true;
                }
                else if (property.NameEquals(ClientCredentialsJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateClientCredentials;
                    return true;
                }
                else if (property.NameEquals(AuthorizationCodeJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateAuthorizationCode;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}