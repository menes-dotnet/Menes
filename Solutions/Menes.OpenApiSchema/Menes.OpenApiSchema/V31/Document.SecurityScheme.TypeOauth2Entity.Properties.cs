//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.OpenApiSchema.V31;
public readonly partial struct Document
{
    public readonly partial struct SecurityScheme
    {
        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly partial struct TypeOauth2Entity
        {
            /// <summary>
            /// JSON property name for <see cref = "Flows"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> FlowsUtf8JsonPropertyName = new byte[]{102, 108, 111, 119, 115};
            /// <summary>
            /// JSON property name for <see cref = "Flows"/>.
            /// </summary>
            public const string FlowsJsonPropertyName = "flows";
            /// <summary>
            /// Gets Flows.
            /// </summary>
            public Menes.OpenApiSchema.V31.Document.OauthFlows Flows
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(FlowsUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Menes.OpenApiSchema.V31.Document.OauthFlows(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(FlowsJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Menes.OpenApiSchema.V31.Document.OauthFlows>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Creates an instance of a <see cref = "TypeOauth2Entity"/>.
            /// </summary>
            public static TypeOauth2Entity Create(Menes.OpenApiSchema.V31.Document.OauthFlows? flows = null)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
                if (flows is Menes.OpenApiSchema.V31.Document.OauthFlows flows__)
                {
                    builder.Add(FlowsJsonPropertyName, flows__.AsAny);
                }

                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets flows.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public TypeOauth2Entity WithFlows(in Menes.OpenApiSchema.V31.Document.OauthFlows value)
            {
                return this.SetProperty(FlowsJsonPropertyName, value);
            }

            /// <summary>
            /// Tries to get the validator for the given property.
            /// </summary>
            /// <param name = "property">The property for which to get the validator.</param>
            /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            /// <returns><c>True</c> if the validator was found.</returns>
            private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
            {
                if (hasJsonElementBacking)
                {
                }
                else
                {
                }

                propertyValidator = null;
                return false;
            }
        }
    }
}