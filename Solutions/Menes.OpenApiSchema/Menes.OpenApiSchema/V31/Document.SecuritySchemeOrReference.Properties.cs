//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.OpenApiSchema.V31;
public readonly partial struct Document
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct SecuritySchemeOrReference
    {
        /// <summary>
        /// JSON property name for <see cref = "Ref"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
        /// <summary>
        /// JSON property name for <see cref = "Ref"/>.
        /// </summary>
        public const string RefJsonPropertyName = "$ref";
        /// <summary>
        /// JSON property name for <see cref = "Summary"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
        /// <summary>
        /// JSON property name for <see cref = "Summary"/>.
        /// </summary>
        public const string SummaryJsonPropertyName = "summary";
        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public const string DescriptionJsonPropertyName = "description";
        /// <summary>
        /// JSON property name for <see cref = "Type"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
        /// <summary>
        /// JSON property name for <see cref = "Type"/>.
        /// </summary>
        public const string TypeJsonPropertyName = "type";
        /// <summary>
        /// JSON property name for <see cref = "Scheme"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SchemeUtf8JsonPropertyName = new byte[]{115, 99, 104, 101, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "Scheme"/>.
        /// </summary>
        public const string SchemeJsonPropertyName = "scheme";
        /// <summary>
        /// JSON property name for <see cref = "Name"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "Name"/>.
        /// </summary>
        public const string NameJsonPropertyName = "name";
        /// <summary>
        /// JSON property name for <see cref = "In"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> InUtf8JsonPropertyName = new byte[]{105, 110};
        /// <summary>
        /// JSON property name for <see cref = "In"/>.
        /// </summary>
        public const string InJsonPropertyName = "in";
        /// <summary>
        /// JSON property name for <see cref = "Flows"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> FlowsUtf8JsonPropertyName = new byte[]{102, 108, 111, 119, 115};
        /// <summary>
        /// JSON property name for <see cref = "Flows"/>.
        /// </summary>
        public const string FlowsJsonPropertyName = "flows";
        /// <summary>
        /// JSON property name for <see cref = "BearerFormat"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> BearerFormatUtf8JsonPropertyName = new byte[]{98, 101, 97, 114, 101, 114, 70, 111, 114, 109, 97, 116};
        /// <summary>
        /// JSON property name for <see cref = "BearerFormat"/>.
        /// </summary>
        public const string BearerFormatJsonPropertyName = "bearerFormat";
        /// <summary>
        /// JSON property name for <see cref = "OpenIdConnectUrl"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> OpenIdConnectUrlUtf8JsonPropertyName = new byte[]{111, 112, 101, 110, 73, 100, 67, 111, 110, 110, 101, 99, 116, 85, 114, 108};
        /// <summary>
        /// JSON property name for <see cref = "OpenIdConnectUrl"/>.
        /// </summary>
        public const string OpenIdConnectUrlJsonPropertyName = "openIdConnectUrl";
        /// <summary>
        /// Gets Ref.
        /// </summary>
        public Corvus.Json.JsonUriReference Ref
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUriReference(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(RefJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUriReference>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Summary.
        /// </summary>
        public Corvus.Json.JsonString Summary
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Description.
        /// </summary>
        public Corvus.Json.JsonString Description
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Type.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeEntity Type
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Scheme.
        /// </summary>
        public Corvus.Json.JsonString Scheme
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(SchemeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(SchemeJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Name.
        /// </summary>
        public Corvus.Json.JsonString Name
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(NameJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets In.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeApikeyEntity.ThenEntity.InEntity In
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(InUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeApikeyEntity.ThenEntity.InEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(InJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeApikeyEntity.ThenEntity.InEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Flows.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.OauthFlows Flows
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(FlowsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.OauthFlows(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(FlowsJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.OauthFlows>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets BearerFormat.
        /// </summary>
        public Corvus.Json.JsonString BearerFormat
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(BearerFormatUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(BearerFormatJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets OpenIdConnectUrl.
        /// </summary>
        public Corvus.Json.JsonUri OpenIdConnectUrl
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(OpenIdConnectUrlUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUri(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(OpenIdConnectUrlJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUri>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "SecuritySchemeOrReference"/>.
        /// </summary>
        public static SecuritySchemeOrReference Create(Corvus.Json.JsonUriReference? @ref = null, Corvus.Json.JsonString? summary = null, Corvus.Json.JsonString? description = null, Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeEntity? type = null, Corvus.Json.JsonString? scheme = null, Corvus.Json.JsonString? name = null, Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeApikeyEntity.ThenEntity.InEntity? @in = null, Menes.OpenApiSchema.V31.Document.OauthFlows? flows = null, Corvus.Json.JsonString? bearerFormat = null, Corvus.Json.JsonUri? openIdConnectUrl = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            if (@ref is Corvus.Json.JsonUriReference @ref__)
            {
                builder.Add(RefJsonPropertyName, @ref__.AsAny);
            }

            if (summary is Corvus.Json.JsonString summary__)
            {
                builder.Add(SummaryJsonPropertyName, summary__.AsAny);
            }

            if (description is Corvus.Json.JsonString description__)
            {
                builder.Add(DescriptionJsonPropertyName, description__.AsAny);
            }

            if (type is Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeEntity type__)
            {
                builder.Add(TypeJsonPropertyName, type__.AsAny);
            }

            if (scheme is Corvus.Json.JsonString scheme__)
            {
                builder.Add(SchemeJsonPropertyName, scheme__.AsAny);
            }

            if (name is Corvus.Json.JsonString name__)
            {
                builder.Add(NameJsonPropertyName, name__.AsAny);
            }

            if (@in is Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeApikeyEntity.ThenEntity.InEntity @in__)
            {
                builder.Add(InJsonPropertyName, @in__.AsAny);
            }

            if (flows is Menes.OpenApiSchema.V31.Document.OauthFlows flows__)
            {
                builder.Add(FlowsJsonPropertyName, flows__.AsAny);
            }

            if (bearerFormat is Corvus.Json.JsonString bearerFormat__)
            {
                builder.Add(BearerFormatJsonPropertyName, bearerFormat__.AsAny);
            }

            if (openIdConnectUrl is Corvus.Json.JsonUri openIdConnectUrl__)
            {
                builder.Add(OpenIdConnectUrlJsonPropertyName, openIdConnectUrl__.AsAny);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets $ref.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithRef(in Corvus.Json.JsonUriReference value)
        {
            return this.SetProperty(RefJsonPropertyName, value);
        }

        /// <summary>
        /// Sets summary.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithSummary(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(SummaryJsonPropertyName, value);
        }

        /// <summary>
        /// Sets description.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithDescription(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(DescriptionJsonPropertyName, value);
        }

        /// <summary>
        /// Sets type.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithType(in Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeEntity value)
        {
            return this.SetProperty(TypeJsonPropertyName, value);
        }

        /// <summary>
        /// Sets scheme.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithScheme(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(SchemeJsonPropertyName, value);
        }

        /// <summary>
        /// Sets name.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithName(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(NameJsonPropertyName, value);
        }

        /// <summary>
        /// Sets in.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithIn(in Menes.OpenApiSchema.V31.Document.SecurityScheme.TypeApikeyEntity.ThenEntity.InEntity value)
        {
            return this.SetProperty(InJsonPropertyName, value);
        }

        /// <summary>
        /// Sets flows.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithFlows(in Menes.OpenApiSchema.V31.Document.OauthFlows value)
        {
            return this.SetProperty(FlowsJsonPropertyName, value);
        }

        /// <summary>
        /// Sets bearerFormat.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithBearerFormat(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(BearerFormatJsonPropertyName, value);
        }

        /// <summary>
        /// Sets openIdConnectUrl.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SecuritySchemeOrReference WithOpenIdConnectUrl(in Corvus.Json.JsonUri value)
        {
            return this.SetProperty(OpenIdConnectUrlJsonPropertyName, value);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
            }
            else
            {
            }

            propertyValidator = null;
            return false;
        }
    }
}