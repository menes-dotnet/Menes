//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.OpenApiSchema.V31;
public readonly partial struct Document
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct ResponseOrReference
    {
        /// <summary>
        /// JSON property name for <see cref = "Ref"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> RefUtf8JsonPropertyName = new byte[]{36, 114, 101, 102};
        /// <summary>
        /// JSON property name for <see cref = "Ref"/>.
        /// </summary>
        public const string RefJsonPropertyName = "$ref";
        /// <summary>
        /// JSON property name for <see cref = "Summary"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
        /// <summary>
        /// JSON property name for <see cref = "Summary"/>.
        /// </summary>
        public const string SummaryJsonPropertyName = "summary";
        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public const string DescriptionJsonPropertyName = "description";
        /// <summary>
        /// JSON property name for <see cref = "Headers"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> HeadersUtf8JsonPropertyName = new byte[]{104, 101, 97, 100, 101, 114, 115};
        /// <summary>
        /// JSON property name for <see cref = "Headers"/>.
        /// </summary>
        public const string HeadersJsonPropertyName = "headers";
        /// <summary>
        /// JSON property name for <see cref = "Content"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116};
        /// <summary>
        /// JSON property name for <see cref = "Content"/>.
        /// </summary>
        public const string ContentJsonPropertyName = "content";
        /// <summary>
        /// JSON property name for <see cref = "Links"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> LinksUtf8JsonPropertyName = new byte[]{108, 105, 110, 107, 115};
        /// <summary>
        /// JSON property name for <see cref = "Links"/>.
        /// </summary>
        public const string LinksJsonPropertyName = "links";
        /// <summary>
        /// Gets Ref.
        /// </summary>
        public Corvus.Json.JsonUriReference Ref
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(RefUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUriReference(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(RefJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUriReference>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Summary.
        /// </summary>
        public Corvus.Json.JsonString Summary
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Description.
        /// </summary>
        public Corvus.Json.JsonString Description
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Headers.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.Response.HeadersEntity Headers
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(HeadersUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.Response.HeadersEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(HeadersJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.Response.HeadersEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Content.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.Content Content
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ContentUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.Content(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ContentJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.Content>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Links.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.Response.LinksEntity Links
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(LinksUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.Response.LinksEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(LinksJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.Response.LinksEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "ResponseOrReference"/>.
        /// </summary>
        public static ResponseOrReference Create(Corvus.Json.JsonUriReference? @ref = null, Corvus.Json.JsonString? summary = null, Corvus.Json.JsonString? description = null, Menes.OpenApiSchema.V31.Document.Response.HeadersEntity? headers = null, Menes.OpenApiSchema.V31.Document.Content? content = null, Menes.OpenApiSchema.V31.Document.Response.LinksEntity? links = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            if (@ref is Corvus.Json.JsonUriReference @ref__)
            {
                builder.Add(RefJsonPropertyName, @ref__.AsAny);
            }

            if (summary is Corvus.Json.JsonString summary__)
            {
                builder.Add(SummaryJsonPropertyName, summary__.AsAny);
            }

            if (description is Corvus.Json.JsonString description__)
            {
                builder.Add(DescriptionJsonPropertyName, description__.AsAny);
            }

            if (headers is Menes.OpenApiSchema.V31.Document.Response.HeadersEntity headers__)
            {
                builder.Add(HeadersJsonPropertyName, headers__.AsAny);
            }

            if (content is Menes.OpenApiSchema.V31.Document.Content content__)
            {
                builder.Add(ContentJsonPropertyName, content__.AsAny);
            }

            if (links is Menes.OpenApiSchema.V31.Document.Response.LinksEntity links__)
            {
                builder.Add(LinksJsonPropertyName, links__.AsAny);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets $ref.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ResponseOrReference WithRef(in Corvus.Json.JsonUriReference value)
        {
            return this.SetProperty(RefJsonPropertyName, value);
        }

        /// <summary>
        /// Sets summary.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ResponseOrReference WithSummary(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(SummaryJsonPropertyName, value);
        }

        /// <summary>
        /// Sets description.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ResponseOrReference WithDescription(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(DescriptionJsonPropertyName, value);
        }

        /// <summary>
        /// Sets headers.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ResponseOrReference WithHeaders(in Menes.OpenApiSchema.V31.Document.Response.HeadersEntity value)
        {
            return this.SetProperty(HeadersJsonPropertyName, value);
        }

        /// <summary>
        /// Sets content.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ResponseOrReference WithContent(in Menes.OpenApiSchema.V31.Document.Content value)
        {
            return this.SetProperty(ContentJsonPropertyName, value);
        }

        /// <summary>
        /// Sets links.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ResponseOrReference WithLinks(in Menes.OpenApiSchema.V31.Document.Response.LinksEntity value)
        {
            return this.SetProperty(LinksJsonPropertyName, value);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
            }
            else
            {
            }

            propertyValidator = null;
            return false;
        }
    }
}