//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.OpenApiSchema.V31;
public readonly partial struct Document
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct EncodingEntity
    {
        /// <summary>
        /// JSON property name for <see cref = "Explode"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ExplodeUtf8JsonPropertyName = new byte[]{101, 120, 112, 108, 111, 100, 101};
        /// <summary>
        /// JSON property name for <see cref = "Explode"/>.
        /// </summary>
        public const string ExplodeJsonPropertyName = "explode";
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentTypeUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101};
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public const string ContentTypeJsonPropertyName = "contentType";
        /// <summary>
        /// JSON property name for <see cref = "Headers"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> HeadersUtf8JsonPropertyName = new byte[]{104, 101, 97, 100, 101, 114, 115};
        /// <summary>
        /// JSON property name for <see cref = "Headers"/>.
        /// </summary>
        public const string HeadersJsonPropertyName = "headers";
        /// <summary>
        /// JSON property name for <see cref = "Style"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> StyleUtf8JsonPropertyName = new byte[]{115, 116, 121, 108, 101};
        /// <summary>
        /// JSON property name for <see cref = "Style"/>.
        /// </summary>
        public const string StyleJsonPropertyName = "style";
        /// <summary>
        /// JSON property name for <see cref = "AllowReserved"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> AllowReservedUtf8JsonPropertyName = new byte[]{97, 108, 108, 111, 119, 82, 101, 115, 101, 114, 118, 101, 100};
        /// <summary>
        /// JSON property name for <see cref = "AllowReserved"/>.
        /// </summary>
        public const string AllowReservedJsonPropertyName = "allowReserved";
        /// <summary>
        /// Gets Explode.
        /// </summary>
        public Corvus.Json.JsonBoolean Explode
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ExplodeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonBoolean(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ExplodeJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonBoolean>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets ContentType.
        /// </summary>
        public Corvus.Json.JsonString ContentType
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ContentTypeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ContentTypeJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Headers.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.EncodingEntity.HeadersEntity Headers
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(HeadersUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.EncodingEntity.HeadersEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(HeadersJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.EncodingEntity.HeadersEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Style.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.EncodingEntity.StyleEntity Style
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(StyleUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.EncodingEntity.StyleEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(StyleJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.EncodingEntity.StyleEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets AllowReserved.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.EncodingEntity.AllowReservedEntity AllowReserved
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(AllowReservedUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.EncodingEntity.AllowReservedEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(AllowReservedJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.EncodingEntity.AllowReservedEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "EncodingEntity"/>.
        /// </summary>
        public static EncodingEntity Create(Corvus.Json.JsonBoolean? explode = null, Corvus.Json.JsonString? contentType = null, Menes.OpenApiSchema.V31.Document.EncodingEntity.HeadersEntity? headers = null, Menes.OpenApiSchema.V31.Document.EncodingEntity.StyleEntity? style = null, Menes.OpenApiSchema.V31.Document.EncodingEntity.AllowReservedEntity? allowReserved = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            if (explode is Corvus.Json.JsonBoolean explode__)
            {
                builder.Add(ExplodeJsonPropertyName, explode__.AsAny);
            }

            if (contentType is Corvus.Json.JsonString contentType__)
            {
                builder.Add(ContentTypeJsonPropertyName, contentType__.AsAny);
            }

            if (headers is Menes.OpenApiSchema.V31.Document.EncodingEntity.HeadersEntity headers__)
            {
                builder.Add(HeadersJsonPropertyName, headers__.AsAny);
            }

            if (style is Menes.OpenApiSchema.V31.Document.EncodingEntity.StyleEntity style__)
            {
                builder.Add(StyleJsonPropertyName, style__.AsAny);
            }

            if (allowReserved is Menes.OpenApiSchema.V31.Document.EncodingEntity.AllowReservedEntity allowReserved__)
            {
                builder.Add(AllowReservedJsonPropertyName, allowReserved__.AsAny);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets explode.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithExplode(in Corvus.Json.JsonBoolean value)
        {
            return this.SetProperty(ExplodeJsonPropertyName, value);
        }

        /// <summary>
        /// Sets contentType.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithContentType(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(ContentTypeJsonPropertyName, value);
        }

        /// <summary>
        /// Sets headers.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithHeaders(in Menes.OpenApiSchema.V31.Document.EncodingEntity.HeadersEntity value)
        {
            return this.SetProperty(HeadersJsonPropertyName, value);
        }

        /// <summary>
        /// Sets style.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithStyle(in Menes.OpenApiSchema.V31.Document.EncodingEntity.StyleEntity value)
        {
            return this.SetProperty(StyleJsonPropertyName, value);
        }

        /// <summary>
        /// Sets allowReserved.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithAllowReserved(in Menes.OpenApiSchema.V31.Document.EncodingEntity.AllowReservedEntity value)
        {
            return this.SetProperty(AllowReservedJsonPropertyName, value);
        }

        private static ValidationContext __CorvusValidateExplode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonBoolean>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateContentType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateHeaders(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.EncodingEntity.HeadersEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateStyle(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.EncodingEntity.StyleEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateAllowReserved(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.EncodingEntity.AllowReservedEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(ExplodeUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateExplode;
                    return true;
                }
                else if (property.NameEquals(ContentTypeUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateContentType;
                    return true;
                }
                else if (property.NameEquals(HeadersUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateHeaders;
                    return true;
                }
                else if (property.NameEquals(StyleUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateStyle;
                    return true;
                }
                else if (property.NameEquals(AllowReservedUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateAllowReserved;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(ExplodeJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateExplode;
                    return true;
                }
                else if (property.NameEquals(ContentTypeJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateContentType;
                    return true;
                }
                else if (property.NameEquals(HeadersJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateHeaders;
                    return true;
                }
                else if (property.NameEquals(StyleJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateStyle;
                    return true;
                }
                else if (property.NameEquals(AllowReservedJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateAllowReserved;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}