//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.OpenApiSchema.V31;
public readonly partial struct Document
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct Info
    {
        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TitleUtf8JsonPropertyName = new byte[]{116, 105, 116, 108, 101};
        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public const string TitleJsonPropertyName = "title";
        /// <summary>
        /// JSON property name for <see cref = "Version"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> VersionUtf8JsonPropertyName = new byte[]{118, 101, 114, 115, 105, 111, 110};
        /// <summary>
        /// JSON property name for <see cref = "Version"/>.
        /// </summary>
        public const string VersionJsonPropertyName = "version";
        /// <summary>
        /// JSON property name for <see cref = "Summary"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SummaryUtf8JsonPropertyName = new byte[]{115, 117, 109, 109, 97, 114, 121};
        /// <summary>
        /// JSON property name for <see cref = "Summary"/>.
        /// </summary>
        public const string SummaryJsonPropertyName = "summary";
        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public const string DescriptionJsonPropertyName = "description";
        /// <summary>
        /// JSON property name for <see cref = "TermsOfService"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> TermsOfServiceUtf8JsonPropertyName = new byte[]{116, 101, 114, 109, 115, 79, 102, 83, 101, 114, 118, 105, 99, 101};
        /// <summary>
        /// JSON property name for <see cref = "TermsOfService"/>.
        /// </summary>
        public const string TermsOfServiceJsonPropertyName = "termsOfService";
        /// <summary>
        /// JSON property name for <see cref = "Contact"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContactUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 97, 99, 116};
        /// <summary>
        /// JSON property name for <see cref = "Contact"/>.
        /// </summary>
        public const string ContactJsonPropertyName = "contact";
        /// <summary>
        /// JSON property name for <see cref = "License"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> LicenseUtf8JsonPropertyName = new byte[]{108, 105, 99, 101, 110, 115, 101};
        /// <summary>
        /// JSON property name for <see cref = "License"/>.
        /// </summary>
        public const string LicenseJsonPropertyName = "license";
        /// <summary>
        /// Gets Title.
        /// </summary>
        public Corvus.Json.JsonString Title
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(TitleUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(TitleJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Version.
        /// </summary>
        public Corvus.Json.JsonString Version
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(VersionUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(VersionJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Summary.
        /// </summary>
        public Corvus.Json.JsonString Summary
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(SummaryUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(SummaryJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Description.
        /// </summary>
        public Corvus.Json.JsonString Description
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets TermsOfService.
        /// </summary>
        public Corvus.Json.JsonUri TermsOfService
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(TermsOfServiceUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUri(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(TermsOfServiceJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUri>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Contact.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.Contact Contact
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ContactUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.Contact(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ContactJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.Contact>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets License.
        /// </summary>
        public Menes.OpenApiSchema.V31.Document.License License
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(LicenseUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Menes.OpenApiSchema.V31.Document.License(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(LicenseJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Menes.OpenApiSchema.V31.Document.License>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "Info"/>.
        /// </summary>
        public static Info Create(Corvus.Json.JsonString title, Corvus.Json.JsonString version, Corvus.Json.JsonString? summary = null, Corvus.Json.JsonString? description = null, Corvus.Json.JsonUri? termsOfService = null, Menes.OpenApiSchema.V31.Document.Contact? contact = null, Menes.OpenApiSchema.V31.Document.License? license = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            builder.Add(TitleJsonPropertyName, title.AsAny);
            builder.Add(VersionJsonPropertyName, version.AsAny);
            if (summary is Corvus.Json.JsonString summary__)
            {
                builder.Add(SummaryJsonPropertyName, summary__.AsAny);
            }

            if (description is Corvus.Json.JsonString description__)
            {
                builder.Add(DescriptionJsonPropertyName, description__.AsAny);
            }

            if (termsOfService is Corvus.Json.JsonUri termsOfService__)
            {
                builder.Add(TermsOfServiceJsonPropertyName, termsOfService__.AsAny);
            }

            if (contact is Menes.OpenApiSchema.V31.Document.Contact contact__)
            {
                builder.Add(ContactJsonPropertyName, contact__.AsAny);
            }

            if (license is Menes.OpenApiSchema.V31.Document.License license__)
            {
                builder.Add(LicenseJsonPropertyName, license__.AsAny);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets title.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithTitle(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(TitleJsonPropertyName, value);
        }

        /// <summary>
        /// Sets version.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithVersion(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(VersionJsonPropertyName, value);
        }

        /// <summary>
        /// Sets summary.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithSummary(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(SummaryJsonPropertyName, value);
        }

        /// <summary>
        /// Sets description.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithDescription(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(DescriptionJsonPropertyName, value);
        }

        /// <summary>
        /// Sets termsOfService.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithTermsOfService(in Corvus.Json.JsonUri value)
        {
            return this.SetProperty(TermsOfServiceJsonPropertyName, value);
        }

        /// <summary>
        /// Sets contact.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithContact(in Menes.OpenApiSchema.V31.Document.Contact value)
        {
            return this.SetProperty(ContactJsonPropertyName, value);
        }

        /// <summary>
        /// Sets license.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithLicense(in Menes.OpenApiSchema.V31.Document.License value)
        {
            return this.SetProperty(LicenseJsonPropertyName, value);
        }

        private static ValidationContext __CorvusValidateTitle(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateVersion(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateSummary(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateTermsOfService(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonUri>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateContact(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.Contact>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateLicense(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Menes.OpenApiSchema.V31.Document.License>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(TitleUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateTitle;
                    return true;
                }
                else if (property.NameEquals(VersionUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateVersion;
                    return true;
                }
                else if (property.NameEquals(SummaryUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateSummary;
                    return true;
                }
                else if (property.NameEquals(DescriptionUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateDescription;
                    return true;
                }
                else if (property.NameEquals(TermsOfServiceUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateTermsOfService;
                    return true;
                }
                else if (property.NameEquals(ContactUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateContact;
                    return true;
                }
                else if (property.NameEquals(LicenseUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateLicense;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(TitleJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateTitle;
                    return true;
                }
                else if (property.NameEquals(VersionJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateVersion;
                    return true;
                }
                else if (property.NameEquals(SummaryJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateSummary;
                    return true;
                }
                else if (property.NameEquals(DescriptionJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateDescription;
                    return true;
                }
                else if (property.NameEquals(TermsOfServiceJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateTermsOfService;
                    return true;
                }
                else if (property.NameEquals(ContactJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateContact;
                    return true;
                }
                else if (property.NameEquals(LicenseJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateLicense;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}