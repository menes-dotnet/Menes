<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Menes.Json" #>
<#@ import namespace="Menes.OpenApi" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace <#= Namespace #>
{
    using System;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Menes.OpenApi.Services;
    using Microsoft.AspNetCore.Http;

    public readonly struct <#= OperationName #>
    {
    <#
    if (HasRequestBodyParameter)
    {
    #>
        <#
        foreach(var mediaType in RequestBodyMediaTypes)
        {
        #>
        /// <summary>
        /// Gets the media type for the <#= mediaType.RequestBodyParameterName #> parameter.
        /// </summary
        public const Regex <#= mediaType.RequestBodyParameterName #>MediaType = new Regex(<#= Formatting.FormatLiteralOrNull(mediaType.RegexValue) #>, RegexOptions.Compiled);
        <#
        }
        #>
    <#
    }
    #>

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= OperationName #>"/> class.
        /// </summary>
        /// <param name="request">The see cref="HttpContext"/> over which to create the operation.</param>
        public <#= OperationName #>(HttpContext context)
        {
            this.Context = context;
        }

        /// <summary>
        /// Gets the <see cref="HttpContext"/> for the operation.
        /// </summary>
        public HttpContext Context { get; }

    <#
    if (HasRequestBodyParameter)
    {
    #>
        <#
        foreach(var mediaType in RequestBodyMediaTypes)
        {
        #>
        /// <summary>
        /// Gets the <#= RequestBodyParameterName #> as a <see cref="<#= mediaType.RequestBodyFullyQualifiedDotnetTypeName #>" />.
        /// </summary>
        public <#= mediaType.RequestBodyFullyQualifiedDotnetTypeName #> <#= mediaType.RequestBodyParameterName #>>
        {
            get
            {
                return new <#= mediaType.RequestBodyFullyQualifiedDotnetTypeName #>(Service.GetRequestBodyJsonDocument(this.Context).RootElement);
            }
        }

            <#
            if (HasMultipleRequestBodyMediaTypes)
            {
            #>
        /// <summary>
        /// Gets a value indicating whether the <#= RequestBodyParameterName #> is a <see cref="<#= mediaType.RequestBodyFullyQualifiedDotnetTypeName #>" />.
        /// </summary>
        public bool Has<#= mediaType.RequestBodyParameterName #>>
        {
            get
            {
                return Service.MatchMediaType(<#= mediaType.RequestBodyParameterName #>MediaType);
            }
        }

            <#
            }
            #>
        <#
        }
        #>
    <#
    }
    #>

    }
}