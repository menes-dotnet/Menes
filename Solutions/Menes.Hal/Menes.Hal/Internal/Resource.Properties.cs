//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.Hal;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Resource
{
    /// <summary>
    /// JSON property name for <see cref = "Links"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> LinksUtf8JsonPropertyName = new byte[]{95, 108, 105, 110, 107, 115};
    /// <summary>
    /// JSON property name for <see cref = "Links"/>.
    /// </summary>
    public const string LinksJsonPropertyName = "_links";
    /// <summary>
    /// JSON property name for <see cref = "ContentType"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ContentTypeUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101};
    /// <summary>
    /// JSON property name for <see cref = "ContentType"/>.
    /// </summary>
    public const string ContentTypeJsonPropertyName = "contentType";
    /// <summary>
    /// JSON property name for <see cref = "Embedded"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> EmbeddedUtf8JsonPropertyName = new byte[]{95, 101, 109, 98, 101, 100, 100, 101, 100};
    /// <summary>
    /// JSON property name for <see cref = "Embedded"/>.
    /// </summary>
    public const string EmbeddedJsonPropertyName = "_embedded";
    /// <summary>
    /// Gets Links.
    /// </summary>
    public Menes.Hal.LinksProperty Links
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LinksUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Menes.Hal.LinksProperty(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LinksJsonPropertyName, out JsonAny result))
                {
                    return result.As<Menes.Hal.LinksProperty>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ContentType.
    /// </summary>
    public Corvus.Json.JsonString ContentType
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ContentTypeUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ContentTypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Embedded.
    /// </summary>
    public Menes.Hal.EmbeddedProperty Embedded
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmbeddedUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Menes.Hal.EmbeddedProperty(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmbeddedJsonPropertyName, out JsonAny result))
                {
                    return result.As<Menes.Hal.EmbeddedProperty>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Resource"/>.
    /// </summary>
    public static Resource Create(Menes.Hal.LinksProperty links, Corvus.Json.JsonString? contentType = null, Menes.Hal.EmbeddedProperty? embedded = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(LinksJsonPropertyName, links.AsAny);
        if (contentType is Corvus.Json.JsonString contentType__)
        {
            builder.Add(ContentTypeJsonPropertyName, contentType__.AsAny);
        }

        if (embedded is Menes.Hal.EmbeddedProperty embedded__)
        {
            builder.Add(EmbeddedJsonPropertyName, embedded__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets _links.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Resource WithLinks(in Menes.Hal.LinksProperty value)
    {
        return this.SetProperty(LinksJsonPropertyName, value);
    }

    /// <summary>
    /// Sets contentType.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Resource WithContentType(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ContentTypeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets _embedded.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Resource WithEmbedded(in Menes.Hal.EmbeddedProperty value)
    {
        return this.SetProperty(EmbeddedJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateLinks(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Menes.Hal.LinksProperty>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateContentType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmbedded(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Menes.Hal.EmbeddedProperty>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(LinksUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateLinks;
                return true;
            }
            else if (property.NameEquals(ContentTypeUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateContentType;
                return true;
            }
            else if (property.NameEquals(EmbeddedUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateEmbedded;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(LinksJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLinks;
                return true;
            }
            else if (property.NameEquals(ContentTypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateContentType;
                return true;
            }
            else if (property.NameEquals(EmbeddedJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmbedded;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}