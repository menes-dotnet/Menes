//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.Hal;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Link
{
    /// <summary>
    /// JSON property name for <see cref = "Href"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> HrefUtf8JsonPropertyName = new byte[]{104, 114, 101, 102};
    /// <summary>
    /// JSON property name for <see cref = "Href"/>.
    /// </summary>
    public const string HrefJsonPropertyName = "href";
    /// <summary>
    /// JSON property name for <see cref = "Templated"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> TemplatedUtf8JsonPropertyName = new byte[]{116, 101, 109, 112, 108, 97, 116, 101, 100};
    /// <summary>
    /// JSON property name for <see cref = "Templated"/>.
    /// </summary>
    public const string TemplatedJsonPropertyName = "templated";
    /// <summary>
    /// JSON property name for <see cref = "Type"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
    /// <summary>
    /// JSON property name for <see cref = "Type"/>.
    /// </summary>
    public const string TypeJsonPropertyName = "type";
    /// <summary>
    /// JSON property name for <see cref = "Name"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
    /// <summary>
    /// JSON property name for <see cref = "Name"/>.
    /// </summary>
    public const string NameJsonPropertyName = "name";
    /// <summary>
    /// JSON property name for <see cref = "Profile"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ProfileUtf8JsonPropertyName = new byte[]{112, 114, 111, 102, 105, 108, 101};
    /// <summary>
    /// JSON property name for <see cref = "Profile"/>.
    /// </summary>
    public const string ProfileJsonPropertyName = "profile";
    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> DescriptionUtf8JsonPropertyName = new byte[]{100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110};
    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public const string DescriptionJsonPropertyName = "description";
    /// <summary>
    /// JSON property name for <see cref = "Hreflang"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> HreflangUtf8JsonPropertyName = new byte[]{104, 114, 101, 102, 108, 97, 110, 103};
    /// <summary>
    /// JSON property name for <see cref = "Hreflang"/>.
    /// </summary>
    public const string HreflangJsonPropertyName = "hreflang";
    /// <summary>
    /// Gets Href.
    /// </summary>
    public Corvus.Json.JsonString Href
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HrefUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HrefJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Templated.
    /// </summary>
    public Menes.Hal.Link.TemplatedEntity Templated
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TemplatedUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Menes.Hal.Link.TemplatedEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TemplatedJsonPropertyName, out JsonAny result))
                {
                    return result.As<Menes.Hal.Link.TemplatedEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Type.
    /// </summary>
    public Menes.Hal.Link.TypeEntity Type
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Menes.Hal.Link.TypeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Menes.Hal.Link.TypeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Name.
    /// </summary>
    public Corvus.Json.JsonString Name
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(NameJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Profile.
    /// </summary>
    public Corvus.Json.JsonUri Profile
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProfileUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonUri(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProfileJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonUri>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Description.
    /// </summary>
    public Corvus.Json.JsonString Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Hreflang.
    /// </summary>
    public Menes.Hal.Link.HreflangEntity Hreflang
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HreflangUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Menes.Hal.Link.HreflangEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HreflangJsonPropertyName, out JsonAny result))
                {
                    return result.As<Menes.Hal.Link.HreflangEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Link"/>.
    /// </summary>
    public static Link Create(Corvus.Json.JsonString href, Menes.Hal.Link.TemplatedEntity? templated = null, Menes.Hal.Link.TypeEntity? type = null, Corvus.Json.JsonString? name = null, Corvus.Json.JsonUri? profile = null, Corvus.Json.JsonString? description = null, Menes.Hal.Link.HreflangEntity? hreflang = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(HrefJsonPropertyName, href.AsAny);
        if (templated is Menes.Hal.Link.TemplatedEntity templated__)
        {
            builder.Add(TemplatedJsonPropertyName, templated__.AsAny);
        }

        if (type is Menes.Hal.Link.TypeEntity type__)
        {
            builder.Add(TypeJsonPropertyName, type__.AsAny);
        }

        if (name is Corvus.Json.JsonString name__)
        {
            builder.Add(NameJsonPropertyName, name__.AsAny);
        }

        if (profile is Corvus.Json.JsonUri profile__)
        {
            builder.Add(ProfileJsonPropertyName, profile__.AsAny);
        }

        if (description is Corvus.Json.JsonString description__)
        {
            builder.Add(DescriptionJsonPropertyName, description__.AsAny);
        }

        if (hreflang is Menes.Hal.Link.HreflangEntity hreflang__)
        {
            builder.Add(HreflangJsonPropertyName, hreflang__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets href.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Link WithHref(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HrefJsonPropertyName, value);
    }

    /// <summary>
    /// Sets templated.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Link WithTemplated(in Menes.Hal.Link.TemplatedEntity value)
    {
        return this.SetProperty(TemplatedJsonPropertyName, value);
    }

    /// <summary>
    /// Sets type.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Link WithType(in Menes.Hal.Link.TypeEntity value)
    {
        return this.SetProperty(TypeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets name.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Link WithName(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(NameJsonPropertyName, value);
    }

    /// <summary>
    /// Sets profile.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Link WithProfile(in Corvus.Json.JsonUri value)
    {
        return this.SetProperty(ProfileJsonPropertyName, value);
    }

    /// <summary>
    /// Sets description.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Link WithDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(DescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets hreflang.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Link WithHreflang(in Menes.Hal.Link.HreflangEntity value)
    {
        return this.SetProperty(HreflangJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateHref(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTemplated(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Menes.Hal.Link.TemplatedEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Menes.Hal.Link.TypeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProfile(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonUri>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHreflang(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Menes.Hal.Link.HreflangEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(HrefUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateHref;
                return true;
            }
            else if (property.NameEquals(TemplatedUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateTemplated;
                return true;
            }
            else if (property.NameEquals(TypeUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
            else if (property.NameEquals(NameUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateName;
                return true;
            }
            else if (property.NameEquals(ProfileUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateProfile;
                return true;
            }
            else if (property.NameEquals(DescriptionUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(HreflangUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateHreflang;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(HrefJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHref;
                return true;
            }
            else if (property.NameEquals(TemplatedJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTemplated;
                return true;
            }
            else if (property.NameEquals(TypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
            else if (property.NameEquals(NameJsonPropertyName))
            {
                propertyValidator = __CorvusValidateName;
                return true;
            }
            else if (property.NameEquals(ProfileJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProfile;
                return true;
            }
            else if (property.NameEquals(DescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(HreflangJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHreflang;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}