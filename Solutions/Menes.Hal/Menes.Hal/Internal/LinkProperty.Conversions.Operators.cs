//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Menes.Hal;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct LinkProperty
{
    /// <summary>
    /// Conversion from <see cref = "Menes.Hal.Link"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator LinkProperty(Menes.Hal.Link value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Menes.Hal.Link"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Menes.Hal.Link(LinkProperty value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return Menes.Hal.Link.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Menes.Hal.LinkCollection"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator LinkProperty(Menes.Hal.LinkCollection value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Array => new((ImmutableList<JsonAny>)value),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Menes.Hal.LinkCollection"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Menes.Hal.LinkCollection(LinkProperty value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Array) != 0)
        {
            return new(value.arrayBacking);
        }

        return Menes.Hal.LinkCollection.Undefined;
    }
}