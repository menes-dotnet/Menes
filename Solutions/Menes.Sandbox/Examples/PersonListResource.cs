// <copyright file="PersonListResource.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

#pragma warning disable SA1600, CS1591, SA1028, SA1107, SA1516, SA1513, SA1501, SA1119, IDE0007

namespace OtherExamples
{
    public readonly struct PersonListResource : Menes.IJsonObject, System.IEquatable<PersonListResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly PersonListResource Null = new PersonListResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource> FromJsonElement = e => new PersonListResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public PersonListResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public PersonListResource(PersonListResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonListResource(PersonListResource.LinksEntity links, Menes.JsonString? contentType, PersonListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public PersonListResource(PersonListResource.LinksEntity links, Menes.JsonString? contentType, PersonListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public PersonListResource(PersonListResource.LinksEntity links, Menes.JsonString? contentType = null, PersonListResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonListResource(PersonListResource.LinksEntity links, Menes.JsonString? contentType, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public PersonListResource(PersonListResource.LinksEntity links, Menes.JsonString? contentType, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public PersonListResource(PersonListResource.LinksEntity links, Menes.JsonString? contentType, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public PersonListResource(PersonListResource.LinksEntity links, Menes.JsonString? contentType, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is PersonListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private PersonListResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public PersonListResource? AsOptional => this.IsNull ? default(PersonListResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public PersonListResource.LinksEntity Links => this.links?.AsValue<PersonListResource.LinksEntity>() ?? PersonListResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public PersonListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<PersonListResource.EmbeddedEntity>() ?? PersonListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static PersonListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonListResource(property)
                    : Null)
                : Null;
        public static PersonListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonListResource(property)
                    : Null)
                : Null;
        public static PersonListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new PersonListResource(property)
                    : Null)
            : Null;
        public PersonListResource WithContentType(Menes.JsonString? value)
        {
            return new PersonListResource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PersonListResource WithLinks(PersonListResource.LinksEntity value)
        {
            return new PersonListResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PersonListResource WithEmbedded(PersonListResource.EmbeddedEntity? value)
        {
            return new PersonListResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public PersonListResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public PersonListResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public PersonListResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public PersonListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public PersonListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public PersonListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public PersonListResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonListResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(PersonListResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is PersonListResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext3 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext4 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            PersonListResource.PersonListResourceEntity personListResourceEntityValue1 = thisAsAny.As<PersonListResource.PersonListResourceEntity>();
            allOfValidationContext2 = personListResourceEntityValue1.Validate(allOfValidationContext2);
            PagedListResource pagedListResourceValue2 = thisAsAny.As<PagedListResource>();
            allOfValidationContext3 = pagedListResourceValue2.Validate(allOfValidationContext3);
            PersonListResource.PersonListResourceEntity personListResourceEntityValue3 = thisAsAny.As<PersonListResource.PersonListResourceEntity>();
            allOfValidationContext4 = personListResourceEntityValue3.Validate(allOfValidationContext4);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2, allOfValidationContext3, allOfValidationContext4);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PersonListResource.LinksEntity>, Menes.IJsonAdditionalProperties<PersonListResource.PropertiesEntity>
        {
            public static readonly PersonListResource.LinksEntity Null = new PersonListResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.LinksEntity> FromJsonElement = e => new PersonListResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string ItemsPropertyNamePath = ".items";
            private const string NextPropertyNamePath = ".next";
            private const string PrevPropertyNamePath = ".prev";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
            private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonReference? next;
            private readonly Menes.JsonReference? prev;
            private readonly Menes.JsonProperties<PersonListResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.items = null;
                this.next = null;
                this.prev = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                this.next = null;
                this.prev = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<PersonListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, params (string, PersonListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next = null, Link? prev = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PropertiesEntity) additionalProperty1, (string, PersonListResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PropertiesEntity) additionalProperty1, (string, PersonListResource.PropertiesEntity) additionalProperty2, (string, PersonListResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PropertiesEntity) additionalProperty1, (string, PersonListResource.PropertiesEntity) additionalProperty2, (string, PersonListResource.PropertiesEntity) additionalProperty3, (string, PersonListResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<PersonListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (items is Menes.JsonReference item2)
                {
                    this.items = item2;
                }
                else
                {
                    this.items = null;
                }
                if (next is Menes.JsonReference item3)
                {
                    this.next = item3;
                }
                else
                {
                    this.next = null;
                }
                if (prev is Menes.JsonReference item4)
                {
                    this.prev = item4;
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
            public PersonListResource.LinksEntity? AsOptional => this.IsNull ? default(PersonListResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
            public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
            public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.LinksEntity(property)
                        : Null)
                : Null;
            public PersonListResource.LinksEntity WithSelf(Link value)
            {
                return new PersonListResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetItems(), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public PersonListResource.LinksEntity WithItems(LinkCollection value)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public PersonListResource.LinksEntity WithNext(Link? value)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
            }
            public PersonListResource.LinksEntity WithPrev(Link? value)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonListResource.LinksEntity ReplaceAll(Menes.JsonProperties<PersonListResource.PropertiesEntity> newAdditional)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
            }
            public PersonListResource.LinksEntity ReplaceAll(params (string, PersonListResource.PropertiesEntity)[] newAdditional)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonListResource.LinksEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonListResource.LinksEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1, (string, PersonListResource.PropertiesEntity) newAdditional2)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonListResource.LinksEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1, (string, PersonListResource.PropertiesEntity) newAdditional2, (string, PersonListResource.PropertiesEntity) newAdditional3)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonListResource.LinksEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1, (string, PersonListResource.PropertiesEntity) newAdditional2, (string, PersonListResource.PropertiesEntity) newAdditional3, (string, PersonListResource.PropertiesEntity) newAdditional4)
            {
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonListResource.LinksEntity Add(params (string, PersonListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(name, value));
                }
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PropertiesEntity value) newAdditional2, (string name, PersonListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PropertiesEntity value) newAdditional2, (string name, PersonListResource.PropertiesEntity value) newAdditional3, (string name, PersonListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    if (this.next is Menes.JsonReference next)
                    {
                        writer.WritePropertyName(EncodedNextPropertyName);
                        next.WriteTo(writer);
                    }
                    if (this.prev is Menes.JsonReference prev)
                    {
                        writer.WritePropertyName(EncodedPrevPropertyName);
                        prev.WriteTo(writer);
                    }
                    Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonListResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                if (this.Next is Link next)
                {
                    context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                }
                if (this.Prev is Link prev)
                {
                    context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNext()
            {
                if (this.next is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetPrev()
            {
                if (this.prev is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PersonListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new PersonListResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<PersonListResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<PersonListResource.PropertiesEntity>
        {
            public static readonly PersonListResource.EmbeddedEntity Null = new PersonListResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.EmbeddedEntity> FromJsonElement = e => new PersonListResource.EmbeddedEntity(e);
            private const string ItemsPropertyNamePath = ".items";
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes);
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonProperties<PersonListResource.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.items = null;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonListResource.ItemsArray? items, Menes.JsonProperties<PersonListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (items is PersonListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public EmbeddedEntity(PersonListResource.ItemsArray? items, params (string, PersonListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (items is PersonListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity(PersonListResource.ItemsArray? items = null)
            {
                if (items is PersonListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonListResource.ItemsArray? items, (string, PersonListResource.PropertiesEntity) additionalProperty1)
            {
                if (items is PersonListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity(PersonListResource.ItemsArray? items, (string, PersonListResource.PropertiesEntity) additionalProperty1, (string, PersonListResource.PropertiesEntity) additionalProperty2)
            {
                if (items is PersonListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity(PersonListResource.ItemsArray? items, (string, PersonListResource.PropertiesEntity) additionalProperty1, (string, PersonListResource.PropertiesEntity) additionalProperty2, (string, PersonListResource.PropertiesEntity) additionalProperty3)
            {
                if (items is PersonListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity(PersonListResource.ItemsArray? items, (string, PersonListResource.PropertiesEntity) additionalProperty1, (string, PersonListResource.PropertiesEntity) additionalProperty2, (string, PersonListResource.PropertiesEntity) additionalProperty3, (string, PersonListResource.PropertiesEntity) additionalProperty4)
            {
                if (items is PersonListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonReference? items, Menes.JsonProperties<PersonListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (items is Menes.JsonReference item1)
                {
                    this.items = item1;
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull);
            public PersonListResource.EmbeddedEntity? AsOptional => this.IsNull ? default(PersonListResource.EmbeddedEntity?) : this;
            public PersonListResource.ItemsArray? Items => this.items?.AsValue<PersonListResource.ItemsArray>() ?? PersonListResource.ItemsArray.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public PersonListResource.EmbeddedEntity WithItems(PersonListResource.ItemsArray? value)
            {
                return new PersonListResource.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonListResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<PersonListResource.PropertiesEntity> newAdditional)
            {
                return new PersonListResource.EmbeddedEntity(this.GetItems(), newAdditional);
            }
            public PersonListResource.EmbeddedEntity ReplaceAll(params (string, PersonListResource.PropertiesEntity)[] newAdditional)
            {
                return new PersonListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonListResource.EmbeddedEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1)
            {
                return new PersonListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonListResource.EmbeddedEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1, (string, PersonListResource.PropertiesEntity) newAdditional2)
            {
                return new PersonListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonListResource.EmbeddedEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1, (string, PersonListResource.PropertiesEntity) newAdditional2, (string, PersonListResource.PropertiesEntity) newAdditional3)
            {
                return new PersonListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonListResource.EmbeddedEntity ReplaceAll((string, PersonListResource.PropertiesEntity) newAdditional1, (string, PersonListResource.PropertiesEntity) newAdditional2, (string, PersonListResource.PropertiesEntity) newAdditional3, (string, PersonListResource.PropertiesEntity) newAdditional4)
            {
                return new PersonListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonListResource.EmbeddedEntity Add(params (string, PersonListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(name, value));
                }
                return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PropertiesEntity value) newAdditional2, (string name, PersonListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Add((string name, PersonListResource.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PropertiesEntity value) newAdditional2, (string name, PersonListResource.PropertiesEntity value) newAdditional3, (string name, PersonListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    Menes.JsonProperties<PersonListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonListResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Items.Equals(other.Items) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                if (this.Items is PersonListResource.ItemsArray items)
                {
                    context = Menes.Validation.ValidateProperty(context, items, ItemsPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference? GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PersonListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new PersonListResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct PersonListResourceEntity : Menes.IJsonObject, System.IEquatable<PersonListResource.PersonListResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly PersonListResource.PersonListResourceEntity Null = new PersonListResource.PersonListResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.PersonListResourceEntity> FromJsonElement = e => new PersonListResource.PersonListResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private const string EmbeddedPropertyNamePath = "._embedded";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonReference? embedded;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public PersonListResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.embedded = null;
                this.additionalPropertiesBacking = null;
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.embedded = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links, PersonListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links, PersonListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links, PersonListResource.EmbeddedEntity? embedded = null)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public PersonListResourceEntity(PersonListResource.PersonListResourceEntity.LinksEntity links, PersonListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is PersonListResource.PersonListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private PersonListResourceEntity(Menes.JsonReference links, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                if (embedded is Menes.JsonReference item2)
                {
                    this.embedded = item2;
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
            public PersonListResource.PersonListResourceEntity? AsOptional => this.IsNull ? default(PersonListResource.PersonListResourceEntity?) : this;
            public PersonListResource.PersonListResourceEntity.LinksEntity Links => this.links?.AsValue<PersonListResource.PersonListResourceEntity.LinksEntity>() ?? PersonListResource.PersonListResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
            public PersonListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<PersonListResource.EmbeddedEntity>() ?? PersonListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonListResource.PersonListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.PersonListResourceEntity(property)
                        : Null)
                    : Null;
            public static PersonListResource.PersonListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.PersonListResourceEntity(property)
                        : Null)
                    : Null;
            public static PersonListResource.PersonListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonListResource.PersonListResourceEntity(property)
                        : Null)
                : Null;
            public PersonListResource.PersonListResourceEntity WithLinks(PersonListResource.PersonListResourceEntity.LinksEntity value)
            {
                return new PersonListResource.PersonListResourceEntity(Menes.JsonReference.FromValue(value), this.GetEmbedded(), this.GetJsonProperties());
            }
            public PersonListResource.PersonListResourceEntity WithEmbedded(PersonListResource.EmbeddedEntity? value)
            {
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonListResource.PersonListResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), newAdditional);
            }
            public PersonListResource.PersonListResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public PersonListResource.PersonListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public PersonListResource.PersonListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonListResource.PersonListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonListResource.PersonListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonListResource.PersonListResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonListResource.PersonListResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonListResource.PersonListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    if (this.embedded is Menes.JsonReference embedded)
                    {
                        writer.WritePropertyName(EncodedEmbeddedPropertyName);
                        embedded.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonListResource.PersonListResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
                if (this.Embedded is PersonListResource.EmbeddedEntity embedded)
                {
                    context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmbedded()
            {
                if (this.embedded is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PersonListResource.PersonListResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly PersonListResource.PersonListResourceEntity.LinksEntity Null = new PersonListResource.PersonListResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.PersonListResourceEntity.LinksEntity> FromJsonElement = e => new PersonListResource.PersonListResourceEntity.LinksEntity(e);
                private const string ItemsPropertyNamePath = ".items";
                private const string NextPropertyNamePath = ".next";
                private const string PrevPropertyNamePath = ".prev";
                private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
                private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
                private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
                private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
                private readonly Menes.JsonReference? items;
                private readonly Menes.JsonReference? next;
                private readonly Menes.JsonReference? prev;
                private readonly Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.items = null;
                    this.next = null;
                    this.prev = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    this.next = null;
                    this.prev = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, params (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(LinkCollection items, Link? next = null, Link? prev = null)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (items is Menes.JsonReference item1)
                    {
                        this.items = item1;
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Menes.JsonReference item2)
                    {
                        this.next = item2;
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Menes.JsonReference item3)
                    {
                        this.prev = item3;
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
                public PersonListResource.PersonListResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(PersonListResource.PersonListResourceEntity.LinksEntity?) : this;
                public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
                public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
                public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static PersonListResource.PersonListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonListResource.PersonListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PersonListResource.PersonListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonListResource.PersonListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PersonListResource.PersonListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PersonListResource.PersonListResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public PersonListResource.PersonListResourceEntity.LinksEntity WithItems(LinkCollection value)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity WithNext(Link? value)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity WithPrev(Link? value)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity ReplaceAll(params (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity ReplaceAll((string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity ReplaceAll((string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity ReplaceAll((string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity ReplaceAll((string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Add(params (string, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Add((string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Add((string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Add((string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Add((string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonListResource.PersonListResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonListResource.PersonListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.items is Menes.JsonReference items)
                        {
                            writer.WritePropertyName(EncodedItemsPropertyName);
                            items.WriteTo(writer);
                        }
                        if (this.next is Menes.JsonReference next)
                        {
                            writer.WritePropertyName(EncodedNextPropertyName);
                            next.WriteTo(writer);
                        }
                        if (this.prev is Menes.JsonReference prev)
                        {
                            writer.WritePropertyName(EncodedPrevPropertyName);
                            prev.WriteTo(writer);
                        }
                        Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(PersonListResource.PersonListResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                    if (this.Next is Link next)
                    {
                        context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                    }
                    if (this.Prev is Link prev)
                    {
                        context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetItems()
                {
                    if (this.items is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNext()
                {
                    if (this.next is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetPrev()
                {
                    if (this.prev is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new PersonListResource.PersonListResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonListResource.PropertiesEntity> FromJsonElement = e => new PersonListResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            private readonly Menes.JsonReference? item3;
            private readonly Menes.JsonReference? item4;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(Resource clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item3 = null;
                }
                else
                {
                    this.item3 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item4 = null;
            }
            public PropertiesEntity(ResourceCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item4 = null;
                }
                else
                {
                    this.item4 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && this.item3 is null && this.item4 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResource => this.item3 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResourceCollection => this.item4 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
            public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
            public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
            public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (Resource.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (ResourceCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public Resource AsResource() => this.item3?.AsValue<Resource>() ?? new Resource(this.JsonElement);
            public ResourceCollection AsResourceCollection() => this.item4?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else if (this.item3 is Menes.JsonReference item3)
                {
                    item3.WriteTo(writer);
                }
                else if (this.item4 is Menes.JsonReference item4)
                {
                    item4.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResource)
                {
                    builder.Append("{");
                    builder.Append("Resource");
                    builder.Append(", ");
                    builder.Append(this.AsResource().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResourceCollection)
                {
                    builder.Append("{");
                    builder.Append("ResourceCollection");
                    builder.Append(", ");
                    builder.Append(this.AsResourceCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext3 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext4 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                if (this.IsResource)
                {
                    validationContext3 = this.AsResource().Validate(validationContext3);
                }
                else
                {
                    validationContext3 = validationContext3.WithError("The value is not convertible to a Resource.");
                }
                if (this.IsResourceCollection)
                {
                    validationContext4 = this.AsResourceCollection().Validate(validationContext4);
                }
                else
                {
                    validationContext4 = validationContext4.WithError("The value is not convertible to a ResourceCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2, validationContext3, validationContext4);
            }
        }
        public readonly struct ItemsArray : Menes.IJsonValue, System.Collections.Generic.IEnumerable<PersonResource>, System.Collections.IEnumerable, System.IEquatable<ItemsArray>, System.IEquatable<Menes.JsonArray<PersonResource>>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, ItemsArray> FromJsonElement = e => new ItemsArray(e);
            public static readonly ItemsArray Null = new ItemsArray(default(System.Text.Json.JsonElement));
            private readonly Menes.JsonArray<PersonResource>? value;
            public ItemsArray(Menes.JsonArray<PersonResource> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = jsonArray;
                    this.JsonElement = default;
                }
            }
            public ItemsArray(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public int Length
            {
                get
                {
                    if (this.HasJsonElement)
                    {
                        return this.JsonElement.GetArrayLength();
                    }
                    if (this.value is Menes.JsonArray<PersonResource> value)
                    {
                        return value.Length;
                    }
                    return 0;
                }
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public ItemsArray? AsOptional => this.IsNull ? default(ItemsArray?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator ItemsArray(Menes.JsonArray<PersonResource> value)
            {
                return new ItemsArray(value);
            }
            public static implicit operator Menes.JsonArray<PersonResource>(ItemsArray value)
            {
                if (value.value is Menes.JsonArray<PersonResource> clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonArray<PersonResource>(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonArray<PersonResource>.IsConvertibleFrom(jsonElement);
            }
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public bool Equals(ItemsArray other)
            {
                return this.Equals((Menes.JsonArray<PersonResource>)other);
            }
            public bool Equals(Menes.JsonArray<PersonResource> other)
            {
                return ((Menes.JsonArray<PersonResource>)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonArray<PersonResource> array = this;
                Menes.ValidationContext context = validationContext;
                context = array.Validate(context);
                return array.ValidateItems(context);
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                if (this.value is Menes.JsonArray<PersonResource> clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public Menes.JsonArray<PersonResource>.JsonArrayEnumerator GetEnumerator()
            {
                return ((Menes.JsonArray<PersonResource>)this).GetEnumerator();
            }
            System.Collections.Generic.IEnumerator<PersonResource> System.Collections.Generic.IEnumerable<PersonResource>.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            public ItemsArray Add(params PersonResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                foreach (PersonResource item in items)
                {
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonResource item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonResource item1, in PersonResource item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonResource item1, in PersonResource item2, in PersonResource item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonResource item1, in PersonResource item2, in PersonResource item3, in PersonResource item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                arrayBuilder.Add(item4);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, params PersonResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                int index = 0;
                foreach (PersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        foreach (PersonResource itemToInsert in items)
                        {
                            arrayBuilder.Add(itemToInsert);
                        }
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonResource item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                int index = 0;
                foreach (PersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonResource item1, in PersonResource item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                int index = 0;
                foreach (PersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonResource item1, in PersonResource item2, in PersonResource item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                int index = 0;
                foreach (PersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonResource item1, in PersonResource item2, in PersonResource item3, in PersonResource item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                int index = 0;
                foreach (PersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                        arrayBuilder.Add(item4);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(params PersonResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    bool found = false;
                    foreach (PersonResource itemToRemove in items)
                    {
                        if (itemToRemove.Equals(item))
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        arrayBuilder.Add(item);
                    }
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonResource item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    if (item1.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonResource item1, PersonResource item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonResource item1, PersonResource item2, PersonResource item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonResource item1, PersonResource item2, PersonResource item3, PersonResource item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveAt(int indexToRemove)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                int index = 0;
                foreach (PersonResource item in this)
                {
                    if (index == indexToRemove)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveRange(int startIndex, int length)
            {
                if (startIndex < 0 || startIndex > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(startIndex));
                }
                if (length < 1 || startIndex + length > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(length));
                }
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                int index = 0;
                foreach (PersonResource item in this)
                {
                    if (index >= startIndex && index < startIndex + length)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(System.Predicate<PersonResource> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<PersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonResource>();
                foreach (PersonResource item in this)
                {
                    if (removeIfTrue(item))
                    {
                        continue;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
        }
    }
    public readonly struct PagedListResource : Menes.IJsonObject, System.IEquatable<PagedListResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly PagedListResource Null = new PagedListResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource> FromJsonElement = e => new PagedListResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public PagedListResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public PagedListResource(PagedListResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PagedListResource(PagedListResource.LinksEntity links, Menes.JsonString? contentType, PagedListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PagedListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public PagedListResource(PagedListResource.LinksEntity links, Menes.JsonString? contentType, PagedListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PagedListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public PagedListResource(PagedListResource.LinksEntity links, Menes.JsonString? contentType = null, PagedListResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PagedListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PagedListResource(PagedListResource.LinksEntity links, Menes.JsonString? contentType, PagedListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PagedListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public PagedListResource(PagedListResource.LinksEntity links, Menes.JsonString? contentType, PagedListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PagedListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public PagedListResource(PagedListResource.LinksEntity links, Menes.JsonString? contentType, PagedListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PagedListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public PagedListResource(PagedListResource.LinksEntity links, Menes.JsonString? contentType, PagedListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is PagedListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PagedListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private PagedListResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public PagedListResource? AsOptional => this.IsNull ? default(PagedListResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public PagedListResource.LinksEntity Links => this.links?.AsValue<PagedListResource.LinksEntity>() ?? PagedListResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public PagedListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<PagedListResource.EmbeddedEntity>() ?? PagedListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static PagedListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PagedListResource(property)
                    : Null)
                : Null;
        public static PagedListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PagedListResource(property)
                    : Null)
                : Null;
        public static PagedListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new PagedListResource(property)
                    : Null)
            : Null;
        public PagedListResource WithContentType(Menes.JsonString? value)
        {
            return new PagedListResource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PagedListResource WithLinks(PagedListResource.LinksEntity value)
        {
            return new PagedListResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PagedListResource WithEmbedded(PagedListResource.EmbeddedEntity? value)
        {
            return new PagedListResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public PagedListResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public PagedListResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public PagedListResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public PagedListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public PagedListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public PagedListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public PagedListResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PagedListResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PagedListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(PagedListResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is PagedListResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            PagedListResource.PagedListResourceEntity pagedListResourceEntityValue1 = thisAsAny.As<PagedListResource.PagedListResourceEntity>();
            allOfValidationContext2 = pagedListResourceEntityValue1.Validate(allOfValidationContext2);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PagedListResource.LinksEntity>, Menes.IJsonAdditionalProperties<PagedListResource.PropertiesEntity>
        {
            public static readonly PagedListResource.LinksEntity Null = new PagedListResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.LinksEntity> FromJsonElement = e => new PagedListResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string ItemsPropertyNamePath = ".items";
            private const string NextPropertyNamePath = ".next";
            private const string PrevPropertyNamePath = ".prev";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
            private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonReference? next;
            private readonly Menes.JsonReference? prev;
            private readonly Menes.JsonProperties<PagedListResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.items = null;
                this.next = null;
                this.prev = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                this.next = null;
                this.prev = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<PagedListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, params (string, PagedListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next = null, Link? prev = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PropertiesEntity) additionalProperty1, (string, PagedListResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PropertiesEntity) additionalProperty1, (string, PagedListResource.PropertiesEntity) additionalProperty2, (string, PagedListResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PropertiesEntity) additionalProperty1, (string, PagedListResource.PropertiesEntity) additionalProperty2, (string, PagedListResource.PropertiesEntity) additionalProperty3, (string, PagedListResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<PagedListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (items is Menes.JsonReference item2)
                {
                    this.items = item2;
                }
                else
                {
                    this.items = null;
                }
                if (next is Menes.JsonReference item3)
                {
                    this.next = item3;
                }
                else
                {
                    this.next = null;
                }
                if (prev is Menes.JsonReference item4)
                {
                    this.prev = item4;
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
            public PagedListResource.LinksEntity? AsOptional => this.IsNull ? default(PagedListResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
            public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
            public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PagedListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PagedListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PagedListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PagedListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PagedListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PagedListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PagedListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PagedListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PagedListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PagedListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.LinksEntity(property)
                        : Null)
                : Null;
            public PagedListResource.LinksEntity WithSelf(Link value)
            {
                return new PagedListResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetItems(), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public PagedListResource.LinksEntity WithItems(LinkCollection value)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public PagedListResource.LinksEntity WithNext(Link? value)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
            }
            public PagedListResource.LinksEntity WithPrev(Link? value)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PagedListResource.LinksEntity ReplaceAll(Menes.JsonProperties<PagedListResource.PropertiesEntity> newAdditional)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
            }
            public PagedListResource.LinksEntity ReplaceAll(params (string, PagedListResource.PropertiesEntity)[] newAdditional)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public PagedListResource.LinksEntity ReplaceAll((string, PagedListResource.PropertiesEntity) newAdditional1)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PagedListResource.LinksEntity ReplaceAll((string, PagedListResource.PropertiesEntity) newAdditional1, (string, PagedListResource.PropertiesEntity) newAdditional2)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PagedListResource.LinksEntity ReplaceAll((string, PagedListResource.PropertiesEntity) newAdditional1, (string, PagedListResource.PropertiesEntity) newAdditional2, (string, PagedListResource.PropertiesEntity) newAdditional3)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PagedListResource.LinksEntity ReplaceAll((string, PagedListResource.PropertiesEntity) newAdditional1, (string, PagedListResource.PropertiesEntity) newAdditional2, (string, PagedListResource.PropertiesEntity) newAdditional3, (string, PagedListResource.PropertiesEntity) newAdditional4)
            {
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PagedListResource.LinksEntity Add(params (string, PagedListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PagedListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(name, value));
                }
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Add((string name, PagedListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Add((string name, PagedListResource.PropertiesEntity value) newAdditional1, (string name, PagedListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Add((string name, PagedListResource.PropertiesEntity value) newAdditional1, (string name, PagedListResource.PropertiesEntity value) newAdditional2, (string name, PagedListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Add((string name, PagedListResource.PropertiesEntity value) newAdditional1, (string name, PagedListResource.PropertiesEntity value) newAdditional2, (string name, PagedListResource.PropertiesEntity value) newAdditional3, (string name, PagedListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    if (this.next is Menes.JsonReference next)
                    {
                        writer.WritePropertyName(EncodedNextPropertyName);
                        next.WriteTo(writer);
                    }
                    if (this.prev is Menes.JsonReference prev)
                    {
                        writer.WritePropertyName(EncodedPrevPropertyName);
                        prev.WriteTo(writer);
                    }
                    Menes.JsonProperties<PagedListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PagedListResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                if (this.Next is Link next)
                {
                    context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                }
                if (this.Prev is Link prev)
                {
                    context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PagedListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNext()
            {
                if (this.next is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetPrev()
            {
                if (this.prev is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PagedListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PagedListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PagedListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new PagedListResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<PagedListResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>
        {
            public static readonly PagedListResource.EmbeddedEntity Null = new PagedListResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.EmbeddedEntity> FromJsonElement = e => new PagedListResource.EmbeddedEntity(e);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>>.Empty;
            private readonly Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(params (string, PagedListResource.EmbeddedEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity((string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty1)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity((string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty2)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity((string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty3)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity((string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty3, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) additionalProperty4)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PagedListResource.EmbeddedEntity? AsOptional => this.IsNull ? default(PagedListResource.EmbeddedEntity?) : this;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PagedListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PagedListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PagedListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public PagedListResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity> newAdditional)
            {
                return new PagedListResource.EmbeddedEntity(newAdditional);
            }
            public PagedListResource.EmbeddedEntity ReplaceAll(params (string, PagedListResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                return new PagedListResource.EmbeddedEntity(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public PagedListResource.EmbeddedEntity ReplaceAll((string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional1)
            {
                return new PagedListResource.EmbeddedEntity(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PagedListResource.EmbeddedEntity ReplaceAll((string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional2)
            {
                return new PagedListResource.EmbeddedEntity(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PagedListResource.EmbeddedEntity ReplaceAll((string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional3)
            {
                return new PagedListResource.EmbeddedEntity(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PagedListResource.EmbeddedEntity ReplaceAll((string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional3, (string, PagedListResource.EmbeddedEntity.PropertiesEntity) newAdditional4)
            {
                return new PagedListResource.EmbeddedEntity(Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PagedListResource.EmbeddedEntity Add(params (string, PagedListResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(name, value));
                }
                return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Add((string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Add((string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Add((string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Add((string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional3, (string name, PagedListResource.EmbeddedEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.EmbeddedEntity(new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PagedListResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.EmbeddedEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.EmbeddedEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PagedListResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.EmbeddedEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PagedListResource.EmbeddedEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new PagedListResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct PagedListResourceEntity : Menes.IJsonObject, System.IEquatable<PagedListResource.PagedListResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly PagedListResource.PagedListResourceEntity Null = new PagedListResource.PagedListResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.PagedListResourceEntity> FromJsonElement = e => new PagedListResource.PagedListResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public PagedListResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.additionalPropertiesBacking = null;
            }
            public PagedListResourceEntity(PagedListResource.PagedListResourceEntity.LinksEntity links)
            {
                if (links is PagedListResource.PagedListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public PagedListResourceEntity(PagedListResource.PagedListResourceEntity.LinksEntity links, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is PagedListResource.PagedListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public PagedListResourceEntity(PagedListResource.PagedListResourceEntity.LinksEntity links, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is PagedListResource.PagedListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public PagedListResourceEntity(PagedListResource.PagedListResourceEntity.LinksEntity links, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is PagedListResource.PagedListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public PagedListResourceEntity(PagedListResource.PagedListResourceEntity.LinksEntity links, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is PagedListResource.PagedListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public PagedListResourceEntity(PagedListResource.PagedListResourceEntity.LinksEntity links, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is PagedListResource.PagedListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private PagedListResourceEntity(Menes.JsonReference links, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull);
            public PagedListResource.PagedListResourceEntity? AsOptional => this.IsNull ? default(PagedListResource.PagedListResourceEntity?) : this;
            public PagedListResource.PagedListResourceEntity.LinksEntity Links => this.links?.AsValue<PagedListResource.PagedListResourceEntity.LinksEntity>() ?? PagedListResource.PagedListResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PagedListResource.PagedListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.PagedListResourceEntity(property)
                        : Null)
                    : Null;
            public static PagedListResource.PagedListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.PagedListResourceEntity(property)
                        : Null)
                    : Null;
            public static PagedListResource.PagedListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PagedListResource.PagedListResourceEntity(property)
                        : Null)
                : Null;
            public PagedListResource.PagedListResourceEntity WithLinks(PagedListResource.PagedListResourceEntity.LinksEntity value)
            {
                return new PagedListResource.PagedListResourceEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PagedListResource.PagedListResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), newAdditional);
            }
            public PagedListResource.PagedListResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public PagedListResource.PagedListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public PagedListResource.PagedListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public PagedListResource.PagedListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PagedListResource.PagedListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PagedListResource.PagedListResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PagedListResource.PagedListResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PagedListResource.PagedListResourceEntity(this.GetLinks(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PagedListResource.PagedListResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PagedListResource.PagedListResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly PagedListResource.PagedListResourceEntity.LinksEntity Null = new PagedListResource.PagedListResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.PagedListResourceEntity.LinksEntity> FromJsonElement = e => new PagedListResource.PagedListResourceEntity.LinksEntity(e);
                private const string ItemsPropertyNamePath = ".items";
                private const string NextPropertyNamePath = ".next";
                private const string PrevPropertyNamePath = ".prev";
                private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
                private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
                private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
                private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
                private readonly Menes.JsonReference? items;
                private readonly Menes.JsonReference? next;
                private readonly Menes.JsonReference? prev;
                private readonly Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.items = null;
                    this.next = null;
                    this.prev = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    this.next = null;
                    this.prev = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, params (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(LinkCollection items, Link? next = null, Link? prev = null)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (items is Menes.JsonReference item1)
                    {
                        this.items = item1;
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Menes.JsonReference item2)
                    {
                        this.next = item2;
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Menes.JsonReference item3)
                    {
                        this.prev = item3;
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
                public PagedListResource.PagedListResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(PagedListResource.PagedListResourceEntity.LinksEntity?) : this;
                public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
                public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
                public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static PagedListResource.PagedListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PagedListResource.PagedListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PagedListResource.PagedListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PagedListResource.PagedListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PagedListResource.PagedListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PagedListResource.PagedListResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public PagedListResource.PagedListResourceEntity.LinksEntity WithItems(LinkCollection value)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity WithNext(Link? value)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity WithPrev(Link? value)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity ReplaceAll(params (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity ReplaceAll((string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity ReplaceAll((string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity ReplaceAll((string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity ReplaceAll((string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Add(params (string, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Add((string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Add((string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Add((string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Add((string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PagedListResource.PagedListResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PagedListResource.PagedListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.items is Menes.JsonReference items)
                        {
                            writer.WritePropertyName(EncodedItemsPropertyName);
                            items.WriteTo(writer);
                        }
                        if (this.next is Menes.JsonReference next)
                        {
                            writer.WritePropertyName(EncodedNextPropertyName);
                            next.WriteTo(writer);
                        }
                        if (this.prev is Menes.JsonReference prev)
                        {
                            writer.WritePropertyName(EncodedPrevPropertyName);
                            prev.WriteTo(writer);
                        }
                        Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(PagedListResource.PagedListResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                    if (this.Next is Link next)
                    {
                        context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                    }
                    if (this.Prev is Link prev)
                    {
                        context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetItems()
                {
                    if (this.items is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNext()
                {
                    if (this.next is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetPrev()
                {
                    if (this.prev is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new PagedListResource.PagedListResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PagedListResource.PropertiesEntity> FromJsonElement = e => new PagedListResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
            }
        }
    }
    public readonly struct Resource : Menes.IJsonObject, System.IEquatable<Resource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly Resource Null = new Resource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, Resource> FromJsonElement = e => new Resource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public Resource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public Resource(Resource.LinksEntity links)
        {
            this.contentType = null;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public Resource(Resource.LinksEntity links, Menes.JsonString? contentType, Resource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is Resource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public Resource(Resource.LinksEntity links, Menes.JsonString? contentType, Resource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is Resource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public Resource(Resource.LinksEntity links, Menes.JsonString? contentType = null, Resource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is Resource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public Resource(Resource.LinksEntity links, Menes.JsonString? contentType, Resource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is Resource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public Resource(Resource.LinksEntity links, Menes.JsonString? contentType, Resource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is Resource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public Resource(Resource.LinksEntity links, Menes.JsonString? contentType, Resource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is Resource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public Resource(Resource.LinksEntity links, Menes.JsonString? contentType, Resource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is Resource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is Resource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private Resource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public Resource? AsOptional => this.IsNull ? default(Resource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public Resource.LinksEntity Links => this.links?.AsValue<Resource.LinksEntity>() ?? Resource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public Resource.EmbeddedEntity? Embedded => this.embedded?.AsValue<Resource.EmbeddedEntity>() ?? Resource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static Resource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new Resource(property)
                    : Null)
                : Null;
        public static Resource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new Resource(property)
                    : Null)
                : Null;
        public static Resource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new Resource(property)
                    : Null)
            : Null;
        public Resource WithContentType(Menes.JsonString? value)
        {
            return new Resource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public Resource WithLinks(Resource.LinksEntity value)
        {
            return new Resource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public Resource WithEmbedded(Resource.EmbeddedEntity? value)
        {
            return new Resource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public Resource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public Resource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public Resource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public Resource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public Resource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public Resource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public Resource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Resource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Resource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(Resource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is Resource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<Resource.LinksEntity>, Menes.IJsonAdditionalProperties<Resource.LinksEntity.PropertiesEntity>
        {
            public static readonly Resource.LinksEntity Null = new Resource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, Resource.LinksEntity> FromJsonElement = e => new Resource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, params (string, Resource.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty1, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty1, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty2, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty1, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty2, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty3, (string, Resource.LinksEntity.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull);
            public Resource.LinksEntity? AsOptional => this.IsNull ? default(Resource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static Resource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new Resource.LinksEntity(property)
                        : Null)
                    : Null;
            public static Resource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new Resource.LinksEntity(property)
                        : Null)
                    : Null;
            public static Resource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new Resource.LinksEntity(property)
                        : Null)
                : Null;
            public Resource.LinksEntity WithSelf(Link value)
            {
                return new Resource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public Resource.LinksEntity ReplaceAll(Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity> newAdditional)
            {
                return new Resource.LinksEntity(this.GetSelf(), newAdditional);
            }
            public Resource.LinksEntity ReplaceAll(params (string, Resource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                return new Resource.LinksEntity(this.GetSelf(), Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public Resource.LinksEntity ReplaceAll((string, Resource.LinksEntity.PropertiesEntity) newAdditional1)
            {
                return new Resource.LinksEntity(this.GetSelf(), Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public Resource.LinksEntity ReplaceAll((string, Resource.LinksEntity.PropertiesEntity) newAdditional1, (string, Resource.LinksEntity.PropertiesEntity) newAdditional2)
            {
                return new Resource.LinksEntity(this.GetSelf(), Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public Resource.LinksEntity ReplaceAll((string, Resource.LinksEntity.PropertiesEntity) newAdditional1, (string, Resource.LinksEntity.PropertiesEntity) newAdditional2, (string, Resource.LinksEntity.PropertiesEntity) newAdditional3)
            {
                return new Resource.LinksEntity(this.GetSelf(), Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public Resource.LinksEntity ReplaceAll((string, Resource.LinksEntity.PropertiesEntity) newAdditional1, (string, Resource.LinksEntity.PropertiesEntity) newAdditional2, (string, Resource.LinksEntity.PropertiesEntity) newAdditional3, (string, Resource.LinksEntity.PropertiesEntity) newAdditional4)
            {
                return new Resource.LinksEntity(this.GetSelf(), Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public Resource.LinksEntity Add(params (string, Resource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Resource.LinksEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(name, value));
                }
                return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Add((string name, Resource.LinksEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Add((string name, Resource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, Resource.LinksEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Add((string name, Resource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, Resource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, Resource.LinksEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Add((string name, Resource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, Resource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, Resource.LinksEntity.PropertiesEntity value) newAdditional3, (string name, Resource.LinksEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(Resource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Resource.LinksEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Resource.LinksEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<Resource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Resource.LinksEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Resource.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, Resource.LinksEntity.PropertiesEntity> FromJsonElement = e => new Resource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<Resource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<Resource.EmbeddedEntity.PropertiesEntity>
        {
            public static readonly Resource.EmbeddedEntity Null = new Resource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, Resource.EmbeddedEntity> FromJsonElement = e => new Resource.EmbeddedEntity(e);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>>.Empty;
            private readonly Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(params (string, Resource.EmbeddedEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity((string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty1)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity((string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty2)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity((string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty3)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity((string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty3, (string, Resource.EmbeddedEntity.PropertiesEntity) additionalProperty4)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public Resource.EmbeddedEntity? AsOptional => this.IsNull ? default(Resource.EmbeddedEntity?) : this;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static Resource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new Resource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static Resource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new Resource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static Resource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new Resource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public Resource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity> newAdditional)
            {
                return new Resource.EmbeddedEntity(newAdditional);
            }
            public Resource.EmbeddedEntity ReplaceAll(params (string, Resource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                return new Resource.EmbeddedEntity(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public Resource.EmbeddedEntity ReplaceAll((string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional1)
            {
                return new Resource.EmbeddedEntity(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public Resource.EmbeddedEntity ReplaceAll((string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional2)
            {
                return new Resource.EmbeddedEntity(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public Resource.EmbeddedEntity ReplaceAll((string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional3)
            {
                return new Resource.EmbeddedEntity(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public Resource.EmbeddedEntity ReplaceAll((string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional3, (string, Resource.EmbeddedEntity.PropertiesEntity) newAdditional4)
            {
                return new Resource.EmbeddedEntity(Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public Resource.EmbeddedEntity Add(params (string, Resource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Resource.EmbeddedEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(name, value));
                }
                return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Add((string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Add((string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Add((string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Add((string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional3, (string name, Resource.EmbeddedEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public Resource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new Resource.EmbeddedEntity(new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(Resource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Resource.EmbeddedEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Resource.EmbeddedEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<Resource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Resource.EmbeddedEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Resource.EmbeddedEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, Resource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new Resource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }
    }
    public readonly struct Link : Menes.IJsonObject, System.IEquatable<Link>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly Link Null = new Link(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, Link> FromJsonElement = e => new Link(e);
        private const string HrefPropertyNamePath = ".href";
        private const string TemplatedPropertyNamePath = ".templated";
        private const string TypePropertyNamePath = ".type";
        private const string NamePropertyNamePath = ".name";
        private const string ProfilePropertyNamePath = ".profile";
        private const string DescriptionPropertyNamePath = ".description";
        private const string HreflangPropertyNamePath = ".hreflang";
        private static readonly System.ReadOnlyMemory<byte> HrefPropertyNameBytes = new byte[] { 104, 114, 101, 102 };
        private static readonly System.ReadOnlyMemory<byte> TemplatedPropertyNameBytes = new byte[] { 116, 101, 109, 112, 108, 97, 116, 101, 100 };
        private static readonly System.ReadOnlyMemory<byte> TypePropertyNameBytes = new byte[] { 116, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> NamePropertyNameBytes = new byte[] { 110, 97, 109, 101 };
        private static readonly System.ReadOnlyMemory<byte> ProfilePropertyNameBytes = new byte[] { 112, 114, 111, 102, 105, 108, 101 };
        private static readonly System.ReadOnlyMemory<byte> DescriptionPropertyNameBytes = new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly System.ReadOnlyMemory<byte> HreflangPropertyNameBytes = new byte[] { 104, 114, 101, 102, 108, 97, 110, 103 };
        private static readonly System.Text.Json.JsonEncodedText EncodedHrefPropertyName = System.Text.Json.JsonEncodedText.Encode(HrefPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedTemplatedPropertyName = System.Text.Json.JsonEncodedText.Encode(TemplatedPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedTypePropertyName = System.Text.Json.JsonEncodedText.Encode(TypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedNamePropertyName = System.Text.Json.JsonEncodedText.Encode(NamePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedProfilePropertyName = System.Text.Json.JsonEncodedText.Encode(ProfilePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedDescriptionPropertyName = System.Text.Json.JsonEncodedText.Encode(DescriptionPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedHreflangPropertyName = System.Text.Json.JsonEncodedText.Encode(HreflangPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(HrefPropertyNameBytes, TemplatedPropertyNameBytes, TypePropertyNameBytes, NamePropertyNameBytes, ProfilePropertyNameBytes, DescriptionPropertyNameBytes, HreflangPropertyNameBytes);
        private readonly Menes.JsonString? href;
        private readonly Menes.JsonBoolean? templated;
        private readonly Link.TypeValue? type;
        private readonly Menes.JsonString? name;
        private readonly Menes.JsonUri? profile;
        private readonly Menes.JsonString? description;
        private readonly Link.HreflangValue? hreflang;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public Link(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.href = null;
            this.templated = null;
            this.type = null;
            this.name = null;
            this.profile = null;
            this.description = null;
            this.hreflang = null;
            this.additionalPropertiesBacking = null;
        }
        public Link(Menes.JsonString href)
        {
            this.href = href;
            this.templated = null;
            this.type = null;
            this.name = null;
            this.profile = null;
            this.description = null;
            this.hreflang = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public Link(Menes.JsonString href, Menes.JsonBoolean? templated, Link.TypeValue? type, Menes.JsonString? name, Menes.JsonUri? profile, Menes.JsonString? description, Link.HreflangValue? hreflang, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public Link(Menes.JsonString href, Menes.JsonBoolean? templated, Link.TypeValue? type, Menes.JsonString? name, Menes.JsonUri? profile, Menes.JsonString? description, Link.HreflangValue? hreflang, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public Link(Menes.JsonString href, Menes.JsonBoolean? templated = null, Link.TypeValue? type = null, Menes.JsonString? name = null, Menes.JsonUri? profile = null, Menes.JsonString? description = null, Link.HreflangValue? hreflang = null)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public Link(Menes.JsonString href, Menes.JsonBoolean? templated, Link.TypeValue? type, Menes.JsonString? name, Menes.JsonUri? profile, Menes.JsonString? description, Link.HreflangValue? hreflang, (string, Menes.JsonAny) additionalProperty1)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public Link(Menes.JsonString href, Menes.JsonBoolean? templated, Link.TypeValue? type, Menes.JsonString? name, Menes.JsonUri? profile, Menes.JsonString? description, Link.HreflangValue? hreflang, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public Link(Menes.JsonString href, Menes.JsonBoolean? templated, Link.TypeValue? type, Menes.JsonString? name, Menes.JsonUri? profile, Menes.JsonString? description, Link.HreflangValue? hreflang, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public Link(Menes.JsonString href, Menes.JsonBoolean? templated, Link.TypeValue? type, Menes.JsonString? name, Menes.JsonUri? profile, Menes.JsonString? description, Link.HreflangValue? hreflang, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private Link(Menes.JsonString href, Menes.JsonBoolean? templated, Link.TypeValue? type, Menes.JsonString? name, Menes.JsonUri? profile, Menes.JsonString? description, Link.HreflangValue? hreflang, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.href = href;
            this.templated = templated;
            this.type = type;
            this.name = name;
            this.profile = profile;
            this.description = description;
            this.hreflang = hreflang;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.href is null || this.href.Value.IsNull) && (this.templated is null || this.templated.Value.IsNull) && (this.type is null || this.type.Value.IsNull) && (this.name is null || this.name.Value.IsNull) && (this.profile is null || this.profile.Value.IsNull) && (this.description is null || this.description.Value.IsNull) && (this.hreflang is null || this.hreflang.Value.IsNull);
        public Link? AsOptional => this.IsNull ? default(Link?) : this;
        public Menes.JsonString Href => this.href ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, HrefPropertyNameBytes.Span);
        public Menes.JsonBoolean? Templated => this.templated ?? Menes.JsonBoolean.FromOptionalProperty(this.JsonElement, TemplatedPropertyNameBytes.Span).AsOptional;
        public Link.TypeValue? Type => this.type ?? Link.TypeValue.FromOptionalProperty(this.JsonElement, TypePropertyNameBytes.Span).AsOptional;
        public Menes.JsonString? Name => this.name ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, NamePropertyNameBytes.Span).AsOptional;
        public Menes.JsonUri? Profile => this.profile ?? Menes.JsonUri.FromOptionalProperty(this.JsonElement, ProfilePropertyNameBytes.Span).AsOptional;
        public Menes.JsonString? Description => this.description ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, DescriptionPropertyNameBytes.Span).AsOptional;
        public Link.HreflangValue? Hreflang => this.hreflang ?? Link.HreflangValue.FromOptionalProperty(this.JsonElement, HreflangPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static Link FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new Link(property)
                    : Null)
                : Null;
        public static Link FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new Link(property)
                    : Null)
                : Null;
        public static Link FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new Link(property)
                    : Null)
            : Null;
        public Link WithHref(Menes.JsonString value)
        {
            return new Link(value, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, this.GetJsonProperties());
        }
        public Link WithTemplated(Menes.JsonBoolean? value)
        {
            return new Link(this.Href, value, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, this.GetJsonProperties());
        }
        public Link WithType(Link.TypeValue? value)
        {
            return new Link(this.Href, this.Templated, value, this.Name, this.Profile, this.Description, this.Hreflang, this.GetJsonProperties());
        }
        public Link WithName(Menes.JsonString? value)
        {
            return new Link(this.Href, this.Templated, this.Type, value, this.Profile, this.Description, this.Hreflang, this.GetJsonProperties());
        }
        public Link WithProfile(Menes.JsonUri? value)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, value, this.Description, this.Hreflang, this.GetJsonProperties());
        }
        public Link WithDescription(Menes.JsonString? value)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, value, this.Hreflang, this.GetJsonProperties());
        }
        public Link WithHreflang(Link.HreflangValue? value)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, value, this.GetJsonProperties());
        }
        public Link ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, newAdditional);
        }
        public Link ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public Link ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public Link ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public Link ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public Link ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public Link Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public Link Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new Link(this.Href, this.Templated, this.Type, this.Name, this.Profile, this.Description, this.Hreflang, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.href is Menes.JsonString href)
                {
                    writer.WritePropertyName(EncodedHrefPropertyName);
                    href.WriteTo(writer);
                }
                if (this.templated is Menes.JsonBoolean templated)
                {
                    writer.WritePropertyName(EncodedTemplatedPropertyName);
                    templated.WriteTo(writer);
                }
                if (this.type is Link.TypeValue type)
                {
                    writer.WritePropertyName(EncodedTypePropertyName);
                    type.WriteTo(writer);
                }
                if (this.name is Menes.JsonString name)
                {
                    writer.WritePropertyName(EncodedNamePropertyName);
                    name.WriteTo(writer);
                }
                if (this.profile is Menes.JsonUri profile)
                {
                    writer.WritePropertyName(EncodedProfilePropertyName);
                    profile.WriteTo(writer);
                }
                if (this.description is Menes.JsonString description)
                {
                    writer.WritePropertyName(EncodedDescriptionPropertyName);
                    description.WriteTo(writer);
                }
                if (this.hreflang is Link.HreflangValue hreflang)
                {
                    writer.WritePropertyName(EncodedHreflangPropertyName);
                    hreflang.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(Link other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.Href.Equals(other.Href) && this.Templated.Equals(other.Templated) && this.Type.Equals(other.Type) && this.Name.Equals(other.Name) && this.Profile.Equals(other.Profile) && this.Description.Equals(other.Description) && this.Hreflang.Equals(other.Hreflang) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            context = Menes.Validation.ValidateRequiredProperty(context, this.Href, HrefPropertyNamePath);
            if (this.Templated is Menes.JsonBoolean templated)
            {
                context = Menes.Validation.ValidateProperty(context, templated, TemplatedPropertyNamePath);
            }
            if (this.Type is Link.TypeValue type)
            {
                context = Menes.Validation.ValidateProperty(context, type, TypePropertyNamePath);
            }
            if (this.Name is Menes.JsonString name)
            {
                context = Menes.Validation.ValidateProperty(context, name, NamePropertyNamePath);
            }
            if (this.Profile is Menes.JsonUri profile)
            {
                context = Menes.Validation.ValidateProperty(context, profile, ProfilePropertyNamePath);
            }
            if (this.Description is Menes.JsonString description)
            {
                context = Menes.Validation.ValidateProperty(context, description, DescriptionPropertyNamePath);
            }
            if (this.Hreflang is Link.HreflangValue hreflang)
            {
                context = Menes.Validation.ValidateProperty(context, hreflang, HreflangPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }
        public readonly struct TypeValue : Menes.IJsonValue, System.IEquatable<TypeValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, TypeValue> FromJsonElement = e => new TypeValue(e);
            public static readonly TypeValue Null = new TypeValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = null;
            private static readonly int? MinLength = null;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^(application|audio|example|image|message|model|multipart|text|video)\\\\/[a-zA-Z0-9!#\\\\$&\\\\.\\\\+-\\\\^_]{1,127}$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public TypeValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public TypeValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public TypeValue? AsOptional => this.IsNull ? default(TypeValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator TypeValue(Menes.JsonString value)
            {
                return new TypeValue(value);
            }
            public static implicit operator TypeValue(string value)
            {
                return new TypeValue(value);
            }
            public static implicit operator string(TypeValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(TypeValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static TypeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TypeValue(property)
                        : Null)
                    : Null;
            public static TypeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TypeValue(property)
                        : Null)
                    : Null;
            public static TypeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TypeValue(property)
                        : Null)
                    : Null;
            public bool Equals(TypeValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct HreflangValue : Menes.IJsonValue, System.IEquatable<HreflangValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, HreflangValue> FromJsonElement = e => new HreflangValue(e);
            public static readonly HreflangValue Null = new HreflangValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = null;
            private static readonly int? MinLength = null;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-([a-zA-Z0-9]{5,8}|[0-9][a-zA-Z0-9]{3}))*([0-9A-WY-Za-wy-z](-[a-zA-Z0-9]{2,8}){1,})*(x-[a-zA-Z0-9]{2,8})?)|(x-[a-zA-Z0-9]{2,8})|(en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE)|(art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang)$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public HreflangValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public HreflangValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public HreflangValue? AsOptional => this.IsNull ? default(HreflangValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator HreflangValue(Menes.JsonString value)
            {
                return new HreflangValue(value);
            }
            public static implicit operator HreflangValue(string value)
            {
                return new HreflangValue(value);
            }
            public static implicit operator string(HreflangValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(HreflangValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static HreflangValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new HreflangValue(property)
                        : Null)
                    : Null;
            public static HreflangValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new HreflangValue(property)
                        : Null)
                    : Null;
            public static HreflangValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new HreflangValue(property)
                        : Null)
                    : Null;
            public bool Equals(HreflangValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
    }
    public readonly struct LinkCollection : Menes.IJsonValue, System.Collections.Generic.IEnumerable<Link>, System.Collections.IEnumerable, System.IEquatable<LinkCollection>, System.IEquatable<Menes.JsonArray<Link>>
    {
        public static readonly System.Func<System.Text.Json.JsonElement, LinkCollection> FromJsonElement = e => new LinkCollection(e);
        public static readonly LinkCollection Null = new LinkCollection(default(System.Text.Json.JsonElement));
        private readonly Menes.JsonArray<Link>? value;
        public LinkCollection(Menes.JsonArray<Link> jsonArray)
        {
            if (jsonArray.HasJsonElement)
            {
                this.JsonElement = jsonArray.JsonElement;
                this.value = null;
            }
            else
            {
                this.value = jsonArray;
                this.JsonElement = default;
            }
        }
        public LinkCollection(System.Text.Json.JsonElement jsonElement)
        {
            this.value = null;
            this.JsonElement = jsonElement;
        }
        public int Length
        {
            get
            {
                if (this.HasJsonElement)
                {
                    return this.JsonElement.GetArrayLength();
                }
                if (this.value is Menes.JsonArray<Link> value)
                {
                    return value.Length;
                }
                return 0;
            }
        }
        public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
        public LinkCollection? AsOptional => this.IsNull ? default(LinkCollection?) : this;
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public static implicit operator LinkCollection(Menes.JsonArray<Link> value)
        {
            return new LinkCollection(value);
        }
        public static implicit operator Menes.JsonArray<Link>(LinkCollection value)
        {
            if (value.value is Menes.JsonArray<Link> clrValue)
            {
                return clrValue;
            }
            return new Menes.JsonArray<Link>(value.JsonElement);
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return Menes.JsonArray<Link>.IsConvertibleFrom(jsonElement);
        }
        public static LinkCollection FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new LinkCollection(property)
                    : Null)
                : Null;
        public static LinkCollection FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new LinkCollection(property)
                    : Null)
                : Null;
        public static LinkCollection FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new LinkCollection(property)
                    : Null)
                : Null;
        public bool Equals(LinkCollection other)
        {
            return this.Equals((Menes.JsonArray<Link>)other);
        }
        public bool Equals(Menes.JsonArray<Link> other)
        {
            return ((Menes.JsonArray<Link>)this).Equals(other);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.JsonArray<Link> array = this;
            Menes.ValidationContext context = validationContext;
            context = array.Validate(context);
            return array.ValidateItems(context);
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            if (this.value is Menes.JsonArray<Link> clrValue)
            {
                clrValue.WriteTo(writer);
            }
        }
        public Menes.JsonArray<Link>.JsonArrayEnumerator GetEnumerator()
        {
            return ((Menes.JsonArray<Link>)this).GetEnumerator();
        }
        System.Collections.Generic.IEnumerator<Link> System.Collections.Generic.IEnumerable<Link>.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        public LinkCollection Add(params Link[] items)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                arrayBuilder.Add(item);
            }
            foreach (Link item in items)
            {
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Add(in Link item1)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Add(in Link item1, in Link item2)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            arrayBuilder.Add(item2);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Add(in Link item1, in Link item2, in Link item3)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            arrayBuilder.Add(item2);
            arrayBuilder.Add(item3);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Add(in Link item1, in Link item2, in Link item3, in Link item4)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            arrayBuilder.Add(item2);
            arrayBuilder.Add(item3);
            arrayBuilder.Add(item4);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Insert(int indexToInsert, params Link[] items)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            int index = 0;
            foreach (Link item in this)
            {
                if (index == indexToInsert)
                {
                    foreach (Link itemToInsert in items)
                    {
                        arrayBuilder.Add(itemToInsert);
                    }
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Insert(int indexToInsert, in Link item1)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            int index = 0;
            foreach (Link item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Insert(int indexToInsert, in Link item1, in Link item2)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            int index = 0;
            foreach (Link item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                    arrayBuilder.Add(item2);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Insert(int indexToInsert, in Link item1, in Link item2, in Link item3)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            int index = 0;
            foreach (Link item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                    arrayBuilder.Add(item2);
                    arrayBuilder.Add(item3);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Insert(int indexToInsert, in Link item1, in Link item2, in Link item3, in Link item4)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            int index = 0;
            foreach (Link item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                    arrayBuilder.Add(item2);
                    arrayBuilder.Add(item3);
                    arrayBuilder.Add(item4);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Remove(params Link[] items)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                bool found = false;
                foreach (Link itemToRemove in items)
                {
                    if (itemToRemove.Equals(item))
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    arrayBuilder.Add(item);
                }
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Remove(Link item1)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                if (item1.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Remove(Link item1, Link item2)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                if (item1.Equals(item) || item2.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Remove(Link item1, Link item2, Link item3)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Remove(Link item1, Link item2, Link item3, Link item4)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection RemoveAt(int indexToRemove)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            int index = 0;
            foreach (Link item in this)
            {
                if (index == indexToRemove)
                {
                    index++;
                    continue;
                }
                arrayBuilder.Add(item);
                index++;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection RemoveRange(int startIndex, int length)
        {
            if (startIndex < 0 || startIndex > this.Length - 1)
            {
                throw new System.ArgumentOutOfRangeException(nameof(startIndex));
            }
            if (length < 1 || startIndex + length > this.Length - 1)
            {
                throw new System.ArgumentOutOfRangeException(nameof(length));
            }
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            int index = 0;
            foreach (Link item in this)
            {
                if (index >= startIndex && index < startIndex + length)
                {
                    index++;
                    continue;
                }
                arrayBuilder.Add(item);
                index++;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public LinkCollection Remove(System.Predicate<Link> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Link>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Link>();
            foreach (Link item in this)
            {
                if (removeIfTrue(item))
                {
                    continue;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
    }
    public readonly struct ResourceCollection : Menes.IJsonValue, System.Collections.Generic.IEnumerable<Resource>, System.Collections.IEnumerable, System.IEquatable<ResourceCollection>, System.IEquatable<Menes.JsonArray<Resource>>
    {
        public static readonly System.Func<System.Text.Json.JsonElement, ResourceCollection> FromJsonElement = e => new ResourceCollection(e);
        public static readonly ResourceCollection Null = new ResourceCollection(default(System.Text.Json.JsonElement));
        private readonly Menes.JsonArray<Resource>? value;
        public ResourceCollection(Menes.JsonArray<Resource> jsonArray)
        {
            if (jsonArray.HasJsonElement)
            {
                this.JsonElement = jsonArray.JsonElement;
                this.value = null;
            }
            else
            {
                this.value = jsonArray;
                this.JsonElement = default;
            }
        }
        public ResourceCollection(System.Text.Json.JsonElement jsonElement)
        {
            this.value = null;
            this.JsonElement = jsonElement;
        }
        public int Length
        {
            get
            {
                if (this.HasJsonElement)
                {
                    return this.JsonElement.GetArrayLength();
                }
                if (this.value is Menes.JsonArray<Resource> value)
                {
                    return value.Length;
                }
                return 0;
            }
        }
        public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
        public ResourceCollection? AsOptional => this.IsNull ? default(ResourceCollection?) : this;
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public static implicit operator ResourceCollection(Menes.JsonArray<Resource> value)
        {
            return new ResourceCollection(value);
        }
        public static implicit operator Menes.JsonArray<Resource>(ResourceCollection value)
        {
            if (value.value is Menes.JsonArray<Resource> clrValue)
            {
                return clrValue;
            }
            return new Menes.JsonArray<Resource>(value.JsonElement);
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return Menes.JsonArray<Resource>.IsConvertibleFrom(jsonElement);
        }
        public static ResourceCollection FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new ResourceCollection(property)
                    : Null)
                : Null;
        public static ResourceCollection FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new ResourceCollection(property)
                    : Null)
                : Null;
        public static ResourceCollection FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new ResourceCollection(property)
                    : Null)
                : Null;
        public bool Equals(ResourceCollection other)
        {
            return this.Equals((Menes.JsonArray<Resource>)other);
        }
        public bool Equals(Menes.JsonArray<Resource> other)
        {
            return ((Menes.JsonArray<Resource>)this).Equals(other);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.JsonArray<Resource> array = this;
            Menes.ValidationContext context = validationContext;
            context = array.Validate(context);
            return array.ValidateItems(context);
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            if (this.value is Menes.JsonArray<Resource> clrValue)
            {
                clrValue.WriteTo(writer);
            }
        }
        public Menes.JsonArray<Resource>.JsonArrayEnumerator GetEnumerator()
        {
            return ((Menes.JsonArray<Resource>)this).GetEnumerator();
        }
        System.Collections.Generic.IEnumerator<Resource> System.Collections.Generic.IEnumerable<Resource>.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        public ResourceCollection Add(params Resource[] items)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                arrayBuilder.Add(item);
            }
            foreach (Resource item in items)
            {
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Add(in Resource item1)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Add(in Resource item1, in Resource item2)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            arrayBuilder.Add(item2);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Add(in Resource item1, in Resource item2, in Resource item3)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            arrayBuilder.Add(item2);
            arrayBuilder.Add(item3);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Add(in Resource item1, in Resource item2, in Resource item3, in Resource item4)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                arrayBuilder.Add(item);
            }
            arrayBuilder.Add(item1);
            arrayBuilder.Add(item2);
            arrayBuilder.Add(item3);
            arrayBuilder.Add(item4);
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Insert(int indexToInsert, params Resource[] items)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            int index = 0;
            foreach (Resource item in this)
            {
                if (index == indexToInsert)
                {
                    foreach (Resource itemToInsert in items)
                    {
                        arrayBuilder.Add(itemToInsert);
                    }
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Insert(int indexToInsert, in Resource item1)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            int index = 0;
            foreach (Resource item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Insert(int indexToInsert, in Resource item1, in Resource item2)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            int index = 0;
            foreach (Resource item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                    arrayBuilder.Add(item2);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Insert(int indexToInsert, in Resource item1, in Resource item2, in Resource item3)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            int index = 0;
            foreach (Resource item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                    arrayBuilder.Add(item2);
                    arrayBuilder.Add(item3);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Insert(int indexToInsert, in Resource item1, in Resource item2, in Resource item3, in Resource item4)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            int index = 0;
            foreach (Resource item in this)
            {
                if (index == indexToInsert)
                {
                    arrayBuilder.Add(item1);
                    arrayBuilder.Add(item2);
                    arrayBuilder.Add(item3);
                    arrayBuilder.Add(item4);
                }
                arrayBuilder.Add(item);
                ++index;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Remove(params Resource[] items)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                bool found = false;
                foreach (Resource itemToRemove in items)
                {
                    if (itemToRemove.Equals(item))
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    arrayBuilder.Add(item);
                }
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Remove(Resource item1)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                if (item1.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Remove(Resource item1, Resource item2)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                if (item1.Equals(item) || item2.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Remove(Resource item1, Resource item2, Resource item3)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Remove(Resource item1, Resource item2, Resource item3, Resource item4)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                {
                    break;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection RemoveAt(int indexToRemove)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            int index = 0;
            foreach (Resource item in this)
            {
                if (index == indexToRemove)
                {
                    index++;
                    continue;
                }
                arrayBuilder.Add(item);
                index++;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection RemoveRange(int startIndex, int length)
        {
            if (startIndex < 0 || startIndex > this.Length - 1)
            {
                throw new System.ArgumentOutOfRangeException(nameof(startIndex));
            }
            if (length < 1 || startIndex + length > this.Length - 1)
            {
                throw new System.ArgumentOutOfRangeException(nameof(length));
            }
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            int index = 0;
            foreach (Resource item in this)
            {
                if (index >= startIndex && index < startIndex + length)
                {
                    index++;
                    continue;
                }
                arrayBuilder.Add(item);
                index++;
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
        public ResourceCollection Remove(System.Predicate<Resource> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Resource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Resource>();
            foreach (Resource item in this)
            {
                if (removeIfTrue(item))
                {
                    continue;
                }
                arrayBuilder.Add(item);
            }
            return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
        }
    }
    public readonly struct PersonResource : Menes.IJsonObject, System.IEquatable<PersonResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly PersonResource Null = new PersonResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, PersonResource> FromJsonElement = e => new PersonResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public PersonResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public PersonResource(PersonResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonResource(PersonResource.LinksEntity links, Menes.JsonString? contentType, PersonResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public PersonResource(PersonResource.LinksEntity links, Menes.JsonString? contentType, PersonResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public PersonResource(PersonResource.LinksEntity links, Menes.JsonString? contentType = null, PersonResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonResource(PersonResource.LinksEntity links, Menes.JsonString? contentType, PersonResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public PersonResource(PersonResource.LinksEntity links, Menes.JsonString? contentType, PersonResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public PersonResource(PersonResource.LinksEntity links, Menes.JsonString? contentType, PersonResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public PersonResource(PersonResource.LinksEntity links, Menes.JsonString? contentType, PersonResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is PersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private PersonResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public PersonResource? AsOptional => this.IsNull ? default(PersonResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public PersonResource.LinksEntity Links => this.links?.AsValue<PersonResource.LinksEntity>() ?? PersonResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public PersonResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<PersonResource.EmbeddedEntity>() ?? PersonResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static PersonResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonResource(property)
                    : Null)
                : Null;
        public static PersonResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonResource(property)
                    : Null)
                : Null;
        public static PersonResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new PersonResource(property)
                    : Null)
            : Null;
        public PersonResource WithContentType(Menes.JsonString? value)
        {
            return new PersonResource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PersonResource WithLinks(PersonResource.LinksEntity value)
        {
            return new PersonResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PersonResource WithEmbedded(PersonResource.EmbeddedEntity? value)
        {
            return new PersonResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public PersonResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public PersonResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public PersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public PersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public PersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public PersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public PersonResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(PersonResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is PersonResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            PersonResource.PersonResourceEntity personResourceEntityValue1 = thisAsAny.As<PersonResource.PersonResourceEntity>();
            allOfValidationContext2 = personResourceEntityValue1.Validate(allOfValidationContext2);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PersonResource.LinksEntity>, Menes.IJsonAdditionalProperties<PersonResource.PropertiesEntity>
        {
            public static readonly PersonResource.LinksEntity Null = new PersonResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.LinksEntity> FromJsonElement = e => new PersonResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string PrimaryNamePropertyNamePath = ".primaryName";
            private const string NamesPropertyNamePath = ".names";
            private const string AddressesPropertyNamePath = ".addresses";
            private const string TelephoneNumbersPropertyNamePath = ".telephoneNumbers";
            private const string EmailAddressesPropertyNamePath = ".emailAddresses";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
            private static readonly System.ReadOnlyMemory<byte> NamesPropertyNameBytes = new byte[] { 110, 97, 109, 101, 115 };
            private static readonly System.ReadOnlyMemory<byte> AddressesPropertyNameBytes = new byte[] { 97, 100, 100, 114, 101, 115, 115, 101, 115 };
            private static readonly System.ReadOnlyMemory<byte> TelephoneNumbersPropertyNameBytes = new byte[] { 116, 101, 108, 101, 112, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmailAddressesPropertyNameBytes = new byte[] { 101, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 101, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNamesPropertyName = System.Text.Json.JsonEncodedText.Encode(NamesPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(AddressesPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedTelephoneNumbersPropertyName = System.Text.Json.JsonEncodedText.Encode(TelephoneNumbersPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmailAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(EmailAddressesPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, PrimaryNamePropertyNameBytes, NamesPropertyNameBytes, AddressesPropertyNameBytes, TelephoneNumbersPropertyNameBytes, EmailAddressesPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? primaryName;
            private readonly Menes.JsonReference? names;
            private readonly Menes.JsonReference? addresses;
            private readonly Menes.JsonReference? telephoneNumbers;
            private readonly Menes.JsonReference? emailAddresses;
            private readonly Menes.JsonProperties<PersonResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.primaryName = null;
                this.names = null;
                this.addresses = null;
                this.telephoneNumbers = null;
                this.emailAddresses = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, Link primaryName)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                this.names = null;
                this.addresses = null;
                this.telephoneNumbers = null;
                this.emailAddresses = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, Menes.JsonProperties<PersonResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, params (string, PersonResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names = null, LinkCollection? addresses = null, LinkCollection? telephoneNumbers = null, LinkCollection? emailAddresses = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PropertiesEntity) additionalProperty1, (string, PersonResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PropertiesEntity) additionalProperty1, (string, PersonResource.PropertiesEntity) additionalProperty2, (string, PersonResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PropertiesEntity) additionalProperty1, (string, PersonResource.PropertiesEntity) additionalProperty2, (string, PersonResource.PropertiesEntity) additionalProperty3, (string, PersonResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference primaryName, Menes.JsonReference? names, Menes.JsonReference? addresses, Menes.JsonReference? telephoneNumbers, Menes.JsonReference? emailAddresses, Menes.JsonProperties<PersonResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Menes.JsonReference item2)
                {
                    this.primaryName = item2;
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is Menes.JsonReference item3)
                {
                    this.names = item3;
                }
                else
                {
                    this.names = null;
                }
                if (addresses is Menes.JsonReference item4)
                {
                    this.addresses = item4;
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is Menes.JsonReference item5)
                {
                    this.telephoneNumbers = item5;
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is Menes.JsonReference item6)
                {
                    this.emailAddresses = item6;
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.primaryName is null || this.primaryName.Value.IsNull) && (this.names is null || this.names.Value.IsNull) && (this.addresses is null || this.addresses.Value.IsNull) && (this.telephoneNumbers is null || this.telephoneNumbers.Value.IsNull) && (this.emailAddresses is null || this.emailAddresses.Value.IsNull);
            public PersonResource.LinksEntity? AsOptional => this.IsNull ? default(PersonResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public Link PrimaryName => this.primaryName?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
            public LinkCollection? Names => this.names?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, NamesPropertyNameBytes.Span).AsOptional;
            public LinkCollection? Addresses => this.addresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, AddressesPropertyNameBytes.Span).AsOptional;
            public LinkCollection? TelephoneNumbers => this.telephoneNumbers?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, TelephoneNumbersPropertyNameBytes.Span).AsOptional;
            public LinkCollection? EmailAddresses => this.emailAddresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, EmailAddressesPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.LinksEntity(property)
                        : Null)
                : Null;
            public PersonResource.LinksEntity WithSelf(Link value)
            {
                return new PersonResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public PersonResource.LinksEntity WithPrimaryName(Link value)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public PersonResource.LinksEntity WithNames(LinkCollection? value)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), Menes.JsonReference.FromValue(value), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public PersonResource.LinksEntity WithAddresses(LinkCollection? value)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), Menes.JsonReference.FromValue(value), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public PersonResource.LinksEntity WithTelephoneNumbers(LinkCollection? value)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), Menes.JsonReference.FromValue(value), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public PersonResource.LinksEntity WithEmailAddresses(LinkCollection? value)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonResource.LinksEntity ReplaceAll(Menes.JsonProperties<PersonResource.PropertiesEntity> newAdditional)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), newAdditional);
            }
            public PersonResource.LinksEntity ReplaceAll(params (string, PersonResource.PropertiesEntity)[] newAdditional)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonResource.LinksEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonResource.LinksEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1, (string, PersonResource.PropertiesEntity) newAdditional2)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonResource.LinksEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1, (string, PersonResource.PropertiesEntity) newAdditional2, (string, PersonResource.PropertiesEntity) newAdditional3)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonResource.LinksEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1, (string, PersonResource.PropertiesEntity) newAdditional2, (string, PersonResource.PropertiesEntity) newAdditional3, (string, PersonResource.PropertiesEntity) newAdditional4)
            {
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonResource.LinksEntity Add(params (string, PersonResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(name, value));
                }
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1, (string name, PersonResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1, (string name, PersonResource.PropertiesEntity value) newAdditional2, (string name, PersonResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1, (string name, PersonResource.PropertiesEntity value) newAdditional2, (string name, PersonResource.PropertiesEntity value) newAdditional3, (string name, PersonResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.primaryName is Menes.JsonReference primaryName)
                    {
                        writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                        primaryName.WriteTo(writer);
                    }
                    if (this.names is Menes.JsonReference names)
                    {
                        writer.WritePropertyName(EncodedNamesPropertyName);
                        names.WriteTo(writer);
                    }
                    if (this.addresses is Menes.JsonReference addresses)
                    {
                        writer.WritePropertyName(EncodedAddressesPropertyName);
                        addresses.WriteTo(writer);
                    }
                    if (this.telephoneNumbers is Menes.JsonReference telephoneNumbers)
                    {
                        writer.WritePropertyName(EncodedTelephoneNumbersPropertyName);
                        telephoneNumbers.WriteTo(writer);
                    }
                    if (this.emailAddresses is Menes.JsonReference emailAddresses)
                    {
                        writer.WritePropertyName(EncodedEmailAddressesPropertyName);
                        emailAddresses.WriteTo(writer);
                    }
                    Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.PrimaryName.Equals(other.PrimaryName) && this.Names.Equals(other.Names) && this.Addresses.Equals(other.Addresses) && this.TelephoneNumbers.Equals(other.TelephoneNumbers) && this.EmailAddresses.Equals(other.EmailAddresses) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                if (this.Names is LinkCollection names)
                {
                    context = Menes.Validation.ValidateProperty(context, names, NamesPropertyNamePath);
                }
                if (this.Addresses is LinkCollection addresses)
                {
                    context = Menes.Validation.ValidateProperty(context, addresses, AddressesPropertyNamePath);
                }
                if (this.TelephoneNumbers is LinkCollection telephoneNumbers)
                {
                    context = Menes.Validation.ValidateProperty(context, telephoneNumbers, TelephoneNumbersPropertyNamePath);
                }
                if (this.EmailAddresses is LinkCollection emailAddresses)
                {
                    context = Menes.Validation.ValidateProperty(context, emailAddresses, EmailAddressesPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetPrimaryName()
            {
                if (this.primaryName is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNames()
            {
                if (this.names is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NamesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetAddresses()
            {
                if (this.addresses is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(AddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetTelephoneNumbers()
            {
                if (this.telephoneNumbers is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(TelephoneNumbersPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmailAddresses()
            {
                if (this.emailAddresses is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmailAddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PersonResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new PersonResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<PersonResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<PersonResource.PropertiesEntity>
        {
            public static readonly PersonResource.EmbeddedEntity Null = new PersonResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.EmbeddedEntity> FromJsonElement = e => new PersonResource.EmbeddedEntity(e);
            private const string PrimaryNamePropertyNamePath = ".primaryName";
            private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
            private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(PrimaryNamePropertyNameBytes);
            private readonly Menes.JsonReference? primaryName;
            private readonly Menes.JsonProperties<PersonResource.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.primaryName = null;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonNameResource primaryName)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonNameResource primaryName, params (string, PersonResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PropertiesEntity) additionalProperty1)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PropertiesEntity) additionalProperty1, (string, PersonResource.PropertiesEntity) additionalProperty2)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PropertiesEntity) additionalProperty1, (string, PersonResource.PropertiesEntity) additionalProperty2, (string, PersonResource.PropertiesEntity) additionalProperty3)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PropertiesEntity) additionalProperty1, (string, PersonResource.PropertiesEntity) additionalProperty2, (string, PersonResource.PropertiesEntity) additionalProperty3, (string, PersonResource.PropertiesEntity) additionalProperty4)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonReference primaryName, Menes.JsonProperties<PersonResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (primaryName is Menes.JsonReference item1)
                {
                    this.primaryName = item1;
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.primaryName is null || this.primaryName.Value.IsNull);
            public PersonResource.EmbeddedEntity? AsOptional => this.IsNull ? default(PersonResource.EmbeddedEntity?) : this;
            public PersonNameResource PrimaryName => this.primaryName?.AsValue<PersonNameResource>() ?? PersonNameResource.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public PersonResource.EmbeddedEntity WithPrimaryName(PersonNameResource value)
            {
                return new PersonResource.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<PersonResource.PropertiesEntity> newAdditional)
            {
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), newAdditional);
            }
            public PersonResource.EmbeddedEntity ReplaceAll(params (string, PersonResource.PropertiesEntity)[] newAdditional)
            {
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonResource.EmbeddedEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1)
            {
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonResource.EmbeddedEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1, (string, PersonResource.PropertiesEntity) newAdditional2)
            {
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonResource.EmbeddedEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1, (string, PersonResource.PropertiesEntity) newAdditional2, (string, PersonResource.PropertiesEntity) newAdditional3)
            {
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonResource.EmbeddedEntity ReplaceAll((string, PersonResource.PropertiesEntity) newAdditional1, (string, PersonResource.PropertiesEntity) newAdditional2, (string, PersonResource.PropertiesEntity) newAdditional3, (string, PersonResource.PropertiesEntity) newAdditional4)
            {
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonResource.EmbeddedEntity Add(params (string, PersonResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(name, value));
                }
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1, (string name, PersonResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1, (string name, PersonResource.PropertiesEntity value) newAdditional2, (string name, PersonResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Add((string name, PersonResource.PropertiesEntity value) newAdditional1, (string name, PersonResource.PropertiesEntity value) newAdditional2, (string name, PersonResource.PropertiesEntity value) newAdditional3, (string name, PersonResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.primaryName is Menes.JsonReference primaryName)
                    {
                        writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                        primaryName.WriteTo(writer);
                    }
                    Menes.JsonProperties<PersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.PrimaryName.Equals(other.PrimaryName) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetPrimaryName()
            {
                if (this.primaryName is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PersonResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new PersonResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct PersonResourceEntity : Menes.IJsonObject, System.IEquatable<PersonResource.PersonResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly PersonResource.PersonResourceEntity Null = new PersonResource.PersonResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.PersonResourceEntity> FromJsonElement = e => new PersonResource.PersonResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private const string EmbeddedPropertyNamePath = "._embedded";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonReference? embedded;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public PersonResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.embedded = null;
                this.additionalPropertiesBacking = null;
            }
            public PersonResourceEntity(PersonResource.PersonResourceEntity.LinksEntity? links, PersonResource.PersonResourceEntity.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
            {
                if (links is PersonResource.PersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonResource.PersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public PersonResourceEntity(PersonResource.PersonResourceEntity.LinksEntity? links, PersonResource.PersonResourceEntity.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is PersonResource.PersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonResource.PersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public PersonResourceEntity(PersonResource.PersonResourceEntity.LinksEntity? links = null, PersonResource.PersonResourceEntity.EmbeddedEntity? embedded = null)
            {
                if (links is PersonResource.PersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonResource.PersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public PersonResourceEntity(PersonResource.PersonResourceEntity.LinksEntity? links, PersonResource.PersonResourceEntity.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is PersonResource.PersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonResource.PersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public PersonResourceEntity(PersonResource.PersonResourceEntity.LinksEntity? links, PersonResource.PersonResourceEntity.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is PersonResource.PersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonResource.PersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public PersonResourceEntity(PersonResource.PersonResourceEntity.LinksEntity? links, PersonResource.PersonResourceEntity.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is PersonResource.PersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonResource.PersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public PersonResourceEntity(PersonResource.PersonResourceEntity.LinksEntity? links, PersonResource.PersonResourceEntity.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is PersonResource.PersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonResource.PersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private PersonResourceEntity(Menes.JsonReference? links, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                if (embedded is Menes.JsonReference item2)
                {
                    this.embedded = item2;
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
            public PersonResource.PersonResourceEntity? AsOptional => this.IsNull ? default(PersonResource.PersonResourceEntity?) : this;
            public PersonResource.PersonResourceEntity.LinksEntity? Links => this.links?.AsValue<PersonResource.PersonResourceEntity.LinksEntity>() ?? PersonResource.PersonResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span).AsOptional;
            public PersonResource.PersonResourceEntity.EmbeddedEntity? Embedded => this.embedded?.AsValue<PersonResource.PersonResourceEntity.EmbeddedEntity>() ?? PersonResource.PersonResourceEntity.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonResource.PersonResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.PersonResourceEntity(property)
                        : Null)
                    : Null;
            public static PersonResource.PersonResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.PersonResourceEntity(property)
                        : Null)
                    : Null;
            public static PersonResource.PersonResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonResource.PersonResourceEntity(property)
                        : Null)
                : Null;
            public PersonResource.PersonResourceEntity WithLinks(PersonResource.PersonResourceEntity.LinksEntity? value)
            {
                return new PersonResource.PersonResourceEntity(Menes.JsonReference.FromValue(value), this.GetEmbedded(), this.GetJsonProperties());
            }
            public PersonResource.PersonResourceEntity WithEmbedded(PersonResource.PersonResourceEntity.EmbeddedEntity? value)
            {
                return new PersonResource.PersonResourceEntity(this.GetLinks(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonResource.PersonResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), newAdditional);
            }
            public PersonResource.PersonResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public PersonResource.PersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public PersonResource.PersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonResource.PersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonResource.PersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonResource.PersonResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonResource.PersonResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonResource.PersonResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    if (this.embedded is Menes.JsonReference embedded)
                    {
                        writer.WritePropertyName(EncodedEmbeddedPropertyName);
                        embedded.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonResource.PersonResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                if (this.Links is PersonResource.PersonResourceEntity.LinksEntity links)
                {
                    context = Menes.Validation.ValidateProperty(context, links, LinksPropertyNamePath);
                }
                if (this.Embedded is PersonResource.PersonResourceEntity.EmbeddedEntity embedded)
                {
                    context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference? GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmbedded()
            {
                if (this.embedded is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PersonResource.PersonResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly PersonResource.PersonResourceEntity.LinksEntity Null = new PersonResource.PersonResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.PersonResourceEntity.LinksEntity> FromJsonElement = e => new PersonResource.PersonResourceEntity.LinksEntity(e);
                private const string PrimaryNamePropertyNamePath = ".primaryName";
                private const string NamesPropertyNamePath = ".names";
                private const string AddressesPropertyNamePath = ".addresses";
                private const string TelephoneNumbersPropertyNamePath = ".telephoneNumbers";
                private const string EmailAddressesPropertyNamePath = ".emailAddresses";
                private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
                private static readonly System.ReadOnlyMemory<byte> NamesPropertyNameBytes = new byte[] { 110, 97, 109, 101, 115 };
                private static readonly System.ReadOnlyMemory<byte> AddressesPropertyNameBytes = new byte[] { 97, 100, 100, 114, 101, 115, 115, 101, 115 };
                private static readonly System.ReadOnlyMemory<byte> TelephoneNumbersPropertyNameBytes = new byte[] { 116, 101, 108, 101, 112, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 115 };
                private static readonly System.ReadOnlyMemory<byte> EmailAddressesPropertyNameBytes = new byte[] { 101, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 101, 115 };
                private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNamesPropertyName = System.Text.Json.JsonEncodedText.Encode(NamesPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(AddressesPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedTelephoneNumbersPropertyName = System.Text.Json.JsonEncodedText.Encode(TelephoneNumbersPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedEmailAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(EmailAddressesPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(PrimaryNamePropertyNameBytes, NamesPropertyNameBytes, AddressesPropertyNameBytes, TelephoneNumbersPropertyNameBytes, EmailAddressesPropertyNameBytes);
                private readonly Menes.JsonReference? primaryName;
                private readonly Menes.JsonReference? names;
                private readonly Menes.JsonReference? addresses;
                private readonly Menes.JsonReference? telephoneNumbers;
                private readonly Menes.JsonReference? emailAddresses;
                private readonly Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.primaryName = null;
                    this.names = null;
                    this.addresses = null;
                    this.telephoneNumbers = null;
                    this.emailAddresses = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(Link primaryName)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.names = null;
                    this.addresses = null;
                    this.telephoneNumbers = null;
                    this.emailAddresses = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, params (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(Link primaryName, LinkCollection? names = null, LinkCollection? addresses = null, LinkCollection? telephoneNumbers = null, LinkCollection? emailAddresses = null)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference primaryName, Menes.JsonReference? names, Menes.JsonReference? addresses, Menes.JsonReference? telephoneNumbers, Menes.JsonReference? emailAddresses, Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (primaryName is Menes.JsonReference item1)
                    {
                        this.primaryName = item1;
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is Menes.JsonReference item2)
                    {
                        this.names = item2;
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is Menes.JsonReference item3)
                    {
                        this.addresses = item3;
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is Menes.JsonReference item4)
                    {
                        this.telephoneNumbers = item4;
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is Menes.JsonReference item5)
                    {
                        this.emailAddresses = item5;
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.primaryName is null || this.primaryName.Value.IsNull) && (this.names is null || this.names.Value.IsNull) && (this.addresses is null || this.addresses.Value.IsNull) && (this.telephoneNumbers is null || this.telephoneNumbers.Value.IsNull) && (this.emailAddresses is null || this.emailAddresses.Value.IsNull);
                public PersonResource.PersonResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(PersonResource.PersonResourceEntity.LinksEntity?) : this;
                public Link PrimaryName => this.primaryName?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
                public LinkCollection? Names => this.names?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, NamesPropertyNameBytes.Span).AsOptional;
                public LinkCollection? Addresses => this.addresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, AddressesPropertyNameBytes.Span).AsOptional;
                public LinkCollection? TelephoneNumbers => this.telephoneNumbers?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, TelephoneNumbersPropertyNameBytes.Span).AsOptional;
                public LinkCollection? EmailAddresses => this.emailAddresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, EmailAddressesPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static PersonResource.PersonResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonResource.PersonResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PersonResource.PersonResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonResource.PersonResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PersonResource.PersonResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PersonResource.PersonResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public PersonResource.PersonResourceEntity.LinksEntity WithPrimaryName(Link value)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public PersonResource.PersonResourceEntity.LinksEntity WithNames(LinkCollection? value)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), Menes.JsonReference.FromValue(value), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public PersonResource.PersonResourceEntity.LinksEntity WithAddresses(LinkCollection? value)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), Menes.JsonReference.FromValue(value), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public PersonResource.PersonResourceEntity.LinksEntity WithTelephoneNumbers(LinkCollection? value)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), Menes.JsonReference.FromValue(value), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public PersonResource.PersonResourceEntity.LinksEntity WithEmailAddresses(LinkCollection? value)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public PersonResource.PersonResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), newAdditional);
                }
                public PersonResource.PersonResourceEntity.LinksEntity ReplaceAll(params (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public PersonResource.PersonResourceEntity.LinksEntity ReplaceAll((string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public PersonResource.PersonResourceEntity.LinksEntity ReplaceAll((string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public PersonResource.PersonResourceEntity.LinksEntity ReplaceAll((string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public PersonResource.PersonResourceEntity.LinksEntity ReplaceAll((string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Add(params (string, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Add((string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Add((string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Add((string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Add((string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.primaryName is Menes.JsonReference primaryName)
                        {
                            writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                            primaryName.WriteTo(writer);
                        }
                        if (this.names is Menes.JsonReference names)
                        {
                            writer.WritePropertyName(EncodedNamesPropertyName);
                            names.WriteTo(writer);
                        }
                        if (this.addresses is Menes.JsonReference addresses)
                        {
                            writer.WritePropertyName(EncodedAddressesPropertyName);
                            addresses.WriteTo(writer);
                        }
                        if (this.telephoneNumbers is Menes.JsonReference telephoneNumbers)
                        {
                            writer.WritePropertyName(EncodedTelephoneNumbersPropertyName);
                            telephoneNumbers.WriteTo(writer);
                        }
                        if (this.emailAddresses is Menes.JsonReference emailAddresses)
                        {
                            writer.WritePropertyName(EncodedEmailAddressesPropertyName);
                            emailAddresses.WriteTo(writer);
                        }
                        Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(PersonResource.PersonResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.PrimaryName.Equals(other.PrimaryName) && this.Names.Equals(other.Names) && this.Addresses.Equals(other.Addresses) && this.TelephoneNumbers.Equals(other.TelephoneNumbers) && this.EmailAddresses.Equals(other.EmailAddresses) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                    if (this.Names is LinkCollection names)
                    {
                        context = Menes.Validation.ValidateProperty(context, names, NamesPropertyNamePath);
                    }
                    if (this.Addresses is LinkCollection addresses)
                    {
                        context = Menes.Validation.ValidateProperty(context, addresses, AddressesPropertyNamePath);
                    }
                    if (this.TelephoneNumbers is LinkCollection telephoneNumbers)
                    {
                        context = Menes.Validation.ValidateProperty(context, telephoneNumbers, TelephoneNumbersPropertyNamePath);
                    }
                    if (this.EmailAddresses is LinkCollection emailAddresses)
                    {
                        context = Menes.Validation.ValidateProperty(context, emailAddresses, EmailAddressesPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetPrimaryName()
                {
                    if (this.primaryName is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNames()
                {
                    if (this.names is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NamesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetAddresses()
                {
                    if (this.addresses is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(AddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetTelephoneNumbers()
                {
                    if (this.telephoneNumbers is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(TelephoneNumbersPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetEmailAddresses()
                {
                    if (this.emailAddresses is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmailAddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new PersonResource.PersonResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }

            public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<PersonResource.PersonResourceEntity.EmbeddedEntity>, Menes.IJsonAdditionalProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>
            {
                public static readonly PersonResource.PersonResourceEntity.EmbeddedEntity Null = new PersonResource.PersonResourceEntity.EmbeddedEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.PersonResourceEntity.EmbeddedEntity> FromJsonElement = e => new PersonResource.PersonResourceEntity.EmbeddedEntity(e);
                private const string PrimaryNamePropertyNamePath = ".primaryName";
                private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
                private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(PrimaryNamePropertyNameBytes);
                private readonly Menes.JsonReference? primaryName;
                private readonly Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking;
                public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.primaryName = null;
                    this.additionalPropertiesBacking = null;
                }
                public EmbeddedEntity(PersonNameResource primaryName)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public EmbeddedEntity(PersonNameResource primaryName, params (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty2)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty3)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty3, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty4)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private EmbeddedEntity(Menes.JsonReference primaryName, Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (primaryName is Menes.JsonReference item1)
                    {
                        this.primaryName = item1;
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.primaryName is null || this.primaryName.Value.IsNull);
                public PersonResource.PersonResourceEntity.EmbeddedEntity? AsOptional => this.IsNull ? default(PersonResource.PersonResourceEntity.EmbeddedEntity?) : this;
                public PersonNameResource PrimaryName => this.primaryName?.AsValue<PersonNameResource>() ?? PersonNameResource.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static PersonResource.PersonResourceEntity.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonResource.PersonResourceEntity.EmbeddedEntity(property)
                            : Null)
                        : Null;
                public static PersonResource.PersonResourceEntity.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonResource.PersonResourceEntity.EmbeddedEntity(property)
                            : Null)
                        : Null;
                public static PersonResource.PersonResourceEntity.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PersonResource.PersonResourceEntity.EmbeddedEntity(property)
                            : Null)
                    : Null;
                public PersonResource.PersonResourceEntity.EmbeddedEntity WithPrimaryName(PersonNameResource value)
                {
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity ReplaceAll(Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> newAdditional)
                {
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), newAdditional);
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity ReplaceAll(params (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity)[] newAdditional)
                {
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity ReplaceAll((string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1)
                {
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity ReplaceAll((string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional2)
                {
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity ReplaceAll((string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional3)
                {
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity ReplaceAll((string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional3, (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional4)
                {
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Add(params (string, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(name, value));
                    }
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Add((string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Add((string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Add((string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Add((string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional3, (string name, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonResource.PersonResourceEntity.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonResource.PersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.primaryName is Menes.JsonReference primaryName)
                        {
                            writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                            primaryName.WriteTo(writer);
                        }
                        Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(PersonResource.PersonResourceEntity.EmbeddedEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.PrimaryName.Equals(other.PrimaryName) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetPrimaryName()
                {
                    if (this.primaryName is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new PersonResource.PersonResourceEntity.EmbeddedEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Resource clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(ResourceCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                    public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                    public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                    public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Resource.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (ResourceCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                    public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsResource)
                        {
                            builder.Append("{");
                            builder.Append("Resource");
                            builder.Append(", ");
                            builder.Append(this.AsResource().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsResourceCollection)
                        {
                            builder.Append("{");
                            builder.Append("ResourceCollection");
                            builder.Append(", ");
                            builder.Append(this.AsResourceCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsResource)
                        {
                            validationContext1 = this.AsResource().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                        }
                        if (this.IsResourceCollection)
                        {
                            validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonResource.PropertiesEntity> FromJsonElement = e => new PersonResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            private readonly Menes.JsonReference? item3;
            private readonly Menes.JsonReference? item4;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(Resource clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item3 = null;
                }
                else
                {
                    this.item3 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item4 = null;
            }
            public PropertiesEntity(ResourceCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item4 = null;
                }
                else
                {
                    this.item4 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && this.item3 is null && this.item4 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResource => this.item3 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResourceCollection => this.item4 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
            public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
            public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
            public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (Resource.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (ResourceCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public Resource AsResource() => this.item3?.AsValue<Resource>() ?? new Resource(this.JsonElement);
            public ResourceCollection AsResourceCollection() => this.item4?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else if (this.item3 is Menes.JsonReference item3)
                {
                    item3.WriteTo(writer);
                }
                else if (this.item4 is Menes.JsonReference item4)
                {
                    item4.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResource)
                {
                    builder.Append("{");
                    builder.Append("Resource");
                    builder.Append(", ");
                    builder.Append(this.AsResource().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResourceCollection)
                {
                    builder.Append("{");
                    builder.Append("ResourceCollection");
                    builder.Append(", ");
                    builder.Append(this.AsResourceCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext3 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext4 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                if (this.IsResource)
                {
                    validationContext3 = this.AsResource().Validate(validationContext3);
                }
                else
                {
                    validationContext3 = validationContext3.WithError("The value is not convertible to a Resource.");
                }
                if (this.IsResourceCollection)
                {
                    validationContext4 = this.AsResourceCollection().Validate(validationContext4);
                }
                else
                {
                    validationContext4 = validationContext4.WithError("The value is not convertible to a ResourceCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2, validationContext3, validationContext4);
            }
        }
    }
    public readonly struct PersonNameResource : Menes.IJsonObject, System.IEquatable<PersonNameResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly PersonNameResource Null = new PersonNameResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, PersonNameResource> FromJsonElement = e => new PersonNameResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private const string TitlePropertyNamePath = ".title";
        private const string GivenNamePropertyNamePath = ".givenName";
        private const string FamilyNamePropertyNamePath = ".familyName";
        private const string SuffixPropertyNamePath = ".suffix";
        private const string OtherNamesPropertyNamePath = ".otherNames";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.ReadOnlyMemory<byte> TitlePropertyNameBytes = new byte[] { 116, 105, 116, 108, 101 };
        private static readonly System.ReadOnlyMemory<byte> GivenNamePropertyNameBytes = new byte[] { 103, 105, 118, 101, 110, 78, 97, 109, 101 };
        private static readonly System.ReadOnlyMemory<byte> FamilyNamePropertyNameBytes = new byte[] { 102, 97, 109, 105, 108, 121, 78, 97, 109, 101 };
        private static readonly System.ReadOnlyMemory<byte> SuffixPropertyNameBytes = new byte[] { 115, 117, 102, 102, 105, 120 };
        private static readonly System.ReadOnlyMemory<byte> OtherNamesPropertyNameBytes = new byte[] { 111, 116, 104, 101, 114, 78, 97, 109, 101, 115 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedTitlePropertyName = System.Text.Json.JsonEncodedText.Encode(TitlePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedGivenNamePropertyName = System.Text.Json.JsonEncodedText.Encode(GivenNamePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedFamilyNamePropertyName = System.Text.Json.JsonEncodedText.Encode(FamilyNamePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedSuffixPropertyName = System.Text.Json.JsonEncodedText.Encode(SuffixPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedOtherNamesPropertyName = System.Text.Json.JsonEncodedText.Encode(OtherNamesPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes, TitlePropertyNameBytes, GivenNamePropertyNameBytes, FamilyNamePropertyNameBytes, SuffixPropertyNameBytes, OtherNamesPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly PersonNameResource.TitleValue? title;
        private readonly PersonNameResource.GivenNameValue? givenName;
        private readonly PersonNameResource.FamilyNameValue? familyName;
        private readonly Menes.JsonString? suffix;
        private readonly Menes.JsonReference? otherNames;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public PersonNameResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.title = null;
            this.givenName = null;
            this.familyName = null;
            this.suffix = null;
            this.otherNames = null;
            this.additionalPropertiesBacking = null;
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames)
        {
            this.contentType = null;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.title = null;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = null;
            if (otherNames is PersonNameResource.OtherNamesArray item2)
            {
                this.otherNames = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames, Menes.JsonString? contentType, PersonNameResource.EmbeddedEntity? embedded, PersonNameResource.TitleValue? title, Menes.JsonString? suffix, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonNameResource.OtherNamesArray item3)
            {
                this.otherNames = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames, Menes.JsonString? contentType, PersonNameResource.EmbeddedEntity? embedded, PersonNameResource.TitleValue? title, Menes.JsonString? suffix, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonNameResource.OtherNamesArray item3)
            {
                this.otherNames = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames, Menes.JsonString? contentType = null, PersonNameResource.EmbeddedEntity? embedded = null, PersonNameResource.TitleValue? title = null, Menes.JsonString? suffix = null)
        {
            this.contentType = contentType;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonNameResource.OtherNamesArray item3)
            {
                this.otherNames = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames, Menes.JsonString? contentType, PersonNameResource.EmbeddedEntity? embedded, PersonNameResource.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonNameResource.OtherNamesArray item3)
            {
                this.otherNames = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames, Menes.JsonString? contentType, PersonNameResource.EmbeddedEntity? embedded, PersonNameResource.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonNameResource.OtherNamesArray item3)
            {
                this.otherNames = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames, Menes.JsonString? contentType, PersonNameResource.EmbeddedEntity? embedded, PersonNameResource.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonNameResource.OtherNamesArray item3)
            {
                this.otherNames = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public PersonNameResource(PersonNameResource.LinksEntity links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, PersonNameResource.OtherNamesArray otherNames, Menes.JsonString? contentType, PersonNameResource.EmbeddedEntity? embedded, PersonNameResource.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is PersonNameResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonNameResource.OtherNamesArray item3)
            {
                this.otherNames = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private PersonNameResource(Menes.JsonReference links, PersonNameResource.GivenNameValue givenName, PersonNameResource.FamilyNameValue familyName, Menes.JsonReference otherNames, Menes.JsonString? contentType, Menes.JsonReference? embedded, PersonNameResource.TitleValue? title, Menes.JsonString? suffix, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is Menes.JsonReference item3)
            {
                this.otherNames = item3;
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull) && (this.title is null || this.title.Value.IsNull) && (this.givenName is null || this.givenName.Value.IsNull) && (this.familyName is null || this.familyName.Value.IsNull) && (this.suffix is null || this.suffix.Value.IsNull) && (this.otherNames is null || this.otherNames.Value.IsNull);
        public PersonNameResource? AsOptional => this.IsNull ? default(PersonNameResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public PersonNameResource.LinksEntity Links => this.links?.AsValue<PersonNameResource.LinksEntity>() ?? PersonNameResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public PersonNameResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<PersonNameResource.EmbeddedEntity>() ?? PersonNameResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public PersonNameResource.TitleValue? Title => this.title ?? PersonNameResource.TitleValue.FromOptionalProperty(this.JsonElement, TitlePropertyNameBytes.Span).AsOptional;
        public PersonNameResource.GivenNameValue GivenName => this.givenName ?? PersonNameResource.GivenNameValue.FromOptionalProperty(this.JsonElement, GivenNamePropertyNameBytes.Span);
        public PersonNameResource.FamilyNameValue FamilyName => this.familyName ?? PersonNameResource.FamilyNameValue.FromOptionalProperty(this.JsonElement, FamilyNamePropertyNameBytes.Span);
        public Menes.JsonString? Suffix => this.suffix ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, SuffixPropertyNameBytes.Span).AsOptional;
        public PersonNameResource.OtherNamesArray OtherNames => this.otherNames?.AsValue<PersonNameResource.OtherNamesArray>() ?? PersonNameResource.OtherNamesArray.FromOptionalProperty(this.JsonElement, OtherNamesPropertyNameBytes.Span);
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static PersonNameResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonNameResource(property)
                    : Null)
                : Null;
        public static PersonNameResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonNameResource(property)
                    : Null)
                : Null;
        public static PersonNameResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new PersonNameResource(property)
                    : Null)
            : Null;
        public PersonNameResource WithContentType(Menes.JsonString? value)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), value, this.GetEmbedded(), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonNameResource WithLinks(PersonNameResource.LinksEntity value)
        {
            return new PersonNameResource(Menes.JsonReference.FromValue(value), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonNameResource WithEmbedded(PersonNameResource.EmbeddedEntity? value)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, Menes.JsonReference.FromValue(value), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonNameResource WithTitle(PersonNameResource.TitleValue? value)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), value, this.Suffix, this.GetJsonProperties());
        }
        public PersonNameResource WithGivenName(PersonNameResource.GivenNameValue value)
        {
            return new PersonNameResource(this.GetLinks(), value, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonNameResource WithFamilyName(PersonNameResource.FamilyNameValue value)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, value, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonNameResource WithSuffix(Menes.JsonString? value)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, value, this.GetJsonProperties());
        }
        public PersonNameResource WithOtherNames(PersonNameResource.OtherNamesArray value)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonNameResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, newAdditional);
        }
        public PersonNameResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public PersonNameResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public PersonNameResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public PersonNameResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public PersonNameResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public PersonNameResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameResource(this.GetLinks(), this.GivenName, this.FamilyName, this.GetOtherNames(), this.ContentType, this.GetEmbedded(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                if (this.title is PersonNameResource.TitleValue title)
                {
                    writer.WritePropertyName(EncodedTitlePropertyName);
                    title.WriteTo(writer);
                }
                if (this.givenName is PersonNameResource.GivenNameValue givenName)
                {
                    writer.WritePropertyName(EncodedGivenNamePropertyName);
                    givenName.WriteTo(writer);
                }
                if (this.familyName is PersonNameResource.FamilyNameValue familyName)
                {
                    writer.WritePropertyName(EncodedFamilyNamePropertyName);
                    familyName.WriteTo(writer);
                }
                if (this.suffix is Menes.JsonString suffix)
                {
                    writer.WritePropertyName(EncodedSuffixPropertyName);
                    suffix.WriteTo(writer);
                }
                if (this.otherNames is Menes.JsonReference otherNames)
                {
                    writer.WritePropertyName(EncodedOtherNamesPropertyName);
                    otherNames.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(PersonNameResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && this.Title.Equals(other.Title) && this.GivenName.Equals(other.GivenName) && this.FamilyName.Equals(other.FamilyName) && this.Suffix.Equals(other.Suffix) && this.OtherNames.Equals(other.OtherNames) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is PersonNameResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            if (this.Title is PersonNameResource.TitleValue title)
            {
                context = Menes.Validation.ValidateProperty(context, title, TitlePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.GivenName, GivenNamePropertyNamePath);
            context = Menes.Validation.ValidateRequiredProperty(context, this.FamilyName, FamilyNamePropertyNamePath);
            if (this.Suffix is Menes.JsonString suffix)
            {
                context = Menes.Validation.ValidateProperty(context, suffix, SuffixPropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.OtherNames, OtherNamesPropertyNamePath);
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            PersonName personNameValue1 = thisAsAny.As<PersonName>();
            allOfValidationContext2 = personNameValue1.Validate(allOfValidationContext2);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference GetOtherNames()
        {
            if (this.otherNames is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(OtherNamesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PersonNameResource.LinksEntity>, Menes.IJsonAdditionalProperties<PersonNameResource.LinksEntity.PropertiesEntity>
        {
            public static readonly PersonNameResource.LinksEntity Null = new PersonNameResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonNameResource.LinksEntity> FromJsonElement = e => new PersonNameResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, params (string, PersonNameResource.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty3, (string, PersonNameResource.LinksEntity.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull);
            public PersonNameResource.LinksEntity? AsOptional => this.IsNull ? default(PersonNameResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonNameResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonNameResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonNameResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameResource.LinksEntity(property)
                        : Null)
                : Null;
            public PersonNameResource.LinksEntity WithSelf(Link value)
            {
                return new PersonNameResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonNameResource.LinksEntity ReplaceAll(Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity> newAdditional)
            {
                return new PersonNameResource.LinksEntity(this.GetSelf(), newAdditional);
            }
            public PersonNameResource.LinksEntity ReplaceAll(params (string, PersonNameResource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                return new PersonNameResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonNameResource.LinksEntity ReplaceAll((string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional1)
            {
                return new PersonNameResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonNameResource.LinksEntity ReplaceAll((string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional2)
            {
                return new PersonNameResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonNameResource.LinksEntity ReplaceAll((string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional3)
            {
                return new PersonNameResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonNameResource.LinksEntity ReplaceAll((string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional3, (string, PersonNameResource.LinksEntity.PropertiesEntity) newAdditional4)
            {
                return new PersonNameResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonNameResource.LinksEntity Add(params (string, PersonNameResource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonNameResource.LinksEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(name, value));
                }
                return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Add((string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Add((string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Add((string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Add((string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional3, (string name, PersonNameResource.LinksEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonNameResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameResource.LinksEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameResource.LinksEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonNameResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameResource.LinksEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonNameResource.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonNameResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new PersonNameResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<PersonNameResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>
        {
            public static readonly PersonNameResource.EmbeddedEntity Null = new PersonNameResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonNameResource.EmbeddedEntity> FromJsonElement = e => new PersonNameResource.EmbeddedEntity(e);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>>.Empty;
            private readonly Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(params (string, PersonNameResource.EmbeddedEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty1)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty2)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty3)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty3, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) additionalProperty4)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PersonNameResource.EmbeddedEntity? AsOptional => this.IsNull ? default(PersonNameResource.EmbeddedEntity?) : this;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonNameResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonNameResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonNameResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public PersonNameResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity> newAdditional)
            {
                return new PersonNameResource.EmbeddedEntity(newAdditional);
            }
            public PersonNameResource.EmbeddedEntity ReplaceAll(params (string, PersonNameResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                return new PersonNameResource.EmbeddedEntity(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonNameResource.EmbeddedEntity ReplaceAll((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional1)
            {
                return new PersonNameResource.EmbeddedEntity(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonNameResource.EmbeddedEntity ReplaceAll((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional2)
            {
                return new PersonNameResource.EmbeddedEntity(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonNameResource.EmbeddedEntity ReplaceAll((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional3)
            {
                return new PersonNameResource.EmbeddedEntity(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonNameResource.EmbeddedEntity ReplaceAll((string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional3, (string, PersonNameResource.EmbeddedEntity.PropertiesEntity) newAdditional4)
            {
                return new PersonNameResource.EmbeddedEntity(Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonNameResource.EmbeddedEntity Add(params (string, PersonNameResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(name, value));
                }
                return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Add((string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Add((string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Add((string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Add((string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional3, (string name, PersonNameResource.EmbeddedEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameResource.EmbeddedEntity(new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonNameResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameResource.EmbeddedEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameResource.EmbeddedEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonNameResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameResource.EmbeddedEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonNameResource.EmbeddedEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonNameResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new PersonNameResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct TitleValue : Menes.IJsonValue, System.IEquatable<TitleValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, TitleValue> FromJsonElement = e => new TitleValue(e);
            public static readonly TitleValue Null = new TitleValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 50;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
            private readonly Menes.JsonString? value;
            public TitleValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public TitleValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public TitleValue? AsOptional => this.IsNull ? default(TitleValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator TitleValue(Menes.JsonString value)
            {
                return new TitleValue(value);
            }
            public static implicit operator TitleValue(string value)
            {
                return new TitleValue(value);
            }
            public static implicit operator string(TitleValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(TitleValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static TitleValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TitleValue(property)
                        : Null)
                    : Null;
            public static TitleValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TitleValue(property)
                        : Null)
                    : Null;
            public static TitleValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TitleValue(property)
                        : Null)
                    : Null;
            public bool Equals(TitleValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct GivenNameValue : Menes.IJsonValue, System.IEquatable<GivenNameValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, GivenNameValue> FromJsonElement = e => new GivenNameValue(e);
            public static readonly GivenNameValue Null = new GivenNameValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 50;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
            private readonly Menes.JsonString? value;
            public GivenNameValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public GivenNameValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public GivenNameValue? AsOptional => this.IsNull ? default(GivenNameValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator GivenNameValue(Menes.JsonString value)
            {
                return new GivenNameValue(value);
            }
            public static implicit operator GivenNameValue(string value)
            {
                return new GivenNameValue(value);
            }
            public static implicit operator string(GivenNameValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(GivenNameValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static GivenNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new GivenNameValue(property)
                        : Null)
                    : Null;
            public static GivenNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new GivenNameValue(property)
                        : Null)
                    : Null;
            public static GivenNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new GivenNameValue(property)
                        : Null)
                    : Null;
            public bool Equals(GivenNameValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct FamilyNameValue : Menes.IJsonValue, System.IEquatable<FamilyNameValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, FamilyNameValue> FromJsonElement = e => new FamilyNameValue(e);
            public static readonly FamilyNameValue Null = new FamilyNameValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 50;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
            private readonly Menes.JsonString? value;
            public FamilyNameValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public FamilyNameValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public FamilyNameValue? AsOptional => this.IsNull ? default(FamilyNameValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator FamilyNameValue(Menes.JsonString value)
            {
                return new FamilyNameValue(value);
            }
            public static implicit operator FamilyNameValue(string value)
            {
                return new FamilyNameValue(value);
            }
            public static implicit operator string(FamilyNameValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(FamilyNameValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static FamilyNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new FamilyNameValue(property)
                        : Null)
                    : Null;
            public static FamilyNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new FamilyNameValue(property)
                        : Null)
                    : Null;
            public static FamilyNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new FamilyNameValue(property)
                        : Null)
                    : Null;
            public bool Equals(FamilyNameValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct OtherNamesArray : Menes.IJsonValue, System.Collections.Generic.IEnumerable<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>, System.Collections.IEnumerable, System.IEquatable<OtherNamesArray>, System.IEquatable<Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, OtherNamesArray> FromJsonElement = e => new OtherNamesArray(e);
            public static readonly OtherNamesArray Null = new OtherNamesArray(default(System.Text.Json.JsonElement));
            private readonly Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>? value;
            public OtherNamesArray(Menes.JsonArray<Menes.JsonString> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                    foreach (Menes.JsonString item in jsonArray)
                    {
                        arrayBuilder.Add(item);
                    }
                    this.value = Menes.JsonArray.Create(arrayBuilder.ToImmutable());
                    this.JsonElement = default;
                }
            }
            public OtherNamesArray(Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = jsonArray;
                    this.JsonElement = default;
                }
            }
            public OtherNamesArray(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public int Length
            {
                get
                {
                    if (this.HasJsonElement)
                    {
                        return this.JsonElement.GetArrayLength();
                    }
                    if (this.value is Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> value)
                    {
                        return value.Length;
                    }
                    return 0;
                }
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public OtherNamesArray? AsOptional => this.IsNull ? default(OtherNamesArray?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator OtherNamesArray(Menes.JsonArray<Menes.JsonString> value)
            {
                return new OtherNamesArray(value);
            }
            public static implicit operator OtherNamesArray(Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> value)
            {
                return new OtherNamesArray(value);
            }
            public static implicit operator Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>(OtherNamesArray value)
            {
                if (value.value is Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.IsConvertibleFrom(jsonElement);
            }
            public static OtherNamesArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new OtherNamesArray(property)
                        : Null)
                    : Null;
            public static OtherNamesArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new OtherNamesArray(property)
                        : Null)
                    : Null;
            public static OtherNamesArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new OtherNamesArray(property)
                        : Null)
                    : Null;
            public bool Equals(OtherNamesArray other)
            {
                return this.Equals((Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>)other);
            }
            public bool Equals(Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> other)
            {
                return ((Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> array = this;
                Menes.ValidationContext context = validationContext;
                context = array.Validate(context);
                context = array.ValidateMinItems(context, 0);
                context = array.ValidateMaxItems(context, 10);
                return array.ValidateItems(context);
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                if (this.value is Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.JsonArrayEnumerator GetEnumerator()
            {
                return ((Menes.JsonArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>)this).GetEnumerator();
            }
            System.Collections.Generic.IEnumerator<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> System.Collections.Generic.IEnumerable<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            public OtherNamesArray Add(params PersonNameResource.OtherNamesArray.OtherNamesArrayValue[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in items)
                {
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item3, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                arrayBuilder.Add(item4);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, params PersonNameResource.OtherNamesArray.OtherNamesArrayValue[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue itemToInsert in items)
                        {
                            arrayBuilder.Add(itemToInsert);
                        }
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item3, in PersonNameResource.OtherNamesArray.OtherNamesArrayValue item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                        arrayBuilder.Add(item4);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(params PersonNameResource.OtherNamesArray.OtherNamesArrayValue[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    bool found = false;
                    foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue itemToRemove in items)
                    {
                        if (itemToRemove.Equals(item))
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        arrayBuilder.Add(item);
                    }
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2, PersonNameResource.OtherNamesArray.OtherNamesArrayValue item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonNameResource.OtherNamesArray.OtherNamesArrayValue item1, PersonNameResource.OtherNamesArray.OtherNamesArrayValue item2, PersonNameResource.OtherNamesArray.OtherNamesArrayValue item3, PersonNameResource.OtherNamesArray.OtherNamesArrayValue item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray RemoveAt(int indexToRemove)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToRemove)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray RemoveRange(int startIndex, int length)
            {
                if (startIndex < 0 || startIndex > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(startIndex));
                }
                if (length < 1 || startIndex + length > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(length));
                }
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index >= startIndex && index < startIndex + length)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(System.Predicate<PersonNameResource.OtherNamesArray.OtherNamesArrayValue> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonNameResource.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (removeIfTrue(item))
                    {
                        continue;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public readonly struct OtherNamesArrayValue : Menes.IJsonValue, System.IEquatable<OtherNamesArrayValue>
            {
                public static readonly System.Func<System.Text.Json.JsonElement, OtherNamesArrayValue> FromJsonElement = e => new OtherNamesArrayValue(e);
                public static readonly OtherNamesArrayValue Null = new OtherNamesArrayValue(default(System.Text.Json.JsonElement));
                private static readonly string? ConstValue = BuildConstValue();
                private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
                private static readonly int? MaxLength = 50;
                private static readonly int? MinLength = 0;
                private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
                private readonly Menes.JsonString? value;
                public OtherNamesArrayValue(Menes.JsonString value)
                {
                    if (value.HasJsonElement)
                    {
                        this.JsonElement = value.JsonElement;
                        this.value = null;
                    }
                    else
                    {
                        this.value = value;
                        this.JsonElement = default;
                    }
                }
                public OtherNamesArrayValue(System.Text.Json.JsonElement jsonElement)
                {
                    this.value = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public OtherNamesArrayValue? AsOptional => this.IsNull ? default(OtherNamesArrayValue?) : this;
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static implicit operator OtherNamesArrayValue(Menes.JsonString value)
                {
                    return new OtherNamesArrayValue(value);
                }
                public static implicit operator OtherNamesArrayValue(string value)
                {
                    return new OtherNamesArrayValue(value);
                }
                public static implicit operator string(OtherNamesArrayValue value)
                {
                    return (string)(Menes.JsonString)value;
                }
                public static implicit operator Menes.JsonString(OtherNamesArrayValue value)
                {
                    if (value.value is Menes.JsonString clrValue)
                    {
                        return clrValue;
                    }
                    return new Menes.JsonString(value.JsonElement);
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return Menes.JsonString.IsConvertibleFrom(jsonElement);
                }
                public static OtherNamesArrayValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new OtherNamesArrayValue(property)
                            : Null)
                        : Null;
                public static OtherNamesArrayValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new OtherNamesArrayValue(property)
                            : Null)
                        : Null;
                public static OtherNamesArrayValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new OtherNamesArrayValue(property)
                            : Null)
                        : Null;
                public bool Equals(OtherNamesArrayValue other)
                {
                    return this.Equals((Menes.JsonString)other);
                }
                public bool Equals(Menes.JsonString other)
                {
                    return ((Menes.JsonString)this).Equals(other);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.JsonString value = this;
                    Menes.ValidationContext context = validationContext;
                    context = value.Validate(context);
                    context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                    return context;
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else if (this.value is Menes.JsonString clrValue)
                    {
                        clrValue.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    if (this.value is Menes.JsonString clrValue)
                    {
                        return clrValue.ToString();
                    }
                    else
                    {
                        return this.JsonElement.GetRawText();
                    }
                }
                private static string? BuildConstValue()
                {
                    return null;
                }
                private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
                {
                    return null;
                }
            }
        }
    }
    public readonly struct PersonName : Menes.IJsonObject, System.IEquatable<PersonName>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly PersonName Null = new PersonName(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, PersonName> FromJsonElement = e => new PersonName(e);
        private const string TitlePropertyNamePath = ".title";
        private const string GivenNamePropertyNamePath = ".givenName";
        private const string FamilyNamePropertyNamePath = ".familyName";
        private const string SuffixPropertyNamePath = ".suffix";
        private const string OtherNamesPropertyNamePath = ".otherNames";
        private static readonly System.ReadOnlyMemory<byte> TitlePropertyNameBytes = new byte[] { 116, 105, 116, 108, 101 };
        private static readonly System.ReadOnlyMemory<byte> GivenNamePropertyNameBytes = new byte[] { 103, 105, 118, 101, 110, 78, 97, 109, 101 };
        private static readonly System.ReadOnlyMemory<byte> FamilyNamePropertyNameBytes = new byte[] { 102, 97, 109, 105, 108, 121, 78, 97, 109, 101 };
        private static readonly System.ReadOnlyMemory<byte> SuffixPropertyNameBytes = new byte[] { 115, 117, 102, 102, 105, 120 };
        private static readonly System.ReadOnlyMemory<byte> OtherNamesPropertyNameBytes = new byte[] { 111, 116, 104, 101, 114, 78, 97, 109, 101, 115 };
        private static readonly System.Text.Json.JsonEncodedText EncodedTitlePropertyName = System.Text.Json.JsonEncodedText.Encode(TitlePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedGivenNamePropertyName = System.Text.Json.JsonEncodedText.Encode(GivenNamePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedFamilyNamePropertyName = System.Text.Json.JsonEncodedText.Encode(FamilyNamePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedSuffixPropertyName = System.Text.Json.JsonEncodedText.Encode(SuffixPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedOtherNamesPropertyName = System.Text.Json.JsonEncodedText.Encode(OtherNamesPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(TitlePropertyNameBytes, GivenNamePropertyNameBytes, FamilyNamePropertyNameBytes, SuffixPropertyNameBytes, OtherNamesPropertyNameBytes);
        private readonly PersonName.TitleValue? title;
        private readonly PersonName.GivenNameValue? givenName;
        private readonly PersonName.FamilyNameValue? familyName;
        private readonly Menes.JsonString? suffix;
        private readonly Menes.JsonReference? otherNames;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public PersonName(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.title = null;
            this.givenName = null;
            this.familyName = null;
            this.suffix = null;
            this.otherNames = null;
            this.additionalPropertiesBacking = null;
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames)
        {
            this.title = null;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = null;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames, PersonName.TitleValue? title, Menes.JsonString? suffix, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames, PersonName.TitleValue? title, Menes.JsonString? suffix, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames, PersonName.TitleValue? title = null, Menes.JsonString? suffix = null)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames, PersonName.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames, PersonName.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames, PersonName.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, PersonName.OtherNamesArray otherNames, PersonName.TitleValue? title, Menes.JsonString? suffix, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is PersonName.OtherNamesArray item1)
            {
                this.otherNames = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private PersonName(PersonName.GivenNameValue givenName, PersonName.FamilyNameValue familyName, Menes.JsonReference otherNames, PersonName.TitleValue? title, Menes.JsonString? suffix, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.title = title;
            this.givenName = givenName;
            this.familyName = familyName;
            this.suffix = suffix;
            if (otherNames is Menes.JsonReference item1)
            {
                this.otherNames = item1;
            }
            else
            {
                this.otherNames = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.title is null || this.title.Value.IsNull) && (this.givenName is null || this.givenName.Value.IsNull) && (this.familyName is null || this.familyName.Value.IsNull) && (this.suffix is null || this.suffix.Value.IsNull) && (this.otherNames is null || this.otherNames.Value.IsNull);
        public PersonName? AsOptional => this.IsNull ? default(PersonName?) : this;
        public PersonName.TitleValue? Title => this.title ?? PersonName.TitleValue.FromOptionalProperty(this.JsonElement, TitlePropertyNameBytes.Span).AsOptional;
        public PersonName.GivenNameValue GivenName => this.givenName ?? PersonName.GivenNameValue.FromOptionalProperty(this.JsonElement, GivenNamePropertyNameBytes.Span);
        public PersonName.FamilyNameValue FamilyName => this.familyName ?? PersonName.FamilyNameValue.FromOptionalProperty(this.JsonElement, FamilyNamePropertyNameBytes.Span);
        public Menes.JsonString? Suffix => this.suffix ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, SuffixPropertyNameBytes.Span).AsOptional;
        public PersonName.OtherNamesArray OtherNames => this.otherNames?.AsValue<PersonName.OtherNamesArray>() ?? PersonName.OtherNamesArray.FromOptionalProperty(this.JsonElement, OtherNamesPropertyNameBytes.Span);
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static PersonName FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonName(property)
                    : Null)
                : Null;
        public static PersonName FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonName(property)
                    : Null)
                : Null;
        public static PersonName FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new PersonName(property)
                    : Null)
            : Null;
        public PersonName WithTitle(PersonName.TitleValue? value)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), value, this.Suffix, this.GetJsonProperties());
        }
        public PersonName WithGivenName(PersonName.GivenNameValue value)
        {
            return new PersonName(value, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonName WithFamilyName(PersonName.FamilyNameValue value)
        {
            return new PersonName(this.GivenName, value, this.GetOtherNames(), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonName WithSuffix(Menes.JsonString? value)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, value, this.GetJsonProperties());
        }
        public PersonName WithOtherNames(PersonName.OtherNamesArray value)
        {
            return new PersonName(this.GivenName, this.FamilyName, Menes.JsonReference.FromValue(value), this.Title, this.Suffix, this.GetJsonProperties());
        }
        public PersonName ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, newAdditional);
        }
        public PersonName ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public PersonName ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public PersonName ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public PersonName ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public PersonName ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public PersonName Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonName Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonName(this.GivenName, this.FamilyName, this.GetOtherNames(), this.Title, this.Suffix, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.title is PersonName.TitleValue title)
                {
                    writer.WritePropertyName(EncodedTitlePropertyName);
                    title.WriteTo(writer);
                }
                if (this.givenName is PersonName.GivenNameValue givenName)
                {
                    writer.WritePropertyName(EncodedGivenNamePropertyName);
                    givenName.WriteTo(writer);
                }
                if (this.familyName is PersonName.FamilyNameValue familyName)
                {
                    writer.WritePropertyName(EncodedFamilyNamePropertyName);
                    familyName.WriteTo(writer);
                }
                if (this.suffix is Menes.JsonString suffix)
                {
                    writer.WritePropertyName(EncodedSuffixPropertyName);
                    suffix.WriteTo(writer);
                }
                if (this.otherNames is Menes.JsonReference otherNames)
                {
                    writer.WritePropertyName(EncodedOtherNamesPropertyName);
                    otherNames.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(PersonName other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.Title.Equals(other.Title) && this.GivenName.Equals(other.GivenName) && this.FamilyName.Equals(other.FamilyName) && this.Suffix.Equals(other.Suffix) && this.OtherNames.Equals(other.OtherNames) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.Title is PersonName.TitleValue title)
            {
                context = Menes.Validation.ValidateProperty(context, title, TitlePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.GivenName, GivenNamePropertyNamePath);
            context = Menes.Validation.ValidateRequiredProperty(context, this.FamilyName, FamilyNamePropertyNamePath);
            if (this.Suffix is Menes.JsonString suffix)
            {
                context = Menes.Validation.ValidateProperty(context, suffix, SuffixPropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.OtherNames, OtherNamesPropertyNamePath);
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetOtherNames()
        {
            if (this.otherNames is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(OtherNamesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }
        public readonly struct TitleValue : Menes.IJsonValue, System.IEquatable<TitleValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, TitleValue> FromJsonElement = e => new TitleValue(e);
            public static readonly TitleValue Null = new TitleValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 50;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
            private readonly Menes.JsonString? value;
            public TitleValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public TitleValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public TitleValue? AsOptional => this.IsNull ? default(TitleValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator TitleValue(Menes.JsonString value)
            {
                return new TitleValue(value);
            }
            public static implicit operator TitleValue(string value)
            {
                return new TitleValue(value);
            }
            public static implicit operator string(TitleValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(TitleValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static TitleValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TitleValue(property)
                        : Null)
                    : Null;
            public static TitleValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TitleValue(property)
                        : Null)
                    : Null;
            public static TitleValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TitleValue(property)
                        : Null)
                    : Null;
            public bool Equals(TitleValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct GivenNameValue : Menes.IJsonValue, System.IEquatable<GivenNameValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, GivenNameValue> FromJsonElement = e => new GivenNameValue(e);
            public static readonly GivenNameValue Null = new GivenNameValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 50;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
            private readonly Menes.JsonString? value;
            public GivenNameValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public GivenNameValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public GivenNameValue? AsOptional => this.IsNull ? default(GivenNameValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator GivenNameValue(Menes.JsonString value)
            {
                return new GivenNameValue(value);
            }
            public static implicit operator GivenNameValue(string value)
            {
                return new GivenNameValue(value);
            }
            public static implicit operator string(GivenNameValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(GivenNameValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static GivenNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new GivenNameValue(property)
                        : Null)
                    : Null;
            public static GivenNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new GivenNameValue(property)
                        : Null)
                    : Null;
            public static GivenNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new GivenNameValue(property)
                        : Null)
                    : Null;
            public bool Equals(GivenNameValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct FamilyNameValue : Menes.IJsonValue, System.IEquatable<FamilyNameValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, FamilyNameValue> FromJsonElement = e => new FamilyNameValue(e);
            public static readonly FamilyNameValue Null = new FamilyNameValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 50;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
            private readonly Menes.JsonString? value;
            public FamilyNameValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public FamilyNameValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public FamilyNameValue? AsOptional => this.IsNull ? default(FamilyNameValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator FamilyNameValue(Menes.JsonString value)
            {
                return new FamilyNameValue(value);
            }
            public static implicit operator FamilyNameValue(string value)
            {
                return new FamilyNameValue(value);
            }
            public static implicit operator string(FamilyNameValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(FamilyNameValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static FamilyNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new FamilyNameValue(property)
                        : Null)
                    : Null;
            public static FamilyNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new FamilyNameValue(property)
                        : Null)
                    : Null;
            public static FamilyNameValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new FamilyNameValue(property)
                        : Null)
                    : Null;
            public bool Equals(FamilyNameValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct OtherNamesArray : Menes.IJsonValue, System.Collections.Generic.IEnumerable<PersonName.OtherNamesArray.OtherNamesArrayValue>, System.Collections.IEnumerable, System.IEquatable<OtherNamesArray>, System.IEquatable<Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, OtherNamesArray> FromJsonElement = e => new OtherNamesArray(e);
            public static readonly OtherNamesArray Null = new OtherNamesArray(default(System.Text.Json.JsonElement));
            private readonly Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>? value;
            public OtherNamesArray(Menes.JsonArray<Menes.JsonString> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                    foreach (Menes.JsonString item in jsonArray)
                    {
                        arrayBuilder.Add(item);
                    }
                    this.value = Menes.JsonArray.Create(arrayBuilder.ToImmutable());
                    this.JsonElement = default;
                }
            }
            public OtherNamesArray(Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = jsonArray;
                    this.JsonElement = default;
                }
            }
            public OtherNamesArray(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public int Length
            {
                get
                {
                    if (this.HasJsonElement)
                    {
                        return this.JsonElement.GetArrayLength();
                    }
                    if (this.value is Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue> value)
                    {
                        return value.Length;
                    }
                    return 0;
                }
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public OtherNamesArray? AsOptional => this.IsNull ? default(OtherNamesArray?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator OtherNamesArray(Menes.JsonArray<Menes.JsonString> value)
            {
                return new OtherNamesArray(value);
            }
            public static implicit operator OtherNamesArray(Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue> value)
            {
                return new OtherNamesArray(value);
            }
            public static implicit operator Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>(OtherNamesArray value)
            {
                if (value.value is Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue> clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.IsConvertibleFrom(jsonElement);
            }
            public static OtherNamesArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new OtherNamesArray(property)
                        : Null)
                    : Null;
            public static OtherNamesArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new OtherNamesArray(property)
                        : Null)
                    : Null;
            public static OtherNamesArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new OtherNamesArray(property)
                        : Null)
                    : Null;
            public bool Equals(OtherNamesArray other)
            {
                return this.Equals((Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>)other);
            }
            public bool Equals(Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue> other)
            {
                return ((Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue> array = this;
                Menes.ValidationContext context = validationContext;
                context = array.Validate(context);
                context = array.ValidateMinItems(context, 0);
                context = array.ValidateMaxItems(context, 10);
                return array.ValidateItems(context);
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                if (this.value is Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue> clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.JsonArrayEnumerator GetEnumerator()
            {
                return ((Menes.JsonArray<PersonName.OtherNamesArray.OtherNamesArrayValue>)this).GetEnumerator();
            }
            System.Collections.Generic.IEnumerator<PersonName.OtherNamesArray.OtherNamesArrayValue> System.Collections.Generic.IEnumerable<PersonName.OtherNamesArray.OtherNamesArrayValue>.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            public OtherNamesArray Add(params PersonName.OtherNamesArray.OtherNamesArrayValue[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in items)
                {
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonName.OtherNamesArray.OtherNamesArrayValue item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonName.OtherNamesArray.OtherNamesArrayValue item1, in PersonName.OtherNamesArray.OtherNamesArrayValue item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonName.OtherNamesArray.OtherNamesArrayValue item1, in PersonName.OtherNamesArray.OtherNamesArrayValue item2, in PersonName.OtherNamesArray.OtherNamesArrayValue item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Add(in PersonName.OtherNamesArray.OtherNamesArrayValue item1, in PersonName.OtherNamesArray.OtherNamesArrayValue item2, in PersonName.OtherNamesArray.OtherNamesArrayValue item3, in PersonName.OtherNamesArray.OtherNamesArrayValue item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                arrayBuilder.Add(item4);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, params PersonName.OtherNamesArray.OtherNamesArrayValue[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        foreach (PersonName.OtherNamesArray.OtherNamesArrayValue itemToInsert in items)
                        {
                            arrayBuilder.Add(itemToInsert);
                        }
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonName.OtherNamesArray.OtherNamesArrayValue item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonName.OtherNamesArray.OtherNamesArrayValue item1, in PersonName.OtherNamesArray.OtherNamesArrayValue item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonName.OtherNamesArray.OtherNamesArrayValue item1, in PersonName.OtherNamesArray.OtherNamesArrayValue item2, in PersonName.OtherNamesArray.OtherNamesArrayValue item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Insert(int indexToInsert, in PersonName.OtherNamesArray.OtherNamesArrayValue item1, in PersonName.OtherNamesArray.OtherNamesArrayValue item2, in PersonName.OtherNamesArray.OtherNamesArrayValue item3, in PersonName.OtherNamesArray.OtherNamesArrayValue item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                        arrayBuilder.Add(item4);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(params PersonName.OtherNamesArray.OtherNamesArrayValue[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    bool found = false;
                    foreach (PersonName.OtherNamesArray.OtherNamesArrayValue itemToRemove in items)
                    {
                        if (itemToRemove.Equals(item))
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        arrayBuilder.Add(item);
                    }
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonName.OtherNamesArray.OtherNamesArrayValue item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonName.OtherNamesArray.OtherNamesArrayValue item1, PersonName.OtherNamesArray.OtherNamesArrayValue item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonName.OtherNamesArray.OtherNamesArrayValue item1, PersonName.OtherNamesArray.OtherNamesArrayValue item2, PersonName.OtherNamesArray.OtherNamesArrayValue item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(PersonName.OtherNamesArray.OtherNamesArrayValue item1, PersonName.OtherNamesArray.OtherNamesArrayValue item2, PersonName.OtherNamesArray.OtherNamesArrayValue item3, PersonName.OtherNamesArray.OtherNamesArrayValue item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray RemoveAt(int indexToRemove)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index == indexToRemove)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray RemoveRange(int startIndex, int length)
            {
                if (startIndex < 0 || startIndex > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(startIndex));
                }
                if (length < 1 || startIndex + length > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(length));
                }
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                int index = 0;
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (index >= startIndex && index < startIndex + length)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public OtherNamesArray Remove(System.Predicate<PersonName.OtherNamesArray.OtherNamesArrayValue> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<PersonName.OtherNamesArray.OtherNamesArrayValue>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonName.OtherNamesArray.OtherNamesArrayValue>();
                foreach (PersonName.OtherNamesArray.OtherNamesArrayValue item in this)
                {
                    if (removeIfTrue(item))
                    {
                        continue;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public readonly struct OtherNamesArrayValue : Menes.IJsonValue, System.IEquatable<OtherNamesArrayValue>
            {
                public static readonly System.Func<System.Text.Json.JsonElement, OtherNamesArrayValue> FromJsonElement = e => new OtherNamesArrayValue(e);
                public static readonly OtherNamesArrayValue Null = new OtherNamesArrayValue(default(System.Text.Json.JsonElement));
                private static readonly string? ConstValue = BuildConstValue();
                private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
                private static readonly int? MaxLength = 50;
                private static readonly int? MinLength = 0;
                private static readonly System.Text.RegularExpressions.Regex? Pattern = null;
                private readonly Menes.JsonString? value;
                public OtherNamesArrayValue(Menes.JsonString value)
                {
                    if (value.HasJsonElement)
                    {
                        this.JsonElement = value.JsonElement;
                        this.value = null;
                    }
                    else
                    {
                        this.value = value;
                        this.JsonElement = default;
                    }
                }
                public OtherNamesArrayValue(System.Text.Json.JsonElement jsonElement)
                {
                    this.value = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public OtherNamesArrayValue? AsOptional => this.IsNull ? default(OtherNamesArrayValue?) : this;
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static implicit operator OtherNamesArrayValue(Menes.JsonString value)
                {
                    return new OtherNamesArrayValue(value);
                }
                public static implicit operator OtherNamesArrayValue(string value)
                {
                    return new OtherNamesArrayValue(value);
                }
                public static implicit operator string(OtherNamesArrayValue value)
                {
                    return (string)(Menes.JsonString)value;
                }
                public static implicit operator Menes.JsonString(OtherNamesArrayValue value)
                {
                    if (value.value is Menes.JsonString clrValue)
                    {
                        return clrValue;
                    }
                    return new Menes.JsonString(value.JsonElement);
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return Menes.JsonString.IsConvertibleFrom(jsonElement);
                }
                public static OtherNamesArrayValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new OtherNamesArrayValue(property)
                            : Null)
                        : Null;
                public static OtherNamesArrayValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new OtherNamesArrayValue(property)
                            : Null)
                        : Null;
                public static OtherNamesArrayValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new OtherNamesArrayValue(property)
                            : Null)
                        : Null;
                public bool Equals(OtherNamesArrayValue other)
                {
                    return this.Equals((Menes.JsonString)other);
                }
                public bool Equals(Menes.JsonString other)
                {
                    return ((Menes.JsonString)this).Equals(other);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.JsonString value = this;
                    Menes.ValidationContext context = validationContext;
                    context = value.Validate(context);
                    context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                    return context;
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else if (this.value is Menes.JsonString clrValue)
                    {
                        clrValue.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    if (this.value is Menes.JsonString clrValue)
                    {
                        return clrValue.ToString();
                    }
                    else
                    {
                        return this.JsonElement.GetRawText();
                    }
                }
                private static string? BuildConstValue()
                {
                    return null;
                }
                private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
                {
                    return null;
                }
            }
        }
    }
    public readonly struct EmailAddressListResource : Menes.IJsonObject, System.IEquatable<EmailAddressListResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly EmailAddressListResource Null = new EmailAddressListResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource> FromJsonElement = e => new EmailAddressListResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public EmailAddressListResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links, Menes.JsonString? contentType, EmailAddressListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links, Menes.JsonString? contentType, EmailAddressListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links, Menes.JsonString? contentType = null, EmailAddressListResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links, Menes.JsonString? contentType, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links, Menes.JsonString? contentType, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links, Menes.JsonString? contentType, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public EmailAddressListResource(EmailAddressListResource.LinksEntity links, Menes.JsonString? contentType, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is EmailAddressListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private EmailAddressListResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public EmailAddressListResource? AsOptional => this.IsNull ? default(EmailAddressListResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public EmailAddressListResource.LinksEntity Links => this.links?.AsValue<EmailAddressListResource.LinksEntity>() ?? EmailAddressListResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public EmailAddressListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<EmailAddressListResource.EmbeddedEntity>() ?? EmailAddressListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static EmailAddressListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddressListResource(property)
                    : Null)
                : Null;
        public static EmailAddressListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddressListResource(property)
                    : Null)
                : Null;
        public static EmailAddressListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddressListResource(property)
                    : Null)
            : Null;
        public EmailAddressListResource WithContentType(Menes.JsonString? value)
        {
            return new EmailAddressListResource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public EmailAddressListResource WithLinks(EmailAddressListResource.LinksEntity value)
        {
            return new EmailAddressListResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public EmailAddressListResource WithEmbedded(EmailAddressListResource.EmbeddedEntity? value)
        {
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public EmailAddressListResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public EmailAddressListResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public EmailAddressListResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public EmailAddressListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public EmailAddressListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public EmailAddressListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public EmailAddressListResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressListResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(EmailAddressListResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is EmailAddressListResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext3 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext4 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            EmailAddressListResource.EmailAddressListResourceEntity emailAddressListResourceEntityValue1 = thisAsAny.As<EmailAddressListResource.EmailAddressListResourceEntity>();
            allOfValidationContext2 = emailAddressListResourceEntityValue1.Validate(allOfValidationContext2);
            PagedListResource pagedListResourceValue2 = thisAsAny.As<PagedListResource>();
            allOfValidationContext3 = pagedListResourceValue2.Validate(allOfValidationContext3);
            EmailAddressListResource.EmailAddressListResourceEntity emailAddressListResourceEntityValue3 = thisAsAny.As<EmailAddressListResource.EmailAddressListResourceEntity>();
            allOfValidationContext4 = emailAddressListResourceEntityValue3.Validate(allOfValidationContext4);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2, allOfValidationContext3, allOfValidationContext4);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<EmailAddressListResource.LinksEntity>, Menes.IJsonAdditionalProperties<EmailAddressListResource.PropertiesEntity>
        {
            public static readonly EmailAddressListResource.LinksEntity Null = new EmailAddressListResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.LinksEntity> FromJsonElement = e => new EmailAddressListResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string ItemsPropertyNamePath = ".items";
            private const string NextPropertyNamePath = ".next";
            private const string PrevPropertyNamePath = ".prev";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
            private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonReference? next;
            private readonly Menes.JsonReference? prev;
            private readonly Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.items = null;
                this.next = null;
                this.prev = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                this.next = null;
                this.prev = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, params (string, EmailAddressListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next = null, Link? prev = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.PropertiesEntity) additionalProperty2, (string, EmailAddressListResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.PropertiesEntity) additionalProperty2, (string, EmailAddressListResource.PropertiesEntity) additionalProperty3, (string, EmailAddressListResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (items is Menes.JsonReference item2)
                {
                    this.items = item2;
                }
                else
                {
                    this.items = null;
                }
                if (next is Menes.JsonReference item3)
                {
                    this.next = item3;
                }
                else
                {
                    this.next = null;
                }
                if (prev is Menes.JsonReference item4)
                {
                    this.prev = item4;
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
            public EmailAddressListResource.LinksEntity? AsOptional => this.IsNull ? default(EmailAddressListResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
            public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
            public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static EmailAddressListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.LinksEntity(property)
                        : Null)
                : Null;
            public EmailAddressListResource.LinksEntity WithSelf(Link value)
            {
                return new EmailAddressListResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetItems(), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public EmailAddressListResource.LinksEntity WithItems(LinkCollection value)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public EmailAddressListResource.LinksEntity WithNext(Link? value)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
            }
            public EmailAddressListResource.LinksEntity WithPrev(Link? value)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public EmailAddressListResource.LinksEntity ReplaceAll(Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> newAdditional)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
            }
            public EmailAddressListResource.LinksEntity ReplaceAll(params (string, EmailAddressListResource.PropertiesEntity)[] newAdditional)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public EmailAddressListResource.LinksEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public EmailAddressListResource.LinksEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.PropertiesEntity) newAdditional2)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public EmailAddressListResource.LinksEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.PropertiesEntity) newAdditional2, (string, EmailAddressListResource.PropertiesEntity) newAdditional3)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public EmailAddressListResource.LinksEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.PropertiesEntity) newAdditional2, (string, EmailAddressListResource.PropertiesEntity) newAdditional3, (string, EmailAddressListResource.PropertiesEntity) newAdditional4)
            {
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public EmailAddressListResource.LinksEntity Add(params (string, EmailAddressListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, EmailAddressListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(name, value));
                }
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional2, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional2, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional3, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    if (this.next is Menes.JsonReference next)
                    {
                        writer.WritePropertyName(EncodedNextPropertyName);
                        next.WriteTo(writer);
                    }
                    if (this.prev is Menes.JsonReference prev)
                    {
                        writer.WritePropertyName(EncodedPrevPropertyName);
                        prev.WriteTo(writer);
                    }
                    Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(EmailAddressListResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                if (this.Next is Link next)
                {
                    context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                }
                if (this.Prev is Link prev)
                {
                    context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNext()
            {
                if (this.next is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetPrev()
            {
                if (this.prev is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new EmailAddressListResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<EmailAddressListResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<EmailAddressListResource.PropertiesEntity>
        {
            public static readonly EmailAddressListResource.EmbeddedEntity Null = new EmailAddressListResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.EmbeddedEntity> FromJsonElement = e => new EmailAddressListResource.EmbeddedEntity(e);
            private const string ItemsPropertyNamePath = ".items";
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes);
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.items = null;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(EmailAddressListResource.ItemsArray? items, Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (items is EmailAddressListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public EmbeddedEntity(EmailAddressListResource.ItemsArray? items, params (string, EmailAddressListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (items is EmailAddressListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity(EmailAddressListResource.ItemsArray? items = null)
            {
                if (items is EmailAddressListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(EmailAddressListResource.ItemsArray? items, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1)
            {
                if (items is EmailAddressListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity(EmailAddressListResource.ItemsArray? items, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.PropertiesEntity) additionalProperty2)
            {
                if (items is EmailAddressListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity(EmailAddressListResource.ItemsArray? items, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.PropertiesEntity) additionalProperty2, (string, EmailAddressListResource.PropertiesEntity) additionalProperty3)
            {
                if (items is EmailAddressListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity(EmailAddressListResource.ItemsArray? items, (string, EmailAddressListResource.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.PropertiesEntity) additionalProperty2, (string, EmailAddressListResource.PropertiesEntity) additionalProperty3, (string, EmailAddressListResource.PropertiesEntity) additionalProperty4)
            {
                if (items is EmailAddressListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonReference? items, Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (items is Menes.JsonReference item1)
                {
                    this.items = item1;
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull);
            public EmailAddressListResource.EmbeddedEntity? AsOptional => this.IsNull ? default(EmailAddressListResource.EmbeddedEntity?) : this;
            public EmailAddressListResource.ItemsArray? Items => this.items?.AsValue<EmailAddressListResource.ItemsArray>() ?? EmailAddressListResource.ItemsArray.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static EmailAddressListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public EmailAddressListResource.EmbeddedEntity WithItems(EmailAddressListResource.ItemsArray? value)
            {
                return new EmailAddressListResource.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public EmailAddressListResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> newAdditional)
            {
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), newAdditional);
            }
            public EmailAddressListResource.EmbeddedEntity ReplaceAll(params (string, EmailAddressListResource.PropertiesEntity)[] newAdditional)
            {
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public EmailAddressListResource.EmbeddedEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1)
            {
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public EmailAddressListResource.EmbeddedEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.PropertiesEntity) newAdditional2)
            {
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public EmailAddressListResource.EmbeddedEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.PropertiesEntity) newAdditional2, (string, EmailAddressListResource.PropertiesEntity) newAdditional3)
            {
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public EmailAddressListResource.EmbeddedEntity ReplaceAll((string, EmailAddressListResource.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.PropertiesEntity) newAdditional2, (string, EmailAddressListResource.PropertiesEntity) newAdditional3, (string, EmailAddressListResource.PropertiesEntity) newAdditional4)
            {
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public EmailAddressListResource.EmbeddedEntity Add(params (string, EmailAddressListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, EmailAddressListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(name, value));
                }
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional2, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Add((string name, EmailAddressListResource.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional2, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional3, (string name, EmailAddressListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(EmailAddressListResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Items.Equals(other.Items) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                if (this.Items is EmailAddressListResource.ItemsArray items)
                {
                    context = Menes.Validation.ValidateProperty(context, items, ItemsPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<EmailAddressListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference? GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<EmailAddressListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new EmailAddressListResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmailAddressListResourceEntity : Menes.IJsonObject, System.IEquatable<EmailAddressListResource.EmailAddressListResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly EmailAddressListResource.EmailAddressListResourceEntity Null = new EmailAddressListResource.EmailAddressListResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.EmailAddressListResourceEntity> FromJsonElement = e => new EmailAddressListResource.EmailAddressListResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private const string EmbeddedPropertyNamePath = "._embedded";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonReference? embedded;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public EmailAddressListResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.embedded = null;
                this.additionalPropertiesBacking = null;
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.embedded = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links, EmailAddressListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is EmailAddressListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links, EmailAddressListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is EmailAddressListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links, EmailAddressListResource.EmbeddedEntity? embedded = null)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is EmailAddressListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is EmailAddressListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is EmailAddressListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is EmailAddressListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmailAddressListResourceEntity(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity links, EmailAddressListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is EmailAddressListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmailAddressListResourceEntity(Menes.JsonReference links, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                if (embedded is Menes.JsonReference item2)
                {
                    this.embedded = item2;
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
            public EmailAddressListResource.EmailAddressListResourceEntity? AsOptional => this.IsNull ? default(EmailAddressListResource.EmailAddressListResourceEntity?) : this;
            public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Links => this.links?.AsValue<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity>() ?? EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
            public EmailAddressListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<EmailAddressListResource.EmbeddedEntity>() ?? EmailAddressListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static EmailAddressListResource.EmailAddressListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.EmailAddressListResourceEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressListResource.EmailAddressListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.EmailAddressListResourceEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressListResource.EmailAddressListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressListResource.EmailAddressListResourceEntity(property)
                        : Null)
                : Null;
            public EmailAddressListResource.EmailAddressListResourceEntity WithLinks(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity value)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(Menes.JsonReference.FromValue(value), this.GetEmbedded(), this.GetJsonProperties());
            }
            public EmailAddressListResource.EmailAddressListResourceEntity WithEmbedded(EmailAddressListResource.EmbeddedEntity? value)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public EmailAddressListResource.EmailAddressListResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), newAdditional);
            }
            public EmailAddressListResource.EmailAddressListResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressListResource.EmailAddressListResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressListResource.EmailAddressListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    if (this.embedded is Menes.JsonReference embedded)
                    {
                        writer.WritePropertyName(EncodedEmbeddedPropertyName);
                        embedded.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(EmailAddressListResource.EmailAddressListResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
                if (this.Embedded is EmailAddressListResource.EmbeddedEntity embedded)
                {
                    context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmbedded()
            {
                if (this.embedded is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Null = new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity> FromJsonElement = e => new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(e);
                private const string ItemsPropertyNamePath = ".items";
                private const string NextPropertyNamePath = ".next";
                private const string PrevPropertyNamePath = ".prev";
                private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
                private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
                private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
                private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
                private readonly Menes.JsonReference? items;
                private readonly Menes.JsonReference? next;
                private readonly Menes.JsonReference? prev;
                private readonly Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.items = null;
                    this.next = null;
                    this.prev = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    this.next = null;
                    this.prev = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, params (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(LinkCollection items, Link? next = null, Link? prev = null)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (items is Menes.JsonReference item1)
                    {
                        this.items = item1;
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Menes.JsonReference item2)
                    {
                        this.next = item2;
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Menes.JsonReference item3)
                    {
                        this.prev = item3;
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity?) : this;
                public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
                public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
                public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity WithItems(LinkCollection value)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity WithNext(Link? value)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity WithPrev(Link? value)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity ReplaceAll(params (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity ReplaceAll((string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity ReplaceAll((string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity ReplaceAll((string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity ReplaceAll((string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Add(params (string, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Add((string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Add((string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Add((string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Add((string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.items is Menes.JsonReference items)
                        {
                            writer.WritePropertyName(EncodedItemsPropertyName);
                            items.WriteTo(writer);
                        }
                        if (this.next is Menes.JsonReference next)
                        {
                            writer.WritePropertyName(EncodedNextPropertyName);
                            next.WriteTo(writer);
                        }
                        if (this.prev is Menes.JsonReference prev)
                        {
                            writer.WritePropertyName(EncodedPrevPropertyName);
                            prev.WriteTo(writer);
                        }
                        Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                    if (this.Next is Link next)
                    {
                        context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                    }
                    if (this.Prev is Link prev)
                    {
                        context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetItems()
                {
                    if (this.items is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNext()
                {
                    if (this.next is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetPrev()
                {
                    if (this.prev is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new EmailAddressListResource.EmailAddressListResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressListResource.PropertiesEntity> FromJsonElement = e => new EmailAddressListResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            private readonly Menes.JsonReference? item3;
            private readonly Menes.JsonReference? item4;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(Resource clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item3 = null;
                }
                else
                {
                    this.item3 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item4 = null;
            }
            public PropertiesEntity(ResourceCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item4 = null;
                }
                else
                {
                    this.item4 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && this.item3 is null && this.item4 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResource => this.item3 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResourceCollection => this.item4 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
            public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
            public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
            public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (Resource.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (ResourceCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public Resource AsResource() => this.item3?.AsValue<Resource>() ?? new Resource(this.JsonElement);
            public ResourceCollection AsResourceCollection() => this.item4?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else if (this.item3 is Menes.JsonReference item3)
                {
                    item3.WriteTo(writer);
                }
                else if (this.item4 is Menes.JsonReference item4)
                {
                    item4.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResource)
                {
                    builder.Append("{");
                    builder.Append("Resource");
                    builder.Append(", ");
                    builder.Append(this.AsResource().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResourceCollection)
                {
                    builder.Append("{");
                    builder.Append("ResourceCollection");
                    builder.Append(", ");
                    builder.Append(this.AsResourceCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext3 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext4 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                if (this.IsResource)
                {
                    validationContext3 = this.AsResource().Validate(validationContext3);
                }
                else
                {
                    validationContext3 = validationContext3.WithError("The value is not convertible to a Resource.");
                }
                if (this.IsResourceCollection)
                {
                    validationContext4 = this.AsResourceCollection().Validate(validationContext4);
                }
                else
                {
                    validationContext4 = validationContext4.WithError("The value is not convertible to a ResourceCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2, validationContext3, validationContext4);
            }
        }
        public readonly struct ItemsArray : Menes.IJsonValue, System.Collections.Generic.IEnumerable<EmailAddressResource>, System.Collections.IEnumerable, System.IEquatable<ItemsArray>, System.IEquatable<Menes.JsonArray<EmailAddressResource>>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, ItemsArray> FromJsonElement = e => new ItemsArray(e);
            public static readonly ItemsArray Null = new ItemsArray(default(System.Text.Json.JsonElement));
            private readonly Menes.JsonArray<EmailAddressResource>? value;
            public ItemsArray(Menes.JsonArray<EmailAddressResource> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = jsonArray;
                    this.JsonElement = default;
                }
            }
            public ItemsArray(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public int Length
            {
                get
                {
                    if (this.HasJsonElement)
                    {
                        return this.JsonElement.GetArrayLength();
                    }
                    if (this.value is Menes.JsonArray<EmailAddressResource> value)
                    {
                        return value.Length;
                    }
                    return 0;
                }
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public ItemsArray? AsOptional => this.IsNull ? default(ItemsArray?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator ItemsArray(Menes.JsonArray<EmailAddressResource> value)
            {
                return new ItemsArray(value);
            }
            public static implicit operator Menes.JsonArray<EmailAddressResource>(ItemsArray value)
            {
                if (value.value is Menes.JsonArray<EmailAddressResource> clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonArray<EmailAddressResource>(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonArray<EmailAddressResource>.IsConvertibleFrom(jsonElement);
            }
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public bool Equals(ItemsArray other)
            {
                return this.Equals((Menes.JsonArray<EmailAddressResource>)other);
            }
            public bool Equals(Menes.JsonArray<EmailAddressResource> other)
            {
                return ((Menes.JsonArray<EmailAddressResource>)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonArray<EmailAddressResource> array = this;
                Menes.ValidationContext context = validationContext;
                context = array.Validate(context);
                return array.ValidateItems(context);
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                if (this.value is Menes.JsonArray<EmailAddressResource> clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public Menes.JsonArray<EmailAddressResource>.JsonArrayEnumerator GetEnumerator()
            {
                return ((Menes.JsonArray<EmailAddressResource>)this).GetEnumerator();
            }
            System.Collections.Generic.IEnumerator<EmailAddressResource> System.Collections.Generic.IEnumerable<EmailAddressResource>.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            public ItemsArray Add(params EmailAddressResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                foreach (EmailAddressResource item in items)
                {
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in EmailAddressResource item1)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in EmailAddressResource item1, in EmailAddressResource item2)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in EmailAddressResource item1, in EmailAddressResource item2, in EmailAddressResource item3)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in EmailAddressResource item1, in EmailAddressResource item2, in EmailAddressResource item3, in EmailAddressResource item4)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                arrayBuilder.Add(item4);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, params EmailAddressResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                int index = 0;
                foreach (EmailAddressResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        foreach (EmailAddressResource itemToInsert in items)
                        {
                            arrayBuilder.Add(itemToInsert);
                        }
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in EmailAddressResource item1)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                int index = 0;
                foreach (EmailAddressResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in EmailAddressResource item1, in EmailAddressResource item2)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                int index = 0;
                foreach (EmailAddressResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in EmailAddressResource item1, in EmailAddressResource item2, in EmailAddressResource item3)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                int index = 0;
                foreach (EmailAddressResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in EmailAddressResource item1, in EmailAddressResource item2, in EmailAddressResource item3, in EmailAddressResource item4)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                int index = 0;
                foreach (EmailAddressResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                        arrayBuilder.Add(item4);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(params EmailAddressResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    bool found = false;
                    foreach (EmailAddressResource itemToRemove in items)
                    {
                        if (itemToRemove.Equals(item))
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        arrayBuilder.Add(item);
                    }
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(EmailAddressResource item1)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    if (item1.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(EmailAddressResource item1, EmailAddressResource item2)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(EmailAddressResource item1, EmailAddressResource item2, EmailAddressResource item3)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(EmailAddressResource item1, EmailAddressResource item2, EmailAddressResource item3, EmailAddressResource item4)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveAt(int indexToRemove)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                int index = 0;
                foreach (EmailAddressResource item in this)
                {
                    if (index == indexToRemove)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveRange(int startIndex, int length)
            {
                if (startIndex < 0 || startIndex > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(startIndex));
                }
                if (length < 1 || startIndex + length > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(length));
                }
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                int index = 0;
                foreach (EmailAddressResource item in this)
                {
                    if (index >= startIndex && index < startIndex + length)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(System.Predicate<EmailAddressResource> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<EmailAddressResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<EmailAddressResource>();
                foreach (EmailAddressResource item in this)
                {
                    if (removeIfTrue(item))
                    {
                        continue;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
        }
    }
    public readonly struct EmailAddressResource : Menes.IJsonObject, System.IEquatable<EmailAddressResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly EmailAddressResource Null = new EmailAddressResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressResource> FromJsonElement = e => new EmailAddressResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private const string AddressPropertyNamePath = ".address";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.ReadOnlyMemory<byte> AddressPropertyNameBytes = new byte[] { 97, 100, 100, 114, 101, 115, 115 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedAddressPropertyName = System.Text.Json.JsonEncodedText.Encode(AddressPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes, AddressPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly EmailAddressResource.AddressValue? address;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public EmailAddressResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.address = null;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address)
        {
            this.contentType = null;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType, EmailAddressResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType, EmailAddressResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType = null, EmailAddressResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType, EmailAddressResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType, EmailAddressResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType, EmailAddressResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public EmailAddressResource(EmailAddressResource.LinksEntity links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType, EmailAddressResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is EmailAddressResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is EmailAddressResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private EmailAddressResource(Menes.JsonReference links, EmailAddressResource.AddressValue address, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull) && (this.address is null || this.address.Value.IsNull);
        public EmailAddressResource? AsOptional => this.IsNull ? default(EmailAddressResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public EmailAddressResource.LinksEntity Links => this.links?.AsValue<EmailAddressResource.LinksEntity>() ?? EmailAddressResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public EmailAddressResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<EmailAddressResource.EmbeddedEntity>() ?? EmailAddressResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public EmailAddressResource.AddressValue Address => this.address ?? EmailAddressResource.AddressValue.FromOptionalProperty(this.JsonElement, AddressPropertyNameBytes.Span);
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static EmailAddressResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddressResource(property)
                    : Null)
                : Null;
        public static EmailAddressResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddressResource(property)
                    : Null)
                : Null;
        public static EmailAddressResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddressResource(property)
                    : Null)
            : Null;
        public EmailAddressResource WithContentType(Menes.JsonString? value)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public EmailAddressResource WithLinks(EmailAddressResource.LinksEntity value)
        {
            return new EmailAddressResource(Menes.JsonReference.FromValue(value), this.Address, this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public EmailAddressResource WithEmbedded(EmailAddressResource.EmbeddedEntity? value)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public EmailAddressResource WithAddress(EmailAddressResource.AddressValue value)
        {
            return new EmailAddressResource(this.GetLinks(), value, this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public EmailAddressResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public EmailAddressResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public EmailAddressResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public EmailAddressResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public EmailAddressResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public EmailAddressResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public EmailAddressResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddressResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddressResource(this.GetLinks(), this.Address, this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                if (this.address is EmailAddressResource.AddressValue address)
                {
                    writer.WritePropertyName(EncodedAddressPropertyName);
                    address.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(EmailAddressResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && this.Address.Equals(other.Address) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is EmailAddressResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Address, AddressPropertyNamePath);
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            EmailAddress emailAddressValue1 = thisAsAny.As<EmailAddress>();
            allOfValidationContext2 = emailAddressValue1.Validate(allOfValidationContext2);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<EmailAddressResource.LinksEntity>, Menes.IJsonAdditionalProperties<EmailAddressResource.LinksEntity.PropertiesEntity>
        {
            public static readonly EmailAddressResource.LinksEntity Null = new EmailAddressResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressResource.LinksEntity> FromJsonElement = e => new EmailAddressResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, params (string, EmailAddressResource.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty2, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty2, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty3, (string, EmailAddressResource.LinksEntity.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull);
            public EmailAddressResource.LinksEntity? AsOptional => this.IsNull ? default(EmailAddressResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static EmailAddressResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressResource.LinksEntity(property)
                        : Null)
                : Null;
            public EmailAddressResource.LinksEntity WithSelf(Link value)
            {
                return new EmailAddressResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public EmailAddressResource.LinksEntity ReplaceAll(Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity> newAdditional)
            {
                return new EmailAddressResource.LinksEntity(this.GetSelf(), newAdditional);
            }
            public EmailAddressResource.LinksEntity ReplaceAll(params (string, EmailAddressResource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                return new EmailAddressResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public EmailAddressResource.LinksEntity ReplaceAll((string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional1)
            {
                return new EmailAddressResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public EmailAddressResource.LinksEntity ReplaceAll((string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional1, (string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional2)
            {
                return new EmailAddressResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public EmailAddressResource.LinksEntity ReplaceAll((string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional1, (string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional2, (string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional3)
            {
                return new EmailAddressResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public EmailAddressResource.LinksEntity ReplaceAll((string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional1, (string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional2, (string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional3, (string, EmailAddressResource.LinksEntity.PropertiesEntity) newAdditional4)
            {
                return new EmailAddressResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public EmailAddressResource.LinksEntity Add(params (string, EmailAddressResource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, EmailAddressResource.LinksEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(name, value));
                }
                return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Add((string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Add((string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Add((string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Add((string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional3, (string name, EmailAddressResource.LinksEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(EmailAddressResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressResource.LinksEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressResource.LinksEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<EmailAddressResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressResource.LinksEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<EmailAddressResource.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new EmailAddressResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<EmailAddressResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>
        {
            public static readonly EmailAddressResource.EmbeddedEntity Null = new EmailAddressResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressResource.EmbeddedEntity> FromJsonElement = e => new EmailAddressResource.EmbeddedEntity(e);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>>.Empty;
            private readonly Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(params (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty1)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty2)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty3)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty3, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) additionalProperty4)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public EmailAddressResource.EmbeddedEntity? AsOptional => this.IsNull ? default(EmailAddressResource.EmbeddedEntity?) : this;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static EmailAddressResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static EmailAddressResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new EmailAddressResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public EmailAddressResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity> newAdditional)
            {
                return new EmailAddressResource.EmbeddedEntity(newAdditional);
            }
            public EmailAddressResource.EmbeddedEntity ReplaceAll(params (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                return new EmailAddressResource.EmbeddedEntity(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public EmailAddressResource.EmbeddedEntity ReplaceAll((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional1)
            {
                return new EmailAddressResource.EmbeddedEntity(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public EmailAddressResource.EmbeddedEntity ReplaceAll((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional2)
            {
                return new EmailAddressResource.EmbeddedEntity(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public EmailAddressResource.EmbeddedEntity ReplaceAll((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional3)
            {
                return new EmailAddressResource.EmbeddedEntity(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public EmailAddressResource.EmbeddedEntity ReplaceAll((string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional3, (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity) newAdditional4)
            {
                return new EmailAddressResource.EmbeddedEntity(Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public EmailAddressResource.EmbeddedEntity Add(params (string, EmailAddressResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(name, value));
                }
                return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Add((string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Add((string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Add((string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Add((string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional3, (string name, EmailAddressResource.EmbeddedEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public EmailAddressResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new EmailAddressResource.EmbeddedEntity(new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(EmailAddressResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressResource.EmbeddedEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressResource.EmbeddedEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<EmailAddressResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out EmailAddressResource.EmbeddedEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<EmailAddressResource.EmbeddedEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, EmailAddressResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new EmailAddressResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct AddressValue : Menes.IJsonValue, System.IEquatable<AddressValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, AddressValue> FromJsonElement = e => new AddressValue(e);
            public static readonly AddressValue Null = new AddressValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = null;
            private static readonly int? MinLength = null;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^((?!\\.)[\\w-_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonEmail? value;
            public AddressValue(Menes.JsonEmail value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public AddressValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public AddressValue? AsOptional => this.IsNull ? default(AddressValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator AddressValue(Menes.JsonEmail value)
            {
                return new AddressValue(value);
            }
            public static implicit operator AddressValue(string value)
            {
                return new AddressValue(value);
            }
            public static implicit operator string(AddressValue value)
            {
                return (string)(Menes.JsonEmail)value;
            }
            public static implicit operator Menes.JsonEmail(AddressValue value)
            {
                if (value.value is Menes.JsonEmail clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonEmail(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonEmail.IsConvertibleFrom(jsonElement);
            }
            public static AddressValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new AddressValue(property)
                        : Null)
                    : Null;
            public static AddressValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new AddressValue(property)
                        : Null)
                    : Null;
            public static AddressValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new AddressValue(property)
                        : Null)
                    : Null;
            public bool Equals(AddressValue other)
            {
                return this.Equals((Menes.JsonEmail)other);
            }
            public bool Equals(Menes.JsonEmail other)
            {
                return ((Menes.JsonEmail)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonEmail value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonEmail clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonEmail clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
    }
    public readonly struct EmailAddress : Menes.IJsonObject, System.IEquatable<EmailAddress>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly EmailAddress Null = new EmailAddress(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, EmailAddress> FromJsonElement = e => new EmailAddress(e);
        private const string AddressPropertyNamePath = ".address";
        private static readonly System.ReadOnlyMemory<byte> AddressPropertyNameBytes = new byte[] { 97, 100, 100, 114, 101, 115, 115 };
        private static readonly System.Text.Json.JsonEncodedText EncodedAddressPropertyName = System.Text.Json.JsonEncodedText.Encode(AddressPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(AddressPropertyNameBytes);
        private readonly EmailAddress.AddressValue? address;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public EmailAddress(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.address = null;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddress(EmailAddress.AddressValue address)
        {
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public EmailAddress(EmailAddress.AddressValue address, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public EmailAddress(EmailAddress.AddressValue address, (string, Menes.JsonAny) additionalProperty1)
        {
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public EmailAddress(EmailAddress.AddressValue address, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public EmailAddress(EmailAddress.AddressValue address, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public EmailAddress(EmailAddress.AddressValue address, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private EmailAddress(EmailAddress.AddressValue address, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.address = address;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.address is null || this.address.Value.IsNull);
        public EmailAddress? AsOptional => this.IsNull ? default(EmailAddress?) : this;
        public EmailAddress.AddressValue Address => this.address ?? EmailAddress.AddressValue.FromOptionalProperty(this.JsonElement, AddressPropertyNameBytes.Span);
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static EmailAddress FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddress(property)
                    : Null)
                : Null;
        public static EmailAddress FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddress(property)
                    : Null)
                : Null;
        public static EmailAddress FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new EmailAddress(property)
                    : Null)
            : Null;
        public EmailAddress WithAddress(EmailAddress.AddressValue value)
        {
            return new EmailAddress(value, this.GetJsonProperties());
        }
        public EmailAddress ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new EmailAddress(this.Address, newAdditional);
        }
        public EmailAddress ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new EmailAddress(this.Address, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public EmailAddress ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new EmailAddress(this.Address, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public EmailAddress ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new EmailAddress(this.Address, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public EmailAddress ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new EmailAddress(this.Address, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public EmailAddress ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new EmailAddress(this.Address, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public EmailAddress Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public EmailAddress Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new EmailAddress(this.Address, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.address is EmailAddress.AddressValue address)
                {
                    writer.WritePropertyName(EncodedAddressPropertyName);
                    address.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(EmailAddress other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.Address.Equals(other.Address) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            context = Menes.Validation.ValidateRequiredProperty(context, this.Address, AddressPropertyNamePath);
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }
        public readonly struct AddressValue : Menes.IJsonValue, System.IEquatable<AddressValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, AddressValue> FromJsonElement = e => new AddressValue(e);
            public static readonly AddressValue Null = new AddressValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = null;
            private static readonly int? MinLength = null;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^((?!\\.)[\\w-_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonEmail? value;
            public AddressValue(Menes.JsonEmail value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public AddressValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public AddressValue? AsOptional => this.IsNull ? default(AddressValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator AddressValue(Menes.JsonEmail value)
            {
                return new AddressValue(value);
            }
            public static implicit operator AddressValue(string value)
            {
                return new AddressValue(value);
            }
            public static implicit operator string(AddressValue value)
            {
                return (string)(Menes.JsonEmail)value;
            }
            public static implicit operator Menes.JsonEmail(AddressValue value)
            {
                if (value.value is Menes.JsonEmail clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonEmail(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonEmail.IsConvertibleFrom(jsonElement);
            }
            public static AddressValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new AddressValue(property)
                        : Null)
                    : Null;
            public static AddressValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new AddressValue(property)
                        : Null)
                    : Null;
            public static AddressValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new AddressValue(property)
                        : Null)
                    : Null;
            public bool Equals(AddressValue other)
            {
                return this.Equals((Menes.JsonEmail)other);
            }
            public bool Equals(Menes.JsonEmail other)
            {
                return ((Menes.JsonEmail)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonEmail value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonEmail clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonEmail clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
    }
    public readonly struct TelephoneNumberListResource : Menes.IJsonObject, System.IEquatable<TelephoneNumberListResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly TelephoneNumberListResource Null = new TelephoneNumberListResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource> FromJsonElement = e => new TelephoneNumberListResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public TelephoneNumberListResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links, Menes.JsonString? contentType, TelephoneNumberListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links, Menes.JsonString? contentType, TelephoneNumberListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links, Menes.JsonString? contentType = null, TelephoneNumberListResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links, Menes.JsonString? contentType, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links, Menes.JsonString? contentType, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links, Menes.JsonString? contentType, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public TelephoneNumberListResource(TelephoneNumberListResource.LinksEntity links, Menes.JsonString? contentType, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private TelephoneNumberListResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public TelephoneNumberListResource? AsOptional => this.IsNull ? default(TelephoneNumberListResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public TelephoneNumberListResource.LinksEntity Links => this.links?.AsValue<TelephoneNumberListResource.LinksEntity>() ?? TelephoneNumberListResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public TelephoneNumberListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<TelephoneNumberListResource.EmbeddedEntity>() ?? TelephoneNumberListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static TelephoneNumberListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumberListResource(property)
                    : Null)
                : Null;
        public static TelephoneNumberListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumberListResource(property)
                    : Null)
                : Null;
        public static TelephoneNumberListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumberListResource(property)
                    : Null)
            : Null;
        public TelephoneNumberListResource WithContentType(Menes.JsonString? value)
        {
            return new TelephoneNumberListResource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public TelephoneNumberListResource WithLinks(TelephoneNumberListResource.LinksEntity value)
        {
            return new TelephoneNumberListResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public TelephoneNumberListResource WithEmbedded(TelephoneNumberListResource.EmbeddedEntity? value)
        {
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public TelephoneNumberListResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public TelephoneNumberListResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public TelephoneNumberListResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public TelephoneNumberListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public TelephoneNumberListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public TelephoneNumberListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public TelephoneNumberListResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberListResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(TelephoneNumberListResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is TelephoneNumberListResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext3 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext4 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            TelephoneNumberListResource.TelephoneNumberListResourceEntity telephoneNumberListResourceEntityValue1 = thisAsAny.As<TelephoneNumberListResource.TelephoneNumberListResourceEntity>();
            allOfValidationContext2 = telephoneNumberListResourceEntityValue1.Validate(allOfValidationContext2);
            PagedListResource pagedListResourceValue2 = thisAsAny.As<PagedListResource>();
            allOfValidationContext3 = pagedListResourceValue2.Validate(allOfValidationContext3);
            TelephoneNumberListResource.TelephoneNumberListResourceEntity telephoneNumberListResourceEntityValue3 = thisAsAny.As<TelephoneNumberListResource.TelephoneNumberListResourceEntity>();
            allOfValidationContext4 = telephoneNumberListResourceEntityValue3.Validate(allOfValidationContext4);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2, allOfValidationContext3, allOfValidationContext4);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<TelephoneNumberListResource.LinksEntity>, Menes.IJsonAdditionalProperties<TelephoneNumberListResource.PropertiesEntity>
        {
            public static readonly TelephoneNumberListResource.LinksEntity Null = new TelephoneNumberListResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.LinksEntity> FromJsonElement = e => new TelephoneNumberListResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string ItemsPropertyNamePath = ".items";
            private const string NextPropertyNamePath = ".next";
            private const string PrevPropertyNamePath = ".prev";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
            private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonReference? next;
            private readonly Menes.JsonReference? prev;
            private readonly Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.items = null;
                this.next = null;
                this.prev = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                this.next = null;
                this.prev = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, params (string, TelephoneNumberListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next = null, Link? prev = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty2, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty2, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty3, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (items is Menes.JsonReference item2)
                {
                    this.items = item2;
                }
                else
                {
                    this.items = null;
                }
                if (next is Menes.JsonReference item3)
                {
                    this.next = item3;
                }
                else
                {
                    this.next = null;
                }
                if (prev is Menes.JsonReference item4)
                {
                    this.prev = item4;
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
            public TelephoneNumberListResource.LinksEntity? AsOptional => this.IsNull ? default(TelephoneNumberListResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
            public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
            public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static TelephoneNumberListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.LinksEntity(property)
                        : Null)
                : Null;
            public TelephoneNumberListResource.LinksEntity WithSelf(Link value)
            {
                return new TelephoneNumberListResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetItems(), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public TelephoneNumberListResource.LinksEntity WithItems(LinkCollection value)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public TelephoneNumberListResource.LinksEntity WithNext(Link? value)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
            }
            public TelephoneNumberListResource.LinksEntity WithPrev(Link? value)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public TelephoneNumberListResource.LinksEntity ReplaceAll(Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> newAdditional)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
            }
            public TelephoneNumberListResource.LinksEntity ReplaceAll(params (string, TelephoneNumberListResource.PropertiesEntity)[] newAdditional)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public TelephoneNumberListResource.LinksEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public TelephoneNumberListResource.LinksEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional2)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public TelephoneNumberListResource.LinksEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional2, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional3)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public TelephoneNumberListResource.LinksEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional2, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional3, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional4)
            {
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public TelephoneNumberListResource.LinksEntity Add(params (string, TelephoneNumberListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, TelephoneNumberListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(name, value));
                }
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional3, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    if (this.next is Menes.JsonReference next)
                    {
                        writer.WritePropertyName(EncodedNextPropertyName);
                        next.WriteTo(writer);
                    }
                    if (this.prev is Menes.JsonReference prev)
                    {
                        writer.WritePropertyName(EncodedPrevPropertyName);
                        prev.WriteTo(writer);
                    }
                    Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(TelephoneNumberListResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                if (this.Next is Link next)
                {
                    context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                }
                if (this.Prev is Link prev)
                {
                    context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNext()
            {
                if (this.next is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetPrev()
            {
                if (this.prev is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new TelephoneNumberListResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<TelephoneNumberListResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<TelephoneNumberListResource.PropertiesEntity>
        {
            public static readonly TelephoneNumberListResource.EmbeddedEntity Null = new TelephoneNumberListResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.EmbeddedEntity> FromJsonElement = e => new TelephoneNumberListResource.EmbeddedEntity(e);
            private const string ItemsPropertyNamePath = ".items";
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes);
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.items = null;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(TelephoneNumberListResource.ItemsArray? items, Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (items is TelephoneNumberListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public EmbeddedEntity(TelephoneNumberListResource.ItemsArray? items, params (string, TelephoneNumberListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (items is TelephoneNumberListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity(TelephoneNumberListResource.ItemsArray? items = null)
            {
                if (items is TelephoneNumberListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(TelephoneNumberListResource.ItemsArray? items, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1)
            {
                if (items is TelephoneNumberListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity(TelephoneNumberListResource.ItemsArray? items, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty2)
            {
                if (items is TelephoneNumberListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity(TelephoneNumberListResource.ItemsArray? items, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty2, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty3)
            {
                if (items is TelephoneNumberListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity(TelephoneNumberListResource.ItemsArray? items, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty2, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty3, (string, TelephoneNumberListResource.PropertiesEntity) additionalProperty4)
            {
                if (items is TelephoneNumberListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonReference? items, Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (items is Menes.JsonReference item1)
                {
                    this.items = item1;
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull);
            public TelephoneNumberListResource.EmbeddedEntity? AsOptional => this.IsNull ? default(TelephoneNumberListResource.EmbeddedEntity?) : this;
            public TelephoneNumberListResource.ItemsArray? Items => this.items?.AsValue<TelephoneNumberListResource.ItemsArray>() ?? TelephoneNumberListResource.ItemsArray.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static TelephoneNumberListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public TelephoneNumberListResource.EmbeddedEntity WithItems(TelephoneNumberListResource.ItemsArray? value)
            {
                return new TelephoneNumberListResource.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public TelephoneNumberListResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> newAdditional)
            {
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), newAdditional);
            }
            public TelephoneNumberListResource.EmbeddedEntity ReplaceAll(params (string, TelephoneNumberListResource.PropertiesEntity)[] newAdditional)
            {
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public TelephoneNumberListResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1)
            {
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public TelephoneNumberListResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional2)
            {
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public TelephoneNumberListResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional2, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional3)
            {
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public TelephoneNumberListResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberListResource.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional2, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional3, (string, TelephoneNumberListResource.PropertiesEntity) newAdditional4)
            {
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public TelephoneNumberListResource.EmbeddedEntity Add(params (string, TelephoneNumberListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, TelephoneNumberListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(name, value));
                }
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Add((string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional3, (string name, TelephoneNumberListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(TelephoneNumberListResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Items.Equals(other.Items) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                if (this.Items is TelephoneNumberListResource.ItemsArray items)
                {
                    context = Menes.Validation.ValidateProperty(context, items, ItemsPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference? GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<TelephoneNumberListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new TelephoneNumberListResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct TelephoneNumberListResourceEntity : Menes.IJsonObject, System.IEquatable<TelephoneNumberListResource.TelephoneNumberListResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly TelephoneNumberListResource.TelephoneNumberListResourceEntity Null = new TelephoneNumberListResource.TelephoneNumberListResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.TelephoneNumberListResourceEntity> FromJsonElement = e => new TelephoneNumberListResource.TelephoneNumberListResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private const string EmbeddedPropertyNamePath = "._embedded";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonReference? embedded;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public TelephoneNumberListResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.embedded = null;
                this.additionalPropertiesBacking = null;
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.embedded = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links, TelephoneNumberListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links, TelephoneNumberListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links, TelephoneNumberListResource.EmbeddedEntity? embedded = null)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public TelephoneNumberListResourceEntity(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity links, TelephoneNumberListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is TelephoneNumberListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private TelephoneNumberListResourceEntity(Menes.JsonReference links, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                if (embedded is Menes.JsonReference item2)
                {
                    this.embedded = item2;
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity? AsOptional => this.IsNull ? default(TelephoneNumberListResource.TelephoneNumberListResourceEntity?) : this;
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Links => this.links?.AsValue<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity>() ?? TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
            public TelephoneNumberListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<TelephoneNumberListResource.EmbeddedEntity>() ?? TelephoneNumberListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static TelephoneNumberListResource.TelephoneNumberListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.TelephoneNumberListResourceEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberListResource.TelephoneNumberListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.TelephoneNumberListResourceEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberListResource.TelephoneNumberListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberListResource.TelephoneNumberListResourceEntity(property)
                        : Null)
                : Null;
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity WithLinks(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity value)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(Menes.JsonReference.FromValue(value), this.GetEmbedded(), this.GetJsonProperties());
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity WithEmbedded(TelephoneNumberListResource.EmbeddedEntity? value)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), newAdditional);
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberListResource.TelephoneNumberListResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberListResource.TelephoneNumberListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    if (this.embedded is Menes.JsonReference embedded)
                    {
                        writer.WritePropertyName(EncodedEmbeddedPropertyName);
                        embedded.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(TelephoneNumberListResource.TelephoneNumberListResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
                if (this.Embedded is TelephoneNumberListResource.EmbeddedEntity embedded)
                {
                    context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmbedded()
            {
                if (this.embedded is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Null = new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity> FromJsonElement = e => new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(e);
                private const string ItemsPropertyNamePath = ".items";
                private const string NextPropertyNamePath = ".next";
                private const string PrevPropertyNamePath = ".prev";
                private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
                private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
                private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
                private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
                private readonly Menes.JsonReference? items;
                private readonly Menes.JsonReference? next;
                private readonly Menes.JsonReference? prev;
                private readonly Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.items = null;
                    this.next = null;
                    this.prev = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    this.next = null;
                    this.prev = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, params (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(LinkCollection items, Link? next = null, Link? prev = null)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (items is Menes.JsonReference item1)
                    {
                        this.items = item1;
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Menes.JsonReference item2)
                    {
                        this.next = item2;
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Menes.JsonReference item3)
                    {
                        this.prev = item3;
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity?) : this;
                public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
                public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
                public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity WithItems(LinkCollection value)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity WithNext(Link? value)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity WithPrev(Link? value)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity ReplaceAll(params (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity ReplaceAll((string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity ReplaceAll((string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity ReplaceAll((string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity ReplaceAll((string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Add(params (string, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Add((string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Add((string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Add((string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Add((string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.items is Menes.JsonReference items)
                        {
                            writer.WritePropertyName(EncodedItemsPropertyName);
                            items.WriteTo(writer);
                        }
                        if (this.next is Menes.JsonReference next)
                        {
                            writer.WritePropertyName(EncodedNextPropertyName);
                            next.WriteTo(writer);
                        }
                        if (this.prev is Menes.JsonReference prev)
                        {
                            writer.WritePropertyName(EncodedPrevPropertyName);
                            prev.WriteTo(writer);
                        }
                        Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                    if (this.Next is Link next)
                    {
                        context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                    }
                    if (this.Prev is Link prev)
                    {
                        context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetItems()
                {
                    if (this.items is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNext()
                {
                    if (this.next is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetPrev()
                {
                    if (this.prev is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new TelephoneNumberListResource.TelephoneNumberListResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberListResource.PropertiesEntity> FromJsonElement = e => new TelephoneNumberListResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            private readonly Menes.JsonReference? item3;
            private readonly Menes.JsonReference? item4;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(Resource clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item3 = null;
                }
                else
                {
                    this.item3 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item4 = null;
            }
            public PropertiesEntity(ResourceCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item4 = null;
                }
                else
                {
                    this.item4 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && this.item3 is null && this.item4 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResource => this.item3 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResourceCollection => this.item4 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
            public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
            public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
            public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (Resource.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (ResourceCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public Resource AsResource() => this.item3?.AsValue<Resource>() ?? new Resource(this.JsonElement);
            public ResourceCollection AsResourceCollection() => this.item4?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else if (this.item3 is Menes.JsonReference item3)
                {
                    item3.WriteTo(writer);
                }
                else if (this.item4 is Menes.JsonReference item4)
                {
                    item4.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResource)
                {
                    builder.Append("{");
                    builder.Append("Resource");
                    builder.Append(", ");
                    builder.Append(this.AsResource().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResourceCollection)
                {
                    builder.Append("{");
                    builder.Append("ResourceCollection");
                    builder.Append(", ");
                    builder.Append(this.AsResourceCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext3 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext4 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                if (this.IsResource)
                {
                    validationContext3 = this.AsResource().Validate(validationContext3);
                }
                else
                {
                    validationContext3 = validationContext3.WithError("The value is not convertible to a Resource.");
                }
                if (this.IsResourceCollection)
                {
                    validationContext4 = this.AsResourceCollection().Validate(validationContext4);
                }
                else
                {
                    validationContext4 = validationContext4.WithError("The value is not convertible to a ResourceCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2, validationContext3, validationContext4);
            }
        }
        public readonly struct ItemsArray : Menes.IJsonValue, System.Collections.Generic.IEnumerable<TelephoneNumberResource>, System.Collections.IEnumerable, System.IEquatable<ItemsArray>, System.IEquatable<Menes.JsonArray<TelephoneNumberResource>>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, ItemsArray> FromJsonElement = e => new ItemsArray(e);
            public static readonly ItemsArray Null = new ItemsArray(default(System.Text.Json.JsonElement));
            private readonly Menes.JsonArray<TelephoneNumberResource>? value;
            public ItemsArray(Menes.JsonArray<TelephoneNumberResource> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = jsonArray;
                    this.JsonElement = default;
                }
            }
            public ItemsArray(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public int Length
            {
                get
                {
                    if (this.HasJsonElement)
                    {
                        return this.JsonElement.GetArrayLength();
                    }
                    if (this.value is Menes.JsonArray<TelephoneNumberResource> value)
                    {
                        return value.Length;
                    }
                    return 0;
                }
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public ItemsArray? AsOptional => this.IsNull ? default(ItemsArray?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator ItemsArray(Menes.JsonArray<TelephoneNumberResource> value)
            {
                return new ItemsArray(value);
            }
            public static implicit operator Menes.JsonArray<TelephoneNumberResource>(ItemsArray value)
            {
                if (value.value is Menes.JsonArray<TelephoneNumberResource> clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonArray<TelephoneNumberResource>(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonArray<TelephoneNumberResource>.IsConvertibleFrom(jsonElement);
            }
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public bool Equals(ItemsArray other)
            {
                return this.Equals((Menes.JsonArray<TelephoneNumberResource>)other);
            }
            public bool Equals(Menes.JsonArray<TelephoneNumberResource> other)
            {
                return ((Menes.JsonArray<TelephoneNumberResource>)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonArray<TelephoneNumberResource> array = this;
                Menes.ValidationContext context = validationContext;
                context = array.Validate(context);
                return array.ValidateItems(context);
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                if (this.value is Menes.JsonArray<TelephoneNumberResource> clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public Menes.JsonArray<TelephoneNumberResource>.JsonArrayEnumerator GetEnumerator()
            {
                return ((Menes.JsonArray<TelephoneNumberResource>)this).GetEnumerator();
            }
            System.Collections.Generic.IEnumerator<TelephoneNumberResource> System.Collections.Generic.IEnumerable<TelephoneNumberResource>.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            public ItemsArray Add(params TelephoneNumberResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                foreach (TelephoneNumberResource item in items)
                {
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in TelephoneNumberResource item1)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in TelephoneNumberResource item1, in TelephoneNumberResource item2)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in TelephoneNumberResource item1, in TelephoneNumberResource item2, in TelephoneNumberResource item3)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in TelephoneNumberResource item1, in TelephoneNumberResource item2, in TelephoneNumberResource item3, in TelephoneNumberResource item4)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                arrayBuilder.Add(item4);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, params TelephoneNumberResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                int index = 0;
                foreach (TelephoneNumberResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        foreach (TelephoneNumberResource itemToInsert in items)
                        {
                            arrayBuilder.Add(itemToInsert);
                        }
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in TelephoneNumberResource item1)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                int index = 0;
                foreach (TelephoneNumberResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in TelephoneNumberResource item1, in TelephoneNumberResource item2)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                int index = 0;
                foreach (TelephoneNumberResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in TelephoneNumberResource item1, in TelephoneNumberResource item2, in TelephoneNumberResource item3)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                int index = 0;
                foreach (TelephoneNumberResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in TelephoneNumberResource item1, in TelephoneNumberResource item2, in TelephoneNumberResource item3, in TelephoneNumberResource item4)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                int index = 0;
                foreach (TelephoneNumberResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                        arrayBuilder.Add(item4);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(params TelephoneNumberResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    bool found = false;
                    foreach (TelephoneNumberResource itemToRemove in items)
                    {
                        if (itemToRemove.Equals(item))
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        arrayBuilder.Add(item);
                    }
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(TelephoneNumberResource item1)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    if (item1.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(TelephoneNumberResource item1, TelephoneNumberResource item2)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(TelephoneNumberResource item1, TelephoneNumberResource item2, TelephoneNumberResource item3)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(TelephoneNumberResource item1, TelephoneNumberResource item2, TelephoneNumberResource item3, TelephoneNumberResource item4)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveAt(int indexToRemove)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                int index = 0;
                foreach (TelephoneNumberResource item in this)
                {
                    if (index == indexToRemove)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveRange(int startIndex, int length)
            {
                if (startIndex < 0 || startIndex > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(startIndex));
                }
                if (length < 1 || startIndex + length > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(length));
                }
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                int index = 0;
                foreach (TelephoneNumberResource item in this)
                {
                    if (index >= startIndex && index < startIndex + length)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(System.Predicate<TelephoneNumberResource> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<TelephoneNumberResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<TelephoneNumberResource>();
                foreach (TelephoneNumberResource item in this)
                {
                    if (removeIfTrue(item))
                    {
                        continue;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
        }
    }
    public readonly struct TelephoneNumberResource : Menes.IJsonObject, System.IEquatable<TelephoneNumberResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly TelephoneNumberResource Null = new TelephoneNumberResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberResource> FromJsonElement = e => new TelephoneNumberResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private const string CountryCodePropertyNamePath = ".countryCode";
        private const string NationalDestinationCodePropertyNamePath = ".nationalDestinationCode";
        private const string SubscriberNumberPropertyNamePath = ".subscriberNumber";
        private const string TimeZonePropertyNamePath = ".timeZone";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.ReadOnlyMemory<byte> CountryCodePropertyNameBytes = new byte[] { 99, 111, 117, 110, 116, 114, 121, 67, 111, 100, 101 };
        private static readonly System.ReadOnlyMemory<byte> NationalDestinationCodePropertyNameBytes = new byte[] { 110, 97, 116, 105, 111, 110, 97, 108, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 67, 111, 100, 101 };
        private static readonly System.ReadOnlyMemory<byte> SubscriberNumberPropertyNameBytes = new byte[] { 115, 117, 98, 115, 99, 114, 105, 98, 101, 114, 78, 117, 109, 98, 101, 114 };
        private static readonly System.ReadOnlyMemory<byte> TimeZonePropertyNameBytes = new byte[] { 116, 105, 109, 101, 90, 111, 110, 101 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedCountryCodePropertyName = System.Text.Json.JsonEncodedText.Encode(CountryCodePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedNationalDestinationCodePropertyName = System.Text.Json.JsonEncodedText.Encode(NationalDestinationCodePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedSubscriberNumberPropertyName = System.Text.Json.JsonEncodedText.Encode(SubscriberNumberPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedTimeZonePropertyName = System.Text.Json.JsonEncodedText.Encode(TimeZonePropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes, CountryCodePropertyNameBytes, NationalDestinationCodePropertyNameBytes, SubscriberNumberPropertyNameBytes, TimeZonePropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly TelephoneNumberResource.CountryCodeValue? countryCode;
        private readonly TelephoneNumberResource.NationalDestinationCodeValue? nationalDestinationCode;
        private readonly TelephoneNumberResource.SubscriberNumberValue? subscriberNumber;
        private readonly Menes.JsonString? timeZone;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public TelephoneNumberResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.countryCode = null;
            this.nationalDestinationCode = null;
            this.subscriberNumber = null;
            this.timeZone = null;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber)
        {
            this.contentType = null;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType, TelephoneNumberResource.EmbeddedEntity? embedded, Menes.JsonString? timeZone, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType, TelephoneNumberResource.EmbeddedEntity? embedded, Menes.JsonString? timeZone, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType = null, TelephoneNumberResource.EmbeddedEntity? embedded = null, Menes.JsonString? timeZone = null)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType, TelephoneNumberResource.EmbeddedEntity? embedded, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType, TelephoneNumberResource.EmbeddedEntity? embedded, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType, TelephoneNumberResource.EmbeddedEntity? embedded, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public TelephoneNumberResource(TelephoneNumberResource.LinksEntity links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType, TelephoneNumberResource.EmbeddedEntity? embedded, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is TelephoneNumberResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is TelephoneNumberResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private TelephoneNumberResource(Menes.JsonReference links, TelephoneNumberResource.CountryCodeValue countryCode, TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumberResource.SubscriberNumberValue subscriberNumber, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonString? timeZone, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull) && (this.countryCode is null || this.countryCode.Value.IsNull) && (this.nationalDestinationCode is null || this.nationalDestinationCode.Value.IsNull) && (this.subscriberNumber is null || this.subscriberNumber.Value.IsNull) && (this.timeZone is null || this.timeZone.Value.IsNull);
        public TelephoneNumberResource? AsOptional => this.IsNull ? default(TelephoneNumberResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public TelephoneNumberResource.LinksEntity Links => this.links?.AsValue<TelephoneNumberResource.LinksEntity>() ?? TelephoneNumberResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public TelephoneNumberResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<TelephoneNumberResource.EmbeddedEntity>() ?? TelephoneNumberResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public TelephoneNumberResource.CountryCodeValue CountryCode => this.countryCode ?? TelephoneNumberResource.CountryCodeValue.FromOptionalProperty(this.JsonElement, CountryCodePropertyNameBytes.Span);
        public TelephoneNumberResource.NationalDestinationCodeValue NationalDestinationCode => this.nationalDestinationCode ?? TelephoneNumberResource.NationalDestinationCodeValue.FromOptionalProperty(this.JsonElement, NationalDestinationCodePropertyNameBytes.Span);
        public TelephoneNumberResource.SubscriberNumberValue SubscriberNumber => this.subscriberNumber ?? TelephoneNumberResource.SubscriberNumberValue.FromOptionalProperty(this.JsonElement, SubscriberNumberPropertyNameBytes.Span);
        public Menes.JsonString? TimeZone => this.timeZone ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, TimeZonePropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static TelephoneNumberResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumberResource(property)
                    : Null)
                : Null;
        public static TelephoneNumberResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumberResource(property)
                    : Null)
                : Null;
        public static TelephoneNumberResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumberResource(property)
                    : Null)
            : Null;
        public TelephoneNumberResource WithContentType(Menes.JsonString? value)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, value, this.GetEmbedded(), this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumberResource WithLinks(TelephoneNumberResource.LinksEntity value)
        {
            return new TelephoneNumberResource(Menes.JsonReference.FromValue(value), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumberResource WithEmbedded(TelephoneNumberResource.EmbeddedEntity? value)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, Menes.JsonReference.FromValue(value), this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumberResource WithCountryCode(TelephoneNumberResource.CountryCodeValue value)
        {
            return new TelephoneNumberResource(this.GetLinks(), value, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumberResource WithNationalDestinationCode(TelephoneNumberResource.NationalDestinationCodeValue value)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, value, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumberResource WithSubscriberNumber(TelephoneNumberResource.SubscriberNumberValue value)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, value, this.ContentType, this.GetEmbedded(), this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumberResource WithTimeZone(Menes.JsonString? value)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), value, this.GetJsonProperties());
        }
        public TelephoneNumberResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, newAdditional);
        }
        public TelephoneNumberResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public TelephoneNumberResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public TelephoneNumberResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public TelephoneNumberResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public TelephoneNumberResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public TelephoneNumberResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumberResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumberResource(this.GetLinks(), this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.ContentType, this.GetEmbedded(), this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                if (this.countryCode is TelephoneNumberResource.CountryCodeValue countryCode)
                {
                    writer.WritePropertyName(EncodedCountryCodePropertyName);
                    countryCode.WriteTo(writer);
                }
                if (this.nationalDestinationCode is TelephoneNumberResource.NationalDestinationCodeValue nationalDestinationCode)
                {
                    writer.WritePropertyName(EncodedNationalDestinationCodePropertyName);
                    nationalDestinationCode.WriteTo(writer);
                }
                if (this.subscriberNumber is TelephoneNumberResource.SubscriberNumberValue subscriberNumber)
                {
                    writer.WritePropertyName(EncodedSubscriberNumberPropertyName);
                    subscriberNumber.WriteTo(writer);
                }
                if (this.timeZone is Menes.JsonString timeZone)
                {
                    writer.WritePropertyName(EncodedTimeZonePropertyName);
                    timeZone.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(TelephoneNumberResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && this.CountryCode.Equals(other.CountryCode) && this.NationalDestinationCode.Equals(other.NationalDestinationCode) && this.SubscriberNumber.Equals(other.SubscriberNumber) && this.TimeZone.Equals(other.TimeZone) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is TelephoneNumberResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.CountryCode, CountryCodePropertyNamePath);
            context = Menes.Validation.ValidateRequiredProperty(context, this.NationalDestinationCode, NationalDestinationCodePropertyNamePath);
            context = Menes.Validation.ValidateRequiredProperty(context, this.SubscriberNumber, SubscriberNumberPropertyNamePath);
            if (this.TimeZone is Menes.JsonString timeZone)
            {
                context = Menes.Validation.ValidateProperty(context, timeZone, TimeZonePropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            TelephoneNumber telephoneNumberValue1 = thisAsAny.As<TelephoneNumber>();
            allOfValidationContext2 = telephoneNumberValue1.Validate(allOfValidationContext2);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<TelephoneNumberResource.LinksEntity>, Menes.IJsonAdditionalProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>
        {
            public static readonly TelephoneNumberResource.LinksEntity Null = new TelephoneNumberResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberResource.LinksEntity> FromJsonElement = e => new TelephoneNumberResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, params (string, TelephoneNumberResource.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty2, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty2, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty3, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull);
            public TelephoneNumberResource.LinksEntity? AsOptional => this.IsNull ? default(TelephoneNumberResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static TelephoneNumberResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberResource.LinksEntity(property)
                        : Null)
                : Null;
            public TelephoneNumberResource.LinksEntity WithSelf(Link value)
            {
                return new TelephoneNumberResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public TelephoneNumberResource.LinksEntity ReplaceAll(Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity> newAdditional)
            {
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), newAdditional);
            }
            public TelephoneNumberResource.LinksEntity ReplaceAll(params (string, TelephoneNumberResource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public TelephoneNumberResource.LinksEntity ReplaceAll((string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional1)
            {
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public TelephoneNumberResource.LinksEntity ReplaceAll((string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional2)
            {
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public TelephoneNumberResource.LinksEntity ReplaceAll((string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional2, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional3)
            {
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public TelephoneNumberResource.LinksEntity ReplaceAll((string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional2, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional3, (string, TelephoneNumberResource.LinksEntity.PropertiesEntity) newAdditional4)
            {
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public TelephoneNumberResource.LinksEntity Add(params (string, TelephoneNumberResource.LinksEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(name, value));
                }
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Add((string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Add((string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Add((string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Add((string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional3, (string name, TelephoneNumberResource.LinksEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.LinksEntity(this.GetSelf(), new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(TelephoneNumberResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberResource.LinksEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberResource.LinksEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberResource.LinksEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<TelephoneNumberResource.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new TelephoneNumberResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<TelephoneNumberResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>
        {
            public static readonly TelephoneNumberResource.EmbeddedEntity Null = new TelephoneNumberResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberResource.EmbeddedEntity> FromJsonElement = e => new TelephoneNumberResource.EmbeddedEntity(e);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>>.Empty;
            private readonly Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(params (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity)[] additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty1)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty2)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty3)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty3, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) additionalProperty4)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking)
            {
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public TelephoneNumberResource.EmbeddedEntity? AsOptional => this.IsNull ? default(TelephoneNumberResource.EmbeddedEntity?) : this;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static TelephoneNumberResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static TelephoneNumberResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new TelephoneNumberResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public TelephoneNumberResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> newAdditional)
            {
                return new TelephoneNumberResource.EmbeddedEntity(newAdditional);
            }
            public TelephoneNumberResource.EmbeddedEntity ReplaceAll(params (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                return new TelephoneNumberResource.EmbeddedEntity(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional));
            }
            public TelephoneNumberResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional1)
            {
                return new TelephoneNumberResource.EmbeddedEntity(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1));
            }
            public TelephoneNumberResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional2)
            {
                return new TelephoneNumberResource.EmbeddedEntity(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public TelephoneNumberResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional3)
            {
                return new TelephoneNumberResource.EmbeddedEntity(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public TelephoneNumberResource.EmbeddedEntity ReplaceAll((string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional3, (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity) newAdditional4)
            {
                return new TelephoneNumberResource.EmbeddedEntity(Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public TelephoneNumberResource.EmbeddedEntity Add(params (string, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(name, value));
                }
                return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Add((string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Add((string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Add((string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Add((string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional3, (string name, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public TelephoneNumberResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new TelephoneNumberResource.EmbeddedEntity(new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(TelephoneNumberResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TelephoneNumberResource.EmbeddedEntity.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<TelephoneNumberResource.EmbeddedEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumberResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new TelephoneNumberResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct CountryCodeValue : Menes.IJsonValue, System.IEquatable<CountryCodeValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, CountryCodeValue> FromJsonElement = e => new CountryCodeValue(e);
            public static readonly CountryCodeValue Null = new CountryCodeValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 3;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^[+]?\\d{1,2}$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public CountryCodeValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public CountryCodeValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public CountryCodeValue? AsOptional => this.IsNull ? default(CountryCodeValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator CountryCodeValue(Menes.JsonString value)
            {
                return new CountryCodeValue(value);
            }
            public static implicit operator CountryCodeValue(string value)
            {
                return new CountryCodeValue(value);
            }
            public static implicit operator string(CountryCodeValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(CountryCodeValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static CountryCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new CountryCodeValue(property)
                        : Null)
                    : Null;
            public static CountryCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new CountryCodeValue(property)
                        : Null)
                    : Null;
            public static CountryCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new CountryCodeValue(property)
                        : Null)
                    : Null;
            public bool Equals(CountryCodeValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct NationalDestinationCodeValue : Menes.IJsonValue, System.IEquatable<NationalDestinationCodeValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, NationalDestinationCodeValue> FromJsonElement = e => new NationalDestinationCodeValue(e);
            public static readonly NationalDestinationCodeValue Null = new NationalDestinationCodeValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 4;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^d{1,4}$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public NationalDestinationCodeValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public NationalDestinationCodeValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public NationalDestinationCodeValue? AsOptional => this.IsNull ? default(NationalDestinationCodeValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator NationalDestinationCodeValue(Menes.JsonString value)
            {
                return new NationalDestinationCodeValue(value);
            }
            public static implicit operator NationalDestinationCodeValue(string value)
            {
                return new NationalDestinationCodeValue(value);
            }
            public static implicit operator string(NationalDestinationCodeValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(NationalDestinationCodeValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static NationalDestinationCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new NationalDestinationCodeValue(property)
                        : Null)
                    : Null;
            public static NationalDestinationCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new NationalDestinationCodeValue(property)
                        : Null)
                    : Null;
            public static NationalDestinationCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new NationalDestinationCodeValue(property)
                        : Null)
                    : Null;
            public bool Equals(NationalDestinationCodeValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct SubscriberNumberValue : Menes.IJsonValue, System.IEquatable<SubscriberNumberValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, SubscriberNumberValue> FromJsonElement = e => new SubscriberNumberValue(e);
            public static readonly SubscriberNumberValue Null = new SubscriberNumberValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 13;
            private static readonly int? MinLength = 8;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^d{8,13}$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public SubscriberNumberValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public SubscriberNumberValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public SubscriberNumberValue? AsOptional => this.IsNull ? default(SubscriberNumberValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator SubscriberNumberValue(Menes.JsonString value)
            {
                return new SubscriberNumberValue(value);
            }
            public static implicit operator SubscriberNumberValue(string value)
            {
                return new SubscriberNumberValue(value);
            }
            public static implicit operator string(SubscriberNumberValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(SubscriberNumberValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static SubscriberNumberValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new SubscriberNumberValue(property)
                        : Null)
                    : Null;
            public static SubscriberNumberValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new SubscriberNumberValue(property)
                        : Null)
                    : Null;
            public static SubscriberNumberValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new SubscriberNumberValue(property)
                        : Null)
                    : Null;
            public bool Equals(SubscriberNumberValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
    }
    public readonly struct TelephoneNumber : Menes.IJsonObject, System.IEquatable<TelephoneNumber>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly TelephoneNumber Null = new TelephoneNumber(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, TelephoneNumber> FromJsonElement = e => new TelephoneNumber(e);
        private const string CountryCodePropertyNamePath = ".countryCode";
        private const string NationalDestinationCodePropertyNamePath = ".nationalDestinationCode";
        private const string SubscriberNumberPropertyNamePath = ".subscriberNumber";
        private const string TimeZonePropertyNamePath = ".timeZone";
        private static readonly System.ReadOnlyMemory<byte> CountryCodePropertyNameBytes = new byte[] { 99, 111, 117, 110, 116, 114, 121, 67, 111, 100, 101 };
        private static readonly System.ReadOnlyMemory<byte> NationalDestinationCodePropertyNameBytes = new byte[] { 110, 97, 116, 105, 111, 110, 97, 108, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 67, 111, 100, 101 };
        private static readonly System.ReadOnlyMemory<byte> SubscriberNumberPropertyNameBytes = new byte[] { 115, 117, 98, 115, 99, 114, 105, 98, 101, 114, 78, 117, 109, 98, 101, 114 };
        private static readonly System.ReadOnlyMemory<byte> TimeZonePropertyNameBytes = new byte[] { 116, 105, 109, 101, 90, 111, 110, 101 };
        private static readonly System.Text.Json.JsonEncodedText EncodedCountryCodePropertyName = System.Text.Json.JsonEncodedText.Encode(CountryCodePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedNationalDestinationCodePropertyName = System.Text.Json.JsonEncodedText.Encode(NationalDestinationCodePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedSubscriberNumberPropertyName = System.Text.Json.JsonEncodedText.Encode(SubscriberNumberPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedTimeZonePropertyName = System.Text.Json.JsonEncodedText.Encode(TimeZonePropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(CountryCodePropertyNameBytes, NationalDestinationCodePropertyNameBytes, SubscriberNumberPropertyNameBytes, TimeZonePropertyNameBytes);
        private readonly TelephoneNumber.CountryCodeValue? countryCode;
        private readonly TelephoneNumber.NationalDestinationCodeValue? nationalDestinationCode;
        private readonly TelephoneNumber.SubscriberNumberValue? subscriberNumber;
        private readonly Menes.JsonString? timeZone;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public TelephoneNumber(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.countryCode = null;
            this.nationalDestinationCode = null;
            this.subscriberNumber = null;
            this.timeZone = null;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone = null)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private TelephoneNumber(TelephoneNumber.CountryCodeValue countryCode, TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode, TelephoneNumber.SubscriberNumberValue subscriberNumber, Menes.JsonString? timeZone, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.countryCode = countryCode;
            this.nationalDestinationCode = nationalDestinationCode;
            this.subscriberNumber = subscriberNumber;
            this.timeZone = timeZone;
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.countryCode is null || this.countryCode.Value.IsNull) && (this.nationalDestinationCode is null || this.nationalDestinationCode.Value.IsNull) && (this.subscriberNumber is null || this.subscriberNumber.Value.IsNull) && (this.timeZone is null || this.timeZone.Value.IsNull);
        public TelephoneNumber? AsOptional => this.IsNull ? default(TelephoneNumber?) : this;
        public TelephoneNumber.CountryCodeValue CountryCode => this.countryCode ?? TelephoneNumber.CountryCodeValue.FromOptionalProperty(this.JsonElement, CountryCodePropertyNameBytes.Span);
        public TelephoneNumber.NationalDestinationCodeValue NationalDestinationCode => this.nationalDestinationCode ?? TelephoneNumber.NationalDestinationCodeValue.FromOptionalProperty(this.JsonElement, NationalDestinationCodePropertyNameBytes.Span);
        public TelephoneNumber.SubscriberNumberValue SubscriberNumber => this.subscriberNumber ?? TelephoneNumber.SubscriberNumberValue.FromOptionalProperty(this.JsonElement, SubscriberNumberPropertyNameBytes.Span);
        public Menes.JsonString? TimeZone => this.timeZone ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, TimeZonePropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static TelephoneNumber FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumber(property)
                    : Null)
                : Null;
        public static TelephoneNumber FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumber(property)
                    : Null)
                : Null;
        public static TelephoneNumber FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new TelephoneNumber(property)
                    : Null)
            : Null;
        public TelephoneNumber WithCountryCode(TelephoneNumber.CountryCodeValue value)
        {
            return new TelephoneNumber(value, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumber WithNationalDestinationCode(TelephoneNumber.NationalDestinationCodeValue value)
        {
            return new TelephoneNumber(this.CountryCode, value, this.SubscriberNumber, this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumber WithSubscriberNumber(TelephoneNumber.SubscriberNumberValue value)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, value, this.TimeZone, this.GetJsonProperties());
        }
        public TelephoneNumber WithTimeZone(Menes.JsonString? value)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, value, this.GetJsonProperties());
        }
        public TelephoneNumber ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, newAdditional);
        }
        public TelephoneNumber ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public TelephoneNumber ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public TelephoneNumber ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public TelephoneNumber ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public TelephoneNumber ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public TelephoneNumber Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public TelephoneNumber Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new TelephoneNumber(this.CountryCode, this.NationalDestinationCode, this.SubscriberNumber, this.TimeZone, new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.countryCode is TelephoneNumber.CountryCodeValue countryCode)
                {
                    writer.WritePropertyName(EncodedCountryCodePropertyName);
                    countryCode.WriteTo(writer);
                }
                if (this.nationalDestinationCode is TelephoneNumber.NationalDestinationCodeValue nationalDestinationCode)
                {
                    writer.WritePropertyName(EncodedNationalDestinationCodePropertyName);
                    nationalDestinationCode.WriteTo(writer);
                }
                if (this.subscriberNumber is TelephoneNumber.SubscriberNumberValue subscriberNumber)
                {
                    writer.WritePropertyName(EncodedSubscriberNumberPropertyName);
                    subscriberNumber.WriteTo(writer);
                }
                if (this.timeZone is Menes.JsonString timeZone)
                {
                    writer.WritePropertyName(EncodedTimeZonePropertyName);
                    timeZone.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(TelephoneNumber other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.CountryCode.Equals(other.CountryCode) && this.NationalDestinationCode.Equals(other.NationalDestinationCode) && this.SubscriberNumber.Equals(other.SubscriberNumber) && this.TimeZone.Equals(other.TimeZone) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            context = Menes.Validation.ValidateRequiredProperty(context, this.CountryCode, CountryCodePropertyNamePath);
            context = Menes.Validation.ValidateRequiredProperty(context, this.NationalDestinationCode, NationalDestinationCodePropertyNamePath);
            context = Menes.Validation.ValidateRequiredProperty(context, this.SubscriberNumber, SubscriberNumberPropertyNamePath);
            if (this.TimeZone is Menes.JsonString timeZone)
            {
                context = Menes.Validation.ValidateProperty(context, timeZone, TimeZonePropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }
        public readonly struct CountryCodeValue : Menes.IJsonValue, System.IEquatable<CountryCodeValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, CountryCodeValue> FromJsonElement = e => new CountryCodeValue(e);
            public static readonly CountryCodeValue Null = new CountryCodeValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 3;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^[+]?\\d{1,2}$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public CountryCodeValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public CountryCodeValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public CountryCodeValue? AsOptional => this.IsNull ? default(CountryCodeValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator CountryCodeValue(Menes.JsonString value)
            {
                return new CountryCodeValue(value);
            }
            public static implicit operator CountryCodeValue(string value)
            {
                return new CountryCodeValue(value);
            }
            public static implicit operator string(CountryCodeValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(CountryCodeValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static CountryCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new CountryCodeValue(property)
                        : Null)
                    : Null;
            public static CountryCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new CountryCodeValue(property)
                        : Null)
                    : Null;
            public static CountryCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new CountryCodeValue(property)
                        : Null)
                    : Null;
            public bool Equals(CountryCodeValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct NationalDestinationCodeValue : Menes.IJsonValue, System.IEquatable<NationalDestinationCodeValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, NationalDestinationCodeValue> FromJsonElement = e => new NationalDestinationCodeValue(e);
            public static readonly NationalDestinationCodeValue Null = new NationalDestinationCodeValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 4;
            private static readonly int? MinLength = 1;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^d{1,4}$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public NationalDestinationCodeValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public NationalDestinationCodeValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public NationalDestinationCodeValue? AsOptional => this.IsNull ? default(NationalDestinationCodeValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator NationalDestinationCodeValue(Menes.JsonString value)
            {
                return new NationalDestinationCodeValue(value);
            }
            public static implicit operator NationalDestinationCodeValue(string value)
            {
                return new NationalDestinationCodeValue(value);
            }
            public static implicit operator string(NationalDestinationCodeValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(NationalDestinationCodeValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static NationalDestinationCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new NationalDestinationCodeValue(property)
                        : Null)
                    : Null;
            public static NationalDestinationCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new NationalDestinationCodeValue(property)
                        : Null)
                    : Null;
            public static NationalDestinationCodeValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new NationalDestinationCodeValue(property)
                        : Null)
                    : Null;
            public bool Equals(NationalDestinationCodeValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
        public readonly struct SubscriberNumberValue : Menes.IJsonValue, System.IEquatable<SubscriberNumberValue>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, SubscriberNumberValue> FromJsonElement = e => new SubscriberNumberValue(e);
            public static readonly SubscriberNumberValue Null = new SubscriberNumberValue(default(System.Text.Json.JsonElement));
            private static readonly string? ConstValue = BuildConstValue();
            private static readonly System.Collections.Immutable.ImmutableArray<string>? EnumValues = BuildEnumValues();
            private static readonly int? MaxLength = 13;
            private static readonly int? MinLength = 8;
            private static readonly System.Text.RegularExpressions.Regex? Pattern = new System.Text.RegularExpressions.Regex("^d{8,13}$", System.Text.RegularExpressions.RegexOptions.Compiled);
            private readonly Menes.JsonString? value;
            public SubscriberNumberValue(Menes.JsonString value)
            {
                if (value.HasJsonElement)
                {
                    this.JsonElement = value.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = value;
                    this.JsonElement = default;
                }
            }
            public SubscriberNumberValue(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public SubscriberNumberValue? AsOptional => this.IsNull ? default(SubscriberNumberValue?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator SubscriberNumberValue(Menes.JsonString value)
            {
                return new SubscriberNumberValue(value);
            }
            public static implicit operator SubscriberNumberValue(string value)
            {
                return new SubscriberNumberValue(value);
            }
            public static implicit operator string(SubscriberNumberValue value)
            {
                return (string)(Menes.JsonString)value;
            }
            public static implicit operator Menes.JsonString(SubscriberNumberValue value)
            {
                if (value.value is Menes.JsonString clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonString(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonString.IsConvertibleFrom(jsonElement);
            }
            public static SubscriberNumberValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new SubscriberNumberValue(property)
                        : Null)
                    : Null;
            public static SubscriberNumberValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new SubscriberNumberValue(property)
                        : Null)
                    : Null;
            public static SubscriberNumberValue FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new SubscriberNumberValue(property)
                        : Null)
                    : Null;
            public bool Equals(SubscriberNumberValue other)
            {
                return this.Equals((Menes.JsonString)other);
            }
            public bool Equals(Menes.JsonString other)
            {
                return ((Menes.JsonString)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonString value = this;
                Menes.ValidationContext context = validationContext;
                context = value.Validate(context);
                context = value.ValidateAsString(context, MaxLength, MinLength, Pattern, EnumValues, ConstValue);
                return context;
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else if (this.value is Menes.JsonString clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                if (this.value is Menes.JsonString clrValue)
                {
                    return clrValue.ToString();
                }
                else
                {
                    return this.JsonElement.GetRawText();
                }
            }
            private static string? BuildConstValue()
            {
                return null;
            }
            private static System.Collections.Immutable.ImmutableArray<string>? BuildEnumValues()
            {
                return null;
            }
        }
    }
    public readonly struct RelatedPeopleListResource : Menes.IJsonObject, System.IEquatable<RelatedPeopleListResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly RelatedPeopleListResource Null = new RelatedPeopleListResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource> FromJsonElement = e => new RelatedPeopleListResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public RelatedPeopleListResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links, Menes.JsonString? contentType, RelatedPeopleListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links, Menes.JsonString? contentType, RelatedPeopleListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links, Menes.JsonString? contentType = null, RelatedPeopleListResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links, Menes.JsonString? contentType, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links, Menes.JsonString? contentType, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links, Menes.JsonString? contentType, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public RelatedPeopleListResource(RelatedPeopleListResource.LinksEntity links, Menes.JsonString? contentType, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is RelatedPeopleListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private RelatedPeopleListResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public RelatedPeopleListResource? AsOptional => this.IsNull ? default(RelatedPeopleListResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public RelatedPeopleListResource.LinksEntity Links => this.links?.AsValue<RelatedPeopleListResource.LinksEntity>() ?? RelatedPeopleListResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public RelatedPeopleListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<RelatedPeopleListResource.EmbeddedEntity>() ?? RelatedPeopleListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static RelatedPeopleListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new RelatedPeopleListResource(property)
                    : Null)
                : Null;
        public static RelatedPeopleListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new RelatedPeopleListResource(property)
                    : Null)
                : Null;
        public static RelatedPeopleListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new RelatedPeopleListResource(property)
                    : Null)
            : Null;
        public RelatedPeopleListResource WithContentType(Menes.JsonString? value)
        {
            return new RelatedPeopleListResource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public RelatedPeopleListResource WithLinks(RelatedPeopleListResource.LinksEntity value)
        {
            return new RelatedPeopleListResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public RelatedPeopleListResource WithEmbedded(RelatedPeopleListResource.EmbeddedEntity? value)
        {
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public RelatedPeopleListResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public RelatedPeopleListResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public RelatedPeopleListResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public RelatedPeopleListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public RelatedPeopleListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public RelatedPeopleListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public RelatedPeopleListResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPeopleListResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPeopleListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(RelatedPeopleListResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is RelatedPeopleListResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext3 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext4 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            RelatedPeopleListResource.RelatedPeopleListResourceEntity relatedPeopleListResourceEntityValue1 = thisAsAny.As<RelatedPeopleListResource.RelatedPeopleListResourceEntity>();
            allOfValidationContext2 = relatedPeopleListResourceEntityValue1.Validate(allOfValidationContext2);
            PagedListResource pagedListResourceValue2 = thisAsAny.As<PagedListResource>();
            allOfValidationContext3 = pagedListResourceValue2.Validate(allOfValidationContext3);
            RelatedPeopleListResource.RelatedPeopleListResourceEntity relatedPeopleListResourceEntityValue3 = thisAsAny.As<RelatedPeopleListResource.RelatedPeopleListResourceEntity>();
            allOfValidationContext4 = relatedPeopleListResourceEntityValue3.Validate(allOfValidationContext4);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2, allOfValidationContext3, allOfValidationContext4);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<RelatedPeopleListResource.LinksEntity>, Menes.IJsonAdditionalProperties<RelatedPeopleListResource.PropertiesEntity>
        {
            public static readonly RelatedPeopleListResource.LinksEntity Null = new RelatedPeopleListResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.LinksEntity> FromJsonElement = e => new RelatedPeopleListResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string ItemsPropertyNamePath = ".items";
            private const string NextPropertyNamePath = ".next";
            private const string PrevPropertyNamePath = ".prev";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
            private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonReference? next;
            private readonly Menes.JsonReference? prev;
            private readonly Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.items = null;
                this.next = null;
                this.prev = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                this.next = null;
                this.prev = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, params (string, RelatedPeopleListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next = null, Link? prev = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty2, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty2, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty3, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (items is Menes.JsonReference item2)
                {
                    this.items = item2;
                }
                else
                {
                    this.items = null;
                }
                if (next is Menes.JsonReference item3)
                {
                    this.next = item3;
                }
                else
                {
                    this.next = null;
                }
                if (prev is Menes.JsonReference item4)
                {
                    this.prev = item4;
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
            public RelatedPeopleListResource.LinksEntity? AsOptional => this.IsNull ? default(RelatedPeopleListResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
            public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
            public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static RelatedPeopleListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static RelatedPeopleListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static RelatedPeopleListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.LinksEntity(property)
                        : Null)
                : Null;
            public RelatedPeopleListResource.LinksEntity WithSelf(Link value)
            {
                return new RelatedPeopleListResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetItems(), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public RelatedPeopleListResource.LinksEntity WithItems(LinkCollection value)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public RelatedPeopleListResource.LinksEntity WithNext(Link? value)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
            }
            public RelatedPeopleListResource.LinksEntity WithPrev(Link? value)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public RelatedPeopleListResource.LinksEntity ReplaceAll(Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> newAdditional)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
            }
            public RelatedPeopleListResource.LinksEntity ReplaceAll(params (string, RelatedPeopleListResource.PropertiesEntity)[] newAdditional)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public RelatedPeopleListResource.LinksEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public RelatedPeopleListResource.LinksEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional2)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public RelatedPeopleListResource.LinksEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional2, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional3)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public RelatedPeopleListResource.LinksEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional2, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional3, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional4)
            {
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public RelatedPeopleListResource.LinksEntity Add(params (string, RelatedPeopleListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, RelatedPeopleListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(name, value));
                }
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional2, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional2, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional3, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    if (this.next is Menes.JsonReference next)
                    {
                        writer.WritePropertyName(EncodedNextPropertyName);
                        next.WriteTo(writer);
                    }
                    if (this.prev is Menes.JsonReference prev)
                    {
                        writer.WritePropertyName(EncodedPrevPropertyName);
                        prev.WriteTo(writer);
                    }
                    Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(RelatedPeopleListResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                if (this.Next is Link next)
                {
                    context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                }
                if (this.Prev is Link prev)
                {
                    context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNext()
            {
                if (this.next is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetPrev()
            {
                if (this.prev is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new RelatedPeopleListResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<RelatedPeopleListResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<RelatedPeopleListResource.PropertiesEntity>
        {
            public static readonly RelatedPeopleListResource.EmbeddedEntity Null = new RelatedPeopleListResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.EmbeddedEntity> FromJsonElement = e => new RelatedPeopleListResource.EmbeddedEntity(e);
            private const string ItemsPropertyNamePath = ".items";
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes);
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.items = null;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(RelatedPeopleListResource.ItemsArray? items, Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (items is RelatedPeopleListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public EmbeddedEntity(RelatedPeopleListResource.ItemsArray? items, params (string, RelatedPeopleListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (items is RelatedPeopleListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity(RelatedPeopleListResource.ItemsArray? items = null)
            {
                if (items is RelatedPeopleListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(RelatedPeopleListResource.ItemsArray? items, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1)
            {
                if (items is RelatedPeopleListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity(RelatedPeopleListResource.ItemsArray? items, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty2)
            {
                if (items is RelatedPeopleListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity(RelatedPeopleListResource.ItemsArray? items, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty2, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty3)
            {
                if (items is RelatedPeopleListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity(RelatedPeopleListResource.ItemsArray? items, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty2, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty3, (string, RelatedPeopleListResource.PropertiesEntity) additionalProperty4)
            {
                if (items is RelatedPeopleListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonReference? items, Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (items is Menes.JsonReference item1)
                {
                    this.items = item1;
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull);
            public RelatedPeopleListResource.EmbeddedEntity? AsOptional => this.IsNull ? default(RelatedPeopleListResource.EmbeddedEntity?) : this;
            public RelatedPeopleListResource.ItemsArray? Items => this.items?.AsValue<RelatedPeopleListResource.ItemsArray>() ?? RelatedPeopleListResource.ItemsArray.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static RelatedPeopleListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static RelatedPeopleListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static RelatedPeopleListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public RelatedPeopleListResource.EmbeddedEntity WithItems(RelatedPeopleListResource.ItemsArray? value)
            {
                return new RelatedPeopleListResource.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public RelatedPeopleListResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> newAdditional)
            {
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), newAdditional);
            }
            public RelatedPeopleListResource.EmbeddedEntity ReplaceAll(params (string, RelatedPeopleListResource.PropertiesEntity)[] newAdditional)
            {
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public RelatedPeopleListResource.EmbeddedEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1)
            {
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public RelatedPeopleListResource.EmbeddedEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional2)
            {
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public RelatedPeopleListResource.EmbeddedEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional2, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional3)
            {
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public RelatedPeopleListResource.EmbeddedEntity ReplaceAll((string, RelatedPeopleListResource.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional2, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional3, (string, RelatedPeopleListResource.PropertiesEntity) newAdditional4)
            {
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public RelatedPeopleListResource.EmbeddedEntity Add(params (string, RelatedPeopleListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, RelatedPeopleListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(name, value));
                }
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional2, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Add((string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional2, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional3, (string name, RelatedPeopleListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(RelatedPeopleListResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Items.Equals(other.Items) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                if (this.Items is RelatedPeopleListResource.ItemsArray items)
                {
                    context = Menes.Validation.ValidateProperty(context, items, ItemsPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference? GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<RelatedPeopleListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new RelatedPeopleListResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct RelatedPeopleListResourceEntity : Menes.IJsonObject, System.IEquatable<RelatedPeopleListResource.RelatedPeopleListResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly RelatedPeopleListResource.RelatedPeopleListResourceEntity Null = new RelatedPeopleListResource.RelatedPeopleListResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.RelatedPeopleListResourceEntity> FromJsonElement = e => new RelatedPeopleListResource.RelatedPeopleListResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private const string EmbeddedPropertyNamePath = "._embedded";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonReference? embedded;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public RelatedPeopleListResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.embedded = null;
                this.additionalPropertiesBacking = null;
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.embedded = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links, RelatedPeopleListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links, RelatedPeopleListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links, RelatedPeopleListResource.EmbeddedEntity? embedded = null)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public RelatedPeopleListResourceEntity(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity links, RelatedPeopleListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPeopleListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private RelatedPeopleListResourceEntity(Menes.JsonReference links, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                if (embedded is Menes.JsonReference item2)
                {
                    this.embedded = item2;
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity? AsOptional => this.IsNull ? default(RelatedPeopleListResource.RelatedPeopleListResourceEntity?) : this;
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Links => this.links?.AsValue<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity>() ?? RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
            public RelatedPeopleListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<RelatedPeopleListResource.EmbeddedEntity>() ?? RelatedPeopleListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static RelatedPeopleListResource.RelatedPeopleListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.RelatedPeopleListResourceEntity(property)
                        : Null)
                    : Null;
            public static RelatedPeopleListResource.RelatedPeopleListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.RelatedPeopleListResourceEntity(property)
                        : Null)
                    : Null;
            public static RelatedPeopleListResource.RelatedPeopleListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPeopleListResource.RelatedPeopleListResourceEntity(property)
                        : Null)
                : Null;
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity WithLinks(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity value)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(Menes.JsonReference.FromValue(value), this.GetEmbedded(), this.GetJsonProperties());
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity WithEmbedded(RelatedPeopleListResource.EmbeddedEntity? value)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), newAdditional);
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPeopleListResource.RelatedPeopleListResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPeopleListResource.RelatedPeopleListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    if (this.embedded is Menes.JsonReference embedded)
                    {
                        writer.WritePropertyName(EncodedEmbeddedPropertyName);
                        embedded.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(RelatedPeopleListResource.RelatedPeopleListResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
                if (this.Embedded is RelatedPeopleListResource.EmbeddedEntity embedded)
                {
                    context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmbedded()
            {
                if (this.embedded is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Null = new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity> FromJsonElement = e => new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(e);
                private const string ItemsPropertyNamePath = ".items";
                private const string NextPropertyNamePath = ".next";
                private const string PrevPropertyNamePath = ".prev";
                private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
                private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
                private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
                private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
                private readonly Menes.JsonReference? items;
                private readonly Menes.JsonReference? next;
                private readonly Menes.JsonReference? prev;
                private readonly Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.items = null;
                    this.next = null;
                    this.prev = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    this.next = null;
                    this.prev = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, params (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(LinkCollection items, Link? next = null, Link? prev = null)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (items is Menes.JsonReference item1)
                    {
                        this.items = item1;
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Menes.JsonReference item2)
                    {
                        this.next = item2;
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Menes.JsonReference item3)
                    {
                        this.prev = item3;
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity?) : this;
                public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
                public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
                public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity WithItems(LinkCollection value)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity WithNext(Link? value)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity WithPrev(Link? value)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity ReplaceAll(params (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity ReplaceAll((string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity ReplaceAll((string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity ReplaceAll((string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity ReplaceAll((string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Add(params (string, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Add((string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Add((string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Add((string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Add((string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.items is Menes.JsonReference items)
                        {
                            writer.WritePropertyName(EncodedItemsPropertyName);
                            items.WriteTo(writer);
                        }
                        if (this.next is Menes.JsonReference next)
                        {
                            writer.WritePropertyName(EncodedNextPropertyName);
                            next.WriteTo(writer);
                        }
                        if (this.prev is Menes.JsonReference prev)
                        {
                            writer.WritePropertyName(EncodedPrevPropertyName);
                            prev.WriteTo(writer);
                        }
                        Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                    if (this.Next is Link next)
                    {
                        context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                    }
                    if (this.Prev is Link prev)
                    {
                        context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetItems()
                {
                    if (this.items is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNext()
                {
                    if (this.next is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetPrev()
                {
                    if (this.prev is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new RelatedPeopleListResource.RelatedPeopleListResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPeopleListResource.PropertiesEntity> FromJsonElement = e => new RelatedPeopleListResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            private readonly Menes.JsonReference? item3;
            private readonly Menes.JsonReference? item4;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(Resource clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item3 = null;
                }
                else
                {
                    this.item3 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item4 = null;
            }
            public PropertiesEntity(ResourceCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item4 = null;
                }
                else
                {
                    this.item4 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && this.item3 is null && this.item4 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResource => this.item3 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResourceCollection => this.item4 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
            public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
            public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
            public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (Resource.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (ResourceCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public Resource AsResource() => this.item3?.AsValue<Resource>() ?? new Resource(this.JsonElement);
            public ResourceCollection AsResourceCollection() => this.item4?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else if (this.item3 is Menes.JsonReference item3)
                {
                    item3.WriteTo(writer);
                }
                else if (this.item4 is Menes.JsonReference item4)
                {
                    item4.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResource)
                {
                    builder.Append("{");
                    builder.Append("Resource");
                    builder.Append(", ");
                    builder.Append(this.AsResource().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResourceCollection)
                {
                    builder.Append("{");
                    builder.Append("ResourceCollection");
                    builder.Append(", ");
                    builder.Append(this.AsResourceCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext3 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext4 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                if (this.IsResource)
                {
                    validationContext3 = this.AsResource().Validate(validationContext3);
                }
                else
                {
                    validationContext3 = validationContext3.WithError("The value is not convertible to a Resource.");
                }
                if (this.IsResourceCollection)
                {
                    validationContext4 = this.AsResourceCollection().Validate(validationContext4);
                }
                else
                {
                    validationContext4 = validationContext4.WithError("The value is not convertible to a ResourceCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2, validationContext3, validationContext4);
            }
        }
        public readonly struct ItemsArray : Menes.IJsonValue, System.Collections.Generic.IEnumerable<RelatedPersonResource>, System.Collections.IEnumerable, System.IEquatable<ItemsArray>, System.IEquatable<Menes.JsonArray<RelatedPersonResource>>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, ItemsArray> FromJsonElement = e => new ItemsArray(e);
            public static readonly ItemsArray Null = new ItemsArray(default(System.Text.Json.JsonElement));
            private readonly Menes.JsonArray<RelatedPersonResource>? value;
            public ItemsArray(Menes.JsonArray<RelatedPersonResource> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = jsonArray;
                    this.JsonElement = default;
                }
            }
            public ItemsArray(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public int Length
            {
                get
                {
                    if (this.HasJsonElement)
                    {
                        return this.JsonElement.GetArrayLength();
                    }
                    if (this.value is Menes.JsonArray<RelatedPersonResource> value)
                    {
                        return value.Length;
                    }
                    return 0;
                }
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public ItemsArray? AsOptional => this.IsNull ? default(ItemsArray?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator ItemsArray(Menes.JsonArray<RelatedPersonResource> value)
            {
                return new ItemsArray(value);
            }
            public static implicit operator Menes.JsonArray<RelatedPersonResource>(ItemsArray value)
            {
                if (value.value is Menes.JsonArray<RelatedPersonResource> clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonArray<RelatedPersonResource>(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonArray<RelatedPersonResource>.IsConvertibleFrom(jsonElement);
            }
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public bool Equals(ItemsArray other)
            {
                return this.Equals((Menes.JsonArray<RelatedPersonResource>)other);
            }
            public bool Equals(Menes.JsonArray<RelatedPersonResource> other)
            {
                return ((Menes.JsonArray<RelatedPersonResource>)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonArray<RelatedPersonResource> array = this;
                Menes.ValidationContext context = validationContext;
                context = array.Validate(context);
                return array.ValidateItems(context);
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                if (this.value is Menes.JsonArray<RelatedPersonResource> clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public Menes.JsonArray<RelatedPersonResource>.JsonArrayEnumerator GetEnumerator()
            {
                return ((Menes.JsonArray<RelatedPersonResource>)this).GetEnumerator();
            }
            System.Collections.Generic.IEnumerator<RelatedPersonResource> System.Collections.Generic.IEnumerable<RelatedPersonResource>.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            public ItemsArray Add(params RelatedPersonResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                foreach (RelatedPersonResource item in items)
                {
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in RelatedPersonResource item1)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in RelatedPersonResource item1, in RelatedPersonResource item2)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in RelatedPersonResource item1, in RelatedPersonResource item2, in RelatedPersonResource item3)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in RelatedPersonResource item1, in RelatedPersonResource item2, in RelatedPersonResource item3, in RelatedPersonResource item4)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                arrayBuilder.Add(item4);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, params RelatedPersonResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                int index = 0;
                foreach (RelatedPersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        foreach (RelatedPersonResource itemToInsert in items)
                        {
                            arrayBuilder.Add(itemToInsert);
                        }
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in RelatedPersonResource item1)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                int index = 0;
                foreach (RelatedPersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in RelatedPersonResource item1, in RelatedPersonResource item2)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                int index = 0;
                foreach (RelatedPersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in RelatedPersonResource item1, in RelatedPersonResource item2, in RelatedPersonResource item3)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                int index = 0;
                foreach (RelatedPersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in RelatedPersonResource item1, in RelatedPersonResource item2, in RelatedPersonResource item3, in RelatedPersonResource item4)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                int index = 0;
                foreach (RelatedPersonResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                        arrayBuilder.Add(item4);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(params RelatedPersonResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    bool found = false;
                    foreach (RelatedPersonResource itemToRemove in items)
                    {
                        if (itemToRemove.Equals(item))
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        arrayBuilder.Add(item);
                    }
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(RelatedPersonResource item1)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    if (item1.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(RelatedPersonResource item1, RelatedPersonResource item2)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(RelatedPersonResource item1, RelatedPersonResource item2, RelatedPersonResource item3)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(RelatedPersonResource item1, RelatedPersonResource item2, RelatedPersonResource item3, RelatedPersonResource item4)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveAt(int indexToRemove)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                int index = 0;
                foreach (RelatedPersonResource item in this)
                {
                    if (index == indexToRemove)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveRange(int startIndex, int length)
            {
                if (startIndex < 0 || startIndex > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(startIndex));
                }
                if (length < 1 || startIndex + length > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(length));
                }
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                int index = 0;
                foreach (RelatedPersonResource item in this)
                {
                    if (index >= startIndex && index < startIndex + length)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(System.Predicate<RelatedPersonResource> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<RelatedPersonResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<RelatedPersonResource>();
                foreach (RelatedPersonResource item in this)
                {
                    if (removeIfTrue(item))
                    {
                        continue;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
        }
    }
    public readonly struct RelatedPersonResource : Menes.IJsonObject, System.IEquatable<RelatedPersonResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly RelatedPersonResource Null = new RelatedPersonResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource> FromJsonElement = e => new RelatedPersonResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private const string RelPropertyNamePath = ".rel";
        private const string PropertiesPropertyNamePath = ".properties";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.ReadOnlyMemory<byte> RelPropertyNameBytes = new byte[] { 114, 101, 108 };
        private static readonly System.ReadOnlyMemory<byte> PropertiesPropertyNameBytes = new byte[] { 112, 114, 111, 112, 101, 114, 116, 105, 101, 115 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedRelPropertyName = System.Text.Json.JsonEncodedText.Encode(RelPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedPropertiesPropertyName = System.Text.Json.JsonEncodedText.Encode(PropertiesPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes, RelPropertyNameBytes, PropertiesPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonString? rel;
        private readonly Menes.JsonReference? properties;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public RelatedPersonResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.rel = null;
            this.properties = null;
            this.additionalPropertiesBacking = null;
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.rel = null;
            this.properties = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links, Menes.JsonString? contentType, RelatedPersonResource.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is RelatedPersonResource.PropertiesEntity item3)
            {
                this.properties = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links, Menes.JsonString? contentType, RelatedPersonResource.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is RelatedPersonResource.PropertiesEntity item3)
            {
                this.properties = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links, Menes.JsonString? contentType = null, RelatedPersonResource.EmbeddedEntity? embedded = null, Menes.JsonString? rel = null, RelatedPersonResource.PropertiesEntity? properties = null)
        {
            this.contentType = contentType;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is RelatedPersonResource.PropertiesEntity item3)
            {
                this.properties = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links, Menes.JsonString? contentType, RelatedPersonResource.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is RelatedPersonResource.PropertiesEntity item3)
            {
                this.properties = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links, Menes.JsonString? contentType, RelatedPersonResource.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is RelatedPersonResource.PropertiesEntity item3)
            {
                this.properties = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links, Menes.JsonString? contentType, RelatedPersonResource.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is RelatedPersonResource.PropertiesEntity item3)
            {
                this.properties = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public RelatedPersonResource(RelatedPersonResource.LinksEntity links, Menes.JsonString? contentType, RelatedPersonResource.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is RelatedPersonResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is RelatedPersonResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is RelatedPersonResource.PropertiesEntity item3)
            {
                this.properties = Menes.JsonReference.FromValue(item3);
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private RelatedPersonResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonString? rel, Menes.JsonReference? properties, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.rel = rel;
            if (properties is Menes.JsonReference item3)
            {
                this.properties = item3;
            }
            else
            {
                this.properties = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull) && (this.rel is null || this.rel.Value.IsNull) && (this.properties is null || this.properties.Value.IsNull);
        public RelatedPersonResource? AsOptional => this.IsNull ? default(RelatedPersonResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public RelatedPersonResource.LinksEntity Links => this.links?.AsValue<RelatedPersonResource.LinksEntity>() ?? RelatedPersonResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public RelatedPersonResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<RelatedPersonResource.EmbeddedEntity>() ?? RelatedPersonResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public Menes.JsonString? Rel => this.rel ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, RelPropertyNameBytes.Span).AsOptional;
        public RelatedPersonResource.PropertiesEntity? Properties => this.properties?.AsValue<RelatedPersonResource.PropertiesEntity>() ?? RelatedPersonResource.PropertiesEntity.FromOptionalProperty(this.JsonElement, PropertiesPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static RelatedPersonResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new RelatedPersonResource(property)
                    : Null)
                : Null;
        public static RelatedPersonResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new RelatedPersonResource(property)
                    : Null)
                : Null;
        public static RelatedPersonResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new RelatedPersonResource(property)
                    : Null)
            : Null;
        public RelatedPersonResource WithContentType(Menes.JsonString? value)
        {
            return new RelatedPersonResource(this.GetLinks(), value, this.GetEmbedded(), this.Rel, this.GetProperties(), this.GetJsonProperties());
        }
        public RelatedPersonResource WithLinks(RelatedPersonResource.LinksEntity value)
        {
            return new RelatedPersonResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), this.GetJsonProperties());
        }
        public RelatedPersonResource WithEmbedded(RelatedPersonResource.EmbeddedEntity? value)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.Rel, this.GetProperties(), this.GetJsonProperties());
        }
        public RelatedPersonResource WithRel(Menes.JsonString? value)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), value, this.GetProperties(), this.GetJsonProperties());
        }
        public RelatedPersonResource WithProperties(RelatedPersonResource.PropertiesEntity? value)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public RelatedPersonResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), newAdditional);
        }
        public RelatedPersonResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public RelatedPersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public RelatedPersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public RelatedPersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public RelatedPersonResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public RelatedPersonResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public RelatedPersonResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new RelatedPersonResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                if (this.rel is Menes.JsonString rel)
                {
                    writer.WritePropertyName(EncodedRelPropertyName);
                    rel.WriteTo(writer);
                }
                if (this.properties is Menes.JsonReference properties)
                {
                    writer.WritePropertyName(EncodedPropertiesPropertyName);
                    properties.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(RelatedPersonResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && this.Rel.Equals(other.Rel) && this.Properties.Equals(other.Properties) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is RelatedPersonResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            if (this.Rel is Menes.JsonString rel)
            {
                context = Menes.Validation.ValidateProperty(context, rel, RelPropertyNamePath);
            }
            if (this.Properties is RelatedPersonResource.PropertiesEntity properties)
            {
                context = Menes.Validation.ValidateProperty(context, properties, PropertiesPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext3 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext4 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            RelatedPersonResource.RelatedPersonResourceEntity relatedPersonResourceEntityValue1 = thisAsAny.As<RelatedPersonResource.RelatedPersonResourceEntity>();
            allOfValidationContext2 = relatedPersonResourceEntityValue1.Validate(allOfValidationContext2);
            PersonResource personResourceValue2 = thisAsAny.As<PersonResource>();
            allOfValidationContext3 = personResourceValue2.Validate(allOfValidationContext3);
            RelatedPersonResource.RelatedPersonResourceEntity relatedPersonResourceEntityValue3 = thisAsAny.As<RelatedPersonResource.RelatedPersonResourceEntity>();
            allOfValidationContext4 = relatedPersonResourceEntityValue3.Validate(allOfValidationContext4);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2, allOfValidationContext3, allOfValidationContext4);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetProperties()
        {
            if (this.properties is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(PropertiesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<RelatedPersonResource.LinksEntity>, Menes.IJsonAdditionalProperties<RelatedPersonResource.PropertiesEntity>
        {
            public static readonly RelatedPersonResource.LinksEntity Null = new RelatedPersonResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.LinksEntity> FromJsonElement = e => new RelatedPersonResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string PrimaryNamePropertyNamePath = ".primaryName";
            private const string NamesPropertyNamePath = ".names";
            private const string AddressesPropertyNamePath = ".addresses";
            private const string TelephoneNumbersPropertyNamePath = ".telephoneNumbers";
            private const string EmailAddressesPropertyNamePath = ".emailAddresses";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
            private static readonly System.ReadOnlyMemory<byte> NamesPropertyNameBytes = new byte[] { 110, 97, 109, 101, 115 };
            private static readonly System.ReadOnlyMemory<byte> AddressesPropertyNameBytes = new byte[] { 97, 100, 100, 114, 101, 115, 115, 101, 115 };
            private static readonly System.ReadOnlyMemory<byte> TelephoneNumbersPropertyNameBytes = new byte[] { 116, 101, 108, 101, 112, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmailAddressesPropertyNameBytes = new byte[] { 101, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 101, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNamesPropertyName = System.Text.Json.JsonEncodedText.Encode(NamesPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(AddressesPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedTelephoneNumbersPropertyName = System.Text.Json.JsonEncodedText.Encode(TelephoneNumbersPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmailAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(EmailAddressesPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, PrimaryNamePropertyNameBytes, NamesPropertyNameBytes, AddressesPropertyNameBytes, TelephoneNumbersPropertyNameBytes, EmailAddressesPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? primaryName;
            private readonly Menes.JsonReference? names;
            private readonly Menes.JsonReference? addresses;
            private readonly Menes.JsonReference? telephoneNumbers;
            private readonly Menes.JsonReference? emailAddresses;
            private readonly Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.primaryName = null;
                this.names = null;
                this.addresses = null;
                this.telephoneNumbers = null;
                this.emailAddresses = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, Link primaryName)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                this.names = null;
                this.addresses = null;
                this.telephoneNumbers = null;
                this.emailAddresses = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, params (string, RelatedPersonResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names = null, LinkCollection? addresses = null, LinkCollection? telephoneNumbers = null, LinkCollection? emailAddresses = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.PropertiesEntity) additionalProperty3, (string, RelatedPersonResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Link item2)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is LinkCollection item3)
                {
                    this.names = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.names = null;
                }
                if (addresses is LinkCollection item4)
                {
                    this.addresses = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is LinkCollection item5)
                {
                    this.telephoneNumbers = Menes.JsonReference.FromValue(item5);
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is LinkCollection item6)
                {
                    this.emailAddresses = Menes.JsonReference.FromValue(item6);
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference primaryName, Menes.JsonReference? names, Menes.JsonReference? addresses, Menes.JsonReference? telephoneNumbers, Menes.JsonReference? emailAddresses, Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (primaryName is Menes.JsonReference item2)
                {
                    this.primaryName = item2;
                }
                else
                {
                    this.primaryName = null;
                }
                if (names is Menes.JsonReference item3)
                {
                    this.names = item3;
                }
                else
                {
                    this.names = null;
                }
                if (addresses is Menes.JsonReference item4)
                {
                    this.addresses = item4;
                }
                else
                {
                    this.addresses = null;
                }
                if (telephoneNumbers is Menes.JsonReference item5)
                {
                    this.telephoneNumbers = item5;
                }
                else
                {
                    this.telephoneNumbers = null;
                }
                if (emailAddresses is Menes.JsonReference item6)
                {
                    this.emailAddresses = item6;
                }
                else
                {
                    this.emailAddresses = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.primaryName is null || this.primaryName.Value.IsNull) && (this.names is null || this.names.Value.IsNull) && (this.addresses is null || this.addresses.Value.IsNull) && (this.telephoneNumbers is null || this.telephoneNumbers.Value.IsNull) && (this.emailAddresses is null || this.emailAddresses.Value.IsNull);
            public RelatedPersonResource.LinksEntity? AsOptional => this.IsNull ? default(RelatedPersonResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public Link PrimaryName => this.primaryName?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
            public LinkCollection? Names => this.names?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, NamesPropertyNameBytes.Span).AsOptional;
            public LinkCollection? Addresses => this.addresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, AddressesPropertyNameBytes.Span).AsOptional;
            public LinkCollection? TelephoneNumbers => this.telephoneNumbers?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, TelephoneNumbersPropertyNameBytes.Span).AsOptional;
            public LinkCollection? EmailAddresses => this.emailAddresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, EmailAddressesPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static RelatedPersonResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static RelatedPersonResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static RelatedPersonResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.LinksEntity(property)
                        : Null)
                : Null;
            public RelatedPersonResource.LinksEntity WithSelf(Link value)
            {
                return new RelatedPersonResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public RelatedPersonResource.LinksEntity WithPrimaryName(Link value)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public RelatedPersonResource.LinksEntity WithNames(LinkCollection? value)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), Menes.JsonReference.FromValue(value), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public RelatedPersonResource.LinksEntity WithAddresses(LinkCollection? value)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), Menes.JsonReference.FromValue(value), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public RelatedPersonResource.LinksEntity WithTelephoneNumbers(LinkCollection? value)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), Menes.JsonReference.FromValue(value), this.GetEmailAddresses(), this.GetJsonProperties());
            }
            public RelatedPersonResource.LinksEntity WithEmailAddresses(LinkCollection? value)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public RelatedPersonResource.LinksEntity ReplaceAll(Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> newAdditional)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), newAdditional);
            }
            public RelatedPersonResource.LinksEntity ReplaceAll(params (string, RelatedPersonResource.PropertiesEntity)[] newAdditional)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public RelatedPersonResource.LinksEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public RelatedPersonResource.LinksEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.PropertiesEntity) newAdditional2)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public RelatedPersonResource.LinksEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.PropertiesEntity) newAdditional3)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public RelatedPersonResource.LinksEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.PropertiesEntity) newAdditional3, (string, RelatedPersonResource.PropertiesEntity) newAdditional4)
            {
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public RelatedPersonResource.LinksEntity Add(params (string, RelatedPersonResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, RelatedPersonResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(name, value));
                }
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional3, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.LinksEntity(this.GetSelf(), this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.primaryName is Menes.JsonReference primaryName)
                    {
                        writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                        primaryName.WriteTo(writer);
                    }
                    if (this.names is Menes.JsonReference names)
                    {
                        writer.WritePropertyName(EncodedNamesPropertyName);
                        names.WriteTo(writer);
                    }
                    if (this.addresses is Menes.JsonReference addresses)
                    {
                        writer.WritePropertyName(EncodedAddressesPropertyName);
                        addresses.WriteTo(writer);
                    }
                    if (this.telephoneNumbers is Menes.JsonReference telephoneNumbers)
                    {
                        writer.WritePropertyName(EncodedTelephoneNumbersPropertyName);
                        telephoneNumbers.WriteTo(writer);
                    }
                    if (this.emailAddresses is Menes.JsonReference emailAddresses)
                    {
                        writer.WritePropertyName(EncodedEmailAddressesPropertyName);
                        emailAddresses.WriteTo(writer);
                    }
                    Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(RelatedPersonResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.PrimaryName.Equals(other.PrimaryName) && this.Names.Equals(other.Names) && this.Addresses.Equals(other.Addresses) && this.TelephoneNumbers.Equals(other.TelephoneNumbers) && this.EmailAddresses.Equals(other.EmailAddresses) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                if (this.Names is LinkCollection names)
                {
                    context = Menes.Validation.ValidateProperty(context, names, NamesPropertyNamePath);
                }
                if (this.Addresses is LinkCollection addresses)
                {
                    context = Menes.Validation.ValidateProperty(context, addresses, AddressesPropertyNamePath);
                }
                if (this.TelephoneNumbers is LinkCollection telephoneNumbers)
                {
                    context = Menes.Validation.ValidateProperty(context, telephoneNumbers, TelephoneNumbersPropertyNamePath);
                }
                if (this.EmailAddresses is LinkCollection emailAddresses)
                {
                    context = Menes.Validation.ValidateProperty(context, emailAddresses, EmailAddressesPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetPrimaryName()
            {
                if (this.primaryName is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNames()
            {
                if (this.names is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NamesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetAddresses()
            {
                if (this.addresses is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(AddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetTelephoneNumbers()
            {
                if (this.telephoneNumbers is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(TelephoneNumbersPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmailAddresses()
            {
                if (this.emailAddresses is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmailAddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new RelatedPersonResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<RelatedPersonResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<RelatedPersonResource.PropertiesEntity>
        {
            public static readonly RelatedPersonResource.EmbeddedEntity Null = new RelatedPersonResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.EmbeddedEntity> FromJsonElement = e => new RelatedPersonResource.EmbeddedEntity(e);
            private const string PrimaryNamePropertyNamePath = ".primaryName";
            private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
            private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(PrimaryNamePropertyNameBytes);
            private readonly Menes.JsonReference? primaryName;
            private readonly Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.primaryName = null;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonNameResource primaryName)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonNameResource primaryName, params (string, RelatedPersonResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.PropertiesEntity) additionalProperty2)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.PropertiesEntity) additionalProperty3)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.PropertiesEntity) additionalProperty3, (string, RelatedPersonResource.PropertiesEntity) additionalProperty4)
            {
                if (primaryName is PersonNameResource item1)
                {
                    this.primaryName = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonReference primaryName, Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (primaryName is Menes.JsonReference item1)
                {
                    this.primaryName = item1;
                }
                else
                {
                    this.primaryName = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.primaryName is null || this.primaryName.Value.IsNull);
            public RelatedPersonResource.EmbeddedEntity? AsOptional => this.IsNull ? default(RelatedPersonResource.EmbeddedEntity?) : this;
            public PersonNameResource PrimaryName => this.primaryName?.AsValue<PersonNameResource>() ?? PersonNameResource.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static RelatedPersonResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static RelatedPersonResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static RelatedPersonResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public RelatedPersonResource.EmbeddedEntity WithPrimaryName(PersonNameResource value)
            {
                return new RelatedPersonResource.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public RelatedPersonResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> newAdditional)
            {
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), newAdditional);
            }
            public RelatedPersonResource.EmbeddedEntity ReplaceAll(params (string, RelatedPersonResource.PropertiesEntity)[] newAdditional)
            {
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public RelatedPersonResource.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1)
            {
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public RelatedPersonResource.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.PropertiesEntity) newAdditional2)
            {
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public RelatedPersonResource.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.PropertiesEntity) newAdditional3)
            {
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public RelatedPersonResource.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.PropertiesEntity) newAdditional3, (string, RelatedPersonResource.PropertiesEntity) newAdditional4)
            {
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public RelatedPersonResource.EmbeddedEntity Add(params (string, RelatedPersonResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, RelatedPersonResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(name, value));
                }
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Add((string name, RelatedPersonResource.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional3, (string name, RelatedPersonResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.primaryName is Menes.JsonReference primaryName)
                    {
                        writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                        primaryName.WriteTo(writer);
                    }
                    Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(RelatedPersonResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.PrimaryName.Equals(other.PrimaryName) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<RelatedPersonResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetPrimaryName()
            {
                if (this.primaryName is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<RelatedPersonResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new RelatedPersonResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct RelatedPersonResourceEntity : Menes.IJsonObject, System.IEquatable<RelatedPersonResource.RelatedPersonResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly RelatedPersonResource.RelatedPersonResourceEntity Null = new RelatedPersonResource.RelatedPersonResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.RelatedPersonResourceEntity> FromJsonElement = e => new RelatedPersonResource.RelatedPersonResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private const string EmbeddedPropertyNamePath = "._embedded";
            private const string RelPropertyNamePath = ".rel";
            private const string PropertiesPropertyNamePath = ".properties";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
            private static readonly System.ReadOnlyMemory<byte> RelPropertyNameBytes = new byte[] { 114, 101, 108 };
            private static readonly System.ReadOnlyMemory<byte> PropertiesPropertyNameBytes = new byte[] { 112, 114, 111, 112, 101, 114, 116, 105, 101, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedRelPropertyName = System.Text.Json.JsonEncodedText.Encode(RelPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPropertiesPropertyName = System.Text.Json.JsonEncodedText.Encode(PropertiesPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes, EmbeddedPropertyNameBytes, RelPropertyNameBytes, PropertiesPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonReference? embedded;
            private readonly Menes.JsonString? rel;
            private readonly Menes.JsonReference? properties;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public RelatedPersonResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.embedded = null;
                this.rel = null;
                this.properties = null;
                this.additionalPropertiesBacking = null;
            }
            public RelatedPersonResourceEntity(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? links, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
            {
                if (links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is RelatedPersonResource.PropertiesEntity item3)
                {
                    this.properties = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public RelatedPersonResourceEntity(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? links, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is RelatedPersonResource.PropertiesEntity item3)
                {
                    this.properties = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public RelatedPersonResourceEntity(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? links = null, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? embedded = null, Menes.JsonString? rel = null, RelatedPersonResource.PropertiesEntity? properties = null)
            {
                if (links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is RelatedPersonResource.PropertiesEntity item3)
                {
                    this.properties = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public RelatedPersonResourceEntity(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? links, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is RelatedPersonResource.PropertiesEntity item3)
                {
                    this.properties = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public RelatedPersonResourceEntity(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? links, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is RelatedPersonResource.PropertiesEntity item3)
                {
                    this.properties = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public RelatedPersonResourceEntity(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? links, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is RelatedPersonResource.PropertiesEntity item3)
                {
                    this.properties = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public RelatedPersonResourceEntity(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? links, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? embedded, Menes.JsonString? rel, RelatedPersonResource.PropertiesEntity? properties, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is RelatedPersonResource.PropertiesEntity item3)
                {
                    this.properties = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private RelatedPersonResourceEntity(Menes.JsonReference? links, Menes.JsonReference? embedded, Menes.JsonString? rel, Menes.JsonReference? properties, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                if (embedded is Menes.JsonReference item2)
                {
                    this.embedded = item2;
                }
                else
                {
                    this.embedded = null;
                }
                this.rel = rel;
                if (properties is Menes.JsonReference item3)
                {
                    this.properties = item3;
                }
                else
                {
                    this.properties = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull) && (this.rel is null || this.rel.Value.IsNull) && (this.properties is null || this.properties.Value.IsNull);
            public RelatedPersonResource.RelatedPersonResourceEntity? AsOptional => this.IsNull ? default(RelatedPersonResource.RelatedPersonResourceEntity?) : this;
            public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? Links => this.links?.AsValue<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity>() ?? RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span).AsOptional;
            public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? Embedded => this.embedded?.AsValue<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity>() ?? RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
            public Menes.JsonString? Rel => this.rel ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, RelPropertyNameBytes.Span).AsOptional;
            public RelatedPersonResource.PropertiesEntity? Properties => this.properties?.AsValue<RelatedPersonResource.PropertiesEntity>() ?? RelatedPersonResource.PropertiesEntity.FromOptionalProperty(this.JsonElement, PropertiesPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static RelatedPersonResource.RelatedPersonResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.RelatedPersonResourceEntity(property)
                        : Null)
                    : Null;
            public static RelatedPersonResource.RelatedPersonResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.RelatedPersonResourceEntity(property)
                        : Null)
                    : Null;
            public static RelatedPersonResource.RelatedPersonResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new RelatedPersonResource.RelatedPersonResourceEntity(property)
                        : Null)
                : Null;
            public RelatedPersonResource.RelatedPersonResourceEntity WithLinks(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? value)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(Menes.JsonReference.FromValue(value), this.GetEmbedded(), this.Rel, this.GetProperties(), this.GetJsonProperties());
            }
            public RelatedPersonResource.RelatedPersonResourceEntity WithEmbedded(RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? value)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), Menes.JsonReference.FromValue(value), this.Rel, this.GetProperties(), this.GetJsonProperties());
            }
            public RelatedPersonResource.RelatedPersonResourceEntity WithRel(Menes.JsonString? value)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), value, this.GetProperties(), this.GetJsonProperties());
            }
            public RelatedPersonResource.RelatedPersonResourceEntity WithProperties(RelatedPersonResource.PropertiesEntity? value)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public RelatedPersonResource.RelatedPersonResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), newAdditional);
            }
            public RelatedPersonResource.RelatedPersonResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public RelatedPersonResource.RelatedPersonResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new RelatedPersonResource.RelatedPersonResourceEntity(this.GetLinks(), this.GetEmbedded(), this.Rel, this.GetProperties(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    if (this.embedded is Menes.JsonReference embedded)
                    {
                        writer.WritePropertyName(EncodedEmbeddedPropertyName);
                        embedded.WriteTo(writer);
                    }
                    if (this.rel is Menes.JsonString rel)
                    {
                        writer.WritePropertyName(EncodedRelPropertyName);
                        rel.WriteTo(writer);
                    }
                    if (this.properties is Menes.JsonReference properties)
                    {
                        writer.WritePropertyName(EncodedPropertiesPropertyName);
                        properties.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(RelatedPersonResource.RelatedPersonResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && this.Rel.Equals(other.Rel) && this.Properties.Equals(other.Properties) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                if (this.Links is RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity links)
                {
                    context = Menes.Validation.ValidateProperty(context, links, LinksPropertyNamePath);
                }
                if (this.Embedded is RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity embedded)
                {
                    context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
                }
                if (this.Rel is Menes.JsonString rel)
                {
                    context = Menes.Validation.ValidateProperty(context, rel, RelPropertyNamePath);
                }
                if (this.Properties is RelatedPersonResource.PropertiesEntity properties)
                {
                    context = Menes.Validation.ValidateProperty(context, properties, PropertiesPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference? GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmbedded()
            {
                if (this.embedded is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetProperties()
            {
                if (this.properties is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PropertiesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Null = new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity> FromJsonElement = e => new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(e);
                private const string PrimaryNamePropertyNamePath = ".primaryName";
                private const string NamesPropertyNamePath = ".names";
                private const string AddressesPropertyNamePath = ".addresses";
                private const string TelephoneNumbersPropertyNamePath = ".telephoneNumbers";
                private const string EmailAddressesPropertyNamePath = ".emailAddresses";
                private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
                private static readonly System.ReadOnlyMemory<byte> NamesPropertyNameBytes = new byte[] { 110, 97, 109, 101, 115 };
                private static readonly System.ReadOnlyMemory<byte> AddressesPropertyNameBytes = new byte[] { 97, 100, 100, 114, 101, 115, 115, 101, 115 };
                private static readonly System.ReadOnlyMemory<byte> TelephoneNumbersPropertyNameBytes = new byte[] { 116, 101, 108, 101, 112, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 115 };
                private static readonly System.ReadOnlyMemory<byte> EmailAddressesPropertyNameBytes = new byte[] { 101, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 101, 115 };
                private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNamesPropertyName = System.Text.Json.JsonEncodedText.Encode(NamesPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(AddressesPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedTelephoneNumbersPropertyName = System.Text.Json.JsonEncodedText.Encode(TelephoneNumbersPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedEmailAddressesPropertyName = System.Text.Json.JsonEncodedText.Encode(EmailAddressesPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(PrimaryNamePropertyNameBytes, NamesPropertyNameBytes, AddressesPropertyNameBytes, TelephoneNumbersPropertyNameBytes, EmailAddressesPropertyNameBytes);
                private readonly Menes.JsonReference? primaryName;
                private readonly Menes.JsonReference? names;
                private readonly Menes.JsonReference? addresses;
                private readonly Menes.JsonReference? telephoneNumbers;
                private readonly Menes.JsonReference? emailAddresses;
                private readonly Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.primaryName = null;
                    this.names = null;
                    this.addresses = null;
                    this.telephoneNumbers = null;
                    this.emailAddresses = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(Link primaryName)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.names = null;
                    this.addresses = null;
                    this.telephoneNumbers = null;
                    this.emailAddresses = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, params (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(Link primaryName, LinkCollection? names = null, LinkCollection? addresses = null, LinkCollection? telephoneNumbers = null, LinkCollection? emailAddresses = null)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(Link primaryName, LinkCollection? names, LinkCollection? addresses, LinkCollection? telephoneNumbers, LinkCollection? emailAddresses, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (primaryName is Link item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is LinkCollection item2)
                    {
                        this.names = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is LinkCollection item3)
                    {
                        this.addresses = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is LinkCollection item4)
                    {
                        this.telephoneNumbers = Menes.JsonReference.FromValue(item4);
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is LinkCollection item5)
                    {
                        this.emailAddresses = Menes.JsonReference.FromValue(item5);
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference primaryName, Menes.JsonReference? names, Menes.JsonReference? addresses, Menes.JsonReference? telephoneNumbers, Menes.JsonReference? emailAddresses, Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (primaryName is Menes.JsonReference item1)
                    {
                        this.primaryName = item1;
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    if (names is Menes.JsonReference item2)
                    {
                        this.names = item2;
                    }
                    else
                    {
                        this.names = null;
                    }
                    if (addresses is Menes.JsonReference item3)
                    {
                        this.addresses = item3;
                    }
                    else
                    {
                        this.addresses = null;
                    }
                    if (telephoneNumbers is Menes.JsonReference item4)
                    {
                        this.telephoneNumbers = item4;
                    }
                    else
                    {
                        this.telephoneNumbers = null;
                    }
                    if (emailAddresses is Menes.JsonReference item5)
                    {
                        this.emailAddresses = item5;
                    }
                    else
                    {
                        this.emailAddresses = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.primaryName is null || this.primaryName.Value.IsNull) && (this.names is null || this.names.Value.IsNull) && (this.addresses is null || this.addresses.Value.IsNull) && (this.telephoneNumbers is null || this.telephoneNumbers.Value.IsNull) && (this.emailAddresses is null || this.emailAddresses.Value.IsNull);
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity?) : this;
                public Link PrimaryName => this.primaryName?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
                public LinkCollection? Names => this.names?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, NamesPropertyNameBytes.Span).AsOptional;
                public LinkCollection? Addresses => this.addresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, AddressesPropertyNameBytes.Span).AsOptional;
                public LinkCollection? TelephoneNumbers => this.telephoneNumbers?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, TelephoneNumbersPropertyNameBytes.Span).AsOptional;
                public LinkCollection? EmailAddresses => this.emailAddresses?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, EmailAddressesPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity WithPrimaryName(Link value)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity WithNames(LinkCollection? value)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), Menes.JsonReference.FromValue(value), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity WithAddresses(LinkCollection? value)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), Menes.JsonReference.FromValue(value), this.GetTelephoneNumbers(), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity WithTelephoneNumbers(LinkCollection? value)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), Menes.JsonReference.FromValue(value), this.GetEmailAddresses(), this.GetJsonProperties());
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity WithEmailAddresses(LinkCollection? value)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), newAdditional);
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity ReplaceAll(params (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Add(params (string, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity(this.GetPrimaryName(), this.GetNames(), this.GetAddresses(), this.GetTelephoneNumbers(), this.GetEmailAddresses(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.primaryName is Menes.JsonReference primaryName)
                        {
                            writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                            primaryName.WriteTo(writer);
                        }
                        if (this.names is Menes.JsonReference names)
                        {
                            writer.WritePropertyName(EncodedNamesPropertyName);
                            names.WriteTo(writer);
                        }
                        if (this.addresses is Menes.JsonReference addresses)
                        {
                            writer.WritePropertyName(EncodedAddressesPropertyName);
                            addresses.WriteTo(writer);
                        }
                        if (this.telephoneNumbers is Menes.JsonReference telephoneNumbers)
                        {
                            writer.WritePropertyName(EncodedTelephoneNumbersPropertyName);
                            telephoneNumbers.WriteTo(writer);
                        }
                        if (this.emailAddresses is Menes.JsonReference emailAddresses)
                        {
                            writer.WritePropertyName(EncodedEmailAddressesPropertyName);
                            emailAddresses.WriteTo(writer);
                        }
                        Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.PrimaryName.Equals(other.PrimaryName) && this.Names.Equals(other.Names) && this.Addresses.Equals(other.Addresses) && this.TelephoneNumbers.Equals(other.TelephoneNumbers) && this.EmailAddresses.Equals(other.EmailAddresses) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                    if (this.Names is LinkCollection names)
                    {
                        context = Menes.Validation.ValidateProperty(context, names, NamesPropertyNamePath);
                    }
                    if (this.Addresses is LinkCollection addresses)
                    {
                        context = Menes.Validation.ValidateProperty(context, addresses, AddressesPropertyNamePath);
                    }
                    if (this.TelephoneNumbers is LinkCollection telephoneNumbers)
                    {
                        context = Menes.Validation.ValidateProperty(context, telephoneNumbers, TelephoneNumbersPropertyNamePath);
                    }
                    if (this.EmailAddresses is LinkCollection emailAddresses)
                    {
                        context = Menes.Validation.ValidateProperty(context, emailAddresses, EmailAddressesPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetPrimaryName()
                {
                    if (this.primaryName is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNames()
                {
                    if (this.names is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NamesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetAddresses()
                {
                    if (this.addresses is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(AddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetTelephoneNumbers()
                {
                    if (this.telephoneNumbers is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(TelephoneNumbersPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetEmailAddresses()
                {
                    if (this.emailAddresses is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmailAddressesPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new RelatedPersonResource.RelatedPersonResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }

            public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity>, Menes.IJsonAdditionalProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>
            {
                public static readonly RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Null = new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity> FromJsonElement = e => new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(e);
                private const string PrimaryNamePropertyNamePath = ".primaryName";
                private static readonly System.ReadOnlyMemory<byte> PrimaryNamePropertyNameBytes = new byte[] { 112, 114, 105, 109, 97, 114, 121, 78, 97, 109, 101 };
                private static readonly System.Text.Json.JsonEncodedText EncodedPrimaryNamePropertyName = System.Text.Json.JsonEncodedText.Encode(PrimaryNamePropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(PrimaryNamePropertyNameBytes);
                private readonly Menes.JsonReference? primaryName;
                private readonly Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking;
                public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.primaryName = null;
                    this.additionalPropertiesBacking = null;
                }
                public EmbeddedEntity(PersonNameResource primaryName)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public EmbeddedEntity(PersonNameResource primaryName, params (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty2)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty3)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public EmbeddedEntity(PersonNameResource primaryName, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty1, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty2, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty3, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) additionalProperty4)
                {
                    if (primaryName is PersonNameResource item1)
                    {
                        this.primaryName = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private EmbeddedEntity(Menes.JsonReference primaryName, Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (primaryName is Menes.JsonReference item1)
                    {
                        this.primaryName = item1;
                    }
                    else
                    {
                        this.primaryName = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.primaryName is null || this.primaryName.Value.IsNull);
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity? AsOptional => this.IsNull ? default(RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity?) : this;
                public PersonNameResource PrimaryName => this.primaryName?.AsValue<PersonNameResource>() ?? PersonNameResource.FromOptionalProperty(this.JsonElement, PrimaryNamePropertyNameBytes.Span);
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(property)
                            : Null)
                        : Null;
                public static RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(property)
                            : Null)
                        : Null;
                public static RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(property)
                            : Null)
                    : Null;
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity WithPrimaryName(PersonNameResource value)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity ReplaceAll(Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> newAdditional)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), newAdditional);
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity ReplaceAll(params (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity)[] newAdditional)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional2)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional3)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity ReplaceAll((string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional1, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional2, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional3, (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity) newAdditional4)
                {
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Add(params (string, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(name, value));
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Add((string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional1, (string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional2, (string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional3, (string name, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity(this.GetPrimaryName(), new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.primaryName is Menes.JsonReference primaryName)
                        {
                            writer.WritePropertyName(EncodedPrimaryNamePropertyName);
                            primaryName.WriteTo(writer);
                        }
                        Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.PrimaryName.Equals(other.PrimaryName) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.PrimaryName, PrimaryNamePropertyNamePath);
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetPrimaryName()
                {
                    if (this.primaryName is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrimaryNamePropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new RelatedPersonResource.RelatedPersonResourceEntity.EmbeddedEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Resource clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(ResourceCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                    public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                    public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                    public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Resource.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (ResourceCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                    public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsResource)
                        {
                            builder.Append("{");
                            builder.Append("Resource");
                            builder.Append(", ");
                            builder.Append(this.AsResource().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsResourceCollection)
                        {
                            builder.Append("{");
                            builder.Append("ResourceCollection");
                            builder.Append(", ");
                            builder.Append(this.AsResourceCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsResource)
                        {
                            validationContext1 = this.AsResource().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                        }
                        if (this.IsResourceCollection)
                        {
                            validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, RelatedPersonResource.PropertiesEntity> FromJsonElement = e => new RelatedPersonResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            private readonly Menes.JsonReference? item3;
            private readonly Menes.JsonReference? item4;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(Resource clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item3 = null;
                }
                else
                {
                    this.item3 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item4 = null;
            }
            public PropertiesEntity(ResourceCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item4 = null;
                }
                else
                {
                    this.item4 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && this.item3 is null && this.item4 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResource => this.item3 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResourceCollection => this.item4 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
            public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
            public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
            public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (Resource.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (ResourceCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public Resource AsResource() => this.item3?.AsValue<Resource>() ?? new Resource(this.JsonElement);
            public ResourceCollection AsResourceCollection() => this.item4?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else if (this.item3 is Menes.JsonReference item3)
                {
                    item3.WriteTo(writer);
                }
                else if (this.item4 is Menes.JsonReference item4)
                {
                    item4.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResource)
                {
                    builder.Append("{");
                    builder.Append("Resource");
                    builder.Append(", ");
                    builder.Append(this.AsResource().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResourceCollection)
                {
                    builder.Append("{");
                    builder.Append("ResourceCollection");
                    builder.Append(", ");
                    builder.Append(this.AsResourceCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext3 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext4 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                if (this.IsResource)
                {
                    validationContext3 = this.AsResource().Validate(validationContext3);
                }
                else
                {
                    validationContext3 = validationContext3.WithError("The value is not convertible to a Resource.");
                }
                if (this.IsResourceCollection)
                {
                    validationContext4 = this.AsResourceCollection().Validate(validationContext4);
                }
                else
                {
                    validationContext4 = validationContext4.WithError("The value is not convertible to a ResourceCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2, validationContext3, validationContext4);
            }
        }
    }
    public readonly struct PersonNameListResource : Menes.IJsonObject, System.IEquatable<PersonNameListResource>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
    {
        public static readonly PersonNameListResource Null = new PersonNameListResource(default(System.Text.Json.JsonElement));
        public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource> FromJsonElement = e => new PersonNameListResource(e);
        private const string ContentTypePropertyNamePath = ".contentType";
        private const string LinksPropertyNamePath = "._links";
        private const string EmbeddedPropertyNamePath = "._embedded";
        private static readonly System.ReadOnlyMemory<byte> ContentTypePropertyNameBytes = new byte[] { 99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101 };
        private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
        private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
        private static readonly System.Text.Json.JsonEncodedText EncodedContentTypePropertyName = System.Text.Json.JsonEncodedText.Encode(ContentTypePropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
        private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
        private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ContentTypePropertyNameBytes, LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
        private readonly Menes.JsonString? contentType;
        private readonly Menes.JsonReference? links;
        private readonly Menes.JsonReference? embedded;
        private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
        public PersonNameListResource(System.Text.Json.JsonElement jsonElement)
        {
            this.JsonElement = jsonElement;
            this.contentType = null;
            this.links = null;
            this.embedded = null;
            this.additionalPropertiesBacking = null;
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links)
        {
            this.contentType = null;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            this.embedded = null;
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links, Menes.JsonString? contentType, PersonNameListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links, Menes.JsonString? contentType, PersonNameListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links, Menes.JsonString? contentType = null, PersonNameListResource.EmbeddedEntity? embedded = null)
        {
            this.contentType = contentType;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = null;
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links, Menes.JsonString? contentType, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
        {
            this.contentType = contentType;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links, Menes.JsonString? contentType, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
        {
            this.contentType = contentType;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links, Menes.JsonString? contentType, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
        {
            this.contentType = contentType;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
        }
        public PersonNameListResource(PersonNameListResource.LinksEntity links, Menes.JsonString? contentType, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
        {
            this.contentType = contentType;
            if (links is PersonNameListResource.LinksEntity item1)
            {
                this.links = Menes.JsonReference.FromValue(item1);
            }
            else
            {
                this.links = null;
            }
            if (embedded is PersonNameListResource.EmbeddedEntity item2)
            {
                this.embedded = Menes.JsonReference.FromValue(item2);
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
        }
        private PersonNameListResource(Menes.JsonReference links, Menes.JsonString? contentType, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
        {
            this.contentType = contentType;
            if (links is Menes.JsonReference item1)
            {
                this.links = item1;
            }
            else
            {
                this.links = null;
            }
            if (embedded is Menes.JsonReference item2)
            {
                this.embedded = item2;
            }
            else
            {
                this.embedded = null;
            }
            this.JsonElement = default;
            this.additionalPropertiesBacking = additionalPropertiesBacking;
        }
        public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.contentType is null || this.contentType.Value.IsNull) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
        public PersonNameListResource? AsOptional => this.IsNull ? default(PersonNameListResource?) : this;
        public Menes.JsonString? ContentType => this.contentType ?? Menes.JsonString.FromOptionalProperty(this.JsonElement, ContentTypePropertyNameBytes.Span).AsOptional;
        public PersonNameListResource.LinksEntity Links => this.links?.AsValue<PersonNameListResource.LinksEntity>() ?? PersonNameListResource.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
        public PersonNameListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<PersonNameListResource.EmbeddedEntity>() ?? PersonNameListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
        public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
        public int JsonAdditionalPropertiesCount
        {
            get
            {
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                int count = 0;

                while (enumerator.MoveNext())
                {
                    count++;
                }

                return count;
            }
        }
        public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
        public System.Text.Json.JsonElement JsonElement { get; }
        public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
        {
            get
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                }

                if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                }

                return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
            }
        }
        public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
        {
            return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
        }
        public static PersonNameListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonNameListResource(property)
                    : Null)
                : Null;
        public static PersonNameListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                    ? new PersonNameListResource(property)
                    : Null)
                : Null;
        public static PersonNameListResource FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
           parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                    ? new PersonNameListResource(property)
                    : Null)
            : Null;
        public PersonNameListResource WithContentType(Menes.JsonString? value)
        {
            return new PersonNameListResource(this.GetLinks(), value, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PersonNameListResource WithLinks(PersonNameListResource.LinksEntity value)
        {
            return new PersonNameListResource(Menes.JsonReference.FromValue(value), this.ContentType, this.GetEmbedded(), this.GetJsonProperties());
        }
        public PersonNameListResource WithEmbedded(PersonNameListResource.EmbeddedEntity? value)
        {
            return new PersonNameListResource(this.GetLinks(), this.ContentType, Menes.JsonReference.FromValue(value), this.GetJsonProperties());
        }
        public PersonNameListResource ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
        {
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), newAdditional);
        }
        public PersonNameListResource ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
        {
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
        }
        public PersonNameListResource ReplaceAll((string, Menes.JsonAny) newAdditional1)
        {
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
        }
        public PersonNameListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
        {
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
        }
        public PersonNameListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
        {
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
        }
        public PersonNameListResource ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
        {
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
        }
        public PersonNameListResource Add(params (string, Menes.JsonAny)[] newAdditional)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            foreach ((string name, Menes.JsonAny value) in newAdditional)
            {
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
            }
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Add((string name, Menes.JsonAny value) newAdditional1)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                arrayBuilder.Add(property);
            }
            arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Remove(params string[] namesToRemove)
        {
            System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Remove(string itemToRemove1)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Remove(string itemToRemove1, string itemToRemove2)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
        {
            System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
            ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!ihs.Contains(property.Name))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public PersonNameListResource Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
        {
            System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (!removeIfTrue(property))
                {
                    arrayBuilder.Add(property);
                }
            }
            return new PersonNameListResource(this.GetLinks(), this.ContentType, this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
        }
        public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
        {
            if (this.HasJsonElement)
            {
                this.JsonElement.WriteTo(writer);
            }
            else
            {
                writer.WriteStartObject();
                if (this.contentType is Menes.JsonString contentType)
                {
                    writer.WritePropertyName(EncodedContentTypePropertyName);
                    contentType.WriteTo(writer);
                }
                if (this.links is Menes.JsonReference links)
                {
                    writer.WritePropertyName(EncodedLinksPropertyName);
                    links.WriteTo(writer);
                }
                if (this.embedded is Menes.JsonReference embedded)
                {
                    writer.WritePropertyName(EncodedEmbeddedPropertyName);
                    embedded.WriteTo(writer);
                }
                Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                while (enumerator.MoveNext())
                {
                    enumerator.Current.Write(writer);
                }
                writer.WriteEndObject();
            }
        }
        public bool Equals(PersonNameListResource other)
        {
            if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
            {
                return false;
            }
            if (this.HasJsonElement && other.HasJsonElement)
            {
                return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
            }
            return this.ContentType.Equals(other.ContentType) && this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
        }
        public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
        {
            Menes.ValidationContext context = validationContext;
            if (this.ContentType is Menes.JsonString contentType)
            {
                context = Menes.Validation.ValidateProperty(context, contentType, ContentTypePropertyNamePath);
            }
            context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
            if (this.Embedded is PersonNameListResource.EmbeddedEntity embedded)
            {
                context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
            }
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
            }
            Menes.ValidationContext allOfValidationContext1 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext2 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext3 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.ValidationContext allOfValidationContext4 = Menes.ValidationContext.Root.WithPath(context.Path);
            Menes.JsonAny thisAsAny = Menes.JsonAny.From(this);
            Resource resourceValue0 = thisAsAny.As<Resource>();
            allOfValidationContext1 = resourceValue0.Validate(allOfValidationContext1);
            PersonNameListResource.PersonNameListResourceEntity personNameListResourceEntityValue1 = thisAsAny.As<PersonNameListResource.PersonNameListResourceEntity>();
            allOfValidationContext2 = personNameListResourceEntityValue1.Validate(allOfValidationContext2);
            PagedListResource pagedListResourceValue2 = thisAsAny.As<PagedListResource>();
            allOfValidationContext3 = pagedListResourceValue2.Validate(allOfValidationContext3);
            PersonNameListResource.PersonNameListResourceEntity personNameListResourceEntityValue3 = thisAsAny.As<PersonNameListResource.PersonNameListResourceEntity>();
            allOfValidationContext4 = personNameListResourceEntityValue3.Validate(allOfValidationContext4);
            context = Menes.Validation.ValidateAllOf(context, allOfValidationContext1, allOfValidationContext2, allOfValidationContext3, allOfValidationContext4);
            return context;
        }
        public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
        }
        public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
            {
                if (property.NameEquals(utf8PropertyName))
                {
                    value = property.AsValue();
                    return true;
                }
            }
            value = default;
            return false;
        }
        public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
        {
            System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
            int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
            return this.TryGet(bytes.Slice(0, written), out value);
        }
        public override string ToString()
        {
            return Menes.JsonAny.From(this).ToString();
        }
        private Menes.JsonReference GetLinks()
        {
            if (this.links is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonReference? GetEmbedded()
        {
            if (this.embedded is Menes.JsonReference reference)
            {
                return reference;
            }
            if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
            {
                return new Menes.JsonReference(value);
            }
            return default;
        }
        private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
        {
            if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
            {
                return props;
            }
            return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
        }

        public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PersonNameListResource.LinksEntity>, Menes.IJsonAdditionalProperties<PersonNameListResource.PropertiesEntity>
        {
            public static readonly PersonNameListResource.LinksEntity Null = new PersonNameListResource.LinksEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.LinksEntity> FromJsonElement = e => new PersonNameListResource.LinksEntity(e);
            private const string SelfPropertyNamePath = ".self";
            private const string ItemsPropertyNamePath = ".items";
            private const string NextPropertyNamePath = ".next";
            private const string PrevPropertyNamePath = ".prev";
            private static readonly System.ReadOnlyMemory<byte> SelfPropertyNameBytes = new byte[] { 115, 101, 108, 102 };
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
            private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
            private static readonly System.Text.Json.JsonEncodedText EncodedSelfPropertyName = System.Text.Json.JsonEncodedText.Encode(SelfPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(SelfPropertyNameBytes, ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
            private readonly Menes.JsonReference? self;
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonReference? next;
            private readonly Menes.JsonReference? prev;
            private readonly Menes.JsonProperties<PersonNameListResource.PropertiesEntity>? additionalPropertiesBacking;
            public LinksEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.self = null;
                this.items = null;
                this.next = null;
                this.prev = null;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                this.next = null;
                this.prev = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<PersonNameListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, params (string, PersonNameListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next = null, Link? prev = null)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PropertiesEntity) additionalProperty1)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PropertiesEntity) additionalProperty2)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PropertiesEntity) additionalProperty2, (string, PersonNameListResource.PropertiesEntity) additionalProperty3)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public LinksEntity(Link self, LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PropertiesEntity) additionalProperty2, (string, PersonNameListResource.PropertiesEntity) additionalProperty3, (string, PersonNameListResource.PropertiesEntity) additionalProperty4)
            {
                if (self is Link item1)
                {
                    this.self = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.self = null;
                }
                if (items is LinkCollection item2)
                {
                    this.items = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.items = null;
                }
                if (next is Link item3)
                {
                    this.next = Menes.JsonReference.FromValue(item3);
                }
                else
                {
                    this.next = null;
                }
                if (prev is Link item4)
                {
                    this.prev = Menes.JsonReference.FromValue(item4);
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private LinksEntity(Menes.JsonReference self, Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<PersonNameListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (self is Menes.JsonReference item1)
                {
                    this.self = item1;
                }
                else
                {
                    this.self = null;
                }
                if (items is Menes.JsonReference item2)
                {
                    this.items = item2;
                }
                else
                {
                    this.items = null;
                }
                if (next is Menes.JsonReference item3)
                {
                    this.next = item3;
                }
                else
                {
                    this.next = null;
                }
                if (prev is Menes.JsonReference item4)
                {
                    this.prev = item4;
                }
                else
                {
                    this.prev = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.self is null || this.self.Value.IsNull) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
            public PersonNameListResource.LinksEntity? AsOptional => this.IsNull ? default(PersonNameListResource.LinksEntity?) : this;
            public Link Self => this.self?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, SelfPropertyNameBytes.Span);
            public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
            public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
            public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonNameListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonNameListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.LinksEntity(property)
                        : Null)
                    : Null;
            public static PersonNameListResource.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.LinksEntity(property)
                        : Null)
                : Null;
            public PersonNameListResource.LinksEntity WithSelf(Link value)
            {
                return new PersonNameListResource.LinksEntity(Menes.JsonReference.FromValue(value), this.GetItems(), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public PersonNameListResource.LinksEntity WithItems(LinkCollection value)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
            }
            public PersonNameListResource.LinksEntity WithNext(Link? value)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
            }
            public PersonNameListResource.LinksEntity WithPrev(Link? value)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonNameListResource.LinksEntity ReplaceAll(Menes.JsonProperties<PersonNameListResource.PropertiesEntity> newAdditional)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
            }
            public PersonNameListResource.LinksEntity ReplaceAll(params (string, PersonNameListResource.PropertiesEntity)[] newAdditional)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonNameListResource.LinksEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonNameListResource.LinksEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PropertiesEntity) newAdditional2)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonNameListResource.LinksEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PropertiesEntity) newAdditional2, (string, PersonNameListResource.PropertiesEntity) newAdditional3)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonNameListResource.LinksEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PropertiesEntity) newAdditional2, (string, PersonNameListResource.PropertiesEntity) newAdditional3, (string, PersonNameListResource.PropertiesEntity) newAdditional4)
            {
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonNameListResource.LinksEntity Add(params (string, PersonNameListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonNameListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(name, value));
                }
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PropertiesEntity value) newAdditional2, (string name, PersonNameListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PropertiesEntity value) newAdditional2, (string name, PersonNameListResource.PropertiesEntity value) newAdditional3, (string name, PersonNameListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.LinksEntity(this.GetSelf(), this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.self is Menes.JsonReference self)
                    {
                        writer.WritePropertyName(EncodedSelfPropertyName);
                        self.WriteTo(writer);
                    }
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    if (this.next is Menes.JsonReference next)
                    {
                        writer.WritePropertyName(EncodedNextPropertyName);
                        next.WriteTo(writer);
                    }
                    if (this.prev is Menes.JsonReference prev)
                    {
                        writer.WritePropertyName(EncodedPrevPropertyName);
                        prev.WriteTo(writer);
                    }
                    Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonNameListResource.LinksEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Self.Equals(other.Self) && this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Self, SelfPropertyNamePath);
                context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                if (this.Next is Link next)
                {
                    context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                }
                if (this.Prev is Link prev)
                {
                    context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetSelf()
            {
                if (this.self is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(SelfPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetNext()
            {
                if (this.next is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetPrev()
            {
                if (this.prev is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PersonNameListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.LinksEntity.PropertiesEntity> FromJsonElement = e => new PersonNameListResource.LinksEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Link clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(LinkCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Link.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (LinkCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsLink)
                    {
                        builder.Append("{");
                        builder.Append("Link");
                        builder.Append(", ");
                        builder.Append(this.AsLink().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsLinkCollection)
                    {
                        builder.Append("{");
                        builder.Append("LinkCollection");
                        builder.Append(", ");
                        builder.Append(this.AsLinkCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsLink)
                    {
                        validationContext1 = this.AsLink().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                    }
                    if (this.IsLinkCollection)
                    {
                        validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct EmbeddedEntity : Menes.IJsonObject, System.IEquatable<PersonNameListResource.EmbeddedEntity>, Menes.IJsonAdditionalProperties<PersonNameListResource.PropertiesEntity>
        {
            public static readonly PersonNameListResource.EmbeddedEntity Null = new PersonNameListResource.EmbeddedEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.EmbeddedEntity> FromJsonElement = e => new PersonNameListResource.EmbeddedEntity(e);
            private const string ItemsPropertyNamePath = ".items";
            private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
            private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes);
            private readonly Menes.JsonReference? items;
            private readonly Menes.JsonProperties<PersonNameListResource.PropertiesEntity>? additionalPropertiesBacking;
            public EmbeddedEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.items = null;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonNameListResource.ItemsArray? items, Menes.JsonProperties<PersonNameListResource.PropertiesEntity> additionalPropertiesBacking)
            {
                if (items is PersonNameListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public EmbeddedEntity(PersonNameListResource.ItemsArray? items, params (string, PersonNameListResource.PropertiesEntity)[] additionalPropertiesBacking)
            {
                if (items is PersonNameListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalPropertiesBacking);
            }
            public EmbeddedEntity(PersonNameListResource.ItemsArray? items = null)
            {
                if (items is PersonNameListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public EmbeddedEntity(PersonNameListResource.ItemsArray? items, (string, PersonNameListResource.PropertiesEntity) additionalProperty1)
            {
                if (items is PersonNameListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1);
            }
            public EmbeddedEntity(PersonNameListResource.ItemsArray? items, (string, PersonNameListResource.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PropertiesEntity) additionalProperty2)
            {
                if (items is PersonNameListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
            }
            public EmbeddedEntity(PersonNameListResource.ItemsArray? items, (string, PersonNameListResource.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PropertiesEntity) additionalProperty2, (string, PersonNameListResource.PropertiesEntity) additionalProperty3)
            {
                if (items is PersonNameListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public EmbeddedEntity(PersonNameListResource.ItemsArray? items, (string, PersonNameListResource.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PropertiesEntity) additionalProperty2, (string, PersonNameListResource.PropertiesEntity) additionalProperty3, (string, PersonNameListResource.PropertiesEntity) additionalProperty4)
            {
                if (items is PersonNameListResource.ItemsArray item1)
                {
                    this.items = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private EmbeddedEntity(Menes.JsonReference? items, Menes.JsonProperties<PersonNameListResource.PropertiesEntity>? additionalPropertiesBacking)
            {
                if (items is Menes.JsonReference item1)
                {
                    this.items = item1;
                }
                else
                {
                    this.items = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull);
            public PersonNameListResource.EmbeddedEntity? AsOptional => this.IsNull ? default(PersonNameListResource.EmbeddedEntity?) : this;
            public PersonNameListResource.ItemsArray? Items => this.items?.AsValue<PersonNameListResource.ItemsArray>() ?? PersonNameListResource.ItemsArray.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameListResource.PropertiesEntity> ap)
                    {
                        return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonNameListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonNameListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.EmbeddedEntity(property)
                        : Null)
                    : Null;
            public static PersonNameListResource.EmbeddedEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.EmbeddedEntity(property)
                        : Null)
                : Null;
            public PersonNameListResource.EmbeddedEntity WithItems(PersonNameListResource.ItemsArray? value)
            {
                return new PersonNameListResource.EmbeddedEntity(Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonNameListResource.EmbeddedEntity ReplaceAll(Menes.JsonProperties<PersonNameListResource.PropertiesEntity> newAdditional)
            {
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), newAdditional);
            }
            public PersonNameListResource.EmbeddedEntity ReplaceAll(params (string, PersonNameListResource.PropertiesEntity)[] newAdditional)
            {
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional));
            }
            public PersonNameListResource.EmbeddedEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1)
            {
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1));
            }
            public PersonNameListResource.EmbeddedEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PropertiesEntity) newAdditional2)
            {
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonNameListResource.EmbeddedEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PropertiesEntity) newAdditional2, (string, PersonNameListResource.PropertiesEntity) newAdditional3)
            {
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonNameListResource.EmbeddedEntity ReplaceAll((string, PersonNameListResource.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PropertiesEntity) newAdditional2, (string, PersonNameListResource.PropertiesEntity) newAdditional3, (string, PersonNameListResource.PropertiesEntity) newAdditional4)
            {
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonNameListResource.EmbeddedEntity Add(params (string, PersonNameListResource.PropertiesEntity)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, PersonNameListResource.PropertiesEntity value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(name, value));
                }
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PropertiesEntity value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PropertiesEntity value) newAdditional2, (string name, PersonNameListResource.PropertiesEntity value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Add((string name, PersonNameListResource.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PropertiesEntity value) newAdditional2, (string name, PersonNameListResource.PropertiesEntity value) newAdditional3, (string name, PersonNameListResource.PropertiesEntity value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.EmbeddedEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity>>();
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.EmbeddedEntity(this.GetItems(), new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.items is Menes.JsonReference items)
                    {
                        writer.WritePropertyName(EncodedItemsPropertyName);
                        items.WriteTo(writer);
                    }
                    Menes.JsonProperties<PersonNameListResource.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonNameListResource.EmbeddedEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Items.Equals(other.Items) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                if (this.Items is PersonNameListResource.ItemsArray items)
                {
                    context = Menes.Validation.ValidateProperty(context, items, ItemsPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PropertiesEntity value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PropertiesEntity value)
            {
                foreach (Menes.JsonPropertyReference<PersonNameListResource.PropertiesEntity> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PropertiesEntity value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference? GetItems()
            {
                if (this.items is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<PersonNameListResource.PropertiesEntity> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameListResource.PropertiesEntity> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<PersonNameListResource.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }
            public readonly struct PropertiesEntity : Menes.IJsonValue
            {
                public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.EmbeddedEntity.PropertiesEntity> FromJsonElement = e => new PersonNameListResource.EmbeddedEntity.PropertiesEntity(e);
                private readonly Menes.JsonReference? item1;
                private readonly Menes.JsonReference? item2;
                public PropertiesEntity(Resource clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item1 = null;
                    }
                    else
                    {
                        this.item1 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item2 = null;
                }
                public PropertiesEntity(ResourceCollection clrInstance)
                {
                    if (clrInstance.HasJsonElement)
                    {
                        this.JsonElement = clrInstance.JsonElement;
                        this.item2 = null;
                    }
                    else
                    {
                        this.item2 = Menes.JsonReference.FromValue(clrInstance);
                        this.JsonElement = default;
                    }
                    this.item1 = null;
                }
                public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.item1 = null;
                    this.item2 = null;
                    this.JsonElement = jsonElement;
                }
                public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                public bool IsResource => this.item1 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool IsResourceCollection => this.item2 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
                public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
                public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
                public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
                public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
                {
                    return new PropertiesEntity(value);
                }
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PropertiesEntity(property)
                            : Null)
                        : Null;
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    if (Resource.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    if (ResourceCollection.IsConvertibleFrom(jsonElement))
                    {
                        return true;
                    }
                    return false;
                }
                public Resource AsResource() => this.item1?.AsValue<Resource>() ?? new Resource(this.JsonElement);
                public ResourceCollection AsResourceCollection() => this.item2?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.item1 is Menes.JsonReference item1)
                    {
                        item1.WriteTo(writer);
                    }
                    else if (this.item2 is Menes.JsonReference item2)
                    {
                        item2.WriteTo(writer);
                    }
                    else
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                }
                public override string ToString()
                {
                    var builder = new System.Text.StringBuilder();
                    if (this.IsResource)
                    {
                        builder.Append("{");
                        builder.Append("Resource");
                        builder.Append(", ");
                        builder.Append(this.AsResource().ToString());
                        builder.AppendLine("}");
                    }
                    if (this.IsResourceCollection)
                    {
                        builder.Append("{");
                        builder.Append("ResourceCollection");
                        builder.Append(", ");
                        builder.Append(this.AsResourceCollection().ToString());
                        builder.AppendLine("}");
                    }
                    return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    if (this.IsNull)
                    {
                        return validationContext;
                    }
                    Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                    if (this.IsResource)
                    {
                        validationContext1 = this.AsResource().Validate(validationContext1);
                    }
                    else
                    {
                        validationContext1 = validationContext1.WithError("The value is not convertible to a Resource.");
                    }
                    if (this.IsResourceCollection)
                    {
                        validationContext2 = this.AsResourceCollection().Validate(validationContext2);
                    }
                    else
                    {
                        validationContext2 = validationContext2.WithError("The value is not convertible to a ResourceCollection.");
                    }
                    return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                }
            }
        }

        public readonly struct PersonNameListResourceEntity : Menes.IJsonObject, System.IEquatable<PersonNameListResource.PersonNameListResourceEntity>, Menes.IJsonAdditionalProperties<Menes.JsonAny>
        {
            public static readonly PersonNameListResource.PersonNameListResourceEntity Null = new PersonNameListResource.PersonNameListResourceEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.PersonNameListResourceEntity> FromJsonElement = e => new PersonNameListResource.PersonNameListResourceEntity(e);
            private const string LinksPropertyNamePath = "._links";
            private const string EmbeddedPropertyNamePath = "._embedded";
            private static readonly System.ReadOnlyMemory<byte> LinksPropertyNameBytes = new byte[] { 95, 108, 105, 110, 107, 115 };
            private static readonly System.ReadOnlyMemory<byte> EmbeddedPropertyNameBytes = new byte[] { 95, 101, 109, 98, 101, 100, 100, 101, 100 };
            private static readonly System.Text.Json.JsonEncodedText EncodedLinksPropertyName = System.Text.Json.JsonEncodedText.Encode(LinksPropertyNameBytes.Span);
            private static readonly System.Text.Json.JsonEncodedText EncodedEmbeddedPropertyName = System.Text.Json.JsonEncodedText.Encode(EmbeddedPropertyNameBytes.Span);
            private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(LinksPropertyNameBytes, EmbeddedPropertyNameBytes);
            private readonly Menes.JsonReference? links;
            private readonly Menes.JsonReference? embedded;
            private readonly Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking;
            public PersonNameListResourceEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.JsonElement = jsonElement;
                this.links = null;
                this.embedded = null;
                this.additionalPropertiesBacking = null;
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                this.embedded = null;
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links, PersonNameListResource.EmbeddedEntity? embedded, Menes.JsonProperties<Menes.JsonAny> additionalPropertiesBacking)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonNameListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links, PersonNameListResource.EmbeddedEntity? embedded, params (string, Menes.JsonAny)[] additionalPropertiesBacking)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonNameListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalPropertiesBacking);
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links, PersonNameListResource.EmbeddedEntity? embedded = null)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonNameListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = null;
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonNameListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1);
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonNameListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2);
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonNameListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
            }
            public PersonNameListResourceEntity(PersonNameListResource.PersonNameListResourceEntity.LinksEntity links, PersonNameListResource.EmbeddedEntity? embedded, (string, Menes.JsonAny) additionalProperty1, (string, Menes.JsonAny) additionalProperty2, (string, Menes.JsonAny) additionalProperty3, (string, Menes.JsonAny) additionalProperty4)
            {
                if (links is PersonNameListResource.PersonNameListResourceEntity.LinksEntity item1)
                {
                    this.links = Menes.JsonReference.FromValue(item1);
                }
                else
                {
                    this.links = null;
                }
                if (embedded is PersonNameListResource.EmbeddedEntity item2)
                {
                    this.embedded = Menes.JsonReference.FromValue(item2);
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = Menes.JsonProperties<Menes.JsonAny>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
            }
            private PersonNameListResourceEntity(Menes.JsonReference links, Menes.JsonReference? embedded, Menes.JsonProperties<Menes.JsonAny>? additionalPropertiesBacking)
            {
                if (links is Menes.JsonReference item1)
                {
                    this.links = item1;
                }
                else
                {
                    this.links = null;
                }
                if (embedded is Menes.JsonReference item2)
                {
                    this.embedded = item2;
                }
                else
                {
                    this.embedded = null;
                }
                this.JsonElement = default;
                this.additionalPropertiesBacking = additionalPropertiesBacking;
            }
            public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.links is null || this.links.Value.IsNull) && (this.embedded is null || this.embedded.Value.IsNull);
            public PersonNameListResource.PersonNameListResourceEntity? AsOptional => this.IsNull ? default(PersonNameListResource.PersonNameListResourceEntity?) : this;
            public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Links => this.links?.AsValue<PersonNameListResource.PersonNameListResourceEntity.LinksEntity>() ?? PersonNameListResource.PersonNameListResourceEntity.LinksEntity.FromOptionalProperty(this.JsonElement, LinksPropertyNameBytes.Span);
            public PersonNameListResource.EmbeddedEntity? Embedded => this.embedded?.AsValue<PersonNameListResource.EmbeddedEntity>() ?? PersonNameListResource.EmbeddedEntity.FromOptionalProperty(this.JsonElement, EmbeddedPropertyNameBytes.Span).AsOptional;
            public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
            public int JsonAdditionalPropertiesCount
            {
                get
                {
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    int count = 0;

                    while (enumerator.MoveNext())
                    {
                        count++;
                    }

                    return count;
                }
            }
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator JsonAdditionalProperties
            {
                get
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> ap)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(ap, KnownProperties);
                    }

                    if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                    }

                    return new Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator(Menes.JsonProperties<Menes.JsonAny>.Empty, KnownProperties);
                }
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
            }
            public static PersonNameListResource.PersonNameListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.PersonNameListResourceEntity(property)
                        : Null)
                    : Null;
            public static PersonNameListResource.PersonNameListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.PersonNameListResourceEntity(property)
                        : Null)
                    : Null;
            public static PersonNameListResource.PersonNameListResourceEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PersonNameListResource.PersonNameListResourceEntity(property)
                        : Null)
                : Null;
            public PersonNameListResource.PersonNameListResourceEntity WithLinks(PersonNameListResource.PersonNameListResourceEntity.LinksEntity value)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(Menes.JsonReference.FromValue(value), this.GetEmbedded(), this.GetJsonProperties());
            }
            public PersonNameListResource.PersonNameListResourceEntity WithEmbedded(PersonNameListResource.EmbeddedEntity? value)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
            }
            public PersonNameListResource.PersonNameListResourceEntity ReplaceAll(Menes.JsonProperties<Menes.JsonAny> newAdditional)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), newAdditional);
            }
            public PersonNameListResource.PersonNameListResourceEntity ReplaceAll(params (string, Menes.JsonAny)[] newAdditional)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional));
            }
            public PersonNameListResource.PersonNameListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1));
            }
            public PersonNameListResource.PersonNameListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2));
            }
            public PersonNameListResource.PersonNameListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3));
            }
            public PersonNameListResource.PersonNameListResourceEntity ReplaceAll((string, Menes.JsonAny) newAdditional1, (string, Menes.JsonAny) newAdditional2, (string, Menes.JsonAny) newAdditional3, (string, Menes.JsonAny) newAdditional4)
            {
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), Menes.JsonProperties<Menes.JsonAny>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
            }
            public PersonNameListResource.PersonNameListResourceEntity Add(params (string, Menes.JsonAny)[] newAdditional)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                foreach ((string name, Menes.JsonAny value) in newAdditional)
                {
                    arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(name, value));
                }
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Add((string name, Menes.JsonAny value) newAdditional1, (string name, Menes.JsonAny value) newAdditional2, (string name, Menes.JsonAny value) newAdditional3, (string name, Menes.JsonAny value) newAdditional4)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    arrayBuilder.Add(property);
                }
                arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<Menes.JsonAny>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Remove(params string[] namesToRemove)
            {
                System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Remove(string itemToRemove1)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Remove(string itemToRemove1, string itemToRemove2)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
            {
                System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!ihs.Contains(property.Name))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public PersonNameListResource.PersonNameListResourceEntity Remove(System.Predicate<Menes.JsonPropertyReference<Menes.JsonAny>> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<Menes.JsonAny>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<Menes.JsonAny>>();
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (!removeIfTrue(property))
                    {
                        arrayBuilder.Add(property);
                    }
                }
                return new PersonNameListResource.PersonNameListResourceEntity(this.GetLinks(), this.GetEmbedded(), new Menes.JsonProperties<Menes.JsonAny>(arrayBuilder.ToImmutable()));
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                else
                {
                    writer.WriteStartObject();
                    if (this.links is Menes.JsonReference links)
                    {
                        writer.WritePropertyName(EncodedLinksPropertyName);
                        links.WriteTo(writer);
                    }
                    if (this.embedded is Menes.JsonReference embedded)
                    {
                        writer.WritePropertyName(EncodedEmbeddedPropertyName);
                        embedded.WriteTo(writer);
                    }
                    Menes.JsonProperties<Menes.JsonAny>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.Write(writer);
                    }
                    writer.WriteEndObject();
                }
            }
            public bool Equals(PersonNameListResource.PersonNameListResourceEntity other)
            {
                if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                {
                    return false;
                }
                if (this.HasJsonElement && other.HasJsonElement)
                {
                    return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                }
                return this.Links.Equals(other.Links) && this.Embedded.Equals(other.Embedded) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.ValidationContext context = validationContext;
                context = Menes.Validation.ValidateRequiredProperty(context, this.Links, LinksPropertyNamePath);
                if (this.Embedded is PersonNameListResource.EmbeddedEntity embedded)
                {
                    context = Menes.Validation.ValidateProperty(context, embedded, EmbeddedPropertyNamePath);
                }
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                }
                return context;
            }
            public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
            }
            public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                foreach (Menes.JsonPropertyReference<Menes.JsonAny> property in this.JsonAdditionalProperties)
                {
                    if (property.NameEquals(utf8PropertyName))
                    {
                        value = property.AsValue();
                        return true;
                    }
                }
                value = default;
                return false;
            }
            public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Menes.JsonAny value)
            {
                System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                return this.TryGet(bytes.Slice(0, written), out value);
            }
            public override string ToString()
            {
                return Menes.JsonAny.From(this).ToString();
            }
            private Menes.JsonReference GetLinks()
            {
                if (this.links is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(LinksPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonReference? GetEmbedded()
            {
                if (this.embedded is Menes.JsonReference reference)
                {
                    return reference;
                }
                if (this.HasJsonElement && this.JsonElement.TryGetProperty(EmbeddedPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                {
                    return new Menes.JsonReference(value);
                }
                return default;
            }
            private Menes.JsonProperties<Menes.JsonAny> GetJsonProperties()
            {
                if (this.additionalPropertiesBacking is Menes.JsonProperties<Menes.JsonAny> props)
                {
                    return props;
                }
                return new Menes.JsonProperties<Menes.JsonAny>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
            }

            public readonly struct LinksEntity : Menes.IJsonObject, System.IEquatable<PersonNameListResource.PersonNameListResourceEntity.LinksEntity>, Menes.IJsonAdditionalProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>
            {
                public static readonly PersonNameListResource.PersonNameListResourceEntity.LinksEntity Null = new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(default(System.Text.Json.JsonElement));
                public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.PersonNameListResourceEntity.LinksEntity> FromJsonElement = e => new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(e);
                private const string ItemsPropertyNamePath = ".items";
                private const string NextPropertyNamePath = ".next";
                private const string PrevPropertyNamePath = ".prev";
                private static readonly System.ReadOnlyMemory<byte> ItemsPropertyNameBytes = new byte[] { 105, 116, 101, 109, 115 };
                private static readonly System.ReadOnlyMemory<byte> NextPropertyNameBytes = new byte[] { 110, 101, 120, 116 };
                private static readonly System.ReadOnlyMemory<byte> PrevPropertyNameBytes = new byte[] { 112, 114, 101, 118 };
                private static readonly System.Text.Json.JsonEncodedText EncodedItemsPropertyName = System.Text.Json.JsonEncodedText.Encode(ItemsPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedNextPropertyName = System.Text.Json.JsonEncodedText.Encode(NextPropertyNameBytes.Span);
                private static readonly System.Text.Json.JsonEncodedText EncodedPrevPropertyName = System.Text.Json.JsonEncodedText.Encode(PrevPropertyNameBytes.Span);
                private static readonly System.Collections.Immutable.ImmutableArray<System.ReadOnlyMemory<byte>> KnownProperties = System.Collections.Immutable.ImmutableArray.Create(ItemsPropertyNameBytes, NextPropertyNameBytes, PrevPropertyNameBytes);
                private readonly Menes.JsonReference? items;
                private readonly Menes.JsonReference? next;
                private readonly Menes.JsonReference? prev;
                private readonly Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking;
                public LinksEntity(System.Text.Json.JsonElement jsonElement)
                {
                    this.JsonElement = jsonElement;
                    this.items = null;
                    this.next = null;
                    this.prev = null;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    this.next = null;
                    this.prev = null;
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, params (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity)[] additionalPropertiesBacking)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalPropertiesBacking);
                }
                public LinksEntity(LinkCollection items, Link? next = null, Link? prev = null)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = null;
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3);
                }
                public LinksEntity(LinkCollection items, Link? next, Link? prev, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty1, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty2, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty3, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) additionalProperty4)
                {
                    if (items is LinkCollection item1)
                    {
                        this.items = Menes.JsonReference.FromValue(item1);
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Link item2)
                    {
                        this.next = Menes.JsonReference.FromValue(item2);
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Link item3)
                    {
                        this.prev = Menes.JsonReference.FromValue(item3);
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(additionalProperty1, additionalProperty2, additionalProperty3, additionalProperty4);
                }
                private LinksEntity(Menes.JsonReference items, Menes.JsonReference? next, Menes.JsonReference? prev, Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>? additionalPropertiesBacking)
                {
                    if (items is Menes.JsonReference item1)
                    {
                        this.items = item1;
                    }
                    else
                    {
                        this.items = null;
                    }
                    if (next is Menes.JsonReference item2)
                    {
                        this.next = item2;
                    }
                    else
                    {
                        this.next = null;
                    }
                    if (prev is Menes.JsonReference item3)
                    {
                        this.prev = item3;
                    }
                    else
                    {
                        this.prev = null;
                    }
                    this.JsonElement = default;
                    this.additionalPropertiesBacking = additionalPropertiesBacking;
                }
                public bool IsNull => (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null) && (this.items is null || this.items.Value.IsNull) && (this.next is null || this.next.Value.IsNull) && (this.prev is null || this.prev.Value.IsNull);
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity? AsOptional => this.IsNull ? default(PersonNameListResource.PersonNameListResourceEntity.LinksEntity?) : this;
                public LinkCollection Items => this.items?.AsValue<LinkCollection>() ?? LinkCollection.FromOptionalProperty(this.JsonElement, ItemsPropertyNameBytes.Span);
                public Link? Next => this.next?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, NextPropertyNameBytes.Span).AsOptional;
                public Link? Prev => this.prev?.AsValue<Link>() ?? Link.FromOptionalProperty(this.JsonElement, PrevPropertyNameBytes.Span).AsOptional;
                public int PropertiesCount => KnownProperties.Length + this.JsonAdditionalPropertiesCount;
                public int JsonAdditionalPropertiesCount
                {
                    get
                    {
                        Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        int count = 0;

                        while (enumerator.MoveNext())
                        {
                            count++;
                        }

                        return count;
                    }
                }
                public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                public System.Text.Json.JsonElement JsonElement { get; }
                public Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator JsonAdditionalProperties
                {
                    get
                    {
                        if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> ap)
                        {
                            return new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(ap, KnownProperties);
                        }

                        if (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            return new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(this.JsonElement, KnownProperties);
                        }

                        return new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator(Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.Empty, KnownProperties);
                    }
                }
                public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                {
                    return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object || jsonElement.ValueKind == System.Text.Json.JsonValueKind.Null;
                }
                public static PersonNameListResource.PersonNameListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PersonNameListResource.PersonNameListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                            ? new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(property)
                            : Null)
                        : Null;
                public static PersonNameListResource.PersonNameListResourceEntity.LinksEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                   parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                        (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                            ? new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(property)
                            : Null)
                    : Null;
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity WithItems(LinkCollection value)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(Menes.JsonReference.FromValue(value), this.GetNext(), this.GetPrev(), this.GetJsonProperties());
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity WithNext(Link? value)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), Menes.JsonReference.FromValue(value), this.GetPrev(), this.GetJsonProperties());
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity WithPrev(Link? value)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), Menes.JsonReference.FromValue(value), this.GetJsonProperties());
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity ReplaceAll(Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> newAdditional)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), newAdditional);
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity ReplaceAll(params (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity ReplaceAll((string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity ReplaceAll((string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity ReplaceAll((string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity ReplaceAll((string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional1, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional2, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional3, (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity) newAdditional4)
                {
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.FromValues(newAdditional1, newAdditional2, newAdditional3, newAdditional4));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Add(params (string, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity)[] newAdditional)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    foreach ((string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) in newAdditional)
                    {
                        arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(name, value));
                    }
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Add((string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Add((string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Add((string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Add((string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional1, (string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional2, (string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional3, (string name, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value) newAdditional4)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        arrayBuilder.Add(property);
                    }
                    arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional1.name, newAdditional1.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional2.name, newAdditional2.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional3.name, newAdditional3.value)); arrayBuilder.Add(Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.From(newAdditional4.name, newAdditional4.value)); return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Remove(params string[] namesToRemove)
                {
                    System.Collections.Immutable.ImmutableHashSet<string> ihs = System.Collections.Immutable.ImmutableHashSet.Create<string>(namesToRemove);
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Remove(string itemToRemove1)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Remove(string itemToRemove1, string itemToRemove2, string itemToRemove3, string itemToRemove4)
                {
                    System.Collections.Immutable.ImmutableHashSet<string>.Builder ihsBuilder = System.Collections.Immutable.ImmutableHashSet.CreateBuilder<string>();
                    ihsBuilder.Add(itemToRemove1); ihsBuilder.Add(itemToRemove2); ihsBuilder.Add(itemToRemove3); ihsBuilder.Add(itemToRemove4); System.Collections.Immutable.ImmutableHashSet<string> ihs = ihsBuilder.ToImmutable();
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!ihs.Contains(property.Name))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public PersonNameListResource.PersonNameListResourceEntity.LinksEntity Remove(System.Predicate<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>> removeIfTrue)
                {
                    System.Collections.Immutable.ImmutableArray<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>>();
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (!removeIfTrue(property))
                        {
                            arrayBuilder.Add(property);
                        }
                    }
                    return new PersonNameListResource.PersonNameListResourceEntity.LinksEntity(this.GetItems(), this.GetNext(), this.GetPrev(), new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(arrayBuilder.ToImmutable()));
                }
                public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                {
                    if (this.HasJsonElement)
                    {
                        this.JsonElement.WriteTo(writer);
                    }
                    else
                    {
                        writer.WriteStartObject();
                        if (this.items is Menes.JsonReference items)
                        {
                            writer.WritePropertyName(EncodedItemsPropertyName);
                            items.WriteTo(writer);
                        }
                        if (this.next is Menes.JsonReference next)
                        {
                            writer.WritePropertyName(EncodedNextPropertyName);
                            next.WriteTo(writer);
                        }
                        if (this.prev is Menes.JsonReference prev)
                        {
                            writer.WritePropertyName(EncodedPrevPropertyName);
                            prev.WriteTo(writer);
                        }
                        Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>.JsonPropertyEnumerator enumerator = this.JsonAdditionalProperties;
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.Write(writer);
                        }
                        writer.WriteEndObject();
                    }
                }
                public bool Equals(PersonNameListResource.PersonNameListResourceEntity.LinksEntity other)
                {
                    if ((this.IsNull && !other.IsNull) || (!this.IsNull && other.IsNull))
                    {
                        return false;
                    }
                    if (this.HasJsonElement && other.HasJsonElement)
                    {
                        return Menes.JsonAny.From(this).Equals(Menes.JsonAny.From(other));
                    }
                    return this.Items.Equals(other.Items) && this.Next.Equals(other.Next) && this.Prev.Equals(other.Prev) && System.Linq.Enumerable.SequenceEqual(this.JsonAdditionalProperties, other.JsonAdditionalProperties);
                }
                public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                {
                    Menes.ValidationContext context = validationContext;
                    context = Menes.Validation.ValidateRequiredProperty(context, this.Items, ItemsPropertyNamePath);
                    if (this.Next is Link next)
                    {
                        context = Menes.Validation.ValidateProperty(context, next, NextPropertyNamePath);
                    }
                    if (this.Prev is Link prev)
                    {
                        context = Menes.Validation.ValidateProperty(context, prev, PrevPropertyNamePath);
                    }
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        context = Menes.Validation.ValidateProperty(context, property.AsValue(), "." + property.Name);
                    }
                    return context;
                }
                public bool TryGet(string propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    return this.TryGet(System.MemoryExtensions.AsSpan(propertyName), out value);
                }
                public bool TryGet(System.ReadOnlySpan<byte> utf8PropertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    foreach (Menes.JsonPropertyReference<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> property in this.JsonAdditionalProperties)
                    {
                        if (property.NameEquals(utf8PropertyName))
                        {
                            value = property.AsValue();
                            return true;
                        }
                    }
                    value = default;
                    return false;
                }
                public bool TryGet(System.ReadOnlySpan<char> propertyName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity value)
                {
                    System.Span<byte> bytes = stackalloc byte[propertyName.Length * 4];
                    int written = System.Text.Encoding.UTF8.GetBytes(propertyName, bytes);
                    return this.TryGet(bytes.Slice(0, written), out value);
                }
                public override string ToString()
                {
                    return Menes.JsonAny.From(this).ToString();
                }
                private Menes.JsonReference GetItems()
                {
                    if (this.items is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(ItemsPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetNext()
                {
                    if (this.next is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(NextPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonReference? GetPrev()
                {
                    if (this.prev is Menes.JsonReference reference)
                    {
                        return reference;
                    }
                    if (this.HasJsonElement && this.JsonElement.TryGetProperty(PrevPropertyNameBytes.Span, out System.Text.Json.JsonElement value))
                    {
                        return new Menes.JsonReference(value);
                    }
                    return default;
                }
                private Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> GetJsonProperties()
                {
                    if (this.additionalPropertiesBacking is Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> props)
                    {
                        return props;
                    }
                    return new Menes.JsonProperties<PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity>(System.Collections.Immutable.ImmutableArray.ToImmutableArray(this.JsonAdditionalProperties));
                }
                public readonly struct PropertiesEntity : Menes.IJsonValue
                {
                    public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
                    public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity> FromJsonElement = e => new PersonNameListResource.PersonNameListResourceEntity.LinksEntity.PropertiesEntity(e);
                    private readonly Menes.JsonReference? item1;
                    private readonly Menes.JsonReference? item2;
                    public PropertiesEntity(Link clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item1 = null;
                        }
                        else
                        {
                            this.item1 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item2 = null;
                    }
                    public PropertiesEntity(LinkCollection clrInstance)
                    {
                        if (clrInstance.HasJsonElement)
                        {
                            this.JsonElement = clrInstance.JsonElement;
                            this.item2 = null;
                        }
                        else
                        {
                            this.item2 = Menes.JsonReference.FromValue(clrInstance);
                            this.JsonElement = default;
                        }
                        this.item1 = null;
                    }
                    public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
                    {
                        this.item1 = null;
                        this.item2 = null;
                        this.JsonElement = jsonElement;
                    }
                    public bool IsNull => this.item1 is null && this.item2 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
                    public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
                    public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
                    public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
                    public System.Text.Json.JsonElement JsonElement { get; }
                    public static explicit operator Link(PropertiesEntity value) => value.AsLink();
                    public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
                    public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
                    public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
                    public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
                    {
                        return new PropertiesEntity(value);
                    }
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
                       parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                            (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                                ? new PropertiesEntity(property)
                                : Null)
                            : Null;
                    public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
                    {
                        if (Link.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        if (LinkCollection.IsConvertibleFrom(jsonElement))
                        {
                            return true;
                        }
                        return false;
                    }
                    public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
                    public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
                    public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
                    {
                        if (this.item1 is Menes.JsonReference item1)
                        {
                            item1.WriteTo(writer);
                        }
                        else if (this.item2 is Menes.JsonReference item2)
                        {
                            item2.WriteTo(writer);
                        }
                        else
                        {
                            this.JsonElement.WriteTo(writer);
                        }
                    }
                    public override string ToString()
                    {
                        var builder = new System.Text.StringBuilder();
                        if (this.IsLink)
                        {
                            builder.Append("{");
                            builder.Append("Link");
                            builder.Append(", ");
                            builder.Append(this.AsLink().ToString());
                            builder.AppendLine("}");
                        }
                        if (this.IsLinkCollection)
                        {
                            builder.Append("{");
                            builder.Append("LinkCollection");
                            builder.Append(", ");
                            builder.Append(this.AsLinkCollection().ToString());
                            builder.AppendLine("}");
                        }
                        return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
                    }
                    public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
                    {
                        if (this.IsNull)
                        {
                            return validationContext;
                        }
                        Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                        if (this.IsLink)
                        {
                            validationContext1 = this.AsLink().Validate(validationContext1);
                        }
                        else
                        {
                            validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                        }
                        if (this.IsLinkCollection)
                        {
                            validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                        }
                        else
                        {
                            validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                        }
                        return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2);
                    }
                }
            }
        }

        public readonly struct PropertiesEntity : Menes.IJsonValue
        {
            public static readonly PropertiesEntity Null = new PropertiesEntity(default(System.Text.Json.JsonElement));
            public static readonly System.Func<System.Text.Json.JsonElement, PersonNameListResource.PropertiesEntity> FromJsonElement = e => new PersonNameListResource.PropertiesEntity(e);
            private readonly Menes.JsonReference? item1;
            private readonly Menes.JsonReference? item2;
            private readonly Menes.JsonReference? item3;
            private readonly Menes.JsonReference? item4;
            public PropertiesEntity(Link clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item1 = null;
                }
                else
                {
                    this.item1 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(LinkCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item2 = null;
                }
                else
                {
                    this.item2 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item3 = null;
                this.item4 = null;
            }
            public PropertiesEntity(Resource clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item3 = null;
                }
                else
                {
                    this.item3 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item4 = null;
            }
            public PropertiesEntity(ResourceCollection clrInstance)
            {
                if (clrInstance.HasJsonElement)
                {
                    this.JsonElement = clrInstance.JsonElement;
                    this.item4 = null;
                }
                else
                {
                    this.item4 = Menes.JsonReference.FromValue(clrInstance);
                    this.JsonElement = default;
                }
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
            }
            public PropertiesEntity(System.Text.Json.JsonElement jsonElement)
            {
                this.item1 = null;
                this.item2 = null;
                this.item3 = null;
                this.item4 = null;
                this.JsonElement = jsonElement;
            }
            public bool IsNull => this.item1 is null && this.item2 is null && this.item3 is null && this.item4 is null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public PropertiesEntity? AsOptional => this.IsNull ? default(PropertiesEntity?) : this;
            public bool IsLink => this.item1 is Menes.JsonReference || (Link.IsConvertibleFrom(this.JsonElement) && Link.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsLinkCollection => this.item2 is Menes.JsonReference || (LinkCollection.IsConvertibleFrom(this.JsonElement) && LinkCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResource => this.item3 is Menes.JsonReference || (Resource.IsConvertibleFrom(this.JsonElement) && Resource.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool IsResourceCollection => this.item4 is Menes.JsonReference || (ResourceCollection.IsConvertibleFrom(this.JsonElement) && ResourceCollection.FromJsonElement(this.JsonElement).Validate(Menes.ValidationContext.Root).IsValid);
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static explicit operator Link(PropertiesEntity value) => value.AsLink();
            public static implicit operator PropertiesEntity(Link value) => new PropertiesEntity(value);
            public static explicit operator LinkCollection(PropertiesEntity value) => value.AsLinkCollection();
            public static implicit operator PropertiesEntity(LinkCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Link> value)
            {
                return new PropertiesEntity(value);
            }
            public static explicit operator Resource(PropertiesEntity value) => value.AsResource();
            public static implicit operator PropertiesEntity(Resource value) => new PropertiesEntity(value);
            public static explicit operator ResourceCollection(PropertiesEntity value) => value.AsResourceCollection();
            public static implicit operator PropertiesEntity(ResourceCollection value) => new PropertiesEntity(value);
            public static implicit operator PropertiesEntity(Menes.JsonArray<Resource> value)
            {
                return new PropertiesEntity(value);
            }
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static PropertiesEntity FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new PropertiesEntity(property)
                        : Null)
                    : Null;
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                if (Link.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (LinkCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (Resource.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                if (ResourceCollection.IsConvertibleFrom(jsonElement))
                {
                    return true;
                }
                return false;
            }
            public Link AsLink() => this.item1?.AsValue<Link>() ?? new Link(this.JsonElement);
            public LinkCollection AsLinkCollection() => this.item2?.AsValue<LinkCollection>() ?? new LinkCollection(this.JsonElement);
            public Resource AsResource() => this.item3?.AsValue<Resource>() ?? new Resource(this.JsonElement);
            public ResourceCollection AsResourceCollection() => this.item4?.AsValue<ResourceCollection>() ?? new ResourceCollection(this.JsonElement);
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.item1 is Menes.JsonReference item1)
                {
                    item1.WriteTo(writer);
                }
                else if (this.item2 is Menes.JsonReference item2)
                {
                    item2.WriteTo(writer);
                }
                else if (this.item3 is Menes.JsonReference item3)
                {
                    item3.WriteTo(writer);
                }
                else if (this.item4 is Menes.JsonReference item4)
                {
                    item4.WriteTo(writer);
                }
                else
                {
                    this.JsonElement.WriteTo(writer);
                }
            }
            public override string ToString()
            {
                var builder = new System.Text.StringBuilder();
                if (this.IsLink)
                {
                    builder.Append("{");
                    builder.Append("Link");
                    builder.Append(", ");
                    builder.Append(this.AsLink().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsLinkCollection)
                {
                    builder.Append("{");
                    builder.Append("LinkCollection");
                    builder.Append(", ");
                    builder.Append(this.AsLinkCollection().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResource)
                {
                    builder.Append("{");
                    builder.Append("Resource");
                    builder.Append(", ");
                    builder.Append(this.AsResource().ToString());
                    builder.AppendLine("}");
                }
                if (this.IsResourceCollection)
                {
                    builder.Append("{");
                    builder.Append("ResourceCollection");
                    builder.Append(", ");
                    builder.Append(this.AsResourceCollection().ToString());
                    builder.AppendLine("}");
                }
                return builder.Length > 0 ? builder.ToString() : this.JsonElement.ToString();
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                if (this.IsNull)
                {
                    return validationContext;
                }
                Menes.ValidationContext validationContext1 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext2 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext3 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                Menes.ValidationContext validationContext4 = Menes.ValidationContext.Root.WithPath(validationContext.Path);
                if (this.IsLink)
                {
                    validationContext1 = this.AsLink().Validate(validationContext1);
                }
                else
                {
                    validationContext1 = validationContext1.WithError("The value is not convertible to a Link.");
                }
                if (this.IsLinkCollection)
                {
                    validationContext2 = this.AsLinkCollection().Validate(validationContext2);
                }
                else
                {
                    validationContext2 = validationContext2.WithError("The value is not convertible to a LinkCollection.");
                }
                if (this.IsResource)
                {
                    validationContext3 = this.AsResource().Validate(validationContext3);
                }
                else
                {
                    validationContext3 = validationContext3.WithError("The value is not convertible to a Resource.");
                }
                if (this.IsResourceCollection)
                {
                    validationContext4 = this.AsResourceCollection().Validate(validationContext4);
                }
                else
                {
                    validationContext4 = validationContext4.WithError("The value is not convertible to a ResourceCollection.");
                }
                return Menes.Validation.ValidateAnyOf(validationContext, validationContext1, validationContext2, validationContext3, validationContext4);
            }
        }
        public readonly struct ItemsArray : Menes.IJsonValue, System.Collections.Generic.IEnumerable<PersonNameResource>, System.Collections.IEnumerable, System.IEquatable<ItemsArray>, System.IEquatable<Menes.JsonArray<PersonNameResource>>
        {
            public static readonly System.Func<System.Text.Json.JsonElement, ItemsArray> FromJsonElement = e => new ItemsArray(e);
            public static readonly ItemsArray Null = new ItemsArray(default(System.Text.Json.JsonElement));
            private readonly Menes.JsonArray<PersonNameResource>? value;
            public ItemsArray(Menes.JsonArray<PersonNameResource> jsonArray)
            {
                if (jsonArray.HasJsonElement)
                {
                    this.JsonElement = jsonArray.JsonElement;
                    this.value = null;
                }
                else
                {
                    this.value = jsonArray;
                    this.JsonElement = default;
                }
            }
            public ItemsArray(System.Text.Json.JsonElement jsonElement)
            {
                this.value = null;
                this.JsonElement = jsonElement;
            }
            public int Length
            {
                get
                {
                    if (this.HasJsonElement)
                    {
                        return this.JsonElement.GetArrayLength();
                    }
                    if (this.value is Menes.JsonArray<PersonNameResource> value)
                    {
                        return value.Length;
                    }
                    return 0;
                }
            }
            public bool IsNull => this.value == null && (this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Undefined || this.JsonElement.ValueKind == System.Text.Json.JsonValueKind.Null);
            public ItemsArray? AsOptional => this.IsNull ? default(ItemsArray?) : this;
            public bool HasJsonElement => this.JsonElement.ValueKind != System.Text.Json.JsonValueKind.Undefined;
            public System.Text.Json.JsonElement JsonElement { get; }
            public static implicit operator ItemsArray(Menes.JsonArray<PersonNameResource> value)
            {
                return new ItemsArray(value);
            }
            public static implicit operator Menes.JsonArray<PersonNameResource>(ItemsArray value)
            {
                if (value.value is Menes.JsonArray<PersonNameResource> clrValue)
                {
                    return clrValue;
                }
                return new Menes.JsonArray<PersonNameResource>(value.JsonElement);
            }
            public static bool IsConvertibleFrom(System.Text.Json.JsonElement jsonElement)
            {
                return Menes.JsonArray<PersonNameResource>.IsConvertibleFrom(jsonElement);
            }
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<char> propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, string propertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(propertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public static ItemsArray FromOptionalProperty(in System.Text.Json.JsonElement parentDocument, System.ReadOnlySpan<byte> utf8PropertyName) =>
               parentDocument.ValueKind != System.Text.Json.JsonValueKind.Undefined ?
                    (parentDocument.TryGetProperty(utf8PropertyName, out System.Text.Json.JsonElement property)
                        ? new ItemsArray(property)
                        : Null)
                    : Null;
            public bool Equals(ItemsArray other)
            {
                return this.Equals((Menes.JsonArray<PersonNameResource>)other);
            }
            public bool Equals(Menes.JsonArray<PersonNameResource> other)
            {
                return ((Menes.JsonArray<PersonNameResource>)this).Equals(other);
            }
            public Menes.ValidationContext Validate(in Menes.ValidationContext validationContext)
            {
                Menes.JsonArray<PersonNameResource> array = this;
                Menes.ValidationContext context = validationContext;
                context = array.Validate(context);
                return array.ValidateItems(context);
            }
            public void WriteTo(System.Text.Json.Utf8JsonWriter writer)
            {
                if (this.HasJsonElement)
                {
                    this.JsonElement.WriteTo(writer);
                }
                if (this.value is Menes.JsonArray<PersonNameResource> clrValue)
                {
                    clrValue.WriteTo(writer);
                }
            }
            public Menes.JsonArray<PersonNameResource>.JsonArrayEnumerator GetEnumerator()
            {
                return ((Menes.JsonArray<PersonNameResource>)this).GetEnumerator();
            }
            System.Collections.Generic.IEnumerator<PersonNameResource> System.Collections.Generic.IEnumerable<PersonNameResource>.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return this.GetEnumerator();
            }
            public ItemsArray Add(params PersonNameResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                foreach (PersonNameResource item in items)
                {
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonNameResource item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonNameResource item1, in PersonNameResource item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonNameResource item1, in PersonNameResource item2, in PersonNameResource item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Add(in PersonNameResource item1, in PersonNameResource item2, in PersonNameResource item3, in PersonNameResource item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    arrayBuilder.Add(item);
                }
                arrayBuilder.Add(item1);
                arrayBuilder.Add(item2);
                arrayBuilder.Add(item3);
                arrayBuilder.Add(item4);
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, params PersonNameResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                int index = 0;
                foreach (PersonNameResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        foreach (PersonNameResource itemToInsert in items)
                        {
                            arrayBuilder.Add(itemToInsert);
                        }
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonNameResource item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                int index = 0;
                foreach (PersonNameResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonNameResource item1, in PersonNameResource item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                int index = 0;
                foreach (PersonNameResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonNameResource item1, in PersonNameResource item2, in PersonNameResource item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                int index = 0;
                foreach (PersonNameResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Insert(int indexToInsert, in PersonNameResource item1, in PersonNameResource item2, in PersonNameResource item3, in PersonNameResource item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                int index = 0;
                foreach (PersonNameResource item in this)
                {
                    if (index == indexToInsert)
                    {
                        arrayBuilder.Add(item1);
                        arrayBuilder.Add(item2);
                        arrayBuilder.Add(item3);
                        arrayBuilder.Add(item4);
                    }
                    arrayBuilder.Add(item);
                    ++index;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(params PersonNameResource[] items)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    bool found = false;
                    foreach (PersonNameResource itemToRemove in items)
                    {
                        if (itemToRemove.Equals(item))
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        arrayBuilder.Add(item);
                    }
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonNameResource item1)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    if (item1.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonNameResource item1, PersonNameResource item2)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonNameResource item1, PersonNameResource item2, PersonNameResource item3)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(PersonNameResource item1, PersonNameResource item2, PersonNameResource item3, PersonNameResource item4)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    if (item1.Equals(item) || item2.Equals(item) || item3.Equals(item) || item4.Equals(item))
                    {
                        break;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveAt(int indexToRemove)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                int index = 0;
                foreach (PersonNameResource item in this)
                {
                    if (index == indexToRemove)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray RemoveRange(int startIndex, int length)
            {
                if (startIndex < 0 || startIndex > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(startIndex));
                }
                if (length < 1 || startIndex + length > this.Length - 1)
                {
                    throw new System.ArgumentOutOfRangeException(nameof(length));
                }
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                int index = 0;
                foreach (PersonNameResource item in this)
                {
                    if (index >= startIndex && index < startIndex + length)
                    {
                        index++;
                        continue;
                    }
                    arrayBuilder.Add(item);
                    index++;
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
            public ItemsArray Remove(System.Predicate<PersonNameResource> removeIfTrue)
            {
                System.Collections.Immutable.ImmutableArray<PersonNameResource>.Builder arrayBuilder = System.Collections.Immutable.ImmutableArray.CreateBuilder<PersonNameResource>();
                foreach (PersonNameResource item in this)
                {
                    if (removeIfTrue(item))
                    {
                        continue;
                    }
                    arrayBuilder.Add(item);
                }
                return Menes.JsonArray.Create(arrayBuilder.ToImmutable());
            }
        }
    }
}