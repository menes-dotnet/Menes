// <copyright file="JsonSchemaSteps.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

namespace Steps
{
    using System.Text.Json;
    using System.Threading.Tasks;
    using Drivers;
    using Menes;
    using NUnit.Framework;
    using TechTalk.SpecFlow;

    /// <summary>
    /// Steps for the JsonSchema specs generated by Menes.JsonSchema.SpecGenerator.
    /// </summary>
    [Binding]
    public class JsonSchemaSteps
    {
        private const string InputJsonFileName = "InputJsonFileName";
        private const string Schema = "Schema";
        private const string InputData = "InputData";
        private const string SchemaTypeName = "SchemaTypeName";
        private const string SchemaInstance = "SchemaInstance";
        private const string SchemaValidationResult = "SchemaValidationResult";

        private readonly ScenarioContext scenarioContext;
        private readonly JsonSchemaBuilderDriver driver;

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonSchemaSteps"/> class.
        /// </summary>
        /// <param name="scenarioContext">The current scenario context.</param>
        /// <param name="driver">The json schema builder driver.</param>
        public JsonSchemaSteps(ScenarioContext scenarioContext, JsonSchemaBuilderDriver driver)
        {
            this.scenarioContext = scenarioContext;
            this.driver = driver;
        }

        /// <summary>
        /// Provides the input JSON test file name as a scenario property called <see cref="InputJsonFileName"/>.
        /// </summary>
        /// <param name="inputFileName">The JSON test file name.</param>
        [Given(@"the input JSON file ""(.*)""")]
        public void GivenTheInputJSONFile(string inputFileName)
        {
            this.scenarioContext.Set(inputFileName, InputJsonFileName);
        }

        /// <summary>
        /// Uses the reference fragment to provide the schema JsonElement as a scenario property called <see cref="Schema"/>.
        /// </summary>
        /// <param name="referenceFragment">The reference fragment pointing to the relevant schema element in the <see cref="InputJsonFileName"/>.</param>
        /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
        [Given(@"the schema at ""(.*)""")]
        public async Task GivenTheSchemaAt(string referenceFragment)
        {
            JsonElement? element = await this.driver.GetElement(this.scenarioContext.Get<string>(InputJsonFileName), referenceFragment).ConfigureAwait(false);
            Assert.NotNull(element);
            this.scenarioContext.Set(element.Value, Schema);
        }

        /// <summary>
        /// Uses the reference fragment to provide the data <see cref="JsonElement"/> as a scenario property called <see cref="InputData"/>.
        /// </summary>
        /// <param name="referenceFragment">The reference fragment pointing to the relevant data element in the <see cref="InputJsonFileName"/>.</param>
        [Given(@"the input data at ""(.*)""")]
        public void GivenTheInputDataAt(string referenceFragment)
        {
        }

        /// <summary>
        /// Generates the code for the schema, compiles it, and loads the assembly. The fully qualified type name is stored in a scenario property called <see cref="SchemaTypeName"/>.
        /// </summary>
        [Given(@"I generate a type for the schema")]
        public void GivenIGenerateATypeForTheSchema()
        {
        }

        /// <summary>
        /// Constructs an instance of the type whose name is stored in the scenario property <see cref="SchemaTypeName"/>, using the <see cref="JsonElement"/> stored in the scenario property called <see cref="InputData"/>, and stores it in the scenario property <see cref="SchemaInstance"/>.
        /// </summary>
        [Given(@"I construct an instance of the schema type from the data")]
        public void GivenIConstructAnInstanceOfTheSchemaTypeFromTheData()
        {
        }

        /// <summary>
        /// Calls the validation method on the instance in the scenario property <see cref="SchemaInstance"/> and stores the validation result in <see cref="ValidationResult"/>.
        /// </summary>
        [When(@"I validate the instance")]
        public void WhenIValidateTheInstance()
        {
        }

        /// <summary>
        /// Uses the <see cref="ValidationResult"/> stored in the scenario property <see cref="SchemaValidationResult"/> and checks its <see cref="ValidationResult.Valid"/> property.
        /// </summary>
        /// <param name="expectedValidity"><c>True</c> if the result is expected to be valid, otherwiee false.</param>
        [Then(@"the result will be (.*)")]
        public void ThenTheResultWillBe(bool expectedValidity)
        {
        }
    }
}
