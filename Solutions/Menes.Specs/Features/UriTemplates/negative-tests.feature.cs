// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.UriTemplates
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("negative-tests")]
    public partial class Negative_TestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "negative-tests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UriTemplates", "negative-tests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Failure Tests at level 4")]
        [NUnit.Framework.TestCaseAttribute("{/id*", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/id*}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{/?id}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{var:prefix}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{hello:2*}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{??hello}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{!hello}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{with space}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{ leading_space}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{trailing_space }", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{=path}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{$var}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{|var*}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{*keys?}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{?empty=default,var}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{var}{-prefix|/-/|var}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("?q={searchTerms}&amp;c={example:color?}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("x{?empty|foo=none}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/h{#hello+}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/h#{hello+}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{keys:1}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{+keys:1}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("{;keys:1*}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("?{-join|&|var,list}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/people/{~thing}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/{default-graph-uri}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/sparql{?query,default-graph-uri}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/sparql{?query){&default-graph-uri*}", "[false]", null)]
        [NUnit.Framework.TestCaseAttribute("/resolution{?x, y}", "[false]", null)]
        public virtual void FailureTestsAtLevel4(string template, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("template", template);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failure Tests at level 4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "value"});
                table5.AddRow(new string[] {
                            "id",
                            "\"thing\""});
                table5.AddRow(new string[] {
                            "var",
                            "\"value\""});
                table5.AddRow(new string[] {
                            "hello",
                            "\"Hello World!\""});
                table5.AddRow(new string[] {
                            "with space",
                            "\"fail\""});
                table5.AddRow(new string[] {
                            "leading_space",
                            "\"Hi!\""});
                table5.AddRow(new string[] {
                            "trailing_space",
                            "\"Bye!\""});
                table5.AddRow(new string[] {
                            "empty",
                            "\"\""});
                table5.AddRow(new string[] {
                            "path",
                            "\"/foo/bar\""});
                table5.AddRow(new string[] {
                            "x",
                            "\"1024\""});
                table5.AddRow(new string[] {
                            "y",
                            "\"768\""});
                table5.AddRow(new string[] {
                            "list",
                            "[\"red\",\"green\",\"blue\"]"});
                table5.AddRow(new string[] {
                            "keys",
                            "{\"semi\":\";\",\"dot\":\".\",\"comma\":\",\"}"});
                table5.AddRow(new string[] {
                            "example",
                            "\"red\""});
                table5.AddRow(new string[] {
                            "searchTerms",
                            "\"uri templates\""});
                table5.AddRow(new string[] {
                            "~thing",
                            "\"some-user\""});
                table5.AddRow(new string[] {
                            "default-graph-uri",
                            "[\"http://www.example/book/\",\"http://www.example/papers/\"]"});
                table5.AddRow(new string[] {
                            "query",
                            "\"PREFIX dc: \\u003Chttp://purl.org/dc/elements/1.1/\\u003E SELECT ?book ?who WHERE " +
                                "{ ?book dc:creator ?who }\""});
#line 5
 testRunner.Given("the variables", ((string)(null)), table5, "Given ");
#line hidden
#line 24
 testRunner.When(string.Format("I apply the variables to the template {0}", template), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then(string.Format("the result should be one of {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
