// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.UriTemplates
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("extended-tests")]
    public partial class Extended_TestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "extended-tests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UriTemplates", "extended-tests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Additional Examples 1 at level 4")]
        [NUnit.Framework.TestCaseAttribute("{/id*}", "[\"/person\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{/id*}{?fields,first_name,last.name,token}", @"[""/person?fields=id,name,picture\u0026first_name=John\u0026last.name=Doe\u0026token=12345"",""/person?fields=id,picture,name\u0026first_name=John\u0026last.name=Doe\u0026token=12345"",""/person?fields=picture,name,id\u0026first_name=John\u0026last.name=Doe\u0026token=12345"",""/person?fields=picture,id,name\u0026first_name=John\u0026last.name=Doe\u0026token=12345"",""/person?fields=name,picture,id\u0026first_name=John\u0026last.name=Doe\u0026token=12345"",""/person?fields=name,id,picture\u0026first_name=John\u0026last.name=Doe\u0026token=12345""]", null)]
        [NUnit.Framework.TestCaseAttribute("/search.{format}{?q,geocode,lang,locale,page,result_type}", "[\"/search.json?q=URI%20Templates\\u0026geocode=37.76,-122.427\\u0026lang=en\\u0026pa" +
            "ge=5\",\"/search.json?q=URI%20Templates\\u0026geocode=-122.427,37.76\\u0026lang=en\\u" +
            "0026page=5\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/test{/Some%20Thing}", "[\"/test/foo\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/set{?number}", "[\"/set?number=6\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/loc{?long,lat}", "[\"/loc?long=37.76\\u0026lat=-122.427\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/base{/group_id,first_name}/pages{/page,lang}{?format,q}", "[\"/base/12345/John/pages/5/en?format=json\\u0026q=URI%20Templates\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/sparql{?query}", "[\"/sparql?query=PREFIX%20dc%3A%20%3Chttp%3A%2F%2Fpurl.org%2Fdc%2Felements%2F1.1%2" +
            "F%3E%20SELECT%20%3Fbook%20%3Fwho%20WHERE%20%7B%20%3Fbook%20dc%3Acreator%20%3Fwho" +
            "%20%7D\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/go{?uri}", "[\"/go?uri=http%3A%2F%2Fexample.org%2F%3Furi%3Dhttp%253A%252F%252Fexample.org%252F" +
            "\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/service{?word}", "[\"/service?word=dr%C3%BCcken\"]", null)]
        [NUnit.Framework.TestCaseAttribute("/lookup{?Stra%C3%9Fe}", "[\"/lookup?Stra%C3%9Fe=Gr%C3%BCner%20Weg\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{random}", "[\"%C5%A1%C3%B6%C3%A4%C5%B8%C5%93%C3%B1%C3%AA%E2%82%AC%C2%A3%C2%A5%E2%80%A1%C3%91%" +
            "C3%92%C3%93%C3%94%C3%95%C3%96%C3%97%C3%98%C3%99%C3%9A%C3%A0%C3%A1%C3%A2%C3%A3%C3" +
            "%A4%C3%A5%C3%A6%C3%A7%C3%BF\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?assoc_special_chars*}", "[\"?%C5%A1%C3%B6%C3%A4%C5%B8%C5%93%C3%B1%C3%AA%E2%82%AC%C2%A3%C2%A5%E2%80%A1%C3%91" +
            "%C3%92%C3%93%C3%94%C3%95=%C3%96%C3%97%C3%98%C3%99%C3%9A%C3%A0%C3%A1%C3%A2%C3%A3%" +
            "C3%A4%C3%A5%C3%A6%C3%A7%C3%BF\"]", null)]
        public virtual void AdditionalExamples1AtLevel4(string template, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("template", template);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Additional Examples 1 at level 4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "value"});
                table1.AddRow(new string[] {
                            "id",
                            "\"person\""});
                table1.AddRow(new string[] {
                            "token",
                            "\"12345\""});
                table1.AddRow(new string[] {
                            "fields",
                            "[\"id\",\"name\",\"picture\"]"});
                table1.AddRow(new string[] {
                            "format",
                            "\"json\""});
                table1.AddRow(new string[] {
                            "q",
                            "\"URI Templates\""});
                table1.AddRow(new string[] {
                            "page",
                            "\"5\""});
                table1.AddRow(new string[] {
                            "lang",
                            "\"en\""});
                table1.AddRow(new string[] {
                            "geocode",
                            "[\"37.76\",\"-122.427\"]"});
                table1.AddRow(new string[] {
                            "first_name",
                            "\"John\""});
                table1.AddRow(new string[] {
                            "last.name",
                            "\"Doe\""});
                table1.AddRow(new string[] {
                            "Some%20Thing",
                            "\"foo\""});
                table1.AddRow(new string[] {
                            "number",
                            "6"});
                table1.AddRow(new string[] {
                            "long",
                            "37.76"});
                table1.AddRow(new string[] {
                            "lat",
                            "-122.427"});
                table1.AddRow(new string[] {
                            "group_id",
                            "\"12345\""});
                table1.AddRow(new string[] {
                            "query",
                            "\"PREFIX dc: \\u003Chttp://purl.org/dc/elements/1.1/\\u003E SELECT ?book ?who WHERE " +
                                "{ ?book dc:creator ?who }\""});
                table1.AddRow(new string[] {
                            "uri",
                            "\"http://example.org/?uri=http%3A%2F%2Fexample.org%2F\""});
                table1.AddRow(new string[] {
                            "word",
                            "\"dr\\u00FCcken\""});
                table1.AddRow(new string[] {
                            "Stra%C3%9Fe",
                            "\"Gr\\u00FCner Weg\""});
                table1.AddRow(new string[] {
                            "random",
                            "\"\\u0161\\u00F6\\u00E4\\u0178\\u0153\\u00F1\\u00EA\\u20AC\\u00A3\\u00A5\\u2021\\u00D1\\u00D2\\u" +
                                "00D3\\u00D4\\u00D5\\u00D6\\u00D7\\u00D8\\u00D9\\u00DA\\u00E0\\u00E1\\u00E2\\u00E3\\u00E4\\u00" +
                                "E5\\u00E6\\u00E7\\u00FF\""});
                table1.AddRow(new string[] {
                            "assoc_special_chars",
                            "{\"\\u0161\\u00F6\\u00E4\\u0178\\u0153\\u00F1\\u00EA\\u20AC\\u00A3\\u00A5\\u2021\\u00D1\\u00D2\\" +
                                "u00D3\\u00D4\\u00D5\":\"\\u00D6\\u00D7\\u00D8\\u00D9\\u00DA\\u00E0\\u00E1\\u00E2\\u00E3\\u00E4" +
                                "\\u00E5\\u00E6\\u00E7\\u00FF\"}"});
#line 4
 testRunner.Given("the variables", ((string)(null)), table1, "Given ");
#line hidden
#line 27
 testRunner.When(string.Format("I apply the variables to the template {0}", template), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then(string.Format("the result should be one of {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Additional Examples 2 at level 4")]
        [NUnit.Framework.TestCaseAttribute("{/id*}", "[\"/person/albums\",\"/albums/person\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{/id*}{?fields,token}", @"[""/person/albums?fields=id,name,picture\u0026token=12345"",""/person/albums?fields=id,picture,name\u0026token=12345"",""/person/albums?fields=picture,name,id\u0026token=12345"",""/person/albums?fields=picture,id,name\u0026token=12345"",""/person/albums?fields=name,picture,id\u0026token=12345"",""/person/albums?fields=name,id,picture\u0026token=12345"",""/albums/person?fields=id,name,picture\u0026token=12345"",""/albums/person?fields=id,picture,name\u0026token=12345"",""/albums/person?fields=picture,name,id\u0026token=12345"",""/albums/person?fields=picture,id,name\u0026token=12345"",""/albums/person?fields=name,picture,id\u0026token=12345"",""/albums/person?fields=name,id,picture\u0026token=12345""]", null)]
        public virtual void AdditionalExamples2AtLevel4(string template, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("template", template);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Additional Examples 2 at level 4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "value"});
                table2.AddRow(new string[] {
                            "id",
                            "[\"person\",\"albums\"]"});
                table2.AddRow(new string[] {
                            "token",
                            "\"12345\""});
                table2.AddRow(new string[] {
                            "fields",
                            "[\"id\",\"name\",\"picture\"]"});
                table2.AddRow(new string[] {
                            "format",
                            "\"atom\""});
                table2.AddRow(new string[] {
                            "q",
                            "\"URI Templates\""});
                table2.AddRow(new string[] {
                            "page",
                            "\"10\""});
                table2.AddRow(new string[] {
                            "start",
                            "\"5\""});
                table2.AddRow(new string[] {
                            "lang",
                            "\"en\""});
                table2.AddRow(new string[] {
                            "geocode",
                            "[\"37.76\",\"-122.427\"]"});
#line 47
 testRunner.Given("the variables", ((string)(null)), table2, "Given ");
#line hidden
#line 58
 testRunner.When(string.Format("I apply the variables to the template {0}", template), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then(string.Format("the result should be one of {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Additional Examples 3: Empty Variables at level 0")]
        [NUnit.Framework.TestCaseAttribute("{/empty_list}", "[\"\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{/empty_list*}", "[\"\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?empty_list}", "[\"\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?empty_list*}", "[\"\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?empty_assoc}", "[\"\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?empty_assoc*}", "[\"\"]", null)]
        public virtual void AdditionalExamples3EmptyVariablesAtLevel0(string template, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("template", template);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Additional Examples 3: Empty Variables at level 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "value"});
                table3.AddRow(new string[] {
                            "empty_list",
                            "[]"});
                table3.AddRow(new string[] {
                            "empty_assoc",
                            "{}"});
#line 67
 testRunner.Given("the variables", ((string)(null)), table3, "Given ");
#line hidden
#line 71
 testRunner.When(string.Format("I apply the variables to the template {0}", template), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.Then(string.Format("the result should be one of {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Additional Examples 4: Numeric Keys at level 0")]
        [NUnit.Framework.TestCaseAttribute("{42}", "[\"The%20Answer%20to%20the%20Ultimate%20Question%20of%20Life%2C%20the%20Universe%2" +
            "C%20and%20Everything\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?42}", "[\"?42=The%20Answer%20to%20the%20Ultimate%20Question%20of%20Life%2C%20the%20Univer" +
            "se%2C%20and%20Everything\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{1337}", "[\"leet,as,it,can,be\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?1337*}", "[\"?1337=leet\\u00261337=as\\u00261337=it\\u00261337=can\\u00261337=be\"]", null)]
        [NUnit.Framework.TestCaseAttribute("{?german*}", "[\"?11=elf\\u002612=zw%C3%B6lf\",\"?12=zw%C3%B6lf\\u002611=elf\"]", null)]
        public virtual void AdditionalExamples4NumericKeysAtLevel0(string template, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("template", template);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Additional Examples 4: Numeric Keys at level 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "value"});
                table4.AddRow(new string[] {
                            "42",
                            "\"The Answer to the Ultimate Question of Life, the Universe, and Everything\""});
                table4.AddRow(new string[] {
                            "1337",
                            "[\"leet\",\"as\",\"it\",\"can\",\"be\"]"});
                table4.AddRow(new string[] {
                            "german",
                            "{\"11\":\"elf\",\"12\":\"zw\\u00F6lf\"}"});
#line 84
 testRunner.Given("the variables", ((string)(null)), table4, "Given ");
#line hidden
#line 89
 testRunner.When(string.Format("I apply the variables to the template {0}", template), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then(string.Format("the result should be one of {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
