// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Menes.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OpenApiDefaultParameterParsing")]
    public partial class OpenApiDefaultParameterParsingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "OpenApiDefaultParameterParsing.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OpenApiDefaultParameterParsing", @"	In order to simplify setting values for parameters required for the underlying operation
	As a developer
	I want to be able to specify default values for those parameters within the OpenAPI specification and have those parameters validated and serialized for use downstream.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parameters with valid values for simple types")]
        [NUnit.Framework.CategoryAttribute("perScenarioContainer")]
        [NUnit.Framework.TestCaseAttribute("query", "openApiDate", "string", "date", "2017-07-21", "2017-07-21T00:00:00Z", "System.DateTimeOffset", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiDateTime", "string", "date-time", "\"2017-07-21T17:32:28Z\"", "2017-07-21T17:32:28+00:00", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiPassword", "string", "password", "\"myVErySeCurePAsSworD123\"", "myVErySeCurePAsSworD123", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiByte", "string", "byte", "U3dhZ2dlciByb2Nrcw==", "U3dhZ2dlciByb2Nrcw==", "ByteArrayFromBase64String", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiBinary", "string", "binary", "\"U0VORCBIRUxQ\"", "U0VORCBIRUxQ", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiString", "string", "", "\"Don\'t decode the above\"", "Don\'t decode the above", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiBoolean", "boolean", "", "true", "true", "System.Boolean", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiLong", "integer", "int64", "9223372036854775807", "9223372036854775807", "System.Int64", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiInteger", "integer", "", "1234", "1234", "System.Int32", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiFloat", "number", "float", "1234.5", "1234.5", "System.Single", null)]
        [NUnit.Framework.TestCaseAttribute("query", "openApiDouble", "number", "double", "1234.5678", "1234.5678", "System.Double", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiDate", "string", "date", "2017-07-21", "2017-07-21T00:00:00Z", "System.DateTimeOffset", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiDateTime", "string", "date-time", "\"2017-07-21T17:32:28Z\"", "2017-07-21T17:32:28+00:00", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiPassword", "string", "password", "\"myVErySeCurePAsSworD123\"", "myVErySeCurePAsSworD123", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiByte", "string", "byte", "U3dhZ2dlciByb2Nrcw==", "U3dhZ2dlciByb2Nrcw==", "ByteArrayFromBase64String", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiBinary", "string", "binary", "\"U0VORCBIRUxQ\"", "U0VORCBIRUxQ", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiString", "string", "", "\"Don\'t decode the above\"", "Don\'t decode the above", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiBoolean", "boolean", "", "true", "true", "System.Boolean", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiLong", "integer", "int64", "9223372036854775807", "9223372036854775807", "System.Int64", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiInteger", "integer", "", "1234", "1234", "System.Int32", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiFloat", "number", "float", "1234.5", "1234.5", "System.Single", null)]
        [NUnit.Framework.TestCaseAttribute("header", "openApiDouble", "number", "double", "1234.5678", "1234.5678", "System.Double", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiDate", "string", "date", "2017-07-21", "2017-07-21T00:00:00Z", "System.DateTimeOffset", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiDateTime", "string", "date-time", "\"2017-07-21T17:32:28Z\"", "2017-07-21T17:32:28+00:00", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiPassword", "string", "password", "\"myVErySeCurePAsSworD123\"", "myVErySeCurePAsSworD123", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiByte", "string", "byte", "U3dhZ2dlciByb2Nrcw==", "U3dhZ2dlciByb2Nrcw==", "ByteArrayFromBase64String", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiBinary", "string", "binary", "U0VORCBIRUxQ", "U0VORCBIRUxQ", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiString", "string", "", "\"Don\'t decode the above\"", "Don\'t decode the above", "System.String", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiBoolean", "boolean", "", "true", "true", "System.Boolean", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiLong", "integer", "int64", "9223372036854775807", "9223372036854775807", "System.Int64", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiInteger", "integer", "", "1234", "1234", "System.Int32", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiFloat", "number", "float", "1234.5", "1234.5", "System.Single", null)]
        [NUnit.Framework.TestCaseAttribute("cookie", "openApiDouble", "number", "double", "1234.5678", "1234.5678", "System.Double", null)]
        public virtual void ParametersWithValidValuesForSimpleTypes(string parameterLocation, string parameterName, string type, string format, string defaultValue, string expectedResult, string expectedResultType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "perScenarioContainer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ParameterLocation", parameterLocation);
            argumentsOfScenario.Add("ParameterName", parameterName);
            argumentsOfScenario.Add("Type", type);
            argumentsOfScenario.Add("Format", format);
            argumentsOfScenario.Add("DefaultValue", defaultValue);
            argumentsOfScenario.Add("ExpectedResult", expectedResult);
            argumentsOfScenario.Add("ExpectedResultType", expectedResultType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parameters with valid values for simple types", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("I have constructed the OpenAPI specification with a {0} parameter with name {1}, " +
                            "type {2}, format {3} and default value {4}", parameterLocation, parameterName, type, format, defaultValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("I try to parse the default value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then(string.Format("the parameter {0} should be {1} of type {2}", parameterName, expectedResult, expectedResultType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Array parameter with items of simple type")]
        public virtual void ArrayParameterWithItemsOfSimpleType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Array parameter with items of simple type", null, tagsOfScenario, argumentsOfScenario);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given("I have constructed the OpenAPI specification with a parameter of type array with " +
                        "name \'openApiArray\', item type \'integer\', and default value \'[1,2,3,4,5]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.When("I try to parse the default value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then("the serialized result should be \'{[1,2,3,4,5]}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Array parameter with items of array type")]
        public virtual void ArrayParameterWithItemsOfArrayType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Array parameter with items of array type", null, tagsOfScenario, argumentsOfScenario);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
 testRunner.Given("I have constructed the OpenAPI specification with a parameter of type array with " +
                        "name \'openApiNestedArray\' containing items which are arrays themselves with item" +
                        " type \'integer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
 testRunner.When("I try to parse the default value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.Then("the serialized result should be \'{[1,2,3,4,5]}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
