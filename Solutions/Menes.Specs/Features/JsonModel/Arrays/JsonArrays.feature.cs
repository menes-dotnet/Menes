// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.JsonModel.Arrays
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("JsonArrays")]
    public partial class JsonArraysFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "JsonArrays.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/JsonModel/Arrays", "JsonArrays", "\tGetting, setting, adding and removing elements in an array.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove items from a JsonElement backed JsonArray")]
        [NUnit.Framework.TestCaseAttribute("JsonArray", "0", "[\"foo\", \"bar\", 3]", "\"bar\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "0", "[\"foo\", \"bar\", 3]", "\"bar\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "0", "[\"foo\", \"bar\", 3]", "\"bar\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonArray", "1", "[\"foo\", \"bar\", 3]", "3", "JsonNumber", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "1", "[\"foo\", \"bar\", 3]", "3", "JsonNumber", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "1", "[\"foo\", \"bar\", 3]", "3", "JsonNumber", null)]
        public virtual void RemoveItemsFromAJsonElementBackedJsonArray(string jsonValueType, string itemIndex, string value, string expectedValue, string expectedType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("itemIndex", itemIndex);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("expectedValue", expectedValue);
            argumentsOfScenario.Add("expectedType", expectedType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove items from a JsonElement backed JsonArray", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("the JsonElement backed {0}  {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("I remove the item at index {0} from the {1}", itemIndex, jsonValueType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then(string.Format("the item in the {0} at index {1} should be {2} of type {3}", jsonValueType, itemIndex, expectedValue, expectedType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set items to JsonElement backed JsonArray")]
        [NUnit.Framework.TestCaseAttribute("JsonArray", "0", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "0", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "0", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonArray", "1", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "1", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "1", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonArray", "2", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "2", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "2", "[\"foo\", \"bar\", 3]", "\"baz\"", "\"baz\"", "JsonString", null)]
        public virtual void SetItemsToJsonElementBackedJsonArray(string jsonValueType, string itemIndex, string value, string itemValue, string expectedValue, string expectedType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("itemIndex", itemIndex);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("itemValue", itemValue);
            argumentsOfScenario.Add("expectedValue", expectedValue);
            argumentsOfScenario.Add("expectedType", expectedType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set items to JsonElement backed JsonArray", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given(string.Format("the JsonElement backed {0} {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When(string.Format("I set the item in the {0} at index {1} to the value {2}", jsonValueType, itemIndex, itemValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then(string.Format("the item in the {0} at index {1} should be {2} of type {3}", jsonValueType, itemIndex, expectedValue, expectedType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
