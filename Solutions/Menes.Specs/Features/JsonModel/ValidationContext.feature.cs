// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.JsonModel
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValidationContext")]
    public partial class ValidationContextFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ValidationContext.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/JsonModel", "ValidationContext", "\tStoring validation results in a ValidatioContext", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add results to the stack")]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "<null>", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "valid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "valid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "with a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid", "with results", "without a stack", "without evaluated properties", "without evaluated items", "invalid result", "\"A message\"", "invalid", null)]
        public virtual void AddResultsToTheStack(string validOrInvalid, string withOrWithoutResults, string withOrWithoutStack, string withOrWithoutEvaluatedProperties, string withOrWithoutEvaluatedItems, string validOrInvalidResult, string message, string validationResultValidOrInvalid, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("validOrInvalid", validOrInvalid);
            argumentsOfScenario.Add("withOrWithoutResults", withOrWithoutResults);
            argumentsOfScenario.Add("withOrWithoutStack", withOrWithoutStack);
            argumentsOfScenario.Add("withOrWithoutEvaluatedProperties", withOrWithoutEvaluatedProperties);
            argumentsOfScenario.Add("withOrWithoutEvaluatedItems", withOrWithoutEvaluatedItems);
            argumentsOfScenario.Add("validOrInvalidResult", validOrInvalidResult);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("validationResultValidOrInvalid", validationResultValidOrInvalid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add results to the stack", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("a {0} validation context {1}, {2}, {3}, and {4}", validOrInvalid, withOrWithoutResults, withOrWithoutStack, withOrWithoutEvaluatedProperties, withOrWithoutEvaluatedItems), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("I add a {0} with the message {1}", validOrInvalidResult, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then(string.Format("the validationResult should be {0}", validationResultValidOrInvalid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("With evaluated properties")]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "without evaluated properties", "without evaluated items", "1,2,3", "<none>", "0,1,2,3,4", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "with evaluated properties", "without evaluated items", "1,2,3", "1,2,3", "0,4", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "with evaluated properties", "without evaluated items", "66,129", "66,129", "0,1,2,3,4,63,64,65,67,68,126,127,128,130", null)]
        [NUnit.Framework.TestCaseAttribute("valid", "without results", "without a stack", "with evaluated properties", "without evaluated items", "65536", "65536", "0,1,2,3,4,63,64,65,67,68,126,127,128,130,65535,262144", null)]
        public virtual void WithEvaluatedProperties(string validOrInvalid, string withOrWithoutResults, string withOrWithoutStack, string withOrWithoutEvaluatedProperties, string withOrWithoutEvaluatedItems, string evaluateIndices, string evaluatedIndices, string notEvaluatedIndices, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("validOrInvalid", validOrInvalid);
            argumentsOfScenario.Add("withOrWithoutResults", withOrWithoutResults);
            argumentsOfScenario.Add("withOrWithoutStack", withOrWithoutStack);
            argumentsOfScenario.Add("withOrWithoutEvaluatedProperties", withOrWithoutEvaluatedProperties);
            argumentsOfScenario.Add("withOrWithoutEvaluatedItems", withOrWithoutEvaluatedItems);
            argumentsOfScenario.Add("evaluateIndices", evaluateIndices);
            argumentsOfScenario.Add("evaluatedIndices", evaluatedIndices);
            argumentsOfScenario.Add("notEvaluatedIndices", notEvaluatedIndices);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With evaluated properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
 testRunner.Given(string.Format("a {0} validation context {1}, {2}, {3}, and {4}", validOrInvalid, withOrWithoutResults, withOrWithoutStack, withOrWithoutEvaluatedProperties, withOrWithoutEvaluatedItems), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.When(string.Format("I evaluate the properties at [{0}]", evaluateIndices), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then(string.Format("the properties at [{0}] should not be evaluated", notEvaluatedIndices), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.Then(string.Format("the properties at [{0}] should be evaluated", evaluatedIndices), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
